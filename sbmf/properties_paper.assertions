package properties2
//import Declarations::*
//import Declarations::State
//instantiations
csp Instantiations csp-begin
-- generate nat
nametype core_nat = {0..2}

-- generate string
nametype core_string = LSeq({'a'},1)

REAL_MAX = 2
REAL_MIN = 0

-- generate real
nametype core_real = { REAL_MIN..REAL_MAX}

-- BASIC FUNCTIONS

-- generate int
nametype core_int = { 0..2}

-- generate -- OPERATION BOUNDS

-- MODULE CONSTANTS

-- CONTROLLER CONSTANTS

-- STATEMACHINE CONSTANTS

-- OPERATION CONSTANTS

-- BASIC TYPES

-- generate Div
Div(e1,e2,T) = if member(e1/e2,T) then e1/e2 else e1

-- generate Neg
Neg(e1,T) = if member(-e1,T) then -e1 else e1

-- generate boolean
nametype core_boolean = Bool

-- generate Mult
Mult(e1,e2,T) = if member(e1*e2,T) then e1*e2 else e1

-- generate Modulus
Modulus(e1,e2,T) = if member(e1%e2,T) then e1%e2 else e1

-- generate Plus
Plus(e1,e2,T) = if member(e1+e2,T) then e1+e2 else e1

-- generate Minus
Minus(e1,e2,T) = if member(e1-e2,T) then e1-e2 else e1

overLimitMax(x) = if x > REAL_MAX then REAL_MAX else x
underLimitMin(x) = if x < REAL_MIN then REAL_MIN else x

overLimitF(x) = overLimitMax(x+2)
underLimitF(x) = underLimitMin(x-2)

nametype core_clock_type = {0..11}

csp-end



//Built in assertions



//Custom specs

//Spec P1
//untimed

untimed csp mod_sys_analysis csp-begin
mod_sys_analysis = mod_sys::O__(0) \ {|mod_sys::ext_setPoint.out|} 
csp-end

/***************************************************
 * Module assertions  
 ***************************************************/

untimed csp mod_cons associated to mod_sys csp-begin 
mod_cons = mod_sys::O__(0) \ {|mod_sys::int_pwmSignal|} 
csp-end

untimed csp mod_sys_power_on associated to mod_sys csp-begin
mod_sys_power_on = ((mod_sys::O__(0)\ {|mod_sys::int_pwmSignal|}) 
				   [| {|mod_sys::ext_pow24VStatus.in|} |]
				   RUN({|mod_sys::ext_pow24VStatus.in.Power_On|})) \{|mod_sys::ext_pow24VStatus.in.Power_On|}
csp-end

untimed csp Spec1 csp-begin

channel int_ActualHV : core_real
channel read : core_real

BufferedOutput = (Buffer [| {|read|} |] Output) \{|read|}

-- Output simply outputs what it reads.
Output = read?x__ -> mod_sys::int_ActualHV.out!x__ -> Output

-- A buffer, whose current 'value' can be overwritten.
Buffer = int_ActualHV?x__ -> (read!x__ -> Buffer [] Buffer)

Spec1 = (Behaviour [| {| int_ActualHV |} |] BufferedOutput) \ {|int_ActualHV|}

Behaviour = CHAOS(Events) 
		[| {| mod_sys::currentState.out.State_ClosedLoop |} |> 
		(ClosedLoop_ctrl /\ (mod_sys::currentState.out.State_ErrorMode -> Behaviour))

ClosedLoop_ctrl = mod_sys::ext_setPoint.in?x__ -> int_ActualHV!x__ -> ClosedLoop_ctrl

csp-end

untimed csp mod_sys_ClosedLoop associated to mod_sys csp-begin 
mod_sys_ClosedLoop = (mod_sys::O__(0) |\ {|mod_sys::currentState.out.State_ClosedLoop|})  
csp-end

untimed csp Stop csp-begin
Stop = STOP
csp-end

assertion A0 : mod_sys is deadlock-free
untimed assertion A1 : mod_sys_power_on refines Spec1 in the traces model

untimed assertion AS : State_machine is deadlock-free

// Safety for P1

untimed assertion A1_reachable : State_machine::ClosedLoop is reachable in mod_sys
untimed assertion A1_non_trivial : mod_sys_ClosedLoop does not refine Stop in the traces model


// setPoint.0 -> ActualHV.0

untimed csp Spec1B csp-begin

Spec1B = (Behaviour1B [| {| int_ActualHV |} |] BufferedOutput) \ {|int_ActualHV|} ||| RUN({|mod_sys::ext_pow24VStatus.in|})

Behaviour1B = CHAOS(Events) 
			  [| {| mod_sys::currentState.out.State_ErrorMode |} |> 
			  (mod_sys::ext_setPoint.out.0 -> int_ActualHV.0 -> Behaviour1B)

csp-end

untimed csp mod_sys_ErrorMode associated to mod_sys csp-begin 
mod_sys_ErrorMode = (mod_sys::O__(0) |\ {|mod_sys::currentState.out.State_ErrorMode|})  
csp-end

untimed csp mod_sys_power associated to mod_sys csp-begin
mod_sys_power = (mod_sys::O__(0)\ {|mod_sys::int_pwmSignal|}) \{|mod_sys::ext_pow24VStatus.in|}
csp-end

untimed assertion A1B : mod_sys_power refines Spec1B in the traces model
untimed assertion A1B_non_trivial : mod_sys_ErrorMode does not refine Stop in the traces model

// Safety for P2

untimed csp Spec2 csp-begin

channel writePower : Power 
channel readPower : Power

Spec2 = (BufferedInput [| {| readPower |} |] Spec2_aux)\{|readPower|}

BufferedInput = (IBuffer [| {|writePower|} |] Input) \{|writePower|}

-- Input simply inputs what it reads.
Input = mod_sys::ext_pow24VStatus.in?x__ -> writePower!x__ -> Input

-- A buffer, whose current 'value' can be overwritten via writePower.
IBuffer = writePower?x__ -> (readPower!x__ -> IBuffer [] IBuffer)

Spec2_aux = CHAOS(Events) 
			[| {| readPower.Power_Off |} |> 
			(mod_sys::int_pwmSignal.out.Power_Off -> Spec2_aux)
csp-end

untimed csp mod_power_pwm associated to mod_sys csp-begin 
mod_power_pwm = (mod_sys::O__(0) |\ {|mod_sys::ext_pow24VStatus.in,mod_sys::int_pwmSignal.out|}) 
				[| {| mod_sys::ext_pow24VStatus.in,mod_sys::int_pwmSignal |} |]
				Assumption2
				
Assumption2 = mod_sys::ext_pow24VStatus.in.Power_On -> Assumption2
			  []
			  mod_sys::ext_pow24VStatus.in.Power_Off -> mod_sys::int_pwmSignal?x__ -> Assumption2				
csp-end

untimed csp mod_sys_pow24VStatus_Off associated to mod_sys csp-begin 
mod_sys_pow24VStatus_Off = (mod_sys::O__(0) |\ {|mod_sys::ext_pow24VStatus.in.Power_Off|})  
csp-end

untimed assertion A2 : mod_power_pwm refines Spec2 in the traces model
untimed assertion A2B_non_trivial : mod_sys_pow24VStatus_Off does not refine Stop in the traces model

// Doesn't work because int_pwmSignal!Power::On happens in the transition from s4 to s3
// in the ClosedLoop state. Furthermore, the transition in int_DisableHV out of ClosedLoop
// is in competition with the transitions inside the state. Instead, we try to disambiguate
// this by using time to prioritise the transition into ErrorMode.

timed csp mod_power_pwm_time associated to mod_sys csp-begin 
Timed(OneStep) {
mod_power_pwm_time = timed_priority(
						((mod_sys::O__(0) |\ {|mod_sys::ext_pow24VStatus.in,mod_sys::int_pwmSignal.out,mod_sys::currentState.out.State_Wait24Vpower,tock|}) 
					 	[| {| mod_sys::ext_pow24VStatus.in,mod_sys::currentState |} |]
					 	TAssumption2)
					 	[| {|mod_sys::ext_pow24VStatus.in|} |]
					 	TPowStatus)
				
TAssumption2 = mod_sys::ext_pow24VStatus.in.Power_On -> TAssumption2
			   []
			   mod_sys::ext_pow24VStatus.in.Power_Off -> mod_sys::currentState.out.State_Wait24Vpower -> TAssumption2
			   
TPowStatus = TimedInterrupt(mod_sys::ext_pow24VStatus.in?x__ -> RUN({|mod_sys::ext_pow24VStatus.in.x__|}),1) ; TPowStatus
}
csp-end

timed csp TSpec2 csp-begin

ADeadline(E,d) = (CHAOS(Events) [| {tock} |] Wait(d)) [|E|> SKIP	

Timed(OneStep) {

Wait(d) = timed_priority(WAIT(d))
	
TSpec2_Init = CHAOS(Events)
			  [| {| mod_sys::currentState.out.State_Wait24Vpower |} |>	
			  TSpec2_aux
	
TSpec2_aux = CHAOS(Events)
		 	 [| {| mod_sys::ext_pow24VStatus.in.Power_Off |} |> 
		 	 (ADeadline({|mod_sys::int_pwmSignal.out.Power_Off|},10) ; TSpec2_aux)
		 	 
TSpec2 = timed_priority(TSpec2_Init)
}		 	 
csp-end


timed assertion TA2_T : mod_power_pwm_time refines TSpec2 in the traces model
timed assertion TA2_F : mod_power_pwm_time refines TSpec2 in the failures model


// FIXME: Need to add deadlines on output events for this to make any sense

untimed csp mod_power_setpoint associated to mod_sys csp-begin 
mod_power_setpoint = (mod_sys::O__(0) |\ {|mod_sys::ext_pow24VStatus.in,mod_sys::ext_setPoint.out|})
					  [| {| mod_sys::ext_pow24VStatus.in,mod_sys::ext_setPoint.out|} |]
					  Assumption3
				
Assumption3 = mod_sys::ext_pow24VStatus.in.Power_On -> Assumption3
			  []
			  mod_sys::ext_pow24VStatus.in.Power_Off -> mod_sys::ext_setPoint.out?x__ -> Assumption3
				
csp-end
		
untimed csp Spec3 csp-begin
Spec3 = CHAOS(Events) [| {|mod_sys::ext_pow24VStatus.in.Power_Off|} |> (mod_sys::ext_setPoint.out.0 -> Spec3)
csp-end

untimed assertion A3_safety : mod_power_setpoint refines Spec3 in the traces model
untimed assertion A3_liveness : mod_power_setpoint refines Spec3 in the failures model
untimed assertion A3_full_liveness : mod_power_setpoint refines Spec3 in the failures divergences model
untimed assertion A3B_non_trivial : mod_sys_pow24VStatus_Off does not refine Stop in the traces model

assertion A5 : State_machine::Ramping is reachable in mod_sys
assertion A6 : State_machine::Init is reachable in mod_sys
assertion A7 : State_machine::Wait24Vpower is reachable in mod_sys
assertion A8 : State_machine::ClosedLoop is reachable in mod_sys
assertion A9 : State_machine::ErrorMode is reachable in mod_sys


