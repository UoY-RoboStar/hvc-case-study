package P1_Spec1A

import basics::*

// P1A: That the actual system voltage always follows the set-point while in the ClosedLoop state
// Correspond to the CSP process Spec1A in the properties.assertions file
pmodules M1A:
	// This module is used to output int_ActualHV as long as there is an internal int_ActualHV
	// from state_machine to the buffer simulating an asynchronous connection
	pmodule P1A_clear_ActualHV_buffer {
		send2buff: bool init true;
		
		[mod_sys::ctrl_ref0::stm_ref0::int_ActualHV.out] (@send2buff==true) -> (@send2buff=false);
		[mod_sys::rp_ref0::int_ActualHV.in] (@send2buff==false) -> (@send2buff=true);
	}
	
	pmodule P1A {
		// -1 - failure
		// 0 - idle
		// 1 & 2 - ClosedLoop
		P1A_scpc : [-1 to 2] init 0;
		P1A_updating: bool init false;
		
		//////////////////////////////////// Idle state 0 (free events) ////////////////////////////////////////////
		//[mod_sys::rp_ref0::ext_setPoint.in]  (P1A_updating==false)/\(P1A_scpc==0)	-> (0.5:P1A_updating=false) & (0.5:P1A_updating=true); 
		[mod_sys::rp_ref0::ext_setPoint.out]  (@P1A_updating==false)/\(@P1A_scpc==0)	-> skip; 
		[mod_sys::rp_ref0::int_ActualHV.in] (@P1A_updating==false)/\(@P1A_scpc==0) -> skip;
		
	    [mod_sys::rp_ref0::currentState.in] (@P1A_updating==false) /\ ((@P1A_scpc >= 0) /\ (@P1A_scpc <= 2))            
	    	-> (@P1A_scpc=0)&(@P1A_updating=true);		
	    // if current state is ClosedLoop, then scpc stays the same as 1
	    // (0, busy) --> (1, idle)
	    [] (@P1A_scpc==0)/\(@P1A_updating==true)/\(mod_sys::rp_ref0::currentState.in.val==State::ClosedLoop) /\
	    	(@M1A::P1A_clear_ActualHV_buffer::send2buff==true)
	    	-> (@P1A_scpc=1)&(@P1A_updating=false);
	    // if send2buff==false, we know prior to this state, a int_ActualHV is waiting for output, 
	    // and so we synchronise on it to clear the buffer to make sure there is no pending int_ActualHV,
	    // otherwise, int_ActualHV won't follow setPoint correctly
	    [mod_sys::rp_ref0::int_ActualHV.in] (@P1A_scpc==0)/\(@P1A_updating==true)/\
	    	(mod_sys::rp_ref0::currentState.in.val==State::ClosedLoop) /\
	    	(@M1A::P1A_clear_ActualHV_buffer::send2buff==false)
	    	-> (@P1A_scpc=1)&(@P1A_updating=false);
	    	
	    //
	    // otherwise, return to idle by setting scpc to 0
	    [] (@P1A_scpc==0)/\(@P1A_updating==true)/\(mod_sys::rp_ref0::currentState.in.val!=State::ClosedLoop) 
	    	-> (@P1A_scpc=0)&(@P1A_updating=false);
	    
	    /////////////////////////////////////////////// State 1  //////////////////////////////////////////////////
	    // (1, idle) --> (1, busy)
	    [mod_sys::rp_ref0::ext_setPoint.out]   (@P1A_updating==false)/\(@P1A_scpc==1)                      
	    	-> (@P1A_scpc=1)&(@P1A_updating=true);

	    [] (@P1A_scpc==1)/\(@P1A_updating==true) 
	    	-> (@P1A_scpc=2)&(@P1A_updating=false);
	    
	    /////////////////////////////////////////////// State 2  //////////////////////////////////////////////////
	    
	    [mod_sys::rp_ref0::int_ActualHV.in]  (@P1A_updating==false)/\(@P1A_scpc==2)                    
	    	-> (@P1A_scpc=2)&(@P1A_updating=true);
	    
	    // The actualHV is equal to current setPoint or buffered setPoint
	    [] (@P1A_scpc==2)/\(@P1A_updating==true) /\
	    	(mod_sys::rp_ref0::int_ActualHV.in.val != mod_sys::rp_ref0::ext_setPoint.out.val)
	    	-> (@P1A_scpc=-1)&(@P1A_updating=false); 
	    // The actualHV is not equal to current setPoint or buffered setPoint
	    [] (@P1A_scpc==2)/\(@P1A_updating==true) /\ 
	    	(mod_sys::rp_ref0::int_ActualHV.in.val == mod_sys::rp_ref0::ext_setPoint.out.val) 
	    	-> (@P1A_scpc=1)&(@P1A_updating=false);
	}
	
label l1 = @M1A::P1A::P1A_scpc != -1

prob property P1A_deadlock_free:
	not Exists [Finally deadlock]
	with definitions D1
	with modules M1A
	with cmdoptions "-hybrid -cuddmaxmem 400g -javamaxmem 8g"
	
prob property P1A:
	Forall [Globally #l1]
	with definitions D1
	with modules M1A
	with cmdoptions "-hybrid -cuddmaxmem 400g -javamaxmem 8g"
