
--
-- RoboChart generator version 3.0.0.qualifier
-- Automatically generated on 22-02-2024 16:13:40
--
-- Iterated compression status: true
-- Assertions compression status: false
--

	module ctrl1
		shared_variable_events = {|
		|}
		
	exports
		transparent diamond
		transparent sbisim
		transparent dbisim
		transparent chase

		-- declaring controller events
		channel ext_pow24VStatus: InOut.Power
		channel int_overLimit: InOut.core_real
		channel int_underLimit: InOut.core_real
		channel int_DisableHV: InOut
		channel int_ActualHV: InOut.core_real
		
		
		
		-- declaring call and ret events for undefined operations
		
		-- declaring controller termination channel
		channel terminate
		
		-- channel set with all visible events
		sem__events = {|
			terminate
		,	ext_pow24VStatus,
			int_overLimit,
			int_underLimit,
			int_DisableHV,
			int_ActualHV
		|}
		
		-- set of visible memory events
		visibleMemoryEvents = {||}

		-- defined operations
	
		-- declaring machines
		module stm_ref0
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
		
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i0|
			              NID_s0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_overLimit, set_overLimit, setL_overLimit, setR_overLimit: core_real
			channel get_underLimit, set_underLimit, setL_underLimit, setR_underLimit: core_real
			channel get_ActualHV, set_ActualHV, setL_ActualHV, setR_ActualHV: core_real
			channel get_power, set_power, setL_power, setR_power: Power
			
			-- Shared variable channels
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel int_overLimit__: NIDS.InOut.core_real
			channel int_overLimit: InOut.core_real
			channel int_underLimit__: NIDS.InOut.core_real
			channel int_underLimit: InOut.core_real
			channel int_DisableHV__: NIDS.InOut
			channel int_DisableHV: InOut
			channel int_ActualHV__: NIDS.InOut.core_real
			channel int_ActualHV: InOut.core_real
			channel ext_pow24VStatus__: NIDS.InOut.Power
			channel ext_pow24VStatus: InOut.Power
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i0::enter,
			s0::enter
			|}
			
			enteredSS = 	{|
			s0::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	int_overLimit,
				int_underLimit,
				int_DisableHV,
				int_ActualHV,
				ext_pow24VStatus
				|}
			
			channel clockReset, clockResetL, clockResetR 
			
			localClockResets = {||}
			
			
			channel get_CLID_s0 : core_clock_type 
			--channel increment__
			
			CLID_s0_clock_type(id__) = 
				let
					max = (clock_type_max(Union({
			{},
			({10})
			}))+1)
				ctype = {0..max}
			within
				if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
			
			
		
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: s0
				module s0
				
				enterSS = 
						{|			i0::enter,
							f0::enter,
							Waiting::enter,
							PowerStatusRead::enter,
							ActualHVRead::enter,
							PowerAndActualHVRead::enter
						|}
				enteredSS = 
						{|			f0::entered,
							Waiting::entered,
							PowerStatusRead::entered,
							ActualHVRead::entered,
							PowerAndActualHVRead::entered
						|}
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					-- declaring identifiers of transitions
					datatype NIDS = 
					              NID_i0|
					              NID_f0|
					              NID_Waiting|
					              NID_PowerStatusRead|
					              NID_ActualHVRead|
					              NID_PowerAndActualHVRead
					
					channel internal__ : NIDS
					channel int_overLimit__: NIDS.InOut.core_real
					channel int_underLimit__: NIDS.InOut.core_real
					channel int_DisableHV__: NIDS.InOut
					channel int_ActualHV__: NIDS.InOut.core_real
					channel ext_pow24VStatus__: NIDS.InOut.Power
					
					channel get_CLID_Waiting : core_clock_type 
					channel get_CLID_PowerStatusRead : core_clock_type 
					channel get_CLID_ActualHVRead : core_clock_type 
					channel get_CLID_PowerAndActualHVRead : core_clock_type 
					--channel increment__
					
					CLID_Waiting_clock_type(id__) = 
						let
							max = (clock_type_max(Union({
					{}
					}))+1)
						ctype = {0..max}
					within
						if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
					
					CLID_PowerStatusRead_clock_type(id__) = 
						let
							max = (clock_type_max(Union({
					{}
					}))+1)
						ctype = {0..max}
					within
						if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
					
					CLID_ActualHVRead_clock_type(id__) = 
						let
							max = (clock_type_max(Union({
					{}
					}))+1)
						ctype = {0..max}
					within
						if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
					
					CLID_PowerAndActualHVRead_clock_type(id__) = 
						let
							max = (clock_type_max(Union({
					{}
					}))+1)
						ctype = {0..max}
					within
						if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
					
					
					--	Nodes
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Final state: f0
					module f0
					
					exports
					
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
									
									Entering 	= entered -> SKIP ; Active
									Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
									Interrupted	= share__choice(exit -> exited -> Inactive)
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: Waiting
					module Waiting
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks(id__) = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: PowerStatusRead
					module PowerStatusRead
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks(id__) = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: ActualHVRead
					module ActualHVRead
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks(id__) = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: PowerAndActualHVRead
					module PowerAndActualHVRead
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks(id__) = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
						
							Behaviour 	= dbisim(
								((
								 (((dbisim(
								 	sbisim(
								 		dbisim(
								 			sbisim(
								 				dbisim(
								 					sbisim(
								 						dbisim(
								 							sbisim(
								 								(let
								 									-- IMPLEMENTATION NOTE:
								 									-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								 									-- modules for defining the semantics of each node.
								 									enterSS = {|
								 									i0::enter,
								 									f0::enter,
								 									Waiting::enter,
								 									PowerStatusRead::enter,
								 									ActualHVRead::enter,
								 									PowerAndActualHVRead::enter
								 									|}
								 									hideSet = union(enterSS,{|exit,exited,internal__|})
								 								within 
								 									((let
								 										-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								 										-- because CSPM modules are used for the semantics of Node.
								 										flowevts = union(enterSS,{|exit,exited,interrupt|})
								 										transSync = {|internal__.NID_i0,internal__.NID_ActualHVRead,internal__.NID_ActualHVRead,internal__.NID_PowerStatusRead,ext_pow24VStatus__.NID_Waiting.in,int_ActualHV__.NID_Waiting.in,int_ActualHV__.NID_PowerStatusRead.in,ext_pow24VStatus__.NID_ActualHVRead.in,internal__.NID_PowerAndActualHVRead,internal__.NID_PowerAndActualHVRead,internal__.NID_PowerAndActualHVRead|}
								 									within
								 										((
								 										 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								 										   i0::D__(id__)
								 										   [| { share__, terminate } |] (
								 										   f0::D__(id__)
								 										   [| { share__, terminate } |] (
								 										   Waiting::D__(id__)
								 										   [| { share__, terminate } |] (
								 										   PowerStatusRead::D__(id__)
								 										   [| { share__, terminate } |] (
								 										   ActualHVRead::D__(id__)
								 										   [| { share__, terminate } |] (
								 										   PowerAndActualHVRead::D__(id__)
								 										   )
								 										   )
								 										   )
								 										   )
								 										   )
								 										 )
								 										 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 										 [[Waiting::interrupt <- x__ | x__ <- {|interrupt,ext_pow24VStatus__.NID_Waiting.in,int_ActualHV__.NID_Waiting.in|}]]
								 										 [[PowerStatusRead::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_PowerStatusRead,int_ActualHV__.NID_PowerStatusRead.in|}]]
								 										 [[ActualHVRead::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_ActualHVRead,internal__.NID_ActualHVRead,ext_pow24VStatus__.NID_ActualHVRead.in|}]]
								 										 [[PowerAndActualHVRead::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_PowerAndActualHVRead,internal__.NID_PowerAndActualHVRead,internal__.NID_PowerAndActualHVRead|}]]
								 										 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 										 )
								 										  [[ share__ <- x__ | x__ <- {| share__,setR_power,setR_ActualHV |} ]] 
								 										  [[set_overLimit <- setL_overLimit,set_power <- setL_power,set_underLimit <- setL_underLimit,set_ActualHV <- setL_ActualHV]]
								 										 )
								 										 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 										 			,setL_overLimit
								 										 			,setL_power
								 										 			,setL_underLimit
								 										 			,setL_ActualHV
								 										 			,setR_power
								 										 			 			,setR_ActualHV
								 										 			|}) |]
								 										 ((i0::enter -> Transitions(id__))
								 										  [[ share__ <- x__ | x__ <- {| share__,setL_overLimit,setL_power,setL_underLimit,setL_ActualHV |} ]]
								 										  [[set_power <- setR_power,set_ActualHV <- setR_ActualHV]]
								 										 )
								 										)[[setL_overLimit <- set_overLimit,setL_power <- set_power,setL_underLimit <- set_underLimit,setL_ActualHV <- set_ActualHV]]
								 										 [[setR_power <- set_power,setR_ActualHV <- set_ActualHV]]
								 										)
								 									)
								 									 \ hideSet)
								 									[[
								 										int_overLimit__.x____ <- int_overLimit,
								 										int_underLimit__.x____ <- int_underLimit,
								 										int_DisableHV__.x____ <- int_DisableHV,
								 										int_ActualHV__.x____ <- int_ActualHV,
								 										ext_pow24VStatus__.x____ <- ext_pow24VStatus
								 										| x____ <- NIDS
								 									]]
								 								)
								 								[| {|get_CLID_PowerAndActualHVRead,PowerAndActualHVRead::entered,terminate|} |]
								 								dbisim(Clock_CLID_PowerAndActualHVRead(id__,0))
								 							)\{|get_CLID_PowerAndActualHVRead|}
								 						)
								 						[| {|get_CLID_ActualHVRead,ActualHVRead::entered,terminate|} |]
								 						dbisim(Clock_CLID_ActualHVRead(id__,0))
								 					)\{|get_CLID_ActualHVRead|}
								 				)
								 				[| {|get_CLID_PowerStatusRead,PowerStatusRead::entered,terminate|} |]
								 				dbisim(Clock_CLID_PowerStatusRead(id__,0))
								 			)\{|get_CLID_PowerStatusRead|}
								 		)
								 		[| {|get_CLID_Waiting,Waiting::entered,terminate|} |]
								 		dbisim(Clock_CLID_Waiting(id__,0))
								 	)\{|get_CLID_Waiting|}
								 )
								 ))
								  [[ share__ <- x__ | x__ <- {| share__,setR_overLimit,setR_power,setR_underLimit,setR_ActualHV |} ]] 
								  [[set_overLimit <- setL_overLimit,set_power <- setL_power,set_underLimit <- setL_underLimit,set_ActualHV <- setL_ActualHV]]
								 )
								 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
								 			,setL_overLimit
								 			,setL_power
								 			,setL_underLimit
								 			,setL_ActualHV
								 			,setR_overLimit
								 			 			,setR_power
								 			 			,setR_underLimit
								 			 			,setR_ActualHV
								 			|}) |]
								 ((During)
								  [[ share__ <- x__ | x__ <- {| share__,setL_overLimit,setL_power,setL_underLimit,setL_ActualHV |} ]]
								  [[set_overLimit <- setR_overLimit,set_power <- setR_power,set_underLimit <- setR_underLimit,set_ActualHV <- setR_ActualHV]]
								 )
								)[[setL_overLimit <- set_overLimit,setL_power <- set_power,setL_underLimit <- set_underLimit,setL_ActualHV <- set_ActualHV]]
								 [[setR_overLimit <- set_overLimit,setR_power <- set_power,setR_underLimit <- set_underLimit,setR_ActualHV <- set_ActualHV]]
								)\union(enteredSS,{terminate}) 
							)
							During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
									 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
						
							Behaviour 	= dbisim(
								((
								 (((dbisim(
								 	sbisim(
								 		dbisim(
								 			sbisim(
								 				dbisim(
								 					sbisim(
								 						dbisim(
								 							sbisim(
								 								(let
								 									-- IMPLEMENTATION NOTE:
								 									-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								 									-- modules for defining the semantics of each node.
								 									enterSS = {|
								 									i0::enter,
								 									f0::enter,
								 									Waiting::enter,
								 									PowerStatusRead::enter,
								 									ActualHVRead::enter,
								 									PowerAndActualHVRead::enter
								 									|}
								 									hideSet = union(enterSS,{|exit,exited,internal__|})
								 								within 
								 									((let
								 										-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								 										-- because CSPM modules are used for the semantics of Node.
								 										flowevts = union(enterSS,{|exit,exited,interrupt|})
								 										transSync = {|internal__.NID_i0,internal__.NID_ActualHVRead,internal__.NID_ActualHVRead,internal__.NID_PowerStatusRead,ext_pow24VStatus__.NID_Waiting.in,int_ActualHV__.NID_Waiting.in,int_ActualHV__.NID_PowerStatusRead.in,ext_pow24VStatus__.NID_ActualHVRead.in,internal__.NID_PowerAndActualHVRead,internal__.NID_PowerAndActualHVRead,internal__.NID_PowerAndActualHVRead|}
								 									within
								 										((
								 										 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								 										   i0::VS_O__(id__)
								 										   [| { share__, terminate } |] (
								 										   f0::VS_O__(id__)
								 										   [| { share__, terminate } |] (
								 										   Waiting::VS_O__(id__)
								 										   [| { share__, terminate } |] (
								 										   PowerStatusRead::VS_O__(id__)
								 										   [| { share__, terminate } |] (
								 										   ActualHVRead::VS_O__(id__)
								 										   [| { share__, terminate } |] (
								 										   PowerAndActualHVRead::VS_O__(id__)
								 										   )
								 										   )
								 										   )
								 										   )
								 										   )
								 										 )
								 										 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 										 [[Waiting::interrupt <- x__ | x__ <- {|interrupt,ext_pow24VStatus__.NID_Waiting.in,int_ActualHV__.NID_Waiting.in|}]]
								 										 [[PowerStatusRead::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_PowerStatusRead,int_ActualHV__.NID_PowerStatusRead.in|}]]
								 										 [[ActualHVRead::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_ActualHVRead,internal__.NID_ActualHVRead,ext_pow24VStatus__.NID_ActualHVRead.in|}]]
								 										 [[PowerAndActualHVRead::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_PowerAndActualHVRead,internal__.NID_PowerAndActualHVRead,internal__.NID_PowerAndActualHVRead|}]]
								 										 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 										 )
								 										  [[ share__ <- x__ | x__ <- {| share__,setR_power,setR_ActualHV |} ]] 
								 										  [[set_overLimit <- setL_overLimit,set_power <- setL_power,set_underLimit <- setL_underLimit,set_ActualHV <- setL_ActualHV]]
								 										 )
								 										 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 										 			,setL_overLimit
								 										 			,setL_power
								 										 			,setL_underLimit
								 										 			,setL_ActualHV
								 										 			,setR_power
								 										 			 			,setR_ActualHV
								 										 			|}) |]
								 										 ((i0::enter -> Transitions(id__))
								 										  [[ share__ <- x__ | x__ <- {| share__,setL_overLimit,setL_power,setL_underLimit,setL_ActualHV |} ]]
								 										  [[set_power <- setR_power,set_ActualHV <- setR_ActualHV]]
								 										 )
								 										)[[setL_overLimit <- set_overLimit,setL_power <- set_power,setL_underLimit <- set_underLimit,setL_ActualHV <- set_ActualHV]]
								 										 [[setR_power <- set_power,setR_ActualHV <- set_ActualHV]]
								 										)
								 									)
								 									 \ hideSet)
								 									[[
								 										int_overLimit__.x____ <- int_overLimit,
								 										int_underLimit__.x____ <- int_underLimit,
								 										int_DisableHV__.x____ <- int_DisableHV,
								 										int_ActualHV__.x____ <- int_ActualHV,
								 										ext_pow24VStatus__.x____ <- ext_pow24VStatus
								 										| x____ <- NIDS
								 									]]
								 								)
								 								[| {|get_CLID_PowerAndActualHVRead,PowerAndActualHVRead::entered,terminate|} |]
								 								dbisim(Clock_CLID_PowerAndActualHVRead(id__,0))
								 							)\{|get_CLID_PowerAndActualHVRead|}
								 						)
								 						[| {|get_CLID_ActualHVRead,ActualHVRead::entered,terminate|} |]
								 						dbisim(Clock_CLID_ActualHVRead(id__,0))
								 					)\{|get_CLID_ActualHVRead|}
								 				)
								 				[| {|get_CLID_PowerStatusRead,PowerStatusRead::entered,terminate|} |]
								 				dbisim(Clock_CLID_PowerStatusRead(id__,0))
								 			)\{|get_CLID_PowerStatusRead|}
								 		)
								 		[| {|get_CLID_Waiting,Waiting::entered,terminate|} |]
								 		dbisim(Clock_CLID_Waiting(id__,0))
								 	)\{|get_CLID_Waiting|}
								 )
								 ))
								  [[ share__ <- x__ | x__ <- {| share__,setR_overLimit,setR_power,setR_underLimit,setR_ActualHV |} ]] 
								  [[set_overLimit <- setL_overLimit,set_power <- setL_power,set_underLimit <- setL_underLimit,set_ActualHV <- setL_ActualHV]]
								 )
								 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
								 			,setL_overLimit
								 			,setL_power
								 			,setL_underLimit
								 			,setL_ActualHV
								 			,setR_overLimit
								 			 			,setR_power
								 			 			,setR_underLimit
								 			 			,setR_ActualHV
								 			|}) |]
								 ((During)
								  [[ share__ <- x__ | x__ <- {| share__,setL_overLimit,setL_power,setL_underLimit,setL_ActualHV |} ]]
								  [[set_overLimit <- setR_overLimit,set_power <- setR_power,set_underLimit <- setR_underLimit,set_ActualHV <- setR_ActualHV]]
								 )
								)[[setL_overLimit <- set_overLimit,setL_power <- set_power,setL_underLimit <- set_underLimit,setL_ActualHV <- set_ActualHV]]
								 [[setR_overLimit <- set_overLimit,setR_power <- set_power,setR_underLimit <- set_underLimit,setR_ActualHV <- set_ActualHV]]
								)\{terminate} 
							)
							During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
									 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
						within
							Inactive [| {terminate} |> SKIP)
						
						Transitions(id__) = ((let
							Trans = share__choice(get_overLimit?overLimit -> get_power?power -> get_underLimit?underLimit -> get_ActualHV?ActualHV -> TimeOut_1(
								 (share__ -> SKIP
								 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; Waiting::enter -> SKIP))))
								 [] dbisim(((ActualHV>overLimit))&(internal__!NID_ActualHVRead -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(int_DisableHV.out -> SKIP)) ; f0::enter -> SKIP)))
								 [] dbisim(((ActualHV<underLimit))&(internal__!NID_ActualHVRead -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(int_DisableHV.out -> SKIP)) ; f0::enter -> SKIP)))
								 [] dbisim(((power==Power_Off))&(internal__!NID_PowerStatusRead -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(int_DisableHV.out -> SKIP)) ; f0::enter -> SKIP)))
								 [] dbisim((true)&(ext_pow24VStatus__!NID_Waiting.in?power:{power|power <- Power, true} -> share__choice(set_power!power -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; PowerStatusRead::enter -> SKIP)))
								 [] dbisim((true)&(int_ActualHV__!NID_Waiting.in?ActualHV:{ActualHV|ActualHV <- core_real, true} -> share__choice(set_ActualHV!ActualHV -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; ActualHVRead::enter -> SKIP)))
								 [] dbisim((true)&(int_ActualHV__!NID_PowerStatusRead.in?ActualHV:{ActualHV|ActualHV <- core_real, true} -> share__choice(set_ActualHV!ActualHV -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; PowerAndActualHVRead::enter -> SKIP)))
								 [] dbisim((true)&(ext_pow24VStatus__!NID_ActualHVRead.in?power:{power|power <- Power, true} -> share__choice(set_power!power -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; PowerAndActualHVRead::enter -> SKIP)))
								 [] dbisim(((ActualHV<underLimit))&(internal__!NID_PowerAndActualHVRead -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(int_DisableHV.out -> SKIP)) ; f0::enter -> SKIP)))
								 [] dbisim(((ActualHV>overLimit))&(internal__!NID_PowerAndActualHVRead -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(int_DisableHV.out -> SKIP)) ; f0::enter -> SKIP)))
								 [] dbisim(((power==Power_Off))&(internal__!NID_PowerAndActualHVRead -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(int_DisableHV.out -> SKIP)) ; f0::enter -> SKIP)))
								 []
								 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
								 []
								 terminate -> SKIP
								 )
							,SKIP);Trans
							)
						within
							Trans [|{terminate}|> SKIP
						)
						)
						
						
						-- Clocks
						Clock_CLID_Waiting(id__,x__) = 
							TimeOut_1(
								Waiting::entered -> Clock_CLID_Waiting(id__,0)
								[]
								get_CLID_Waiting!x__ -> Clock_CLID_Waiting(id__,x__)
								[]
								terminate -> SKIP,Clock_CLID_Waiting(id__,clock_type_plus(x__,1,CLID_Waiting_clock_type(id__))))
						Clock_CLID_PowerStatusRead(id__,x__) = 
							TimeOut_1(
								PowerStatusRead::entered -> Clock_CLID_PowerStatusRead(id__,0)
								[]
								get_CLID_PowerStatusRead!x__ -> Clock_CLID_PowerStatusRead(id__,x__)
								[]
								terminate -> SKIP,Clock_CLID_PowerStatusRead(id__,clock_type_plus(x__,1,CLID_PowerStatusRead_clock_type(id__))))
						Clock_CLID_ActualHVRead(id__,x__) = 
							TimeOut_1(
								ActualHVRead::entered -> Clock_CLID_ActualHVRead(id__,0)
								[]
								get_CLID_ActualHVRead!x__ -> Clock_CLID_ActualHVRead(id__,x__)
								[]
								terminate -> SKIP,Clock_CLID_ActualHVRead(id__,clock_type_plus(x__,1,CLID_ActualHVRead_clock_type(id__))))
						Clock_CLID_PowerAndActualHVRead(id__,x__) = 
							TimeOut_1(
								PowerAndActualHVRead::entered -> Clock_CLID_PowerAndActualHVRead(id__,0)
								[]
								get_CLID_PowerAndActualHVRead!x__ -> Clock_CLID_PowerAndActualHVRead(id__,x__)
								[]
								terminate -> SKIP,Clock_CLID_PowerAndActualHVRead(id__,clock_type_plus(x__,1,CLID_PowerAndActualHVRead_clock_type(id__))))
						
						StateClocks(id__) = dbisim(Clock_CLID_Waiting(id__,0))
						[| { terminate } |] (
						dbisim(Clock_CLID_PowerStatusRead(id__,0))
						[| { terminate } |] (
						dbisim(Clock_CLID_ActualHVRead(id__,0))
						[| { terminate } |] (
						dbisim(Clock_CLID_PowerAndActualHVRead(id__,0))
						)
						)
						)
						
						stateClockSync = {|get_CLID_Waiting,Waiting::entered,get_CLID_PowerStatusRead,PowerStatusRead::entered,get_CLID_ActualHVRead,ActualHVRead::entered,get_CLID_PowerAndActualHVRead,PowerAndActualHVRead::entered|}
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
			
				-- STM processes
				STM(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				,<{terminate},{tock}>)
				
				STM_VS_O(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				,<{terminate},{tock}>)
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = share__choice(get_CLID_s0?s0:CLID_s0_clock_type(id__) -> TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((true&(share__choice(int_overLimit.in?overLimit -> (SStop /\ set_overLimit!overLimit -> SKIP)));true&(share__choice(int_underLimit.in?underLimit -> (SStop /\ set_underLimit!underLimit -> SKIP))) ; s0::enter -> SKIP))))
						 [] dbisim(((s0>=10))&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s0::enter -> SKIP)))
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
					)
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							s0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,internal__.NID_s0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::D__(id__)
								   [| { share__, terminate } |] (
								   s0::D__(id__)
								   )
								 )
								 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[s0::entered <- s0::enteredL]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,s0::enteredL
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,s0::enteredL |} ]]
								 )
								)[[s0::enteredL <- s0::entered]]
								)
							)
							 \ hideSet)
							[[
								int_overLimit__.x____ <- int_overLimit,
								int_underLimit__.x____ <- int_underLimit,
								int_DisableHV__.x____ <- int_DisableHV,
								int_ActualHV__.x____ <- int_ActualHV,
								ext_pow24VStatus__.x____ <- ext_pow24VStatus
								| x____ <- NIDS
							]]
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_s0,s0::entered|}
					 within
						(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
					)
					)
				
				IteratedBehaviour(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_s0,s0::entered|}
					 within
						(dbisim(
							sbisim(
								MachineBody(id__)
								[| {|get_CLID_s0,s0::entered,terminate|} |]
								dbisim(Clock_CLID_s0(id__,0))
							)\{|get_CLID_s0|}
						)
						) \ union(stateClockSync,enteredSS)
					)
					)
				
				Stateful(id__) = 
					((let
						getsetLocalChannels = {|get_overLimit,set_overLimit,
						get_underLimit,set_underLimit,
						get_ActualHV,set_ActualHV,
						get_power,set_power|}
						clockSync = {||}
					within
						(Behaviour(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				IteratedStateful(id__) =
					(dbisim(
						sbisim(
							dbisim(
								sbisim(
									dbisim(
										sbisim(
											dbisim(
												sbisim(
													IteratedBehaviour(id__)
													[| {|get_power,set_power,terminate|} |]
													Memory_power(Power_On)
												)\{|get_power,set_power|}
											)
											[| {|get_ActualHV,set_ActualHV,terminate|} |]
											Memory_ActualHV(0)
										)\{|get_ActualHV,set_ActualHV|}
									)
									[| {|get_underLimit,set_underLimit,terminate|} |]
									Memory_underLimit(0)
								)\{|get_underLimit,set_underLimit|}
							)
							[| {|get_overLimit,set_overLimit,terminate|} |]
							Memory_overLimit(0)
						)\{|get_overLimit,set_overLimit|}
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							s0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,internal__.NID_s0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::VS_O__(id__)
								   [| { share__, terminate } |] (
								   s0::VS_O__(id__)
								   )
								 )
								 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[s0::entered <- s0::enteredL]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,s0::enteredL
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,s0::enteredL |} ]]
								 )
								)[[s0::enteredL <- s0::entered]]
								)
							)
							 \ hideSet)
							[[
								int_overLimit__.x____ <- int_overLimit,
								int_underLimit__.x____ <- int_underLimit,
								int_DisableHV__.x____ <- int_DisableHV,
								int_ActualHV__.x____ <- int_ActualHV,
								ext_pow24VStatus__.x____ <- ext_pow24VStatus
								| x____ <- NIDS
							]]
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_s0,s0::entered|}
					 within
						(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				IteratedBehaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_s0,s0::entered|}
					 within
						(dbisim(
							sbisim(
								MachineBody_VS_O(id__)
								[| {|get_CLID_s0,s0::entered,terminate|} |]
								dbisim(Clock_CLID_s0(id__,0))
							)\{|get_CLID_s0|}
						)
						) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				Stateful_VS_O(id__) = 
					dbisim((let
						getsetLocalChannels = {|get_overLimit,set_overLimit,
						get_underLimit,set_underLimit,
						get_ActualHV,set_ActualHV,
						get_power,set_power|}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				IteratedStateful_VS_O(id__) =
					(dbisim(
						sbisim(
							dbisim(
								sbisim(
									dbisim(
										sbisim(
											dbisim(
												sbisim(
													IteratedBehaviour_VS_O(id__)
													[| {|get_power,set_power,terminate|} |]
													Memory_power(Power_On)
												)\{|get_power,set_power|}
											)
											[| {|get_ActualHV,set_ActualHV,terminate|} |]
											Memory_ActualHV(0)
										)\{|get_ActualHV,set_ActualHV|}
									)
									[| {|get_underLimit,set_underLimit,terminate|} |]
									Memory_underLimit(0)
								)\{|get_underLimit,set_underLimit|}
							)
							[| {|get_overLimit,set_overLimit,terminate|} |]
							Memory_overLimit(0)
						)\{|get_overLimit,set_overLimit|}
					)
					)
				
				-- END
				
				-- Memory
				-- Memory variables
				Memory_overLimit(overLimit) =
					get_overLimit!overLimit -> Memory_overLimit(overLimit)
					[]
					set_overLimit?x__ -> Memory_overLimit(x__)
					[]
					terminate -> SKIP
				Memory_underLimit(underLimit) =
					get_underLimit!underLimit -> Memory_underLimit(underLimit)
					[]
					set_underLimit?x__ -> Memory_underLimit(x__)
					[]
					terminate -> SKIP
				Memory_ActualHV(ActualHV) =
					get_ActualHV!ActualHV -> Memory_ActualHV(ActualHV)
					[]
					set_ActualHV?x__ -> Memory_ActualHV(x__)
					[]
					terminate -> SKIP
				Memory_power(power) =
					get_power!power -> Memory_power(power)
					[]
					set_power?x__ -> Memory_power(x__)
					[]
					terminate -> SKIP
				
				-- varMemory process
				varMemory(id__) = Memory_overLimit(0)
				[| { terminate } |] (
				Memory_underLimit(0)
				[| { terminate } |] (
				Memory_ActualHV(0)
				[| { terminate } |] (
				Memory_power(Power_On)
				)
				)
				)
				
				getsetLocalChannels = {|get_overLimit,set_overLimit,get_underLimit,set_underLimit,get_ActualHV,set_ActualHV,get_power,set_power|}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__) \ localClockResets
				D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
				O__(id__) = dbisim(D__(id__))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = dbisim(FVS__(id__))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
				HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks(id__) = terminate -> SKIP
				
				clockSync = {||}
				
				Clock_CLID_s0(id__,x__) = 
					TimeOut_1(
						s0::entered -> Clock_CLID_s0(id__,0)
						[]
						get_CLID_s0!x__ -> Clock_CLID_s0(id__,x__)
						[]
						terminate -> SKIP,Clock_CLID_s0(id__,clock_type_plus(x__,1,CLID_s0_clock_type(id__))))
				
				StateClocks(id__) = dbisim(Clock_CLID_s0(id__,0))
				
				stateClockSync = {|get_CLID_s0,s0::entered|}
				
				-- Shared memory
				-- Shared memory variables
				
				-- sharedVarMemory process
				sharedVarMemory(id__) = terminate -> SKIP
				
				sharedVarSync = {||}
				
				sharedVarHide = {||}
				}
		endmodule
		
		Timed(OneStep) {
				-- undefined operations
				
				-- declaring controller memory
				Memory(id__) = SKIP
				
				D__(id__) = prioritise(	((
						stm_ref0::D__(id__)[[
							stm_ref0::terminate <- terminate,
							stm_ref0::int_ActualHV <- int_ActualHV,
							stm_ref0::int_DisableHV <- int_DisableHV,
							stm_ref0::int_underLimit <- int_underLimit,
							stm_ref0::int_overLimit <- int_overLimit,
							stm_ref0::ext_pow24VStatus <- ext_pow24VStatus
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>)
				
				-- VS version
				VS__(id__) = prioritise(	((
						stm_ref0::VS__(id__)[[
							stm_ref0::terminate <- terminate,
							stm_ref0::int_ActualHV <- int_ActualHV,
							stm_ref0::int_DisableHV <- int_DisableHV,
							stm_ref0::int_underLimit <- int_underLimit,
							stm_ref0::int_overLimit <- int_overLimit,
							stm_ref0::ext_pow24VStatus <- ext_pow24VStatus
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>)
			
				-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
				O__(id__) = dbisim(prioritise(	((
						stm_ref0::O__(id__)[[
							stm_ref0::terminate <- terminate,
							stm_ref0::int_ActualHV <- int_ActualHV,
							stm_ref0::int_DisableHV <- int_DisableHV,
							stm_ref0::int_underLimit <- int_underLimit,
							stm_ref0::int_overLimit <- int_overLimit,
							stm_ref0::ext_pow24VStatus <- ext_pow24VStatus
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>))
								
				-- VS_O version
				VS_O__(id__) = dbisim(prioritise(	((
						stm_ref0::VS_O__(id__)[[
							stm_ref0::terminate <- terminate,
							stm_ref0::int_ActualHV <- int_ActualHV,
							stm_ref0::int_DisableHV <- int_DisableHV,
							stm_ref0::int_underLimit <- int_underLimit,
							stm_ref0::int_overLimit <- int_overLimit,
							stm_ref0::ext_pow24VStatus <- ext_pow24VStatus
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>))
			
				HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP			
		}

	endmodule
