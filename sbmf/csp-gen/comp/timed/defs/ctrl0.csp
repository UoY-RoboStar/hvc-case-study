	module ctrl0
		shared_variable_events = {|
		|}
		
	exports
		transparent diamond
		transparent sbisim
		transparent dbisim
		transparent chase

		-- declaring controller events
		channel currentState: InOut.State
		channel ext_setPoint: InOut.core_real
		channel ext_pow24VStatus: InOut.Power
		channel int_overLimit: InOut.core_real
		channel int_pwmSignal: InOut.Power
		channel int_underLimit: InOut.core_real
		channel int_DisableHV: InOut
		channel int_ActualHV: InOut.core_real
		
		
		
		-- declaring call and ret events for undefined operations
		
		-- declaring controller termination channel		
		channel terminate
		
		-- set of visible memory events
		visibleMemoryEvents = {||}

		-- defined operations
		-- compileOperationDef
		module OP_disableHV
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i0|
			              NID_s1|
			              NID_f0|
			              NID_s0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_setPoint, set_setPoint, setL_setPoint, setR_setPoint: core_real
			channel get_res, set_res, setL_res, setR_res: core_boolean
			channel get_errorFlag, set_errorFlag, setL_errorFlag, setR_errorFlag: core_boolean
			channel get_lim, set_lim, setL_lim, setR_lim: core_boolean
			channel get_supplyLim, set_supplyLim, setL_supplyLim, setR_supplyLim: core_boolean
			channel get_ActualHV, set_ActualHV, setL_ActualHV, setR_ActualHV: core_real
			channel get_errorAck, set_errorAck, setL_errorAck, setR_errorAck: core_boolean
			channel get_overLimit, set_overLimit, setL_overLimit, setR_overLimit: core_real
			channel get_underLimit, set_underLimit, setL_underLimit, setR_underLimit: core_real
			
			-- Shared variable channels
			channel set_EXT_setPoint: core_real
			channel set_EXT_res: core_boolean
			channel set_EXT_errorFlag: core_boolean
			channel set_EXT_lim: core_boolean
			channel set_EXT_supplyLim: core_boolean
			channel set_EXT_ActualHV: core_real
			channel set_EXT_errorAck: core_boolean
			channel set_EXT_overLimit: core_real
			channel set_EXT_underLimit: core_real
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel int_pwmSignal__: NIDS.InOut.Power
			channel int_pwmSignal: InOut.Power
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i0::enter,
			s1::enter,
			f0::enter,
			s0::enter
			|}
			
			enteredSS = 	{|
			s1::entered,
			f0::entered,
			s0::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
				set_EXT_setPoint,
				set_EXT_res,
				set_EXT_errorFlag,
				set_EXT_lim,
				set_EXT_supplyLim,
				set_EXT_ActualHV,
				set_EXT_errorAck,
				set_EXT_overLimit,
				set_EXT_underLimit
			|}
			
			channel clockReset, clockResetL, clockResetR 
			
			localClockResets = {||}
			
			
			channel get_CLID_f0 : CLID_f0_clock_type
			channel get_CLID_s0 : CLID_s0_clock_type
			channel get_CLID_s1 : CLID_s1_clock_type
			
			--channel increment__
			
			CLID_f0_clock_type = {0..(clock_type_max(Union({
			{}
			}))+1)}
			CLID_s0_clock_type = {0..(clock_type_max(Union({
			{}
			}))+1)}
			CLID_s1_clock_type = {0..(clock_type_max(Union({
			{}
			}))+1)}
			
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__,
									arg) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__,
									arg) = D__(id__,
									arg)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: s1
				module s1
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					
					--channel increment__
					
					
					--	Nodes
					-- declaring all nodes
					
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__,
									arg) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= Deadline(share__choice(true & (share__choice(set_setPoint!0 -> SKIP))),0) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
									arg) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= Deadline(share__choice(true & (share__choice(set_setPoint!0 -> SKIP))),0) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
						
						-- Clocks
						
						StateClocks = terminate -> SKIP
						
						stateClockSync = {||}
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f0
				module f0
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						D__(id__,
									arg) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
								
								Entering 	= entered -> SKIP ; Active
								Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
								Interrupted	= share__choice(exit -> exited -> Inactive)
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
									arg) = D__(id__,
									arg)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: s0
				module s0
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					
					--channel increment__
					
					
					--	Nodes
					-- declaring all nodes
					
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__,
									arg) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= Deadline(true&(share__choice(int_pwmSignal.out!Power_Off -> SKIP)),0) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
									arg) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= Deadline(true&(share__choice(int_pwmSignal.out!Power_Off -> SKIP)),0) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
						
						-- Clocks
						
						StateClocks = terminate -> SKIP
						
						stateClockSync = {||}
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
			
				-- STM processes
				STM(id__,
							arg) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__,
							arg) \ {terminate}
				
				STM_VS_O(id__,
							arg) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__,
							arg) \ {terminate}
				
				-- Transitions
				Transitions(id__,
							arg) = ((let
					Trans = TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim(((arg==false))&(internal__!NID_s1 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; Deadline(share__choice(true & (share__choice(set_res!false -> SKIP))),0) ; f0::enter -> SKIP)))
						 [] dbisim(((arg==true))&(internal__!NID_s1 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; Deadline(share__choice(true & (share__choice(set_res!true -> SKIP))),0) ; f0::enter -> SKIP)))
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s0::enter -> SKIP))))
						 [] dbisim((true)&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s1::enter -> SKIP)))
						 []
						 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__,
							arg) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							s1::enter,
							f0::enter,
							s0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_s1,internal__.NID_s1,internal__.NID_i0,internal__.NID_s0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i0::D__(id__,
								   		    			arg)
								   		    [| { share__, terminate } |] (
								   		    s1::D__(id__,
								   		    			arg)
								   		    [| { share__, terminate } |] (
								   		    f0::D__(id__,
								   		    			arg)
								   		    [| { share__, terminate } |] (
								   		    s0::D__(id__,
								   		    			arg)
								   		    )
								   		    )
								   		    )
								   		  )
								 )
								 [[s1::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s1,internal__.NID_s1|}]]
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__,
								 			arg))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								int_pwmSignal__.x____ <- int_pwmSignal
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__,
							arg) = 
					dbisim((let
						stateClockSync = {|get_CLID_f0,f0::entered,get_CLID_s0,s0::entered,get_CLID_s1,s1::entered|}
					 within
						(MachineBody(id__,
									arg) [| union(stateClockSync,{terminate}) |] StateClocks) \ union(stateClockSync,enteredSS)
					)
					)
				
				Stateful(id__,
							arg) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour(id__,
									arg) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__,
						 			arg) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__,
							arg) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							s1::enter,
							f0::enter,
							s0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_s1,internal__.NID_s1,internal__.NID_i0,internal__.NID_s0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i0::VS_O__(id__,
								   		    			arg)
								   		    [| { share__, terminate } |] (
								   		    s1::VS_O__(id__,
								   		    			arg)
								   		    [| { share__, terminate } |] (
								   		    f0::VS_O__(id__,
								   		    			arg)
								   		    [| { share__, terminate } |] (
								   		    s0::VS_O__(id__,
								   		    			arg)
								   		    )
								   		    )
								   		    )
								   		  )
								 )
								 [[s1::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s1,internal__.NID_s1|}]]
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__,
								 			arg))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								int_pwmSignal__.x____ <- int_pwmSignal
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__,
							arg) = 
					dbisim((let
						stateClockSync = {|get_CLID_f0,f0::entered,get_CLID_s0,s0::entered,get_CLID_s1,s1::entered|}
					 within
						(MachineBody_VS_O(id__,
									arg) [| union(stateClockSync,{terminate}) |] StateClocks) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				Stateful_VS_O(id__,
							arg) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__,
									arg) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__,
						 			arg) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
					
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__,
							arg) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__,
							arg) = STM_VS_O(id__,
							arg) \ localClockResets
				D__(id__,
							arg) = timed_priority(STM(id__,
							arg) \ union(internal_events,localClockResets))
				O__(id__,
							arg) = dbisim(D__(id__,
							arg))
				VS__(id__,
							arg) = FVS__(id__,
							arg)
				VS_O__(id__,
							arg) = dbisim(FVS__(id__,
							arg))
				HEXT__(id__,
							arg) = O__(id__,
							arg) [|shared_variable_events|] SKIP
				FVS_C__(id__,
							arg) = dbisim(timed_priority(STM(id__,
							arg) \ internal_events))
				HUP__(id__,
							arg) = timed_priority(O__(id__,
							arg) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks = terminate -> SKIP
				
				clockSync = {||}
				
				Clock_CLID_f0(x__) = 
					TimeOut_1(
						f0::entered -> Clock_CLID_f0(0)
						[]
						get_CLID_f0!x__ -> Clock_CLID_f0(x__)
						[]
						terminate -> SKIP,Clock_CLID_f0(Plus(x__,1,CLID_f0_clock_type)))
				Clock_CLID_s0(x__) = 
					TimeOut_1(
						s0::entered -> Clock_CLID_s0(0)
						[]
						get_CLID_s0!x__ -> Clock_CLID_s0(x__)
						[]
						terminate -> SKIP,Clock_CLID_s0(Plus(x__,1,CLID_s0_clock_type)))
				Clock_CLID_s1(x__) = 
					TimeOut_1(
						s1::entered -> Clock_CLID_s1(0)
						[]
						get_CLID_s1!x__ -> Clock_CLID_s1(x__)
						[]
						terminate -> SKIP,Clock_CLID_s1(Plus(x__,1,CLID_s1_clock_type)))
				
				StateClocks = dbisim(Clock_CLID_f0(0))
				[| { terminate } |] (
				dbisim(Clock_CLID_s0(0))
				[| { terminate } |] (
				dbisim(Clock_CLID_s1(0))
				)
				)
				
				stateClockSync = {|get_CLID_f0,f0::entered,get_CLID_s0,s0::entered,get_CLID_s1,s1::entered|}
				}
					endmodule
		-- compileOperationDef
		module OP_supplyVoltCheck
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i0|
			              NID_s0|
			              NID_f0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_power, set_power, setL_power, setR_power: Power
			channel get_setPoint, set_setPoint, setL_setPoint, setR_setPoint: core_real
			channel get_res, set_res, setL_res, setR_res: core_boolean
			channel get_errorFlag, set_errorFlag, setL_errorFlag, setR_errorFlag: core_boolean
			channel get_lim, set_lim, setL_lim, setR_lim: core_boolean
			channel get_supplyLim, set_supplyLim, setL_supplyLim, setR_supplyLim: core_boolean
			channel get_ActualHV, set_ActualHV, setL_ActualHV, setR_ActualHV: core_real
			channel get_errorAck, set_errorAck, setL_errorAck, setR_errorAck: core_boolean
			channel get_overLimit, set_overLimit, setL_overLimit, setR_overLimit: core_real
			channel get_underLimit, set_underLimit, setL_underLimit, setR_underLimit: core_real
			
			-- Shared variable channels
			channel set_EXT_setPoint: core_real
			channel set_EXT_res: core_boolean
			channel set_EXT_errorFlag: core_boolean
			channel set_EXT_lim: core_boolean
			channel set_EXT_supplyLim: core_boolean
			channel set_EXT_ActualHV: core_real
			channel set_EXT_errorAck: core_boolean
			channel set_EXT_overLimit: core_real
			channel set_EXT_underLimit: core_real
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel ext_setPoint__: NIDS.InOut.core_real
			channel ext_setPoint: InOut.core_real
			channel ext_pow24VStatus__: NIDS.InOut.Power
			channel ext_pow24VStatus: InOut.Power
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i0::enter,
			s0::enter,
			f0::enter
			|}
			
			enteredSS = 	{|
			s0::entered,
			f0::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
				set_EXT_setPoint,
				set_EXT_res,
				set_EXT_errorFlag,
				set_EXT_lim,
				set_EXT_supplyLim,
				set_EXT_ActualHV,
				set_EXT_errorAck,
				set_EXT_overLimit,
				set_EXT_underLimit
			|}
			
			channel clockReset, clockResetL, clockResetR 
			
			localClockResets = {||}
			
			
			channel get_CLID_f0 : CLID_f0_clock_type
			channel get_CLID_s0 : CLID_s0_clock_type
			
			--channel increment__
			
			CLID_f0_clock_type = {0..(clock_type_max(Union({
			{}
			}))+1)}
			CLID_s0_clock_type = {0..(clock_type_max(Union({
			{}
			}))+1)}
			
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: s0
				module s0
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					
					--channel increment__
					
					
					--	Nodes
					-- declaring all nodes
					
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
						
						-- Clocks
						
						StateClocks = terminate -> SKIP
						
						stateClockSync = {||}
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f0
				module f0
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
								
								Entering 	= entered -> SKIP ; Active
								Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
								Interrupted	= share__choice(exit -> exited -> Inactive)
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
			
				-- STM processes
				STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = get_power?power -> TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s0::enter -> SKIP))))
						 [] dbisim((ext_pow24VStatus__!NID_s0.in?power:{power|power <- Power, (power==Power_On)} -> share__choice(set_power!power -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; Deadline(share__choice(true & (share__choice(set_lim!false -> SKIP))),0) ; f0::enter -> SKIP)))
						 [] dbisim((ext_pow24VStatus__!NID_s0.in?power:{power|power <- Power, (power==Power_Off)} -> share__choice(set_power!power -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; Deadline(share__choice(true & (share__choice(set_lim!true -> SKIP))),0) ; f0::enter -> SKIP)))
						 []
						 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							s0::enter,
							f0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_i0,ext_pow24VStatus__.NID_s0.in,ext_pow24VStatus__.NID_s0.in|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i0::D__(id__)
								   		    [| { share__, terminate } |] (
								   		    s0::D__(id__)
								   		    [| { share__, terminate } |] (
								   		    f0::D__(id__)
								   		    )
								   		    )
								   		  )
								 )
								 [[s0::interrupt <- x__ | x__ <- {|interrupt,ext_pow24VStatus__.NID_s0.in,ext_pow24VStatus__.NID_s0.in|}]]
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__,setR_power |} ]] 
								  [[set_power <- setL_power]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_power
								 			,setR_power
								 			|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_power |} ]]
								  [[set_power <- setR_power]]
								 )
								)[[setL_power <- set_power]]
								 [[setR_power <- set_power]]
								)
							)
							 \ hideSet)
							[[
								ext_setPoint__.x____ <- ext_setPoint,
								ext_pow24VStatus__.x____ <- ext_pow24VStatus
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_f0,f0::entered,get_CLID_s0,s0::entered|}
					 within
						(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ union(stateClockSync,enteredSS)
					)
					)
				
				Stateful(id__) = 
					dbisim((let
						getsetLocalChannels = {|get_power,set_power|}
						clockSync = {||}
					within
						(Behaviour(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							s0::enter,
							f0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_i0,ext_pow24VStatus__.NID_s0.in,ext_pow24VStatus__.NID_s0.in|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i0::VS_O__(id__)
								   		    [| { share__, terminate } |] (
								   		    s0::VS_O__(id__)
								   		    [| { share__, terminate } |] (
								   		    f0::VS_O__(id__)
								   		    )
								   		    )
								   		  )
								 )
								 [[s0::interrupt <- x__ | x__ <- {|interrupt,ext_pow24VStatus__.NID_s0.in,ext_pow24VStatus__.NID_s0.in|}]]
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__,setR_power |} ]] 
								  [[set_power <- setL_power]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_power
								 			,setR_power
								 			|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_power |} ]]
								  [[set_power <- setR_power]]
								 )
								)[[setL_power <- set_power]]
								 [[setR_power <- set_power]]
								)
							)
							 \ hideSet)
							[[
								ext_setPoint__.x____ <- ext_setPoint,
								ext_pow24VStatus__.x____ <- ext_pow24VStatus
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_f0,f0::entered,get_CLID_s0,s0::entered|}
					 within
						(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				Stateful_VS_O(id__) = 
					dbisim((let
						getsetLocalChannels = {|get_power,set_power|}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
					
				-- END
				
				-- Memory
				-- Memory variables
				Memory_power(power) =
					get_power!power -> Memory_power(power)
					[]
					set_power?x__ -> Memory_power(x__)
					[]
					terminate -> SKIP
				
				-- varMemory process
				varMemory(id__) = Memory_power(Power_On)
				
				getsetLocalChannels = {|get_power,set_power|}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__) \ localClockResets
				D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
				O__(id__) = dbisim(D__(id__))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = dbisim(FVS__(id__))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
				HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks = terminate -> SKIP
				
				clockSync = {||}
				
				Clock_CLID_f0(x__) = 
					TimeOut_1(
						f0::entered -> Clock_CLID_f0(0)
						[]
						get_CLID_f0!x__ -> Clock_CLID_f0(x__)
						[]
						terminate -> SKIP,Clock_CLID_f0(Plus(x__,1,CLID_f0_clock_type)))
				Clock_CLID_s0(x__) = 
					TimeOut_1(
						s0::entered -> Clock_CLID_s0(0)
						[]
						get_CLID_s0!x__ -> Clock_CLID_s0(x__)
						[]
						terminate -> SKIP,Clock_CLID_s0(Plus(x__,1,CLID_s0_clock_type)))
				
				StateClocks = dbisim(Clock_CLID_f0(0))
				[| { terminate } |] (
				dbisim(Clock_CLID_s0(0))
				)
				
				stateClockSync = {|get_CLID_f0,f0::entered,get_CLID_s0,s0::entered|}
				}
					endmodule
		-- compileOperationDef
		module OP_checkLimits
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i0|
			              NID_s0|
			              NID_f0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_setPoint, set_setPoint, setL_setPoint, setR_setPoint: core_real
			channel get_res, set_res, setL_res, setR_res: core_boolean
			channel get_errorFlag, set_errorFlag, setL_errorFlag, setR_errorFlag: core_boolean
			channel get_lim, set_lim, setL_lim, setR_lim: core_boolean
			channel get_supplyLim, set_supplyLim, setL_supplyLim, setR_supplyLim: core_boolean
			channel get_ActualHV, set_ActualHV, setL_ActualHV, setR_ActualHV: core_real
			channel get_errorAck, set_errorAck, setL_errorAck, setR_errorAck: core_boolean
			channel get_overLimit, set_overLimit, setL_overLimit, setR_overLimit: core_real
			channel get_underLimit, set_underLimit, setL_underLimit, setR_underLimit: core_real
			
			-- Shared variable channels
			channel set_EXT_setPoint: core_real
			channel set_EXT_res: core_boolean
			channel set_EXT_errorFlag: core_boolean
			channel set_EXT_lim: core_boolean
			channel set_EXT_supplyLim: core_boolean
			channel set_EXT_ActualHV: core_real
			channel set_EXT_errorAck: core_boolean
			channel set_EXT_overLimit: core_real
			channel set_EXT_underLimit: core_real
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel ext_setPoint__: NIDS.InOut.core_real
			channel ext_setPoint: InOut.core_real
			channel ext_pow24VStatus__: NIDS.InOut.Power
			channel ext_pow24VStatus: InOut.Power
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i0::enter,
			s0::enter,
			f0::enter
			|}
			
			enteredSS = 	{|
			s0::entered,
			f0::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
				set_EXT_setPoint,
				set_EXT_res,
				set_EXT_errorFlag,
				set_EXT_lim,
				set_EXT_supplyLim,
				set_EXT_ActualHV,
				set_EXT_errorAck,
				set_EXT_overLimit,
				set_EXT_underLimit
			|}
			
			channel clockReset, clockResetL, clockResetR 
			
			localClockResets = {||}
			
			
			channel get_CLID_f0 : CLID_f0_clock_type
			channel get_CLID_s0 : CLID_s0_clock_type
			
			--channel increment__
			
			CLID_f0_clock_type = {0..(clock_type_max(Union({
			{}
			}))+1)}
			CLID_s0_clock_type = {0..(clock_type_max(Union({
			{}
			}))+1)}
			
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: s0
				module s0
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					
					--channel increment__
					
					
					--	Nodes
					-- declaring all nodes
					
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
						
						-- Clocks
						
						StateClocks = terminate -> SKIP
						
						stateClockSync = {||}
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f0
				module f0
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
								
								Entering 	= entered -> SKIP ; Active
								Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
								Interrupted	= share__choice(exit -> exited -> Inactive)
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
			
				-- STM processes
				STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = get_ActualHV?ActualHV -> get_overLimit?overLimit -> get_underLimit?underLimit -> TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s0::enter -> SKIP))))
						 [] dbisim((((ActualHV<=overLimit) and (ActualHV>=underLimit)))&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; Deadline(share__choice(true & (share__choice(set_lim!false -> SKIP))),0) ; f0::enter -> SKIP)))
						 [] dbisim((((ActualHV<underLimit) or (ActualHV>overLimit)))&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; Deadline(share__choice(true & (share__choice(set_lim!true -> SKIP))),0) ; f0::enter -> SKIP)))
						 []
						 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							s0::enter,
							f0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_i0,internal__.NID_s0,internal__.NID_s0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i0::D__(id__)
								   		    [| { share__, terminate } |] (
								   		    s0::D__(id__)
								   		    [| { share__, terminate } |] (
								   		    f0::D__(id__)
								   		    )
								   		    )
								   		  )
								 )
								 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0,internal__.NID_s0|}]]
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[set_ActualHV <- setL_ActualHV,set_overLimit <- setL_overLimit,set_underLimit <- setL_underLimit]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_ActualHV
								 			,setL_overLimit
								 			,setL_underLimit
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_ActualHV,setL_overLimit,setL_underLimit |} ]]
								 )
								)[[setL_ActualHV <- set_ActualHV,setL_overLimit <- set_overLimit,setL_underLimit <- set_underLimit]]
								)
							)
							 \ hideSet)
							[[
								ext_setPoint__.x____ <- ext_setPoint,
								ext_pow24VStatus__.x____ <- ext_pow24VStatus
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_f0,f0::entered,get_CLID_s0,s0::entered|}
					 within
						(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ union(stateClockSync,enteredSS)
					)
					)
				
				Stateful(id__) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							s0::enter,
							f0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_i0,internal__.NID_s0,internal__.NID_s0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i0::VS_O__(id__)
								   		    [| { share__, terminate } |] (
								   		    s0::VS_O__(id__)
								   		    [| { share__, terminate } |] (
								   		    f0::VS_O__(id__)
								   		    )
								   		    )
								   		  )
								 )
								 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0,internal__.NID_s0|}]]
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[set_ActualHV <- setL_ActualHV,set_overLimit <- setL_overLimit,set_underLimit <- setL_underLimit]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_ActualHV
								 			,setL_overLimit
								 			,setL_underLimit
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_ActualHV,setL_overLimit,setL_underLimit |} ]]
								 )
								)[[setL_ActualHV <- set_ActualHV,setL_overLimit <- set_overLimit,setL_underLimit <- set_underLimit]]
								)
							)
							 \ hideSet)
							[[
								ext_setPoint__.x____ <- ext_setPoint,
								ext_pow24VStatus__.x____ <- ext_pow24VStatus
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_f0,f0::entered,get_CLID_s0,s0::entered|}
					 within
						(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				Stateful_VS_O(id__) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
					
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__) \ localClockResets
				D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
				O__(id__) = dbisim(D__(id__))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = dbisim(FVS__(id__))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
				HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks = terminate -> SKIP
				
				clockSync = {||}
				
				Clock_CLID_f0(x__) = 
					TimeOut_1(
						f0::entered -> Clock_CLID_f0(0)
						[]
						get_CLID_f0!x__ -> Clock_CLID_f0(x__)
						[]
						terminate -> SKIP,Clock_CLID_f0(Plus(x__,1,CLID_f0_clock_type)))
				Clock_CLID_s0(x__) = 
					TimeOut_1(
						s0::entered -> Clock_CLID_s0(0)
						[]
						get_CLID_s0!x__ -> Clock_CLID_s0(x__)
						[]
						terminate -> SKIP,Clock_CLID_s0(Plus(x__,1,CLID_s0_clock_type)))
				
				StateClocks = dbisim(Clock_CLID_f0(0))
				[| { terminate } |] (
				dbisim(Clock_CLID_s0(0))
				)
				
				stateClockSync = {|get_CLID_f0,f0::entered,get_CLID_s0,s0::entered|}
				}
					endmodule
	
		-- declaring machines
		module stm_ref0
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
		
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_Ramping|
			              NID_Init|
			              NID_Wait24Vpower|
			              NID_ClosedLoop|
			              NID_ErrorMode|
			              NID_i0|
			              NID_j0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_power, set_power, setL_power, setR_power: Power
			channel get_setPoint, set_setPoint, setL_setPoint, setR_setPoint: core_real
			channel get_res, set_res, setL_res, setR_res: core_boolean
			channel get_errorFlag, set_errorFlag, setL_errorFlag, setR_errorFlag: core_boolean
			channel get_lim, set_lim, setL_lim, setR_lim: core_boolean
			channel get_supplyLim, set_supplyLim, setL_supplyLim, setR_supplyLim: core_boolean
			channel get_ActualHV, set_ActualHV, setL_ActualHV, setR_ActualHV: core_real
			channel get_errorAck, set_errorAck, setL_errorAck, setR_errorAck: core_boolean
			channel get_overLimit, set_overLimit, setL_overLimit, setR_overLimit: core_real
			channel get_underLimit, set_underLimit, setL_underLimit, setR_underLimit: core_real
			
			-- Shared variable channels
			
			-- Local variable channels for defined operations that are required by the state machine
			channel get_supplyVoltCheck_power, set_supplyVoltCheck_power: Power
			
			-- Declaring state machine events
			channel currentState__: NIDS.InOut.State
			channel currentState: InOut.State
			channel ext_setPoint__: NIDS.InOut.core_real
			channel ext_setPoint: InOut.core_real
			channel ext_pow24VStatus__: NIDS.InOut.Power
			channel ext_pow24VStatus: InOut.Power
			channel int_overLimit__: NIDS.InOut.core_real
			channel int_overLimit: InOut.core_real
			channel int_pwmSignal__: NIDS.InOut.Power
			channel int_pwmSignal: InOut.Power
			channel int_underLimit__: NIDS.InOut.core_real
			channel int_underLimit: InOut.core_real
			channel int_DisableHV__: NIDS.InOut
			channel int_DisableHV: InOut
			channel int_ActualHV__: NIDS.InOut.core_real
			channel int_ActualHV: InOut.core_real
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			Ramping::enter,
			Init::enter,
			Wait24Vpower::enter,
			ClosedLoop::enter,
			ErrorMode::enter,
			i0::enter,
			j0::enter
			|}
			
			enteredSS = 	{|
			Ramping::entered,
			Init::entered,
			Wait24Vpower::entered,
			ClosedLoop::entered,
			ErrorMode::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
			|}
			datatype ClockSet = 
				CLID_Cl1
			
			channel clockReset, clockResetL, clockResetR : ClockSet
			
			localClockResets = {|clockReset.CLID_Cl1|}
			
			
			channel get_CLID_ClosedLoop : CLID_ClosedLoop_clock_type
			channel get_CLID_Init : CLID_Init_clock_type
			channel get_CLID_Ramping : CLID_Ramping_clock_type
			channel get_CLID_Wait24Vpower : CLID_Wait24Vpower_clock_type
			channel get_CLID_ErrorMode : CLID_ErrorMode_clock_type
			channel get_CLID_Cl1 : CLID_Cl1_clock_type
			
			--channel increment__
			
			CLID_ClosedLoop_clock_type = {0..(clock_type_max(Union({
			{}
			}))+1)}
			CLID_Init_clock_type = {0..(clock_type_max(Union({
			{}
			}))+1)}
			CLID_Ramping_clock_type = {0..(clock_type_max(Union({
			{},
			({1})
			}))+1)}
			CLID_Wait24Vpower_clock_type = {0..(clock_type_max(Union({
			{}
			}))+1)}
			CLID_ErrorMode_clock_type = {0..(clock_type_max(Union({
			{}
			}))+1)}
			CLID_Cl1_clock_type = {0..(clock_type_max(Union({
			{}
			}))+1)}
			
		
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- State: Ramping
				module Ramping
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					
					--channel increment__
					
					
					--	Nodes
					-- declaring all nodes
					
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&(share__choice(currentState.out!State_Ramp -> SKIP)) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&(share__choice(currentState.out!State_Ramp -> SKIP)) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
						
						-- Clocks
						
						StateClocks = terminate -> SKIP
						
						stateClockSync = {||}
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: Init
				module Init
				
				enterSS = 
						{|			i0::enter,
							si0::enter
						|}
				enteredSS = 
						{|			si0::entered
						|}
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					-- declaring identifiers of transitions
					datatype NIDS = 
					              NID_i0|
					              NID_si0
					
					channel internal__ : NIDS
					channel currentState__: NIDS.InOut.State
					channel ext_setPoint__: NIDS.InOut.core_real
					channel ext_pow24VStatus__: NIDS.InOut.Power
					channel int_overLimit__: NIDS.InOut.core_real
					channel int_pwmSignal__: NIDS.InOut.Power
					channel int_underLimit__: NIDS.InOut.core_real
					channel int_DisableHV__: NIDS.InOut
					channel int_ActualHV__: NIDS.InOut.core_real
					
					channel get_CLID_si0 : CLID_si0_clock_type
					
					--channel increment__
					
					CLID_si0_clock_type = {0..(clock_type_max(Union({
					}))+1)}
					
					--	Nodes
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: si0
					module si0
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= Deadline(share__choice(share__choice(get_setPoint?setPoint -> true & (share__choice(set_overLimit!overLimitF(Plus(setPoint, 2, core_real)) -> SKIP)))),0);Deadline(share__choice(share__choice(get_setPoint?setPoint -> true & (share__choice(set_underLimit!underLimitF(Minus(setPoint, 2, core_real)) -> SKIP)))),0);share__choice(get_underLimit?underLimit -> true&(share__choice(int_underLimit.out!underLimit -> SKIP)));share__choice(get_overLimit?overLimit -> true&(share__choice(int_overLimit.out!overLimit -> SKIP))) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= Deadline(share__choice(share__choice(get_setPoint?setPoint -> true & (share__choice(set_overLimit!overLimitF(Plus(setPoint, 2, core_real)) -> SKIP)))),0);Deadline(share__choice(share__choice(get_setPoint?setPoint -> true & (share__choice(set_underLimit!underLimitF(Minus(setPoint, 2, core_real)) -> SKIP)))),0);share__choice(get_underLimit?underLimit -> true&(share__choice(int_underLimit.out!underLimit -> SKIP)));share__choice(get_overLimit?overLimit -> true&(share__choice(int_overLimit.out!overLimit -> SKIP))) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&(share__choice(currentState.out!State_Init -> SKIP));true&CALL__disableHV(
										id__,
										false
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
						
							Behaviour 	= dbisim(
								((
								 ((dbisim((dbisim((let
								 	-- IMPLEMENTATION NOTE:
								 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								 	-- modules for defining the semantics of each node.
								 	enterSS = {|
								 	i0::enter,
								 	si0::enter
								 	|}
								 	hideSet = union(enterSS,{|exit,exited,internal__|})
								 within 
								 	((let
								 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								 		-- because CSPM modules are used for the semantics of Node.
								 		flowevts = union(enterSS,{|exit,exited|})
								 		transSync = {|internal__.NID_i0|}
								 	within
								 		((
								 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								 		   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								 		   		    i0::D__(id__)
								 		   		    [| { share__, terminate } |] (
								 		   		    si0::D__(id__)
								 		   		    )
								 		   		  )
								 		 )
								 		 [[si0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 		 )
								 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 		 )
								 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 		|}) |]
								 		 ((i0::enter -> Transitions(id__))
								 		  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 		 )
								 		)
								 		)
								 	)
								 	 \ hideSet)
								 	[[
								 		currentState__.x____ <- currentState,
								 		ext_setPoint__.x____ <- ext_setPoint,
								 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								 		int_overLimit__.x____ <- int_overLimit,
								 		int_pwmSignal__.x____ <- int_pwmSignal,
								 		int_underLimit__.x____ <- int_underLimit,
								 		int_DisableHV__.x____ <- int_DisableHV,
								 		int_ActualHV__.x____ <- int_ActualHV
								 		| x____ <- NIDS
								 	]]
								 )
								 )
								  [| union(stateClockSync,{terminate}) |]
								  StateClocks
								 )\diff(stateClockSync,enteredSS)))
								  [[ share__ <- x__ | x__ <- {| share__,setR_ActualHV,setR_power,setR_supplyLim,setR_overLimit,setR_underLimit,setR_res,setR_errorFlag,setR_lim,setR_setPoint,setR_errorAck |} ]] 
								  [[set_ActualHV <- setL_ActualHV,set_power <- setL_power,set_supplyLim <- setL_supplyLim,set_overLimit <- setL_overLimit,set_underLimit <- setL_underLimit,set_res <- setL_res,set_errorFlag <- setL_errorFlag,set_lim <- setL_lim,set_setPoint <- setL_setPoint,set_errorAck <- setL_errorAck]]
								 )
								 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
								 			,setL_ActualHV
								 			,setL_power
								 			,setL_supplyLim
								 			,setL_overLimit
								 			,setL_underLimit
								 			,setL_res
								 			,setL_errorFlag
								 			,setL_lim
								 			,setL_setPoint
								 			,setL_errorAck
								 			,setR_ActualHV
								 			 			,setR_power
								 			 			,setR_supplyLim
								 			 			,setR_overLimit
								 			 			,setR_underLimit
								 			 			,setR_res
								 			 			,setR_errorFlag
								 			 			,setR_lim
								 			 			,setR_setPoint
								 			 			,setR_errorAck
								 			|}) |]
								 ((During)
								  [[ share__ <- x__ | x__ <- {| share__,setL_ActualHV,setL_power,setL_supplyLim,setL_overLimit,setL_underLimit,setL_res,setL_errorFlag,setL_lim,setL_setPoint,setL_errorAck |} ]]
								  [[set_ActualHV <- setR_ActualHV,set_power <- setR_power,set_supplyLim <- setR_supplyLim,set_overLimit <- setR_overLimit,set_underLimit <- setR_underLimit,set_res <- setR_res,set_errorFlag <- setR_errorFlag,set_lim <- setR_lim,set_setPoint <- setR_setPoint,set_errorAck <- setR_errorAck]]
								 )
								)[[setL_ActualHV <- set_ActualHV,setL_power <- set_power,setL_supplyLim <- set_supplyLim,setL_overLimit <- set_overLimit,setL_underLimit <- set_underLimit,setL_res <- set_res,setL_errorFlag <- set_errorFlag,setL_lim <- set_lim,setL_setPoint <- set_setPoint,setL_errorAck <- set_errorAck]]
								 [[setR_ActualHV <- set_ActualHV,setR_power <- set_power,setR_supplyLim <- set_supplyLim,setR_overLimit <- set_overLimit,setR_underLimit <- set_underLimit,setR_res <- set_res,setR_errorFlag <- set_errorFlag,setR_lim <- set_lim,setR_setPoint <- set_setPoint,setR_errorAck <- set_errorAck]]
								)\union(enteredSS,{terminate}) 
							)
							During 		= share__choice(([] e : enteredSS @ e -> SKIP))
									 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> terminate -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&(share__choice(currentState.out!State_Init -> SKIP));true&CALL__disableHV(
										id__,
										false
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
						
							Behaviour 	= dbisim(
								((
								 ((dbisim((dbisim((let
								 	-- IMPLEMENTATION NOTE:
								 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								 	-- modules for defining the semantics of each node.
								 	enterSS = {|
								 	i0::enter,
								 	si0::enter
								 	|}
								 	hideSet = union(enterSS,{|exit,exited,internal__|})
								 within 
								 	((let
								 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								 		-- because CSPM modules are used for the semantics of Node.
								 		flowevts = union(enterSS,{|exit,exited|})
								 		transSync = {|internal__.NID_i0|}
								 	within
								 		((
								 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								 		   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								 		   		    i0::VS_O__(id__)
								 		   		    [| { share__, terminate } |] (
								 		   		    si0::VS_O__(id__)
								 		   		    )
								 		   		  )
								 		 )
								 		 [[si0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 		 )
								 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 		 )
								 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 		|}) |]
								 		 ((i0::enter -> Transitions(id__))
								 		  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 		 )
								 		)
								 		)
								 	)
								 	 \ hideSet)
								 	[[
								 		currentState__.x____ <- currentState,
								 		ext_setPoint__.x____ <- ext_setPoint,
								 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								 		int_overLimit__.x____ <- int_overLimit,
								 		int_pwmSignal__.x____ <- int_pwmSignal,
								 		int_underLimit__.x____ <- int_underLimit,
								 		int_DisableHV__.x____ <- int_DisableHV,
								 		int_ActualHV__.x____ <- int_ActualHV
								 		| x____ <- NIDS
								 	]]
								 )
								 )
								  [| union(stateClockSync,{terminate}) |]
								  StateClocks
								 )\diff(stateClockSync,enteredSS)))
								  [[ share__ <- x__ | x__ <- {| share__,setR_ActualHV,setR_power,setR_supplyLim,setR_overLimit,setR_underLimit,setR_res,setR_errorFlag,setR_lim,setR_setPoint,setR_errorAck |} ]] 
								  [[set_ActualHV <- setL_ActualHV,set_power <- setL_power,set_supplyLim <- setL_supplyLim,set_overLimit <- setL_overLimit,set_underLimit <- setL_underLimit,set_res <- setL_res,set_errorFlag <- setL_errorFlag,set_lim <- setL_lim,set_setPoint <- setL_setPoint,set_errorAck <- setL_errorAck]]
								 )
								 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
								 			,setL_ActualHV
								 			,setL_power
								 			,setL_supplyLim
								 			,setL_overLimit
								 			,setL_underLimit
								 			,setL_res
								 			,setL_errorFlag
								 			,setL_lim
								 			,setL_setPoint
								 			,setL_errorAck
								 			,setR_ActualHV
								 			 			,setR_power
								 			 			,setR_supplyLim
								 			 			,setR_overLimit
								 			 			,setR_underLimit
								 			 			,setR_res
								 			 			,setR_errorFlag
								 			 			,setR_lim
								 			 			,setR_setPoint
								 			 			,setR_errorAck
								 			|}) |]
								 ((During)
								  [[ share__ <- x__ | x__ <- {| share__,setL_ActualHV,setL_power,setL_supplyLim,setL_overLimit,setL_underLimit,setL_res,setL_errorFlag,setL_lim,setL_setPoint,setL_errorAck |} ]]
								  [[set_ActualHV <- setR_ActualHV,set_power <- setR_power,set_supplyLim <- setR_supplyLim,set_overLimit <- setR_overLimit,set_underLimit <- setR_underLimit,set_res <- setR_res,set_errorFlag <- setR_errorFlag,set_lim <- setR_lim,set_setPoint <- setR_setPoint,set_errorAck <- setR_errorAck]]
								 )
								)[[setL_ActualHV <- set_ActualHV,setL_power <- set_power,setL_supplyLim <- set_supplyLim,setL_overLimit <- set_overLimit,setL_underLimit <- set_underLimit,setL_res <- set_res,setL_errorFlag <- set_errorFlag,setL_lim <- set_lim,setL_setPoint <- set_setPoint,setL_errorAck <- set_errorAck]]
								 [[setR_ActualHV <- set_ActualHV,setR_power <- set_power,setR_supplyLim <- set_supplyLim,setR_overLimit <- set_overLimit,setR_underLimit <- set_underLimit,setR_res <- set_res,setR_errorFlag <- set_errorFlag,setR_lim <- set_lim,setR_setPoint <- set_setPoint,setR_errorAck <- set_errorAck]]
								)\{terminate} 
							)
							During 		= share__choice(([] e : enteredSS @ e -> SKIP))
									 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> terminate -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
						Transitions(id__) = ((let
							Trans = TimeOut_1(
								 (share__ -> SKIP
								 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((true&(share__choice(ext_setPoint.in?setPoint -> (SStop /\ set_setPoint!setPoint -> SKIP))) ; si0::enter -> SKIP))))
								 []
								 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
								 []
								 terminate -> SKIP
								 )
							,SKIP);Trans
						within
							Trans [|{terminate}|> SKIP
						)
						)
						
						
						-- Clocks
						Clock_CLID_si0(x__) = 
							TimeOut_1(
								si0::entered -> Clock_CLID_si0(0)
								[]
								get_CLID_si0!x__ -> Clock_CLID_si0(x__)
								[]
								terminate -> SKIP,Clock_CLID_si0(Plus(x__,1,CLID_si0_clock_type)))
						
						StateClocks = dbisim(Clock_CLID_si0(0))
						
						stateClockSync = {|get_CLID_si0,si0::entered|}
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: Wait24Vpower
				module Wait24Vpower
				
				enterSS = 
						{|			i0::enter,
							si0::enter,
							s1::enter
						|}
				enteredSS = 
						{|			si0::entered,
							s1::entered
						|}
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					-- declaring identifiers of transitions
					datatype NIDS = 
					              NID_i0|
					              NID_si0|
					              NID_s1
					
					channel internal__ : NIDS
					channel currentState__: NIDS.InOut.State
					channel ext_setPoint__: NIDS.InOut.core_real
					channel ext_pow24VStatus__: NIDS.InOut.Power
					channel int_overLimit__: NIDS.InOut.core_real
					channel int_pwmSignal__: NIDS.InOut.Power
					channel int_underLimit__: NIDS.InOut.core_real
					channel int_DisableHV__: NIDS.InOut
					channel int_ActualHV__: NIDS.InOut.core_real
					
					channel get_CLID_s1 : CLID_s1_clock_type
					channel get_CLID_si0 : CLID_si0_clock_type
					
					--channel increment__
					
					CLID_s1_clock_type = {0..(clock_type_max(Union({
					{}
					}))+1)}
					CLID_si0_clock_type = {0..(clock_type_max(Union({
					{}
					}))+1)}
					
					--	Nodes
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: si0
					module si0
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&CALL__supplyVoltCheck(
											id__
										) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&CALL__supplyVoltCheck(
											id__
										) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: s1
					module s1
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&CALL__disableHV(
											id__,
											true
										) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&CALL__disableHV(
											id__,
											true
										) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&(share__choice(currentState.out!State_Wait24Vpower -> SKIP));true&CALL__disableHV(
										id__,
										false
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
						
							Behaviour 	= dbisim(
								((
								 ((dbisim((dbisim((let
								 	-- IMPLEMENTATION NOTE:
								 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								 	-- modules for defining the semantics of each node.
								 	enterSS = {|
								 	i0::enter,
								 	si0::enter,
								 	s1::enter
								 	|}
								 	hideSet = union(enterSS,{|exit,exited,internal__|})
								 within 
								 	((let
								 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								 		-- because CSPM modules are used for the semantics of Node.
								 		flowevts = union(enterSS,{|exit,exited|})
								 		transSync = {|internal__.NID_i0,internal__.NID_si0|}
								 	within
								 		((
								 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								 		   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								 		   		    i0::D__(id__)
								 		   		    [| { share__, terminate } |] (
								 		   		    si0::D__(id__)
								 		   		    [| { share__, terminate } |] (
								 		   		    s1::D__(id__)
								 		   		    )
								 		   		    )
								 		   		  )
								 		 )
								 		 [[si0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_si0|}]]
								 		 [[s1::interrupt <- x__ | x__ <- {|interrupt|}]]
								 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 		 )
								 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 		  [[set_lim <- setL_lim,set_setPoint <- setL_setPoint]]
								 		 )
								 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 		 			,setL_lim
								 		 			,setL_setPoint
								 		|}) |]
								 		 ((i0::enter -> Transitions(id__))
								 		  [[ share__ <- x__ | x__ <- {| share__,setL_lim,setL_setPoint |} ]]
								 		 )
								 		)[[setL_lim <- set_lim,setL_setPoint <- set_setPoint]]
								 		)
								 	)
								 	 \ hideSet)
								 	[[
								 		currentState__.x____ <- currentState,
								 		ext_setPoint__.x____ <- ext_setPoint,
								 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								 		int_overLimit__.x____ <- int_overLimit,
								 		int_pwmSignal__.x____ <- int_pwmSignal,
								 		int_underLimit__.x____ <- int_underLimit,
								 		int_DisableHV__.x____ <- int_DisableHV,
								 		int_ActualHV__.x____ <- int_ActualHV
								 		| x____ <- NIDS
								 	]]
								 )
								 )
								  [| union(stateClockSync,{terminate}) |]
								  StateClocks
								 )\diff(stateClockSync,enteredSS)))
								  [[ share__ <- x__ | x__ <- {| share__,setR_ActualHV,setR_power,setR_supplyLim,setR_overLimit,setR_underLimit,setR_res,setR_lim,setR_errorFlag,setR_setPoint,setR_errorAck |} ]] 
								  [[set_ActualHV <- setL_ActualHV,set_power <- setL_power,set_supplyLim <- setL_supplyLim,set_overLimit <- setL_overLimit,set_underLimit <- setL_underLimit,set_res <- setL_res,set_errorFlag <- setL_errorFlag,set_lim <- setL_lim,set_setPoint <- setL_setPoint,set_errorAck <- setL_errorAck]]
								 )
								 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
								 			,setL_ActualHV
								 			,setL_power
								 			,setL_supplyLim
								 			,setL_overLimit
								 			,setL_underLimit
								 			,setL_res
								 			,setL_errorFlag
								 			,setL_lim
								 			,setL_setPoint
								 			,setL_errorAck
								 			,setR_ActualHV
								 			 			,setR_power
								 			 			,setR_supplyLim
								 			 			,setR_overLimit
								 			 			,setR_underLimit
								 			 			,setR_res
								 			 			,setR_lim
								 			 			,setR_errorFlag
								 			 			,setR_setPoint
								 			 			,setR_errorAck
								 			|}) |]
								 ((During)
								  [[ share__ <- x__ | x__ <- {| share__,setL_ActualHV,setL_power,setL_supplyLim,setL_overLimit,setL_underLimit,setL_res,setL_errorFlag,setL_lim,setL_setPoint,setL_errorAck |} ]]
								  [[set_ActualHV <- setR_ActualHV,set_power <- setR_power,set_supplyLim <- setR_supplyLim,set_overLimit <- setR_overLimit,set_underLimit <- setR_underLimit,set_res <- setR_res,set_lim <- setR_lim,set_errorFlag <- setR_errorFlag,set_setPoint <- setR_setPoint,set_errorAck <- setR_errorAck]]
								 )
								)[[setL_ActualHV <- set_ActualHV,setL_power <- set_power,setL_supplyLim <- set_supplyLim,setL_overLimit <- set_overLimit,setL_underLimit <- set_underLimit,setL_res <- set_res,setL_errorFlag <- set_errorFlag,setL_lim <- set_lim,setL_setPoint <- set_setPoint,setL_errorAck <- set_errorAck]]
								 [[setR_ActualHV <- set_ActualHV,setR_power <- set_power,setR_supplyLim <- set_supplyLim,setR_overLimit <- set_overLimit,setR_underLimit <- set_underLimit,setR_res <- set_res,setR_lim <- set_lim,setR_errorFlag <- set_errorFlag,setR_setPoint <- set_setPoint,setR_errorAck <- set_errorAck]]
								)\union(enteredSS,{terminate}) 
							)
							During 		= share__choice(([] e : enteredSS @ e -> SKIP))
									 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> terminate -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&(share__choice(currentState.out!State_Wait24Vpower -> SKIP));true&CALL__disableHV(
										id__,
										false
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
						
							Behaviour 	= dbisim(
								((
								 ((dbisim((dbisim((let
								 	-- IMPLEMENTATION NOTE:
								 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								 	-- modules for defining the semantics of each node.
								 	enterSS = {|
								 	i0::enter,
								 	si0::enter,
								 	s1::enter
								 	|}
								 	hideSet = union(enterSS,{|exit,exited,internal__|})
								 within 
								 	((let
								 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								 		-- because CSPM modules are used for the semantics of Node.
								 		flowevts = union(enterSS,{|exit,exited|})
								 		transSync = {|internal__.NID_i0,internal__.NID_si0|}
								 	within
								 		((
								 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								 		   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								 		   		    i0::VS_O__(id__)
								 		   		    [| { share__, terminate } |] (
								 		   		    si0::VS_O__(id__)
								 		   		    [| { share__, terminate } |] (
								 		   		    s1::VS_O__(id__)
								 		   		    )
								 		   		    )
								 		   		  )
								 		 )
								 		 [[si0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_si0|}]]
								 		 [[s1::interrupt <- x__ | x__ <- {|interrupt|}]]
								 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 		 )
								 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 		  [[set_lim <- setL_lim,set_setPoint <- setL_setPoint]]
								 		 )
								 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 		 			,setL_lim
								 		 			,setL_setPoint
								 		|}) |]
								 		 ((i0::enter -> Transitions(id__))
								 		  [[ share__ <- x__ | x__ <- {| share__,setL_lim,setL_setPoint |} ]]
								 		 )
								 		)[[setL_lim <- set_lim,setL_setPoint <- set_setPoint]]
								 		)
								 	)
								 	 \ hideSet)
								 	[[
								 		currentState__.x____ <- currentState,
								 		ext_setPoint__.x____ <- ext_setPoint,
								 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								 		int_overLimit__.x____ <- int_overLimit,
								 		int_pwmSignal__.x____ <- int_pwmSignal,
								 		int_underLimit__.x____ <- int_underLimit,
								 		int_DisableHV__.x____ <- int_DisableHV,
								 		int_ActualHV__.x____ <- int_ActualHV
								 		| x____ <- NIDS
								 	]]
								 )
								 )
								  [| union(stateClockSync,{terminate}) |]
								  StateClocks
								 )\diff(stateClockSync,enteredSS)))
								  [[ share__ <- x__ | x__ <- {| share__,setR_ActualHV,setR_power,setR_supplyLim,setR_overLimit,setR_underLimit,setR_res,setR_lim,setR_errorFlag,setR_setPoint,setR_errorAck |} ]] 
								  [[set_ActualHV <- setL_ActualHV,set_power <- setL_power,set_supplyLim <- setL_supplyLim,set_overLimit <- setL_overLimit,set_underLimit <- setL_underLimit,set_res <- setL_res,set_errorFlag <- setL_errorFlag,set_lim <- setL_lim,set_setPoint <- setL_setPoint,set_errorAck <- setL_errorAck]]
								 )
								 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
								 			,setL_ActualHV
								 			,setL_power
								 			,setL_supplyLim
								 			,setL_overLimit
								 			,setL_underLimit
								 			,setL_res
								 			,setL_errorFlag
								 			,setL_lim
								 			,setL_setPoint
								 			,setL_errorAck
								 			,setR_ActualHV
								 			 			,setR_power
								 			 			,setR_supplyLim
								 			 			,setR_overLimit
								 			 			,setR_underLimit
								 			 			,setR_res
								 			 			,setR_lim
								 			 			,setR_errorFlag
								 			 			,setR_setPoint
								 			 			,setR_errorAck
								 			|}) |]
								 ((During)
								  [[ share__ <- x__ | x__ <- {| share__,setL_ActualHV,setL_power,setL_supplyLim,setL_overLimit,setL_underLimit,setL_res,setL_errorFlag,setL_lim,setL_setPoint,setL_errorAck |} ]]
								  [[set_ActualHV <- setR_ActualHV,set_power <- setR_power,set_supplyLim <- setR_supplyLim,set_overLimit <- setR_overLimit,set_underLimit <- setR_underLimit,set_res <- setR_res,set_lim <- setR_lim,set_errorFlag <- setR_errorFlag,set_setPoint <- setR_setPoint,set_errorAck <- setR_errorAck]]
								 )
								)[[setL_ActualHV <- set_ActualHV,setL_power <- set_power,setL_supplyLim <- set_supplyLim,setL_overLimit <- set_overLimit,setL_underLimit <- set_underLimit,setL_res <- set_res,setL_errorFlag <- set_errorFlag,setL_lim <- set_lim,setL_setPoint <- set_setPoint,setL_errorAck <- set_errorAck]]
								 [[setR_ActualHV <- set_ActualHV,setR_power <- set_power,setR_supplyLim <- set_supplyLim,setR_overLimit <- set_overLimit,setR_underLimit <- set_underLimit,setR_res <- set_res,setR_lim <- set_lim,setR_errorFlag <- set_errorFlag,setR_setPoint <- set_setPoint,setR_errorAck <- set_errorAck]]
								)\{terminate} 
							)
							During 		= share__choice(([] e : enteredSS @ e -> SKIP))
									 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> terminate -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
						Transitions(id__) = ((let
							Trans = get_lim?lim -> get_setPoint?setPoint -> TimeOut_1(
								 (share__ -> SKIP
								 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((true&(share__choice(ext_setPoint.in?setPoint -> (SStop /\ set_setPoint!setPoint -> SKIP))) ; si0::enter -> SKIP))))
								 [] dbisim((((setPoint!=0) or (lim==true)))&(internal__!NID_si0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s1::enter -> SKIP)))
								 []
								 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
								 []
								 terminate -> SKIP
								 )
							,SKIP);Trans
						within
							Trans [|{terminate}|> SKIP
						)
						)
						
						
						-- Clocks
						Clock_CLID_s1(x__) = 
							TimeOut_1(
								s1::entered -> Clock_CLID_s1(0)
								[]
								get_CLID_s1!x__ -> Clock_CLID_s1(x__)
								[]
								terminate -> SKIP,Clock_CLID_s1(Plus(x__,1,CLID_s1_clock_type)))
						Clock_CLID_si0(x__) = 
							TimeOut_1(
								si0::entered -> Clock_CLID_si0(0)
								[]
								get_CLID_si0!x__ -> Clock_CLID_si0(x__)
								[]
								terminate -> SKIP,Clock_CLID_si0(Plus(x__,1,CLID_si0_clock_type)))
						
						StateClocks = dbisim(Clock_CLID_s1(0))
						[| { terminate } |] (
						dbisim(Clock_CLID_si0(0))
						)
						
						stateClockSync = {|get_CLID_s1,s1::entered,get_CLID_si0,si0::entered|}
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: ClosedLoop
				module ClosedLoop
				
				enterSS = 
						{|			i0::enter,
							s1::enter,
							s2::enter,
							s3::enter,
							s4::enter
						|}
				enteredSS = 
						{|			s1::entered,
							s2::entered,
							s3::entered,
							s4::entered
						|}
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					-- declaring identifiers of transitions
					datatype NIDS = 
					              NID_i0|
					              NID_s1|
					              NID_s2|
					              NID_s3|
					              NID_s4
					
					channel internal__ : NIDS
					channel currentState__: NIDS.InOut.State
					channel ext_setPoint__: NIDS.InOut.core_real
					channel ext_pow24VStatus__: NIDS.InOut.Power
					channel int_overLimit__: NIDS.InOut.core_real
					channel int_pwmSignal__: NIDS.InOut.Power
					channel int_underLimit__: NIDS.InOut.core_real
					channel int_DisableHV__: NIDS.InOut
					channel int_ActualHV__: NIDS.InOut.core_real
					
					channel get_CLID_s4 : CLID_s4_clock_type
					channel get_CLID_s1 : CLID_s1_clock_type
					channel get_CLID_s3 : CLID_s3_clock_type
					channel get_CLID_s2 : CLID_s2_clock_type
					
					--channel increment__
					
					CLID_s4_clock_type = {0..(clock_type_max(Union({
					{}
					}))+1)}
					CLID_s1_clock_type = {0..(clock_type_max(Union({
					{}
					}))+1)}
					CLID_s3_clock_type = {0..(clock_type_max(Union({
					{},
					({0})
					}))+1)}
					CLID_s2_clock_type = {0..(clock_type_max(Union({
					{}
					}))+1)}
					
					--	Nodes
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: s1
					module s1
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= Deadline(share__choice(true & (share__choice(set_lim!false -> SKIP))),0);true&CALL__disableHV(
											id__,
											true
										) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= Deadline(share__choice(true & (share__choice(set_lim!false -> SKIP))),0);true&CALL__disableHV(
											id__,
											true
										) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: s2
					module s2
					
					enterSS = 
							{|			i0::enter,
								s0::enter,
								s1::enter,
								j0::enter
							|}
					enteredSS = 
							{|			s0::entered,
								s1::entered
							|}
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						-- declaring identifiers of transitions
						datatype NIDS = 
						              NID_i0|
						              NID_s0|
						              NID_s1|
						              NID_j0
						
						channel internal__ : NIDS
						channel currentState__: NIDS.InOut.State
						channel ext_setPoint__: NIDS.InOut.core_real
						channel ext_pow24VStatus__: NIDS.InOut.Power
						channel int_overLimit__: NIDS.InOut.core_real
						channel int_pwmSignal__: NIDS.InOut.Power
						channel int_underLimit__: NIDS.InOut.core_real
						channel int_DisableHV__: NIDS.InOut
						channel int_ActualHV__: NIDS.InOut.core_real
						
						channel get_CLID_s0 : CLID_s0_clock_type
						channel get_CLID_s1 : CLID_s1_clock_type
						
						--channel increment__
						
						CLID_s0_clock_type = {0..(clock_type_max(Union({
						({0})
						}))+1)}
						CLID_s1_clock_type = {0..(clock_type_max(Union({
						{}
						}))+1)}
						
						--	Nodes
						-- declaring all nodes
						
						----------------------------------------------------------------------
						-- Initial: i0
						module i0
						exports
						
							channel enter, interrupt
							
							Timed(OneStep) {
								D__(id__) = 
									dbisim(let
										Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
										
										Termination = terminate -> SKIP
										
										Active 		= share__choice(interrupt -> SKIP) ; Inactive
									within
										Inactive [| {terminate} |> SKIP)
								
								VS_O__(id__) = D__(id__)
							}
						
						endmodule
						----------------------------------------------------------------------
						
						
						----------------------------------------------------------------------
						-- State: s0
						module s0
						
						enterSS = {}
						
						enteredSS = {}
						
						exports
						
							--  Declarations
							
							channel enter, entered, interrupt
							channel enteredL, enteredR
							
											
							
							
							--channel increment__
							
							
							--	Nodes
							-- declaring all nodes
							
							
							Timed(OneStep) {
								--	Rule: behaviours(Node)
								--  Note that FDR has problems with efficiently compiling the process below
								-- 	if using a different recursion pattern.
								D__(id__) = 
								dbisim(let
									-- IMPLEMENTATION NOTE: 
									-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
									-- however FDR struggles with that form in certain cases. So we use the exception operator
									-- instead to 'terminate'.
									
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= true&CALL__checkLimits(
												id__
											) ; 
											 	  Behaviour ; 
											 	  share__choice(exit -> SKIP) ; SKIP ; 
											 	  share__choice(exited -> SKIP) ; Inactive
								
									Behaviour 	= entered -> During
									During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
								within
									Inactive [| {terminate} |> SKIP)
									
								VS_O__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= true&CALL__checkLimits(
												id__
											) ; 
											 	  Behaviour ; 
											 	  share__choice(exit -> SKIP) ; SKIP ; 
											 	  share__choice(exited -> SKIP) ; Inactive
								
									Behaviour 	= entered -> During
									During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
								within
									Inactive [| {terminate} |> SKIP)
								
								
								-- Clocks
								
								StateClocks = terminate -> SKIP
								
								stateClockSync = {||}
							}
						
						endmodule
						----------------------------------------------------------------------
						
						
						----------------------------------------------------------------------
						-- State: s1
						module s1
						
						enterSS = {}
						
						enteredSS = {}
						
						exports
						
							--  Declarations
							
							channel enter, entered, interrupt
							channel enteredL, enteredR
							
											
							
							
							--channel increment__
							
							
							--	Nodes
							-- declaring all nodes
							
							
							Timed(OneStep) {
								--	Rule: behaviours(Node)
								--  Note that FDR has problems with efficiently compiling the process below
								-- 	if using a different recursion pattern.
								D__(id__) = 
								dbisim(let
									-- IMPLEMENTATION NOTE: 
									-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
									-- however FDR struggles with that form in certain cases. So we use the exception operator
									-- instead to 'terminate'.
									
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= true&(share__choice(ext_setPoint.in?setPoint -> (SStop /\ set_setPoint!setPoint -> SKIP))) ; 
											 	  Behaviour ; 
											 	  share__choice(exit -> SKIP) ; SKIP ; 
											 	  share__choice(exited -> SKIP) ; Inactive
								
									Behaviour 	= entered -> During
									During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
								within
									Inactive [| {terminate} |> SKIP)
									
								VS_O__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= true&(share__choice(ext_setPoint.in?setPoint -> (SStop /\ set_setPoint!setPoint -> SKIP))) ; 
											 	  Behaviour ; 
											 	  share__choice(exit -> SKIP) ; SKIP ; 
											 	  share__choice(exited -> SKIP) ; Inactive
								
									Behaviour 	= entered -> During
									During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
								within
									Inactive [| {terminate} |> SKIP)
								
								
								-- Clocks
								
								StateClocks = terminate -> SKIP
								
								stateClockSync = {||}
							}
						
						endmodule
						----------------------------------------------------------------------
						
						
						----------------------------------------------------------------------
						-- Junction: j0
						module j0
						exports
						
							channel enter, interrupt
							
							Timed(OneStep) {
								D__(id__) = 
									dbisim(let
										Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
										
										Active 		= share__choice(interrupt -> SKIP) ; Inactive
									within
										Inactive [| {terminate} |> SKIP)
									
								VS_O__(id__) = D__(id__)
							}
						
						endmodule
						----------------------------------------------------------------------
						
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
							
								Behaviour 	= dbisim(
									((
									 ((dbisim((dbisim((let
									 	-- IMPLEMENTATION NOTE:
									 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
									 	-- modules for defining the semantics of each node.
									 	enterSS = {|
									 	i0::enter,
									 	s0::enter,
									 	s1::enter,
									 	j0::enter
									 	|}
									 	hideSet = union(enterSS,{|exit,exited,internal__|})
									 within 
									 	((let
									 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									 		-- because CSPM modules are used for the semantics of Node.
									 		flowevts = union(enterSS,{|exit,exited|})
									 		transSync = {|internal__.NID_i0,internal__.NID_s0,internal__.NID_j0,internal__.NID_s1|}
									 	within
									 		((
									 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
									 		   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									 		   		    i0::D__(id__)
									 		   		    [| { share__, terminate } |] (
									 		   		    s0::D__(id__)
									 		   		    [| { share__, terminate } |] (
									 		   		    s1::D__(id__)
									 		   		    [| { share__, terminate } |] (
									 		   		    j0::D__(id__)
									 		   		    )
									 		   		    )
									 		   		    )
									 		   		  )
									 		 )
									 		 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
									 		 [[s1::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s1|}]]
									 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 		 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0|}]]
									 		 )
									 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 		  [[s0::entered <- s0::enteredL]]
									 		 )
									 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 		 			,s0::enteredL
									 		|}) |]
									 		 ((i0::enter -> Transitions(id__))
									 		  [[ share__ <- x__ | x__ <- {| share__,s0::enteredL |} ]]
									 		 )
									 		)[[s0::enteredL <- s0::entered]]
									 		)
									 	)
									 	 \ hideSet)
									 	[[
									 		currentState__.x____ <- currentState,
									 		ext_setPoint__.x____ <- ext_setPoint,
									 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
									 		int_overLimit__.x____ <- int_overLimit,
									 		int_pwmSignal__.x____ <- int_pwmSignal,
									 		int_underLimit__.x____ <- int_underLimit,
									 		int_DisableHV__.x____ <- int_DisableHV,
									 		int_ActualHV__.x____ <- int_ActualHV
									 		| x____ <- NIDS
									 	]]
									 )
									 )
									  [| union(stateClockSync,{terminate}) |]
									  StateClocks
									 )\diff(stateClockSync,enteredSS)))
									  [[ share__ <- x__ | x__ <- {| share__,setR_ActualHV,setR_power,setR_supplyLim,setR_overLimit,setR_underLimit,setR_res,setR_lim,setR_errorFlag,setR_setPoint,setR_errorAck |} ]] 
									  [[set_ActualHV <- setL_ActualHV,set_power <- setL_power,set_supplyLim <- setL_supplyLim,set_overLimit <- setL_overLimit,set_underLimit <- setL_underLimit,set_res <- setL_res,set_errorFlag <- setL_errorFlag,set_lim <- setL_lim,set_setPoint <- setL_setPoint,set_errorAck <- setL_errorAck]]
									 )
									 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
									 			,setL_ActualHV
									 			,setL_power
									 			,setL_supplyLim
									 			,setL_overLimit
									 			,setL_underLimit
									 			,setL_res
									 			,setL_errorFlag
									 			,setL_lim
									 			,setL_setPoint
									 			,setL_errorAck
									 			,setR_ActualHV
									 			 			,setR_power
									 			 			,setR_supplyLim
									 			 			,setR_overLimit
									 			 			,setR_underLimit
									 			 			,setR_res
									 			 			,setR_lim
									 			 			,setR_errorFlag
									 			 			,setR_setPoint
									 			 			,setR_errorAck
									 			|}) |]
									 ((During)
									  [[ share__ <- x__ | x__ <- {| share__,setL_ActualHV,setL_power,setL_supplyLim,setL_overLimit,setL_underLimit,setL_res,setL_errorFlag,setL_lim,setL_setPoint,setL_errorAck |} ]]
									  [[set_ActualHV <- setR_ActualHV,set_power <- setR_power,set_supplyLim <- setR_supplyLim,set_overLimit <- setR_overLimit,set_underLimit <- setR_underLimit,set_res <- setR_res,set_lim <- setR_lim,set_errorFlag <- setR_errorFlag,set_setPoint <- setR_setPoint,set_errorAck <- setR_errorAck]]
									 )
									)[[setL_ActualHV <- set_ActualHV,setL_power <- set_power,setL_supplyLim <- set_supplyLim,setL_overLimit <- set_overLimit,setL_underLimit <- set_underLimit,setL_res <- set_res,setL_errorFlag <- set_errorFlag,setL_lim <- set_lim,setL_setPoint <- set_setPoint,setL_errorAck <- set_errorAck]]
									 [[setR_ActualHV <- set_ActualHV,setR_power <- set_power,setR_supplyLim <- set_supplyLim,setR_overLimit <- set_overLimit,setR_underLimit <- set_underLimit,setR_res <- set_res,setR_lim <- set_lim,setR_errorFlag <- set_errorFlag,setR_setPoint <- set_setPoint,setR_errorAck <- set_errorAck]]
									)\union(enteredSS,{terminate}) 
								)
								During 		= share__choice(([] e : enteredSS @ e -> SKIP))
										 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> terminate -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
							
								Behaviour 	= dbisim(
									((
									 ((dbisim((dbisim((let
									 	-- IMPLEMENTATION NOTE:
									 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
									 	-- modules for defining the semantics of each node.
									 	enterSS = {|
									 	i0::enter,
									 	s0::enter,
									 	s1::enter,
									 	j0::enter
									 	|}
									 	hideSet = union(enterSS,{|exit,exited,internal__|})
									 within 
									 	((let
									 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									 		-- because CSPM modules are used for the semantics of Node.
									 		flowevts = union(enterSS,{|exit,exited|})
									 		transSync = {|internal__.NID_i0,internal__.NID_s0,internal__.NID_j0,internal__.NID_s1|}
									 	within
									 		((
									 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
									 		   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									 		   		    i0::VS_O__(id__)
									 		   		    [| { share__, terminate } |] (
									 		   		    s0::VS_O__(id__)
									 		   		    [| { share__, terminate } |] (
									 		   		    s1::VS_O__(id__)
									 		   		    [| { share__, terminate } |] (
									 		   		    j0::VS_O__(id__)
									 		   		    )
									 		   		    )
									 		   		    )
									 		   		  )
									 		 )
									 		 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
									 		 [[s1::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s1|}]]
									 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 		 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0|}]]
									 		 )
									 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 		  [[s0::entered <- s0::enteredL]]
									 		 )
									 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 		 			,s0::enteredL
									 		|}) |]
									 		 ((i0::enter -> Transitions(id__))
									 		  [[ share__ <- x__ | x__ <- {| share__,s0::enteredL |} ]]
									 		 )
									 		)[[s0::enteredL <- s0::entered]]
									 		)
									 	)
									 	 \ hideSet)
									 	[[
									 		currentState__.x____ <- currentState,
									 		ext_setPoint__.x____ <- ext_setPoint,
									 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
									 		int_overLimit__.x____ <- int_overLimit,
									 		int_pwmSignal__.x____ <- int_pwmSignal,
									 		int_underLimit__.x____ <- int_underLimit,
									 		int_DisableHV__.x____ <- int_DisableHV,
									 		int_ActualHV__.x____ <- int_ActualHV
									 		| x____ <- NIDS
									 	]]
									 )
									 )
									  [| union(stateClockSync,{terminate}) |]
									  StateClocks
									 )\diff(stateClockSync,enteredSS)))
									  [[ share__ <- x__ | x__ <- {| share__,setR_ActualHV,setR_power,setR_supplyLim,setR_overLimit,setR_underLimit,setR_res,setR_lim,setR_errorFlag,setR_setPoint,setR_errorAck |} ]] 
									  [[set_ActualHV <- setL_ActualHV,set_power <- setL_power,set_supplyLim <- setL_supplyLim,set_overLimit <- setL_overLimit,set_underLimit <- setL_underLimit,set_res <- setL_res,set_errorFlag <- setL_errorFlag,set_lim <- setL_lim,set_setPoint <- setL_setPoint,set_errorAck <- setL_errorAck]]
									 )
									 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
									 			,setL_ActualHV
									 			,setL_power
									 			,setL_supplyLim
									 			,setL_overLimit
									 			,setL_underLimit
									 			,setL_res
									 			,setL_errorFlag
									 			,setL_lim
									 			,setL_setPoint
									 			,setL_errorAck
									 			,setR_ActualHV
									 			 			,setR_power
									 			 			,setR_supplyLim
									 			 			,setR_overLimit
									 			 			,setR_underLimit
									 			 			,setR_res
									 			 			,setR_lim
									 			 			,setR_errorFlag
									 			 			,setR_setPoint
									 			 			,setR_errorAck
									 			|}) |]
									 ((During)
									  [[ share__ <- x__ | x__ <- {| share__,setL_ActualHV,setL_power,setL_supplyLim,setL_overLimit,setL_underLimit,setL_res,setL_errorFlag,setL_lim,setL_setPoint,setL_errorAck |} ]]
									  [[set_ActualHV <- setR_ActualHV,set_power <- setR_power,set_supplyLim <- setR_supplyLim,set_overLimit <- setR_overLimit,set_underLimit <- setR_underLimit,set_res <- setR_res,set_lim <- setR_lim,set_errorFlag <- setR_errorFlag,set_setPoint <- setR_setPoint,set_errorAck <- setR_errorAck]]
									 )
									)[[setL_ActualHV <- set_ActualHV,setL_power <- set_power,setL_supplyLim <- set_supplyLim,setL_overLimit <- set_overLimit,setL_underLimit <- set_underLimit,setL_res <- set_res,setL_errorFlag <- set_errorFlag,setL_lim <- set_lim,setL_setPoint <- set_setPoint,setL_errorAck <- set_errorAck]]
									 [[setR_ActualHV <- set_ActualHV,setR_power <- set_power,setR_supplyLim <- set_supplyLim,setR_overLimit <- set_overLimit,setR_underLimit <- set_underLimit,setR_res <- set_res,setR_lim <- set_lim,setR_errorFlag <- set_errorFlag,setR_setPoint <- set_setPoint,setR_errorAck <- set_errorAck]]
									)\{terminate} 
								)
								During 		= share__choice(([] e : enteredSS @ e -> SKIP))
										 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> terminate -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							Transitions(id__) = ((let
								Trans = get_CLID_s0?s0 -> TimeOut_1(
									 (share__ -> SKIP
									 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s1::enter -> SKIP))))
									 [] dbisim(((s0>0))&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s1::enter -> SKIP)))
									 [] dbisim((true)&(internal__!NID_j0 -> SKIP ;  ((share__choice(get_ActualHV?ActualHV -> true&(share__choice(int_ActualHV.out!ActualHV -> SKIP))) ; s0::enter -> SKIP))))
									 [] dbisim((true)&(internal__!NID_s1 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; Deadline(share__choice(share__choice(get_setPoint?setPoint -> true & (share__choice(set_ActualHV!setPoint -> SKIP)))),0) ; j0::enter -> SKIP)))
									 []
									 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
									 []
									 terminate -> SKIP
									 )
								,SKIP);Trans
							within
								Trans [|{terminate}|> SKIP
							)
							)
							
							
							-- Clocks
							Clock_CLID_s0(x__) = 
								TimeOut_1(
									s0::entered -> Clock_CLID_s0(0)
									[]
									get_CLID_s0!x__ -> Clock_CLID_s0(x__)
									[]
									terminate -> SKIP,Clock_CLID_s0(Plus(x__,1,CLID_s0_clock_type)))
							Clock_CLID_s1(x__) = 
								TimeOut_1(
									s1::entered -> Clock_CLID_s1(0)
									[]
									get_CLID_s1!x__ -> Clock_CLID_s1(x__)
									[]
									terminate -> SKIP,Clock_CLID_s1(Plus(x__,1,CLID_s1_clock_type)))
							
							StateClocks = dbisim(Clock_CLID_s0(0))
							[| { terminate } |] (
							dbisim(Clock_CLID_s1(0))
							)
							
							stateClockSync = {|get_CLID_s0,s0::entered,get_CLID_s1,s1::entered|}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: s3
					module s3
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&CALL__checkLimits(
											id__
										) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&CALL__checkLimits(
											id__
										) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: s4
					module s4
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&CALL__supplyVoltCheck(
											id__
										) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&CALL__supplyVoltCheck(
											id__
										) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&(share__choice(currentState.out!State_ClosedLoop -> SKIP)) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
						
							Behaviour 	= dbisim(
								((
								 ((dbisim((dbisim((let
								 	-- IMPLEMENTATION NOTE:
								 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								 	-- modules for defining the semantics of each node.
								 	enterSS = {|
								 	i0::enter,
								 	s1::enter,
								 	s2::enter,
								 	s3::enter,
								 	s4::enter
								 	|}
								 	hideSet = union(enterSS,{|exit,exited,internal__|})
								 within 
								 	((let
								 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								 		-- because CSPM modules are used for the semantics of Node.
								 		flowevts = union(enterSS,{|exit,exited|})
								 		transSync = {|internal__.NID_s4,internal__.NID_s2,internal__.NID_s4,internal__.NID_s3,internal__.NID_s3,internal__.NID_i0|}
								 	within
								 		((
								 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								 		   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								 		   		    i0::D__(id__)
								 		   		    [| { share__, terminate } |] (
								 		   		    s1::D__(id__)
								 		   		    [| { share__, terminate } |] (
								 		   		    s2::D__(id__)
								 		   		    [| { share__, terminate } |] (
								 		   		    s3::D__(id__)
								 		   		    [| { share__, terminate } |] (
								 		   		    s4::D__(id__)
								 		   		    )
								 		   		    )
								 		   		    )
								 		   		    )
								 		   		  )
								 		 )
								 		 [[s1::interrupt <- x__ | x__ <- {|interrupt|}]]
								 		 [[s2::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s2|}]]
								 		 [[s3::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s3,internal__.NID_s3|}]]
								 		 [[s4::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s4,internal__.NID_s4|}]]
								 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 		 )
								 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 		  [[s3::entered <- s3::enteredL,set_lim <- setL_lim]]
								 		 )
								 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 		 			,s3::enteredL
								 		 			,setL_lim
								 		|}) |]
								 		 ((i0::enter -> Transitions(id__))
								 		  [[ share__ <- x__ | x__ <- {| share__,s3::enteredL,setL_lim |} ]]
								 		 )
								 		)[[s3::enteredL <- s3::entered,setL_lim <- set_lim]]
								 		)
								 	)
								 	 \ hideSet)
								 	[[
								 		currentState__.x____ <- currentState,
								 		ext_setPoint__.x____ <- ext_setPoint,
								 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								 		int_overLimit__.x____ <- int_overLimit,
								 		int_pwmSignal__.x____ <- int_pwmSignal,
								 		int_underLimit__.x____ <- int_underLimit,
								 		int_DisableHV__.x____ <- int_DisableHV,
								 		int_ActualHV__.x____ <- int_ActualHV
								 		| x____ <- NIDS
								 	]]
								 )
								 )
								  [| union(stateClockSync,{terminate}) |]
								  StateClocks
								 )\diff(stateClockSync,enteredSS)))
								  [[ share__ <- x__ | x__ <- {| share__,setR_ActualHV,setR_power,setR_supplyLim,setR_overLimit,setR_underLimit,setR_res,setR_lim,setR_errorFlag,setR_setPoint,setR_errorAck |} ]] 
								  [[set_ActualHV <- setL_ActualHV,set_power <- setL_power,set_supplyLim <- setL_supplyLim,set_overLimit <- setL_overLimit,set_underLimit <- setL_underLimit,set_res <- setL_res,set_errorFlag <- setL_errorFlag,set_lim <- setL_lim,set_setPoint <- setL_setPoint,set_errorAck <- setL_errorAck]]
								 )
								 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
								 			,setL_ActualHV
								 			,setL_power
								 			,setL_supplyLim
								 			,setL_overLimit
								 			,setL_underLimit
								 			,setL_res
								 			,setL_errorFlag
								 			,setL_lim
								 			,setL_setPoint
								 			,setL_errorAck
								 			,setR_ActualHV
								 			 			,setR_power
								 			 			,setR_supplyLim
								 			 			,setR_overLimit
								 			 			,setR_underLimit
								 			 			,setR_res
								 			 			,setR_lim
								 			 			,setR_errorFlag
								 			 			,setR_setPoint
								 			 			,setR_errorAck
								 			|}) |]
								 ((During)
								  [[ share__ <- x__ | x__ <- {| share__,setL_ActualHV,setL_power,setL_supplyLim,setL_overLimit,setL_underLimit,setL_res,setL_errorFlag,setL_lim,setL_setPoint,setL_errorAck |} ]]
								  [[set_ActualHV <- setR_ActualHV,set_power <- setR_power,set_supplyLim <- setR_supplyLim,set_overLimit <- setR_overLimit,set_underLimit <- setR_underLimit,set_res <- setR_res,set_lim <- setR_lim,set_errorFlag <- setR_errorFlag,set_setPoint <- setR_setPoint,set_errorAck <- setR_errorAck]]
								 )
								)[[setL_ActualHV <- set_ActualHV,setL_power <- set_power,setL_supplyLim <- set_supplyLim,setL_overLimit <- set_overLimit,setL_underLimit <- set_underLimit,setL_res <- set_res,setL_errorFlag <- set_errorFlag,setL_lim <- set_lim,setL_setPoint <- set_setPoint,setL_errorAck <- set_errorAck]]
								 [[setR_ActualHV <- set_ActualHV,setR_power <- set_power,setR_supplyLim <- set_supplyLim,setR_overLimit <- set_overLimit,setR_underLimit <- set_underLimit,setR_res <- set_res,setR_lim <- set_lim,setR_errorFlag <- set_errorFlag,setR_setPoint <- set_setPoint,setR_errorAck <- set_errorAck]]
								)\union(enteredSS,{terminate}) 
							)
							During 		= share__choice(([] e : enteredSS @ e -> SKIP))
									 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> terminate -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&(share__choice(currentState.out!State_ClosedLoop -> SKIP)) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
						
							Behaviour 	= dbisim(
								((
								 ((dbisim((dbisim((let
								 	-- IMPLEMENTATION NOTE:
								 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								 	-- modules for defining the semantics of each node.
								 	enterSS = {|
								 	i0::enter,
								 	s1::enter,
								 	s2::enter,
								 	s3::enter,
								 	s4::enter
								 	|}
								 	hideSet = union(enterSS,{|exit,exited,internal__|})
								 within 
								 	((let
								 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								 		-- because CSPM modules are used for the semantics of Node.
								 		flowevts = union(enterSS,{|exit,exited|})
								 		transSync = {|internal__.NID_s4,internal__.NID_s2,internal__.NID_s4,internal__.NID_s3,internal__.NID_s3,internal__.NID_i0|}
								 	within
								 		((
								 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								 		   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								 		   		    i0::VS_O__(id__)
								 		   		    [| { share__, terminate } |] (
								 		   		    s1::VS_O__(id__)
								 		   		    [| { share__, terminate } |] (
								 		   		    s2::VS_O__(id__)
								 		   		    [| { share__, terminate } |] (
								 		   		    s3::VS_O__(id__)
								 		   		    [| { share__, terminate } |] (
								 		   		    s4::VS_O__(id__)
								 		   		    )
								 		   		    )
								 		   		    )
								 		   		    )
								 		   		  )
								 		 )
								 		 [[s1::interrupt <- x__ | x__ <- {|interrupt|}]]
								 		 [[s2::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s2|}]]
								 		 [[s3::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s3,internal__.NID_s3|}]]
								 		 [[s4::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s4,internal__.NID_s4|}]]
								 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 		 )
								 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 		  [[s3::entered <- s3::enteredL,set_lim <- setL_lim]]
								 		 )
								 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 		 			,s3::enteredL
								 		 			,setL_lim
								 		|}) |]
								 		 ((i0::enter -> Transitions(id__))
								 		  [[ share__ <- x__ | x__ <- {| share__,s3::enteredL,setL_lim |} ]]
								 		 )
								 		)[[s3::enteredL <- s3::entered,setL_lim <- set_lim]]
								 		)
								 	)
								 	 \ hideSet)
								 	[[
								 		currentState__.x____ <- currentState,
								 		ext_setPoint__.x____ <- ext_setPoint,
								 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								 		int_overLimit__.x____ <- int_overLimit,
								 		int_pwmSignal__.x____ <- int_pwmSignal,
								 		int_underLimit__.x____ <- int_underLimit,
								 		int_DisableHV__.x____ <- int_DisableHV,
								 		int_ActualHV__.x____ <- int_ActualHV
								 		| x____ <- NIDS
								 	]]
								 )
								 )
								  [| union(stateClockSync,{terminate}) |]
								  StateClocks
								 )\diff(stateClockSync,enteredSS)))
								  [[ share__ <- x__ | x__ <- {| share__,setR_ActualHV,setR_power,setR_supplyLim,setR_overLimit,setR_underLimit,setR_res,setR_lim,setR_errorFlag,setR_setPoint,setR_errorAck |} ]] 
								  [[set_ActualHV <- setL_ActualHV,set_power <- setL_power,set_supplyLim <- setL_supplyLim,set_overLimit <- setL_overLimit,set_underLimit <- setL_underLimit,set_res <- setL_res,set_errorFlag <- setL_errorFlag,set_lim <- setL_lim,set_setPoint <- setL_setPoint,set_errorAck <- setL_errorAck]]
								 )
								 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
								 			,setL_ActualHV
								 			,setL_power
								 			,setL_supplyLim
								 			,setL_overLimit
								 			,setL_underLimit
								 			,setL_res
								 			,setL_errorFlag
								 			,setL_lim
								 			,setL_setPoint
								 			,setL_errorAck
								 			,setR_ActualHV
								 			 			,setR_power
								 			 			,setR_supplyLim
								 			 			,setR_overLimit
								 			 			,setR_underLimit
								 			 			,setR_res
								 			 			,setR_lim
								 			 			,setR_errorFlag
								 			 			,setR_setPoint
								 			 			,setR_errorAck
								 			|}) |]
								 ((During)
								  [[ share__ <- x__ | x__ <- {| share__,setL_ActualHV,setL_power,setL_supplyLim,setL_overLimit,setL_underLimit,setL_res,setL_errorFlag,setL_lim,setL_setPoint,setL_errorAck |} ]]
								  [[set_ActualHV <- setR_ActualHV,set_power <- setR_power,set_supplyLim <- setR_supplyLim,set_overLimit <- setR_overLimit,set_underLimit <- setR_underLimit,set_res <- setR_res,set_lim <- setR_lim,set_errorFlag <- setR_errorFlag,set_setPoint <- setR_setPoint,set_errorAck <- setR_errorAck]]
								 )
								)[[setL_ActualHV <- set_ActualHV,setL_power <- set_power,setL_supplyLim <- set_supplyLim,setL_overLimit <- set_overLimit,setL_underLimit <- set_underLimit,setL_res <- set_res,setL_errorFlag <- set_errorFlag,setL_lim <- set_lim,setL_setPoint <- set_setPoint,setL_errorAck <- set_errorAck]]
								 [[setR_ActualHV <- set_ActualHV,setR_power <- set_power,setR_supplyLim <- set_supplyLim,setR_overLimit <- set_overLimit,setR_underLimit <- set_underLimit,setR_res <- set_res,setR_lim <- set_lim,setR_errorFlag <- set_errorFlag,setR_setPoint <- set_setPoint,setR_errorAck <- set_errorAck]]
								)\{terminate} 
							)
							During 		= share__choice(([] e : enteredSS @ e -> SKIP))
									 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> terminate -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
						Transitions(id__) = ((let
							Trans = get_CLID_s3?s3 -> get_lim?lim -> TimeOut_1(
								 (share__ -> SKIP
								 [] dbisim(((lim==true))&(internal__!NID_s4 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s1::enter -> SKIP)))
								 [] dbisim(((lim==true))&(internal__!NID_s2 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s1::enter -> SKIP)))
								 [] dbisim(((lim==false))&(internal__!NID_s4 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(int_pwmSignal.out!Power_On -> SKIP)) ; s3::enter -> SKIP)))
								 [] dbisim((((lim==false) and (s3>0)))&(internal__!NID_s3 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s2::enter -> SKIP)))
								 [] dbisim(((lim==true))&(internal__!NID_s3 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s1::enter -> SKIP)))
								 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s4::enter -> SKIP))))
								 []
								 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
								 []
								 terminate -> SKIP
								 )
							,SKIP);Trans
						within
							Trans [|{terminate}|> SKIP
						)
						)
						
						
						-- Clocks
						Clock_CLID_s4(x__) = 
							TimeOut_1(
								s4::entered -> Clock_CLID_s4(0)
								[]
								get_CLID_s4!x__ -> Clock_CLID_s4(x__)
								[]
								terminate -> SKIP,Clock_CLID_s4(Plus(x__,1,CLID_s4_clock_type)))
						Clock_CLID_s1(x__) = 
							TimeOut_1(
								s1::entered -> Clock_CLID_s1(0)
								[]
								get_CLID_s1!x__ -> Clock_CLID_s1(x__)
								[]
								terminate -> SKIP,Clock_CLID_s1(Plus(x__,1,CLID_s1_clock_type)))
						Clock_CLID_s3(x__) = 
							TimeOut_1(
								s3::entered -> Clock_CLID_s3(0)
								[]
								get_CLID_s3!x__ -> Clock_CLID_s3(x__)
								[]
								terminate -> SKIP,Clock_CLID_s3(Plus(x__,1,CLID_s3_clock_type)))
						Clock_CLID_s2(x__) = 
							TimeOut_1(
								s2::entered -> Clock_CLID_s2(0)
								[]
								get_CLID_s2!x__ -> Clock_CLID_s2(x__)
								[]
								terminate -> SKIP,Clock_CLID_s2(Plus(x__,1,CLID_s2_clock_type)))
						
						StateClocks = dbisim(Clock_CLID_s4(0))
						[| { terminate } |] (
						dbisim(Clock_CLID_s1(0))
						[| { terminate } |] (
						dbisim(Clock_CLID_s3(0))
						[| { terminate } |] (
						dbisim(Clock_CLID_s2(0))
						)
						)
						)
						
						stateClockSync = {|get_CLID_s4,s4::entered,get_CLID_s1,s1::entered,get_CLID_s3,s3::entered,get_CLID_s2,s2::entered|}
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: ErrorMode
				module ErrorMode
				
				enterSS = 
						{|			i0::enter,
							f0::enter,
							s1::enter,
							s2::enter,
							j0::enter
						|}
				enteredSS = 
						{|			f0::entered,
							s1::entered,
							s2::entered
						|}
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					-- declaring identifiers of transitions
					datatype NIDS = 
					              NID_i0|
					              NID_f0|
					              NID_s1|
					              NID_s2|
					              NID_j0
					
					channel internal__ : NIDS
					channel currentState__: NIDS.InOut.State
					channel ext_setPoint__: NIDS.InOut.core_real
					channel ext_pow24VStatus__: NIDS.InOut.Power
					channel int_overLimit__: NIDS.InOut.core_real
					channel int_pwmSignal__: NIDS.InOut.Power
					channel int_underLimit__: NIDS.InOut.core_real
					channel int_DisableHV__: NIDS.InOut
					channel int_ActualHV__: NIDS.InOut.core_real
					
					channel get_CLID_s1 : CLID_s1_clock_type
					channel get_CLID_f0 : CLID_f0_clock_type
					channel get_CLID_s2 : CLID_s2_clock_type
					
					--channel increment__
					
					CLID_s1_clock_type = {0..(clock_type_max(Union({
					{}
					}))+1)}
					CLID_f0_clock_type = {0..(clock_type_max(Union({
					{}
					}))+1)}
					CLID_s2_clock_type = {0..(clock_type_max(Union({
					{}
					}))+1)}
					
					--	Nodes
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Final state: f0
					module f0
					
					exports
					
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
									
									Entering 	= entered -> SKIP ; Active
									Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
									Interrupted	= share__choice(exit -> exited -> Inactive)
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: s1
					module s1
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= Deadline(share__choice(true & (share__choice(set_setPoint!0 -> SKIP))),0) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= Deadline(share__choice(true & (share__choice(set_setPoint!0 -> SKIP))),0) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: s2
					module s2
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= Deadline(share__choice(true & (share__choice(set_ActualHV!0 -> SKIP))),0) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= Deadline(share__choice(true & (share__choice(set_ActualHV!0 -> SKIP))),0) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Junction: j0
					module j0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&(share__choice(currentState.out!State_ErrorMode -> SKIP));true&CALL__disableHV(
										id__,
										false
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
						
							Behaviour 	= dbisim(
								((
								 ((dbisim((dbisim((let
								 	-- IMPLEMENTATION NOTE:
								 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								 	-- modules for defining the semantics of each node.
								 	enterSS = {|
								 	i0::enter,
								 	f0::enter,
								 	s1::enter,
								 	s2::enter,
								 	j0::enter
								 	|}
								 	hideSet = union(enterSS,{|exit,exited,internal__|})
								 within 
								 	((let
								 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								 		-- because CSPM modules are used for the semantics of Node.
								 		flowevts = union(enterSS,{|exit,exited|})
								 		transSync = {|internal__.NID_s1,internal__.NID_i0,internal__.NID_s2,internal__.NID_j0,internal__.NID_j0|}
								 	within
								 		((
								 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								 		   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								 		   		    i0::D__(id__)
								 		   		    [| { share__, terminate } |] (
								 		   		    f0::D__(id__)
								 		   		    [| { share__, terminate } |] (
								 		   		    s1::D__(id__)
								 		   		    [| { share__, terminate } |] (
								 		   		    s2::D__(id__)
								 		   		    [| { share__, terminate } |] (
								 		   		    j0::D__(id__)
								 		   		    )
								 		   		    )
								 		   		    )
								 		   		    )
								 		   		  )
								 		 )
								 		 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 		 [[s1::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s1|}]]
								 		 [[s2::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s2|}]]
								 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 		 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
								 		 )
								 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 		  [[set_ActualHV <- setL_ActualHV,set_setPoint <- setL_setPoint]]
								 		 )
								 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 		 			,setL_ActualHV
								 		 			,setL_setPoint
								 		|}) |]
								 		 ((i0::enter -> Transitions(id__))
								 		  [[ share__ <- x__ | x__ <- {| share__,setL_ActualHV,setL_setPoint |} ]]
								 		 )
								 		)[[setL_ActualHV <- set_ActualHV,setL_setPoint <- set_setPoint]]
								 		)
								 	)
								 	 \ hideSet)
								 	[[
								 		currentState__.x____ <- currentState,
								 		ext_setPoint__.x____ <- ext_setPoint,
								 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								 		int_overLimit__.x____ <- int_overLimit,
								 		int_pwmSignal__.x____ <- int_pwmSignal,
								 		int_underLimit__.x____ <- int_underLimit,
								 		int_DisableHV__.x____ <- int_DisableHV,
								 		int_ActualHV__.x____ <- int_ActualHV
								 		| x____ <- NIDS
								 	]]
								 )
								 )
								  [| union(stateClockSync,{terminate}) |]
								  StateClocks
								 )\diff(stateClockSync,enteredSS)))
								  [[ share__ <- x__ | x__ <- {| share__,setR_ActualHV,setR_power,setR_supplyLim,setR_overLimit,setR_underLimit,setR_res,setR_lim,setR_errorFlag,setR_setPoint,setR_errorAck |} ]] 
								  [[set_ActualHV <- setL_ActualHV,set_power <- setL_power,set_supplyLim <- setL_supplyLim,set_overLimit <- setL_overLimit,set_underLimit <- setL_underLimit,set_res <- setL_res,set_errorFlag <- setL_errorFlag,set_lim <- setL_lim,set_setPoint <- setL_setPoint,set_errorAck <- setL_errorAck]]
								 )
								 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
								 			,setL_ActualHV
								 			,setL_power
								 			,setL_supplyLim
								 			,setL_overLimit
								 			,setL_underLimit
								 			,setL_res
								 			,setL_errorFlag
								 			,setL_lim
								 			,setL_setPoint
								 			,setL_errorAck
								 			,setR_ActualHV
								 			 			,setR_power
								 			 			,setR_supplyLim
								 			 			,setR_overLimit
								 			 			,setR_underLimit
								 			 			,setR_res
								 			 			,setR_lim
								 			 			,setR_errorFlag
								 			 			,setR_setPoint
								 			 			,setR_errorAck
								 			|}) |]
								 ((During)
								  [[ share__ <- x__ | x__ <- {| share__,setL_ActualHV,setL_power,setL_supplyLim,setL_overLimit,setL_underLimit,setL_res,setL_errorFlag,setL_lim,setL_setPoint,setL_errorAck |} ]]
								  [[set_ActualHV <- setR_ActualHV,set_power <- setR_power,set_supplyLim <- setR_supplyLim,set_overLimit <- setR_overLimit,set_underLimit <- setR_underLimit,set_res <- setR_res,set_lim <- setR_lim,set_errorFlag <- setR_errorFlag,set_setPoint <- setR_setPoint,set_errorAck <- setR_errorAck]]
								 )
								)[[setL_ActualHV <- set_ActualHV,setL_power <- set_power,setL_supplyLim <- set_supplyLim,setL_overLimit <- set_overLimit,setL_underLimit <- set_underLimit,setL_res <- set_res,setL_errorFlag <- set_errorFlag,setL_lim <- set_lim,setL_setPoint <- set_setPoint,setL_errorAck <- set_errorAck]]
								 [[setR_ActualHV <- set_ActualHV,setR_power <- set_power,setR_supplyLim <- set_supplyLim,setR_overLimit <- set_overLimit,setR_underLimit <- set_underLimit,setR_res <- set_res,setR_lim <- set_lim,setR_errorFlag <- set_errorFlag,setR_setPoint <- set_setPoint,setR_errorAck <- set_errorAck]]
								)\union(enteredSS,{terminate}) 
							)
							During 		= share__choice(([] e : enteredSS @ e -> SKIP))
									 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> terminate -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&(share__choice(currentState.out!State_ErrorMode -> SKIP));true&CALL__disableHV(
										id__,
										false
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
						
							Behaviour 	= dbisim(
								((
								 ((dbisim((dbisim((let
								 	-- IMPLEMENTATION NOTE:
								 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								 	-- modules for defining the semantics of each node.
								 	enterSS = {|
								 	i0::enter,
								 	f0::enter,
								 	s1::enter,
								 	s2::enter,
								 	j0::enter
								 	|}
								 	hideSet = union(enterSS,{|exit,exited,internal__|})
								 within 
								 	((let
								 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								 		-- because CSPM modules are used for the semantics of Node.
								 		flowevts = union(enterSS,{|exit,exited|})
								 		transSync = {|internal__.NID_s1,internal__.NID_i0,internal__.NID_s2,internal__.NID_j0,internal__.NID_j0|}
								 	within
								 		((
								 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								 		   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								 		   		    i0::VS_O__(id__)
								 		   		    [| { share__, terminate } |] (
								 		   		    f0::VS_O__(id__)
								 		   		    [| { share__, terminate } |] (
								 		   		    s1::VS_O__(id__)
								 		   		    [| { share__, terminate } |] (
								 		   		    s2::VS_O__(id__)
								 		   		    [| { share__, terminate } |] (
								 		   		    j0::VS_O__(id__)
								 		   		    )
								 		   		    )
								 		   		    )
								 		   		    )
								 		   		  )
								 		 )
								 		 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 		 [[s1::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s1|}]]
								 		 [[s2::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s2|}]]
								 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 		 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
								 		 )
								 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 		  [[set_ActualHV <- setL_ActualHV,set_setPoint <- setL_setPoint]]
								 		 )
								 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 		 			,setL_ActualHV
								 		 			,setL_setPoint
								 		|}) |]
								 		 ((i0::enter -> Transitions(id__))
								 		  [[ share__ <- x__ | x__ <- {| share__,setL_ActualHV,setL_setPoint |} ]]
								 		 )
								 		)[[setL_ActualHV <- set_ActualHV,setL_setPoint <- set_setPoint]]
								 		)
								 	)
								 	 \ hideSet)
								 	[[
								 		currentState__.x____ <- currentState,
								 		ext_setPoint__.x____ <- ext_setPoint,
								 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								 		int_overLimit__.x____ <- int_overLimit,
								 		int_pwmSignal__.x____ <- int_pwmSignal,
								 		int_underLimit__.x____ <- int_underLimit,
								 		int_DisableHV__.x____ <- int_DisableHV,
								 		int_ActualHV__.x____ <- int_ActualHV
								 		| x____ <- NIDS
								 	]]
								 )
								 )
								  [| union(stateClockSync,{terminate}) |]
								  StateClocks
								 )\diff(stateClockSync,enteredSS)))
								  [[ share__ <- x__ | x__ <- {| share__,setR_ActualHV,setR_power,setR_supplyLim,setR_overLimit,setR_underLimit,setR_res,setR_lim,setR_errorFlag,setR_setPoint,setR_errorAck |} ]] 
								  [[set_ActualHV <- setL_ActualHV,set_power <- setL_power,set_supplyLim <- setL_supplyLim,set_overLimit <- setL_overLimit,set_underLimit <- setL_underLimit,set_res <- setL_res,set_errorFlag <- setL_errorFlag,set_lim <- setL_lim,set_setPoint <- setL_setPoint,set_errorAck <- setL_errorAck]]
								 )
								 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
								 			,setL_ActualHV
								 			,setL_power
								 			,setL_supplyLim
								 			,setL_overLimit
								 			,setL_underLimit
								 			,setL_res
								 			,setL_errorFlag
								 			,setL_lim
								 			,setL_setPoint
								 			,setL_errorAck
								 			,setR_ActualHV
								 			 			,setR_power
								 			 			,setR_supplyLim
								 			 			,setR_overLimit
								 			 			,setR_underLimit
								 			 			,setR_res
								 			 			,setR_lim
								 			 			,setR_errorFlag
								 			 			,setR_setPoint
								 			 			,setR_errorAck
								 			|}) |]
								 ((During)
								  [[ share__ <- x__ | x__ <- {| share__,setL_ActualHV,setL_power,setL_supplyLim,setL_overLimit,setL_underLimit,setL_res,setL_errorFlag,setL_lim,setL_setPoint,setL_errorAck |} ]]
								  [[set_ActualHV <- setR_ActualHV,set_power <- setR_power,set_supplyLim <- setR_supplyLim,set_overLimit <- setR_overLimit,set_underLimit <- setR_underLimit,set_res <- setR_res,set_lim <- setR_lim,set_errorFlag <- setR_errorFlag,set_setPoint <- setR_setPoint,set_errorAck <- setR_errorAck]]
								 )
								)[[setL_ActualHV <- set_ActualHV,setL_power <- set_power,setL_supplyLim <- set_supplyLim,setL_overLimit <- set_overLimit,setL_underLimit <- set_underLimit,setL_res <- set_res,setL_errorFlag <- set_errorFlag,setL_lim <- set_lim,setL_setPoint <- set_setPoint,setL_errorAck <- set_errorAck]]
								 [[setR_ActualHV <- set_ActualHV,setR_power <- set_power,setR_supplyLim <- set_supplyLim,setR_overLimit <- set_overLimit,setR_underLimit <- set_underLimit,setR_res <- set_res,setR_lim <- set_lim,setR_errorFlag <- set_errorFlag,setR_setPoint <- set_setPoint,setR_errorAck <- set_errorAck]]
								)\{terminate} 
							)
							During 		= share__choice(([] e : enteredSS @ e -> SKIP))
									 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> terminate -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
						Transitions(id__) = ((let
							Trans = get_ActualHV?ActualHV -> get_setPoint?setPoint -> TimeOut_1(
								 (share__ -> SKIP
								 [] dbisim((true)&(internal__!NID_s1 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(get_setPoint?setPoint -> true&(share__choice(ext_setPoint.out!setPoint -> SKIP))) ; s2::enter -> SKIP)))
								 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((Deadline(share__choice(true & (share__choice(set_errorAck!false -> SKIP))),0) ; s1::enter -> SKIP))))
								 [] dbisim((true)&(internal__!NID_s2 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(get_ActualHV?ActualHV -> true&(share__choice(int_ActualHV.out!ActualHV -> SKIP))) ; j0::enter -> SKIP)))
								 [] dbisim((((setPoint==0) and (ActualHV==0)))&(internal__!NID_j0 -> SKIP ;  ((Deadline(share__choice(true & (share__choice(set_errorAck!true -> SKIP))),0) ; f0::enter -> SKIP))))
								 [] dbisim((((setPoint!=0) or (ActualHV!=0)))&(internal__!NID_j0 -> SKIP ;  ((SKIP ; s1::enter -> SKIP))))
								 []
								 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
								 []
								 terminate -> SKIP
								 )
							,SKIP);Trans
						within
							Trans [|{terminate}|> SKIP
						)
						)
						
						
						-- Clocks
						Clock_CLID_s1(x__) = 
							TimeOut_1(
								s1::entered -> Clock_CLID_s1(0)
								[]
								get_CLID_s1!x__ -> Clock_CLID_s1(x__)
								[]
								terminate -> SKIP,Clock_CLID_s1(Plus(x__,1,CLID_s1_clock_type)))
						Clock_CLID_f0(x__) = 
							TimeOut_1(
								f0::entered -> Clock_CLID_f0(0)
								[]
								get_CLID_f0!x__ -> Clock_CLID_f0(x__)
								[]
								terminate -> SKIP,Clock_CLID_f0(Plus(x__,1,CLID_f0_clock_type)))
						Clock_CLID_s2(x__) = 
							TimeOut_1(
								s2::entered -> Clock_CLID_s2(0)
								[]
								get_CLID_s2!x__ -> Clock_CLID_s2(x__)
								[]
								terminate -> SKIP,Clock_CLID_s2(Plus(x__,1,CLID_s2_clock_type)))
						
						StateClocks = dbisim(Clock_CLID_s1(0))
						[| { terminate } |] (
						dbisim(Clock_CLID_f0(0))
						[| { terminate } |] (
						dbisim(Clock_CLID_s2(0))
						)
						)
						
						stateClockSync = {|get_CLID_s1,s1::entered,get_CLID_f0,f0::entered,get_CLID_s2,s2::entered|}
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: j0
				module j0
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				CALL__checkLimits(id__) 	= (OP_checkLimits::O__(id__))
				[[
					OP_checkLimits::ext_setPoint <- ext_setPoint,
					OP_checkLimits::ext_pow24VStatus <- ext_pow24VStatus
				]]
				[[
					OP_checkLimits::get_setPoint <- get_setPoint,
					OP_checkLimits::set_setPoint <- set_setPoint,
					OP_checkLimits::get_res <- get_res,
					OP_checkLimits::set_res <- set_res,
					OP_checkLimits::get_errorFlag <- get_errorFlag,
					OP_checkLimits::set_errorFlag <- set_errorFlag,
					OP_checkLimits::get_lim <- get_lim,
					OP_checkLimits::set_lim <- set_lim,
					OP_checkLimits::get_supplyLim <- get_supplyLim,
					OP_checkLimits::set_supplyLim <- set_supplyLim,
					OP_checkLimits::get_ActualHV <- get_ActualHV,
					OP_checkLimits::set_ActualHV <- set_ActualHV,
					OP_checkLimits::get_errorAck <- get_errorAck,
					OP_checkLimits::set_errorAck <- set_errorAck,
					OP_checkLimits::get_overLimit <- get_overLimit,
					OP_checkLimits::set_overLimit <- set_overLimit,
					OP_checkLimits::get_underLimit <- get_underLimit,
					OP_checkLimits::set_underLimit <- set_underLimit
				]]
				CALL__disableHV(id__,
							arg) 	= (OP_disableHV::O__(id__,
							arg))
				[[
					OP_disableHV::int_pwmSignal <- int_pwmSignal
				]]
				[[
					OP_disableHV::get_setPoint <- get_setPoint,
					OP_disableHV::set_setPoint <- set_setPoint,
					OP_disableHV::get_res <- get_res,
					OP_disableHV::set_res <- set_res,
					OP_disableHV::get_errorFlag <- get_errorFlag,
					OP_disableHV::set_errorFlag <- set_errorFlag,
					OP_disableHV::get_lim <- get_lim,
					OP_disableHV::set_lim <- set_lim,
					OP_disableHV::get_supplyLim <- get_supplyLim,
					OP_disableHV::set_supplyLim <- set_supplyLim,
					OP_disableHV::get_ActualHV <- get_ActualHV,
					OP_disableHV::set_ActualHV <- set_ActualHV,
					OP_disableHV::get_errorAck <- get_errorAck,
					OP_disableHV::set_errorAck <- set_errorAck,
					OP_disableHV::get_overLimit <- get_overLimit,
					OP_disableHV::set_overLimit <- set_overLimit,
					OP_disableHV::get_underLimit <- get_underLimit,
					OP_disableHV::set_underLimit <- set_underLimit
				]]
				CALL__supplyVoltCheck(id__) 	= (OP_supplyVoltCheck::O__(id__))
				[[
					OP_supplyVoltCheck::ext_setPoint <- ext_setPoint,
					OP_supplyVoltCheck::ext_pow24VStatus <- ext_pow24VStatus
				]]
				[[
					OP_supplyVoltCheck::get_setPoint <- get_setPoint,
					OP_supplyVoltCheck::set_setPoint <- set_setPoint,
					OP_supplyVoltCheck::get_res <- get_res,
					OP_supplyVoltCheck::set_res <- set_res,
					OP_supplyVoltCheck::get_errorFlag <- get_errorFlag,
					OP_supplyVoltCheck::set_errorFlag <- set_errorFlag,
					OP_supplyVoltCheck::get_lim <- get_lim,
					OP_supplyVoltCheck::set_lim <- set_lim,
					OP_supplyVoltCheck::get_supplyLim <- get_supplyLim,
					OP_supplyVoltCheck::set_supplyLim <- set_supplyLim,
					OP_supplyVoltCheck::get_ActualHV <- get_ActualHV,
					OP_supplyVoltCheck::set_ActualHV <- set_ActualHV,
					OP_supplyVoltCheck::get_errorAck <- get_errorAck,
					OP_supplyVoltCheck::set_errorAck <- set_errorAck,
					OP_supplyVoltCheck::get_overLimit <- get_overLimit,
					OP_supplyVoltCheck::set_overLimit <- set_overLimit,
					OP_supplyVoltCheck::get_underLimit <- get_underLimit,
					OP_supplyVoltCheck::set_underLimit <- set_underLimit
				]]
				-- END of Operation calls --
			
				-- STM processes
				STM(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(Stateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 					)
											)
					[| union(sharedVarSync,{|terminate|},share__) |]
					dbisim(sharedVarMemory(id__))
				)		,<{terminate},{tock}>)
				
				STM_VS_O(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(Stateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 					)
											)
					[| union(sharedVarSync,{|terminate|},share__) |]
					dbisim(sharedVarMemory(id__))
				)		,<{terminate},{tock}>)
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = get_CLID_Ramping?Ramping -> get_res?res -> get_lim?lim -> get_setPoint?setPoint -> get_errorAck?errorAck -> TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim(((Ramping>=1))&(internal__!NID_Ramping -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Init::enter -> SKIP)))
						 [] dbisim((true)&(internal__!NID_Init -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Wait24Vpower::enter -> SKIP)))
						 [] dbisim(((res==true))&(internal__!NID_Wait24Vpower -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; Deadline(share__choice(true & (share__choice(set_res!false -> SKIP))),0) ; ErrorMode::enter -> SKIP)))
						 [] dbisim(((((setPoint==0) and (lim==false)) and (res==false)))&(internal__!NID_Wait24Vpower -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; ClosedLoop::enter -> SKIP)))
						 [] dbisim(((res==true))&(internal__!NID_ClosedLoop -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; Deadline(share__choice(true & (share__choice(set_res!false -> SKIP))),0) ; ErrorMode::enter -> SKIP)))
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; Ramping::enter -> SKIP))))
						 [] dbisim((errorAck)&(internal__!NID_ErrorMode -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Wait24Vpower::enter -> SKIP)))
						 [] dbisim((true)&(int_DisableHV__!NID_Wait24Vpower.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; j0::enter -> SKIP)))
						 [] dbisim((true)&(int_DisableHV__!NID_ClosedLoop.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; j0::enter -> SKIP)))
						 [] dbisim((true)&(internal__!NID_j0 -> SKIP ;  ((true&CALL__disableHV(
						 			id__,
						 			true
						 		);Deadline(share__choice(true & (share__choice(set_res!false -> SKIP))),0) ; ErrorMode::enter -> SKIP))))
						 []
						 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							Ramping::enter,
							Init::enter,
							Wait24Vpower::enter,
							ClosedLoop::enter,
							ErrorMode::enter,
							i0::enter,
							j0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_Ramping,internal__.NID_Init,internal__.NID_Wait24Vpower,internal__.NID_Wait24Vpower,internal__.NID_ClosedLoop,internal__.NID_i0,internal__.NID_ErrorMode,int_DisableHV__.NID_Wait24Vpower.in,int_DisableHV__.NID_ClosedLoop.in,internal__.NID_j0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    Ramping::D__(id__)
								   		    [| { share__, terminate } |] (
								   		    Init::D__(id__)
								   		    [| { share__, terminate } |] (
								   		    Wait24Vpower::D__(id__)
								   		    [| { share__, terminate } |] (
								   		    ClosedLoop::D__(id__)
								   		    [| { share__, terminate } |] (
								   		    ErrorMode::D__(id__)
								   		    [| { share__, terminate } |] (
								   		    i0::D__(id__)
								   		    [| { share__, terminate } |] (
								   		    j0::D__(id__)
								   		    )
								   		    )
								   		    )
								   		    )
								   		    )
								   		    )
								   		  )
								 )
								 [[Ramping::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Ramping|}]]
								 [[Init::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Init|}]]
								 [[Wait24Vpower::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Wait24Vpower,internal__.NID_Wait24Vpower,int_DisableHV__.NID_Wait24Vpower.in|}]]
								 [[ClosedLoop::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_ClosedLoop,int_DisableHV__.NID_ClosedLoop.in|}]]
								 [[ErrorMode::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_ErrorMode|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[Ramping::entered <- Ramping::enteredL,set_res <- setL_res,set_lim <- setL_lim,set_setPoint <- setL_setPoint,set_errorAck <- setL_errorAck]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,Ramping::enteredL
								 			,setL_res
								 			,setL_lim
								 			,setL_setPoint
								 			,setL_errorAck
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,Ramping::enteredL,setL_res,setL_lim,setL_setPoint,setL_errorAck |} ]]
								 )
								)[[Ramping::enteredL <- Ramping::entered,setL_res <- set_res,setL_lim <- set_lim,setL_setPoint <- set_setPoint,setL_errorAck <- set_errorAck]]
								)
							)
							 \ hideSet)
							[[
								currentState__.x____ <- currentState,
								ext_setPoint__.x____ <- ext_setPoint,
								ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								int_overLimit__.x____ <- int_overLimit,
								int_pwmSignal__.x____ <- int_pwmSignal,
								int_underLimit__.x____ <- int_underLimit,
								int_DisableHV__.x____ <- int_DisableHV,
								int_ActualHV__.x____ <- int_ActualHV
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_ClosedLoop,ClosedLoop::entered,get_CLID_Init,Init::entered,get_CLID_Ramping,Ramping::entered,get_CLID_Wait24Vpower,Wait24Vpower::entered,get_CLID_ErrorMode,ErrorMode::entered|}
					 within
						(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ union(stateClockSync,enteredSS)
					)
					)
				
				Stateful(id__) = 
					dbisim((let
						getsetLocalChannels = {|get_power,set_power,
						get_setPoint,set_setPoint,
						get_res,set_res,
						get_errorFlag,set_errorFlag,
						get_lim,set_lim,
						get_supplyLim,set_supplyLim,
						get_ActualHV,set_ActualHV,
						get_errorAck,set_errorAck,
						get_overLimit,set_overLimit,
						get_underLimit,set_underLimit|}
						clockSync = {|get_CLID_Cl1,clockReset.CLID_Cl1|}
					within
						(Behaviour(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							Ramping::enter,
							Init::enter,
							Wait24Vpower::enter,
							ClosedLoop::enter,
							ErrorMode::enter,
							i0::enter,
							j0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_Ramping,internal__.NID_Init,internal__.NID_Wait24Vpower,internal__.NID_Wait24Vpower,internal__.NID_ClosedLoop,internal__.NID_i0,internal__.NID_ErrorMode,int_DisableHV__.NID_Wait24Vpower.in,int_DisableHV__.NID_ClosedLoop.in,internal__.NID_j0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    Ramping::VS_O__(id__)
								   		    [| { share__, terminate } |] (
								   		    Init::VS_O__(id__)
								   		    [| { share__, terminate } |] (
								   		    Wait24Vpower::VS_O__(id__)
								   		    [| { share__, terminate } |] (
								   		    ClosedLoop::VS_O__(id__)
								   		    [| { share__, terminate } |] (
								   		    ErrorMode::VS_O__(id__)
								   		    [| { share__, terminate } |] (
								   		    i0::VS_O__(id__)
								   		    [| { share__, terminate } |] (
								   		    j0::VS_O__(id__)
								   		    )
								   		    )
								   		    )
								   		    )
								   		    )
								   		    )
								   		  )
								 )
								 [[Ramping::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Ramping|}]]
								 [[Init::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Init|}]]
								 [[Wait24Vpower::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Wait24Vpower,internal__.NID_Wait24Vpower,int_DisableHV__.NID_Wait24Vpower.in|}]]
								 [[ClosedLoop::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_ClosedLoop,int_DisableHV__.NID_ClosedLoop.in|}]]
								 [[ErrorMode::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_ErrorMode|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[Ramping::entered <- Ramping::enteredL,set_res <- setL_res,set_lim <- setL_lim,set_setPoint <- setL_setPoint,set_errorAck <- setL_errorAck]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,Ramping::enteredL
								 			,setL_res
								 			,setL_lim
								 			,setL_setPoint
								 			,setL_errorAck
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,Ramping::enteredL,setL_res,setL_lim,setL_setPoint,setL_errorAck |} ]]
								 )
								)[[Ramping::enteredL <- Ramping::entered,setL_res <- set_res,setL_lim <- set_lim,setL_setPoint <- set_setPoint,setL_errorAck <- set_errorAck]]
								)
							)
							 \ hideSet)
							[[
								currentState__.x____ <- currentState,
								ext_setPoint__.x____ <- ext_setPoint,
								ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								int_overLimit__.x____ <- int_overLimit,
								int_pwmSignal__.x____ <- int_pwmSignal,
								int_underLimit__.x____ <- int_underLimit,
								int_DisableHV__.x____ <- int_DisableHV,
								int_ActualHV__.x____ <- int_ActualHV
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_ClosedLoop,ClosedLoop::entered,get_CLID_Init,Init::entered,get_CLID_Ramping,Ramping::entered,get_CLID_Wait24Vpower,Wait24Vpower::entered,get_CLID_ErrorMode,ErrorMode::entered|}
					 within
						(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				Stateful_VS_O(id__) = 
					dbisim((let
						getsetLocalChannels = {|get_power,set_power,
						get_setPoint,set_setPoint,
						get_res,set_res,
						get_errorFlag,set_errorFlag,
						get_lim,set_lim,
						get_supplyLim,set_supplyLim,
						get_ActualHV,set_ActualHV,
						get_errorAck,set_errorAck,
						get_overLimit,set_overLimit,
						get_underLimit,set_underLimit|}
						clockSync = {|get_CLID_Cl1,clockReset.CLID_Cl1|}
					within
						(Behaviour_VS_O(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
					
				-- END
				
				-- Memory
				-- Memory variables
				Memory_power(power) =
					get_power!power -> Memory_power(power)
					[]
					set_power?x__ -> Memory_power(x__)
					[]
					terminate -> SKIP
				Memory_setPoint(setPoint) =
					get_setPoint!setPoint -> Memory_setPoint(setPoint)
					[]
					set_setPoint?x__ -> Memory_setPoint(x__)
					[]
					terminate -> SKIP
				Memory_res(res) =
					get_res!res -> Memory_res(res)
					[]
					set_res?x__ -> Memory_res(x__)
					[]
					terminate -> SKIP
				Memory_errorFlag(errorFlag) =
					get_errorFlag!errorFlag -> Memory_errorFlag(errorFlag)
					[]
					set_errorFlag?x__ -> Memory_errorFlag(x__)
					[]
					terminate -> SKIP
				Memory_lim(lim) =
					get_lim!lim -> Memory_lim(lim)
					[]
					set_lim?x__ -> Memory_lim(x__)
					[]
					terminate -> SKIP
				Memory_supplyLim(supplyLim) =
					get_supplyLim!supplyLim -> Memory_supplyLim(supplyLim)
					[]
					set_supplyLim?x__ -> Memory_supplyLim(x__)
					[]
					terminate -> SKIP
				Memory_ActualHV(ActualHV) =
					get_ActualHV!ActualHV -> Memory_ActualHV(ActualHV)
					[]
					set_ActualHV?x__ -> Memory_ActualHV(x__)
					[]
					terminate -> SKIP
				Memory_errorAck(errorAck) =
					get_errorAck!errorAck -> Memory_errorAck(errorAck)
					[]
					set_errorAck?x__ -> Memory_errorAck(x__)
					[]
					terminate -> SKIP
				Memory_overLimit(overLimit) =
					get_overLimit!overLimit -> Memory_overLimit(overLimit)
					[]
					set_overLimit?x__ -> Memory_overLimit(x__)
					[]
					terminate -> SKIP
				Memory_underLimit(underLimit) =
					get_underLimit!underLimit -> Memory_underLimit(underLimit)
					[]
					set_underLimit?x__ -> Memory_underLimit(x__)
					[]
					terminate -> SKIP
				
				-- varMemory process
				varMemory(id__) = Memory_power(Power_On)
				[| { terminate } |] (
				Memory_setPoint(0)
				[| { terminate } |] (
				Memory_res(false)
				[| { terminate } |] (
				Memory_errorFlag(true)
				[| { terminate } |] (
				Memory_lim(false)
				[| { terminate } |] (
				Memory_supplyLim(false)
				[| { terminate } |] (
				Memory_ActualHV(0)
				[| { terminate } |] (
				Memory_errorAck(false)
				[| { terminate } |] (
				Memory_overLimit(0)
				[| { terminate } |] (
				Memory_underLimit(0)
				)
				)
				)
				)
				)
				)
				)
				)
				)
				
				getsetLocalChannels = {|get_power,set_power,get_setPoint,set_setPoint,get_res,set_res,get_errorFlag,set_errorFlag,get_lim,set_lim,get_supplyLim,set_supplyLim,get_ActualHV,set_ActualHV,get_errorAck,set_errorAck,get_overLimit,set_overLimit,get_underLimit,set_underLimit|}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__) \ localClockResets
				D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
				O__(id__) = dbisim(D__(id__))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = dbisim(FVS__(id__))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
				HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
				
				-- Clocks
				Clock_CLID_Cl1(x__) = 
					TimeOut_1(
						clockReset.CLID_Cl1 -> Clock_CLID_Cl1(0)
						[]
						get_CLID_Cl1!x__ -> Clock_CLID_Cl1(x__)
						[]
						terminate -> SKIP,Clock_CLID_Cl1(Plus(x__,1,CLID_Cl1_clock_type)))
				
				Clocks = dbisim(Clock_CLID_Cl1(0))
				
				clockSync = {|get_CLID_Cl1,clockReset.CLID_Cl1|}
				
				Clock_CLID_ClosedLoop(x__) = 
					TimeOut_1(
						ClosedLoop::entered -> Clock_CLID_ClosedLoop(0)
						[]
						get_CLID_ClosedLoop!x__ -> Clock_CLID_ClosedLoop(x__)
						[]
						terminate -> SKIP,Clock_CLID_ClosedLoop(Plus(x__,1,CLID_ClosedLoop_clock_type)))
				Clock_CLID_Init(x__) = 
					TimeOut_1(
						Init::entered -> Clock_CLID_Init(0)
						[]
						get_CLID_Init!x__ -> Clock_CLID_Init(x__)
						[]
						terminate -> SKIP,Clock_CLID_Init(Plus(x__,1,CLID_Init_clock_type)))
				Clock_CLID_Ramping(x__) = 
					TimeOut_1(
						Ramping::entered -> Clock_CLID_Ramping(0)
						[]
						get_CLID_Ramping!x__ -> Clock_CLID_Ramping(x__)
						[]
						terminate -> SKIP,Clock_CLID_Ramping(Plus(x__,1,CLID_Ramping_clock_type)))
				Clock_CLID_Wait24Vpower(x__) = 
					TimeOut_1(
						Wait24Vpower::entered -> Clock_CLID_Wait24Vpower(0)
						[]
						get_CLID_Wait24Vpower!x__ -> Clock_CLID_Wait24Vpower(x__)
						[]
						terminate -> SKIP,Clock_CLID_Wait24Vpower(Plus(x__,1,CLID_Wait24Vpower_clock_type)))
				Clock_CLID_ErrorMode(x__) = 
					TimeOut_1(
						ErrorMode::entered -> Clock_CLID_ErrorMode(0)
						[]
						get_CLID_ErrorMode!x__ -> Clock_CLID_ErrorMode(x__)
						[]
						terminate -> SKIP,Clock_CLID_ErrorMode(Plus(x__,1,CLID_ErrorMode_clock_type)))
				
				StateClocks = dbisim(Clock_CLID_ClosedLoop(0))
				[| { terminate } |] (
				dbisim(Clock_CLID_Init(0))
				[| { terminate } |] (
				dbisim(Clock_CLID_Ramping(0))
				[| { terminate } |] (
				dbisim(Clock_CLID_Wait24Vpower(0))
				[| { terminate } |] (
				dbisim(Clock_CLID_ErrorMode(0))
				)
				)
				)
				)
				
				stateClockSync = {|get_CLID_ClosedLoop,ClosedLoop::entered,get_CLID_Init,Init::entered,get_CLID_Ramping,Ramping::entered,get_CLID_Wait24Vpower,Wait24Vpower::entered,get_CLID_ErrorMode,ErrorMode::entered|}
				
				-- Shared memory
				-- Shared memory variables
				
				-- sharedVarMemory process
				sharedVarMemory(id__) = share__choice(terminate -> SKIP)
				
				sharedVarSync = {||}
				
				sharedVarHide = {||}
				}
		endmodule
		
		Timed(OneStep) {
				-- undefined operations
				
				-- declaring controller memory
				Memory = SKIP
				
				
				
				
				D__(id__) = prioritise(	(
						(
							((
								stm_ref0::D__(id__)[[
									stm_ref0::terminate <- terminate,
									stm_ref0::int_DisableHV <- int_DisableHV,
									stm_ref0::int_ActualHV <- int_ActualHV,
									stm_ref0::int_underLimit <- int_underLimit,
									stm_ref0::int_overLimit <- int_overLimit,
									stm_ref0::ext_setPoint <- ext_setPoint,
									stm_ref0::int_pwmSignal <- int_pwmSignal,
									stm_ref0::ext_pow24VStatus <- ext_pow24VStatus,
									stm_ref0::currentState <- currentState
								]]
							)
							)
						 	[[ share__ <- share__, share__ <- share__local__ ]]
					 	)	
						[|
								union(
									{|
									|},
									{|share__local__|}
								)
						|]
					(Memory[[ share__ <- share__local__ ]])
				)
				\ union(
					{|
				  	|},{|share__local__|})
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>)
				
				-- VS version
				VS__(id__) = prioritise(	(
						(
							((
								stm_ref0::VS__(id__)[[
									stm_ref0::terminate <- terminate,
									stm_ref0::int_DisableHV <- int_DisableHV,
									stm_ref0::int_ActualHV <- int_ActualHV,
									stm_ref0::int_underLimit <- int_underLimit,
									stm_ref0::int_overLimit <- int_overLimit,
									stm_ref0::ext_setPoint <- ext_setPoint,
									stm_ref0::int_pwmSignal <- int_pwmSignal,
									stm_ref0::ext_pow24VStatus <- ext_pow24VStatus,
									stm_ref0::currentState <- currentState
								]]
							)
							)
						 	[[ share__ <- share__, share__ <- share__local__ ]]
					 	)	
						[|
								union(
									{|
									|},
									{|share__local__|}
								)
						|]
					(Memory[[ share__ <- share__local__ ]])
				)
				\ union(
					{|
				  	|},{|share__local__|})
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>)
			
				-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
				O__(id__) = dbisim(prioritise(	(
						(
							((
								stm_ref0::O__(id__)[[
									stm_ref0::terminate <- terminate,
									stm_ref0::int_DisableHV <- int_DisableHV,
									stm_ref0::int_ActualHV <- int_ActualHV,
									stm_ref0::int_underLimit <- int_underLimit,
									stm_ref0::int_overLimit <- int_overLimit,
									stm_ref0::ext_setPoint <- ext_setPoint,
									stm_ref0::int_pwmSignal <- int_pwmSignal,
									stm_ref0::ext_pow24VStatus <- ext_pow24VStatus,
									stm_ref0::currentState <- currentState
								]]
							)
							)
						 	[[ share__ <- share__, share__ <- share__local__ ]]
					 	)	
						[|
								union(
									{|
									|},
									{|share__local__|}
								)
						|]
					((Memory)[[ share__ <- share__local__ ]])
				)
				\ union(
					{|
				  	|},{|share__local__|})
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>))
								
				-- VS_O version
				VS_O__(id__) = dbisim(prioritise(	(
						(
							((
								stm_ref0::VS_O__(id__)[[
									stm_ref0::terminate <- terminate,
									stm_ref0::int_DisableHV <- int_DisableHV,
									stm_ref0::int_ActualHV <- int_ActualHV,
									stm_ref0::int_underLimit <- int_underLimit,
									stm_ref0::int_overLimit <- int_overLimit,
									stm_ref0::ext_setPoint <- ext_setPoint,
									stm_ref0::int_pwmSignal <- int_pwmSignal,
									stm_ref0::ext_pow24VStatus <- ext_pow24VStatus,
									stm_ref0::currentState <- currentState
								]]
							)
							)
						 	[[ share__ <- share__, share__ <- share__local__ ]]
					 	)	
						[|
								union(
									{|
									|},
									{|share__local__|}
								)
						|]
					((Memory)[[ share__ <- share__local__ ]])
				)
				\ union(
					{|
				  	|},{|share__local__|})
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>))
			
				HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP			
		}

	endmodule
