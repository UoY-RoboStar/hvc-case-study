-- compileSelfContainedOperation
module OP_disableHV
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_i0|
	              NID_s1|
	              NID_f0|
	              NID_s0
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	channel get_setPoint, set_setPoint, setL_setPoint, setR_setPoint: core_real
	channel get_res, set_res, setL_res, setR_res: core_boolean
	channel get_errorFlag, set_errorFlag, setL_errorFlag, setR_errorFlag: core_boolean
	channel get_lim, set_lim, setL_lim, setR_lim: core_boolean
	channel get_supplyLim, set_supplyLim, setL_supplyLim, setR_supplyLim: core_boolean
	channel get_ActualHV, set_ActualHV, setL_ActualHV, setR_ActualHV: core_real
	channel get_errorAck, set_errorAck, setL_errorAck, setR_errorAck: core_boolean
	channel get_overLimit, set_overLimit, setL_overLimit, setR_overLimit: core_real
	channel get_underLimit, set_underLimit, setL_underLimit, setR_underLimit: core_real
	
	-- Shared variable channels
	channel set_EXT_setPoint: core_real
	channel set_EXT_res: core_boolean
	channel set_EXT_errorFlag: core_boolean
	channel set_EXT_lim: core_boolean
	channel set_EXT_supplyLim: core_boolean
	channel set_EXT_ActualHV: core_real
	channel set_EXT_errorAck: core_boolean
	channel set_EXT_overLimit: core_real
	channel set_EXT_underLimit: core_real
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	channel int_pwmSignal__: NIDS.InOut.Power
	channel int_pwmSignal: InOut.Power
	
	-- Declaring call and ret events for undefined operations
	
	enterSS = {|
	i0::enter,
	s1::enter,
	f0::enter,
	s0::enter
	|}
	
	enteredSS = 	{|
	s1::entered,
	f0::entered,
	s0::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
		set_EXT_setPoint,
		set_EXT_res,
		set_EXT_errorFlag,
		set_EXT_lim,
		set_EXT_supplyLim,
		set_EXT_ActualHV,
		set_EXT_errorAck,
		set_EXT_overLimit,
		set_EXT_underLimit
	|}
	
	-- Nodes --
	-- declaring all nodes
	
	----------------------------------------------------------------------
	-- Initial: i0
	module i0
	exports
	
		channel enter, interrupt
		
		D__(id__,
					arg) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
		
		VS_O__(id__,
					arg) = D__(id__,
					arg)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: s1
	module s1
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__,
					arg) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= share__choice(true & (share__choice(set_setPoint!0 -> SKIP))) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
					arg) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= share__choice(true & (share__choice(set_setPoint!0 -> SKIP))) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- Final state: f0
	module f0
	
	exports
	
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
		--	Rule: behaviours(Node)
		D__(id__,
					arg) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
				
				Entering 	= entered -> SKIP ; Active
				Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
				Interrupted	= share__choice(exit -> exited -> Inactive)
			within
				Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
					arg) = D__(id__,
					arg)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: s0
	module s0
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__,
					arg) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&(share__choice(int_pwmSignal.out!Power_Off -> SKIP)) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
					arg) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&(share__choice(int_pwmSignal.out!Power_Off -> SKIP)) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	-- END of Nodes --
	
	-- Operation calls --
	-- Only the undefined operations are declared here.
	-- If the state machine is in isolation, all required operations will be undefined.
	-- If it is in the context of a controller, the required operations not provided by the
	-- controller will be declared here, and the defined operations will be defined in the
	-- context of the Controller module, and therefore within scope of the state machine module.
	
	-- END of Operation calls --
	
	-- STM processes
	STM(id__,
				arg) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
	Stateful(id__,
				arg) \ {terminate}
	
	STM_VS_O(id__,
				arg) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
	Stateful(id__,
				arg) \ {terminate}
	
	-- Transitions
	Transitions(id__,
				arg) = ((let
		Trans = (
			((share__ -> SKIP
			 [] dbisim(((arg==false))&(internal__!NID_s1 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_res!false -> SKIP))) ; f0::enter -> SKIP)))
			 	 [] dbisim(((arg==true))&(internal__!NID_s1 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_res!true -> SKIP))) ; f0::enter -> SKIP)))
			 	 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s0::enter -> SKIP))))
			 	 [] dbisim((true)&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s1::enter -> SKIP)))
			 ) ; Trans)
			 []
			 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
			 []
			 terminate -> SKIP
		)
	within
		Trans
	)
	)
	
	-- Stateful
	-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
	
	-- Named process definitions
	MachineBody(id__,
				arg) = 
		dbisim((
		let
			finalNodesEntered = {|f0::entered|}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				i0::enter,
				s1::enter,
				f0::enter,
				s0::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited|})
					transSync = {|internal__.NID_s1,internal__.NID_s1,internal__.NID_i0,internal__.NID_s0|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   i0::D__(id__,
					   			arg)
					   [| { share__, terminate } |] (
					   s1::D__(id__,
					   			arg)
					   [| { share__, terminate } |] (
					   f0::D__(id__,
					   			arg)
					   [| { share__, terminate } |] (
					   s0::D__(id__,
					   			arg)
					   )
					   )
					   )
					 )
					 [[s1::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s1,internal__.NID_s1|}]]
					 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
					 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
					 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					|}) |]
					 ((i0::enter -> Transitions(id__,
					 			arg))
					  [[ share__ <- x__ | x__ <- {| share__ |} ]]
					 )
					)
					)
				)
				 \ hideSet)
				[[
					int_pwmSignal__.x____ <- int_pwmSignal
					| x____ <- NIDS
				]]
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour(id__,
				arg) = 
		dbisim((MachineBody(id__,
					arg)\ enteredSS)
		)
	
	Stateful(id__,
				arg) = 
		dbisim((
			(Behaviour(id__,
						arg) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
						arg))
		 	\getsetLocalChannels
		)
		)
	
	-- Visible counterparts
	MachineBody_VS_O(id__,
				arg) = 
		dbisim((
		let
			finalNodesEntered = {|f0::entered|}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				i0::enter,
				s1::enter,
				f0::enter,
				s0::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited|})
					transSync = {|internal__.NID_s1,internal__.NID_s1,internal__.NID_i0,internal__.NID_s0|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   i0::VS_O__(id__,
					   			arg)
					   [| { share__, terminate } |] (
					   s1::VS_O__(id__,
					   			arg)
					   [| { share__, terminate } |] (
					   f0::VS_O__(id__,
					   			arg)
					   [| { share__, terminate } |] (
					   s0::VS_O__(id__,
					   			arg)
					   )
					   )
					   )
					 )
					 [[s1::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s1,internal__.NID_s1|}]]
					 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
					 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
					 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					|}) |]
					 ((i0::enter -> Transitions(id__,
					 			arg))
					  [[ share__ <- x__ | x__ <- {| share__ |} ]]
					 )
					)
					)
				)
				 \ hideSet)
				[[
					int_pwmSignal__.x____ <- int_pwmSignal
					| x____ <- NIDS
				]]
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour_VS_O(id__,
				arg) = 
		dbisim((MachineBody_VS_O(id__,
					arg))
		)
	
	Stateful_VS_O(id__,
				arg) = 
		dbisim((
			(Behaviour_VS_O(id__,
						arg) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
						arg))
		 	\getsetLocalChannels
		)
		)
		
	-- END
	
	-- Memory
	-- Memory variables
	
	-- varMemory process
	varMemory(id__,
				arg) = terminate -> SKIP
	
	getsetLocalChannels = {||}
	
	-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
	FVS__(id__,
				arg) = STM_VS_O(id__,
				arg)
	
	D__(id__,
				arg) = STM(id__,
				arg) \ internal_events
	O__(id__,
				arg) = sbisim(diamond(D__(id__,
				arg)))
	VS__(id__,
				arg) = FVS__(id__,
				arg)
	VS_O__(id__,
				arg) = sbisim(diamond(FVS__(id__,
				arg)))
	HEXT__(id__,
				arg) = O__(id__,
				arg) [|shared_variable_events|] SKIP
	HUP__(id__,
				arg) = O__(id__,
				arg) [|{share__}|] SKIP
			endmodule
