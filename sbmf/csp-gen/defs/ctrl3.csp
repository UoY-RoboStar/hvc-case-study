
--
-- RoboChart generator version 3.0.0.qualifier
-- Automatically generated on 22-02-2024 16:13:40
--
-- Iterated compression status: true
-- Assertions compression status: false
--

	module ctrl3
		shared_variable_events = {|
		|}
		
	exports
		transparent diamond
		transparent sbisim
		transparent dbisim
		transparent chase

		-- declaring controller events
		channel int_ActualHV: InOut.core_real
		channel ActualHV_1: InOut.core_real
		channel ActualHV_2: InOut.core_real
		
		
		
		-- declaring call and ret events for undefined operations
		
		-- declaring controller termination channel
		channel terminate
		
		-- channel set with all visible events
		sem__events = {|
			terminate
		,	int_ActualHV,
			ActualHV_1,
			ActualHV_2
		|}

		-- defined operations
	
		-- declaring machines
		module stm0
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
		
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i0|
			              NID_s0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_ActualHV, set_ActualHV, setL_ActualHV, setR_ActualHV: core_real
			
			-- Shared variable channels
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel int_ActualHV__: NIDS.InOut.core_real
			channel int_ActualHV: InOut.core_real
			channel ActualHV_1__: NIDS.InOut.core_real
			channel ActualHV_1: InOut.core_real
			channel ActualHV_2__: NIDS.InOut.core_real
			channel ActualHV_2: InOut.core_real
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i0::enter,
			s0::enter
			|}
			
			enteredSS = 	{|
			s0::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	int_ActualHV,
				ActualHV_1,
				ActualHV_2
				|}
		
			-- Nodes --
			-- declaring all nodes
			
			----------------------------------------------------------------------
			-- Initial: i0
			module i0
			exports
			
				channel enter, interrupt
				
				D__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__) = D__(id__)
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- State: s0
			module s0
			
			enterSS = {}
			
			enteredSS = {}
			
			exports
			
				--  Declarations
				
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
								
				
				--	Nodes
				-- declaring all nodes
				
				
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(int_ActualHV.in?ActualHV -> (SStop /\ set_ActualHV!ActualHV -> SKIP))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(int_ActualHV.in?ActualHV -> (SStop /\ set_ActualHV!ActualHV -> SKIP))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
			
			endmodule
			----------------------------------------------------------------------
			
			-- END of Nodes --
			
			-- Operation calls --
			-- Only the undefined operations are declared here.
			-- If the state machine is in isolation, all required operations will be undefined.
			-- If it is in the context of a controller, the required operations not provided by the
			-- controller will be declared here, and the defined operations will be defined in the
			-- context of the Controller module, and therefore within scope of the state machine module.
			
			-- END of Operation calls --
			
			-- STM processes
			STM(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
			( 
				(
					(
						(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
					 	[[ share__ <- x__ | x__ <- {||} ]]
					)
				[| {share__} |]
				SKIP
				)
				[| union(sharedVarSync,{terminate}) |]
				dbisim(sharedVarMemory(id__))
			)\sharedVarHide
			
			STM_VS_O(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
			( 
				(
					(
						(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
					 	[[ share__ <- x__ | x__ <- {||} ]]
					)
				[| {share__} |]
				SKIP
				)
				[| union(sharedVarSync,{terminate}) |]
				dbisim(sharedVarMemory(id__))
			)\sharedVarHide
			
			-- Transitions
			Transitions(id__) = ((let
				Trans = (
					((share__ -> SKIP
					 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s0::enter -> SKIP))))
					 	 [] dbisim((true)&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(get_ActualHV?ActualHV -> true&(share__choice(ActualHV_1.out!ActualHV -> SKIP)));share__choice(get_ActualHV?ActualHV -> true&(share__choice(ActualHV_2.out!ActualHV -> SKIP))) ; s0::enter -> SKIP)))
					 ) ; Trans)
					 []
					 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
					 []
					 terminate -> SKIP
				)
			within
				Trans
			)
			)
			
			-- Stateful
			-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
			
			-- Named process definitions
			MachineBody(id__) = 
				dbisim((
				let
					finalNodesEntered = {||}
				within
					((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						i0::enter,
						s0::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited,interrupt|})
							transSync = {|internal__.NID_i0,internal__.NID_s0|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   i0::D__(id__)
							   [| { share__, terminate } |] (
							   s0::D__(id__)
							   )
							 )
							 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
							 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 )
							 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							|}) |]
							 ((i0::enter -> Transitions(id__))
							  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 )
							)
							)
						)
						 \ hideSet)
						[[
							int_ActualHV__.x____ <- int_ActualHV,
							ActualHV_1__.x____ <- ActualHV_1,
							ActualHV_2__.x____ <- ActualHV_2
							| x____ <- NIDS
						]]
					)
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour(id__) = 
				dbisim((MachineBody(id__)\ enteredSS)
				)
			
			IteratedBehaviour(id__) = 
				dbisim((MachineBody(id__)\ enteredSS)
				)
			
			Stateful(id__) = 
				((
					(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
				 	\getsetLocalChannels
				)
				)
			
			IteratedStateful(id__) =
				(dbisim(
					sbisim(
						Behaviour(id__)
						[| {|get_ActualHV,set_ActualHV,terminate|} |]
						Memory_ActualHV(0)
					)\{|get_ActualHV,set_ActualHV|}
				)
				)
			
			-- Visible counterparts
			MachineBody_VS_O(id__) = 
				dbisim((
				let
					finalNodesEntered = {||}
				within
					((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						i0::enter,
						s0::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited,interrupt|})
							transSync = {|internal__.NID_i0,internal__.NID_s0|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   i0::VS_O__(id__)
							   [| { share__, terminate } |] (
							   s0::VS_O__(id__)
							   )
							 )
							 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
							 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 )
							 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							|}) |]
							 ((i0::enter -> Transitions(id__))
							  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 )
							)
							)
						)
						 \ hideSet)
						[[
							int_ActualHV__.x____ <- int_ActualHV,
							ActualHV_1__.x____ <- ActualHV_1,
							ActualHV_2__.x____ <- ActualHV_2
							| x____ <- NIDS
						]]
					)
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour_VS_O(id__) = 
				dbisim((MachineBody_VS_O(id__))
				)
			
			IteratedBehaviour_VS_O(id__) = 
				dbisim((MachineBody_VS_O(id__))
				)
			
			Stateful_VS_O(id__) = 
				dbisim((
					(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
				 	\getsetLocalChannels
				)
				)
			
			IteratedStateful_VS_O(id__) =
				(dbisim(
					sbisim(
						Behaviour_VS_O(id__)
						[| {|get_ActualHV,set_ActualHV,terminate|} |]
						Memory_ActualHV(0)
					)\{|get_ActualHV,set_ActualHV|}
				)
				)
			
			-- END
			
			-- Memory
			-- Memory variables
			Memory_ActualHV(ActualHV) =
				get_ActualHV!ActualHV -> Memory_ActualHV(ActualHV)
				[]
				set_ActualHV?x__ -> Memory_ActualHV(x__)
				[]
				terminate -> SKIP
			
			-- varMemory process
			varMemory(id__) = Memory_ActualHV(0)
			
			getsetLocalChannels = {|get_ActualHV,set_ActualHV|}
			
			-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
			FVS__(id__) = STM_VS_O(id__)
			
			D__(id__) = STM(id__) \ internal_events
			O__(id__) = sbisim(diamond(D__(id__)))
			VS__(id__) = FVS__(id__)
			VS_O__(id__) = sbisim(diamond(FVS__(id__)))
			HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
			HUP__(id__) = O__(id__) [|{share__}|] SKIP
			
			-- Shared memory
			-- Shared memory variables
			
			-- sharedVarMemory process
			sharedVarMemory(id__) = terminate -> SKIP
			
			sharedVarSync = {||}
			
			sharedVarHide = {||}
		endmodule
		
			-- undefined operations
			
			-- declaring controller memory
			Memory(id__) = SKIP
			
			D__(id__) = 	((
					stm0::D__(id__)[[
						stm0::terminate <- terminate,
						stm0::int_ActualHV <- int_ActualHV,
						stm0::ActualHV_1 <- ActualHV_1,
						stm0::ActualHV_2 <- ActualHV_2
					]]
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				Memory(id__)
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
			
			-- VS version
			VS__(id__) = 	((
					stm0::VS__(id__)[[
						stm0::terminate <- terminate,
						stm0::int_ActualHV <- int_ActualHV,
						stm0::ActualHV_1 <- ActualHV_1,
						stm0::ActualHV_2 <- ActualHV_2
					]]
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				Memory(id__)
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
		
			-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
			O__(id__) = sbisim(diamond(	((
					stm0::O__(id__)[[
						stm0::terminate <- terminate,
						stm0::int_ActualHV <- int_ActualHV,
						stm0::ActualHV_1 <- ActualHV_1,
						stm0::ActualHV_2 <- ActualHV_2
					]]
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				dbisim(Memory(id__))
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
			))
							
			-- VS_O version
			VS_O__(id__) = sbisim(diamond(	((
					stm0::VS_O__(id__)[[
						stm0::terminate <- terminate,
						stm0::int_ActualHV <- int_ActualHV,
						stm0::ActualHV_1 <- ActualHV_1,
						stm0::ActualHV_2 <- ActualHV_2
					]]
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				dbisim(Memory(id__))
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
			))
		
			HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP			

	endmodule
