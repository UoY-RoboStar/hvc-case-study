
--
-- RoboChart generator version 3.0.0.qualifier
-- Automatically generated on 22-02-2024 16:13:39
--
-- Iterated compression status: true
-- Assertions compression status: false
--


module mod_sys
	exports
	
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase
	
	-- declaring channels
	-- declaring robotic platform events
	channel int_ActualHV: InOut.core_real
	channel currentState: InOut.State
	channel int_pwmSignal: InOut.Power
	channel ext_setPoint: InOut.core_real
	channel ext_pow24VStatus: InOut.Power
	
	
	-- declaring module termination channel
	channel terminate
	
	-- declaring robotic platform variables
	
	-- channel set with all visible events
	sem__events = {|
		int_ActualHV,
		currentState,
		int_pwmSignal,
		ext_setPoint,
		ext_pow24VStatus
	|}
	
	-- declaring controller
		module ctrl_ref0
			shared_variable_events = {|
			|}
			
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
	
			-- declaring controller events
			channel currentState: InOut.State
			channel ext_setPoint: InOut.core_real
			channel ext_pow24VStatus: InOut.Power
			channel int_overLimit: InOut.core_real
			channel int_pwmSignal: InOut.Power
			channel int_underLimit: InOut.core_real
			channel int_DisableHV: InOut
			channel int_ActualHV: InOut.core_real
			
			
			
			-- declaring call and ret events for undefined operations
			
			-- declaring controller termination channel
			channel terminate
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	currentState,
				ext_setPoint,
				ext_pow24VStatus,
				int_overLimit,
				int_pwmSignal,
				int_underLimit,
				int_DisableHV,
				int_ActualHV
			|}
	
			-- defined operations
			-- compileOperationDef
			module OP_disableHV
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
				
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_s1|
				              NID_f0|
				              NID_s0
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_setPoint, set_setPoint, setL_setPoint, setR_setPoint: core_real
				channel get_res, set_res, setL_res, setR_res: core_boolean
				channel get_errorFlag, set_errorFlag, setL_errorFlag, setR_errorFlag: core_boolean
				channel get_lim, set_lim, setL_lim, setR_lim: core_boolean
				channel get_supplyLim, set_supplyLim, setL_supplyLim, setR_supplyLim: core_boolean
				channel get_ActualHV, set_ActualHV, setL_ActualHV, setR_ActualHV: core_real
				channel get_errorAck, set_errorAck, setL_errorAck, setR_errorAck: core_boolean
				channel get_overLimit, set_overLimit, setL_overLimit, setR_overLimit: core_real
				channel get_underLimit, set_underLimit, setL_underLimit, setR_underLimit: core_real
				
				-- Shared variable channels
				channel set_EXT_setPoint: core_real
				channel set_EXT_res: core_boolean
				channel set_EXT_errorFlag: core_boolean
				channel set_EXT_lim: core_boolean
				channel set_EXT_supplyLim: core_boolean
				channel set_EXT_ActualHV: core_real
				channel set_EXT_errorAck: core_boolean
				channel set_EXT_overLimit: core_real
				channel set_EXT_underLimit: core_real
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel int_pwmSignal__: NIDS.InOut.Power
				channel int_pwmSignal: InOut.Power
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i0::enter,
				s1::enter,
				f0::enter,
				s0::enter
				|}
				
				enteredSS = 	{|
				s1::entered,
				f0::entered,
				s0::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
					set_EXT_setPoint,
					set_EXT_res,
					set_EXT_errorFlag,
					set_EXT_lim,
					set_EXT_supplyLim,
					set_EXT_ActualHV,
					set_EXT_errorAck,
					set_EXT_overLimit,
					set_EXT_underLimit
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	set_EXT_setPoint, set_setPoint,
					set_EXT_res, set_res,
					set_EXT_errorFlag, set_errorFlag,
					set_EXT_lim, set_lim,
					set_EXT_supplyLim, set_supplyLim,
					set_EXT_ActualHV, set_ActualHV,
					set_EXT_errorAck, set_errorAck,
					set_EXT_overLimit, set_overLimit,
					set_EXT_underLimit, set_underLimit
				,	int_pwmSignal
					, share__
					|}
				
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					D__(id__,
								param_arg) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__,
								param_arg) = D__(id__,
								param_arg)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: s1
				module s1
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__,
								param_arg) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(true & (share__choice(set_setPoint!0 -> SKIP))) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
								param_arg) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(true & (share__choice(set_setPoint!0 -> SKIP))) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f0
				module f0
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					--	Rule: behaviours(Node)
					D__(id__,
								param_arg) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
							
							Entering 	= entered -> SKIP ; Active
							Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
							Interrupted	= share__choice(exit -> exited -> Inactive)
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
								param_arg) = D__(id__,
								param_arg)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: s0
				module s0
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__,
								param_arg) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= true&(share__choice(int_pwmSignal.out!Power_Off -> SKIP)) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
								param_arg) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= true&(share__choice(int_pwmSignal.out!Power_Off -> SKIP)) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
				
				-- STM processes
				STM(id__,
							param_arg) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__,
							param_arg) \ {terminate}
				
				STM_VS_O(id__,
							param_arg) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__,
							param_arg) \ {terminate}
				
				-- Transitions
				Transitions(id__,
							param_arg) = ((let
					Trans = (
						((share__ -> SKIP
						 [] dbisim(((param_arg==false))&(internal__!NID_s1 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_res!false -> SKIP))) ; f0::enter -> SKIP)))
						 	 [] dbisim(((param_arg==true))&(internal__!NID_s1 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_res!true -> SKIP))) ; f0::enter -> SKIP)))
						 	 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s0::enter -> SKIP))))
						 	 [] dbisim((true)&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s1::enter -> SKIP)))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__,
							param_arg) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							s1::enter,
							f0::enter,
							s0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_s1,internal__.NID_s1,internal__.NID_i0,internal__.NID_s0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::D__(id__,
								   			param_arg)
								   [| { share__, terminate } |] (
								   s1::D__(id__,
								   			param_arg)
								   [| { share__, terminate } |] (
								   f0::D__(id__,
								   			param_arg)
								   [| { share__, terminate } |] (
								   s0::D__(id__,
								   			param_arg)
								   )
								   )
								   )
								 )
								 [[s1::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s1,internal__.NID_s1|}]]
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__,
								 			param_arg))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								int_pwmSignal__.x____ <- int_pwmSignal
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__,
							param_arg) = 
					dbisim((MachineBody(id__,
								param_arg)\ enteredSS)
					)
				
				
				Stateful(id__,
							param_arg) = 
					((
						(Behaviour(id__,
									param_arg) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
									param_arg))
					 	\getsetLocalChannels
					)
					)
				
				
				-- Visible counterparts
				MachineBody_VS_O(id__,
							param_arg) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							s1::enter,
							f0::enter,
							s0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_s1,internal__.NID_s1,internal__.NID_i0,internal__.NID_s0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::VS_O__(id__,
								   			param_arg)
								   [| { share__, terminate } |] (
								   s1::VS_O__(id__,
								   			param_arg)
								   [| { share__, terminate } |] (
								   f0::VS_O__(id__,
								   			param_arg)
								   [| { share__, terminate } |] (
								   s0::VS_O__(id__,
								   			param_arg)
								   )
								   )
								   )
								 )
								 [[s1::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s1,internal__.NID_s1|}]]
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__,
								 			param_arg))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								int_pwmSignal__.x____ <- int_pwmSignal
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__,
							param_arg) = 
					dbisim((MachineBody_VS_O(id__,
								param_arg))
					)
				
				
				Stateful_VS_O(id__,
							param_arg) = 
					dbisim((
						(Behaviour_VS_O(id__,
									param_arg) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
									param_arg))
					 	\getsetLocalChannels
					)
					)
				
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__,
							param_arg) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__,
							param_arg) = STM_VS_O(id__,
							param_arg)
				
				D__(id__,
							param_arg) = STM(id__,
							param_arg) \ internal_events
				O__(id__,
							param_arg) = sbisim(diamond(D__(id__,
							param_arg)))
				VS__(id__,
							param_arg) = FVS__(id__,
							param_arg)
				VS_O__(id__,
							param_arg) = sbisim(diamond(FVS__(id__,
							param_arg)))
				HEXT__(id__,
							param_arg) = O__(id__,
							param_arg) [|shared_variable_events|] SKIP
				HUP__(id__,
							param_arg) = O__(id__,
							param_arg) [|{share__}|] SKIP
						endmodule
			-- compileOperationDef
			module OP_supplyVoltCheck
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
				
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_s0|
				              NID_f0
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_power, set_power, setL_power, setR_power: Power
				channel get_setPoint, set_setPoint, setL_setPoint, setR_setPoint: core_real
				channel get_res, set_res, setL_res, setR_res: core_boolean
				channel get_errorFlag, set_errorFlag, setL_errorFlag, setR_errorFlag: core_boolean
				channel get_lim, set_lim, setL_lim, setR_lim: core_boolean
				channel get_supplyLim, set_supplyLim, setL_supplyLim, setR_supplyLim: core_boolean
				channel get_ActualHV, set_ActualHV, setL_ActualHV, setR_ActualHV: core_real
				channel get_errorAck, set_errorAck, setL_errorAck, setR_errorAck: core_boolean
				channel get_overLimit, set_overLimit, setL_overLimit, setR_overLimit: core_real
				channel get_underLimit, set_underLimit, setL_underLimit, setR_underLimit: core_real
				
				-- Shared variable channels
				channel set_EXT_setPoint: core_real
				channel set_EXT_res: core_boolean
				channel set_EXT_errorFlag: core_boolean
				channel set_EXT_lim: core_boolean
				channel set_EXT_supplyLim: core_boolean
				channel set_EXT_ActualHV: core_real
				channel set_EXT_errorAck: core_boolean
				channel set_EXT_overLimit: core_real
				channel set_EXT_underLimit: core_real
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel ext_setPoint__: NIDS.InOut.core_real
				channel ext_setPoint: InOut.core_real
				channel ext_pow24VStatus__: NIDS.InOut.Power
				channel ext_pow24VStatus: InOut.Power
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i0::enter,
				s0::enter,
				f0::enter
				|}
				
				enteredSS = 	{|
				s0::entered,
				f0::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
					set_EXT_setPoint,
					set_EXT_res,
					set_EXT_errorFlag,
					set_EXT_lim,
					set_EXT_supplyLim,
					set_EXT_ActualHV,
					set_EXT_errorAck,
					set_EXT_overLimit,
					set_EXT_underLimit
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	set_EXT_setPoint, set_setPoint,
					set_EXT_res, set_res,
					set_EXT_errorFlag, set_errorFlag,
					set_EXT_lim, set_lim,
					set_EXT_supplyLim, set_supplyLim,
					set_EXT_ActualHV, set_ActualHV,
					set_EXT_errorAck, set_errorAck,
					set_EXT_overLimit, set_overLimit,
					set_EXT_underLimit, set_underLimit
				,	ext_setPoint,
					ext_pow24VStatus
					, share__
					|}
				
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: s0
				module s0
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f0
				module f0
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					--	Rule: behaviours(Node)
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
							
							Entering 	= entered -> SKIP ; Active
							Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
							Interrupted	= share__choice(exit -> exited -> Inactive)
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
				
				-- STM processes
				STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = share__choice(get_power?power -> (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s0::enter -> SKIP))))
						 	 [] dbisim((ext_pow24VStatus__!NID_s0.in?power:{power|power <- Power, (power==Power_On)} -> share__choice(set_power!power -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_lim!false -> SKIP))) ; f0::enter -> SKIP)))
						 	 [] dbisim((ext_pow24VStatus__!NID_s0.in?power:{power|power <- Power, (power==Power_Off)} -> share__choice(set_power!power -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_lim!true -> SKIP))) ; f0::enter -> SKIP)))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							s0::enter,
							f0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,ext_pow24VStatus__.NID_s0.in,ext_pow24VStatus__.NID_s0.in|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::D__(id__)
								   [| { share__, terminate } |] (
								   s0::D__(id__)
								   [| { share__, terminate } |] (
								   f0::D__(id__)
								   )
								   )
								 )
								 [[s0::interrupt <- x__ | x__ <- {|interrupt,ext_pow24VStatus__.NID_s0.in,ext_pow24VStatus__.NID_s0.in|}]]
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__,setR_power |} ]] 
								  [[set_power <- setL_power]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_power
								 			,setR_power
								 			|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_power |} ]]
								  [[set_power <- setR_power]]
								 )
								)[[setL_power <- set_power]]
								 [[setR_power <- set_power]]
								)
							)
							 \ hideSet)
							[[
								ext_setPoint__.x____ <- ext_setPoint,
								ext_pow24VStatus__.x____ <- ext_pow24VStatus
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				
				Stateful(id__) = 
					((
						(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							s0::enter,
							f0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,ext_pow24VStatus__.NID_s0.in,ext_pow24VStatus__.NID_s0.in|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::VS_O__(id__)
								   [| { share__, terminate } |] (
								   s0::VS_O__(id__)
								   [| { share__, terminate } |] (
								   f0::VS_O__(id__)
								   )
								   )
								 )
								 [[s0::interrupt <- x__ | x__ <- {|interrupt,ext_pow24VStatus__.NID_s0.in,ext_pow24VStatus__.NID_s0.in|}]]
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__,setR_power |} ]] 
								  [[set_power <- setL_power]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_power
								 			,setR_power
								 			|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_power |} ]]
								  [[set_power <- setR_power]]
								 )
								)[[setL_power <- set_power]]
								 [[setR_power <- set_power]]
								)
							)
							 \ hideSet)
							[[
								ext_setPoint__.x____ <- ext_setPoint,
								ext_pow24VStatus__.x____ <- ext_pow24VStatus
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				
				Stateful_VS_O(id__) = 
					dbisim((
						(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				
				-- END
				
				-- Memory
				-- Memory variables
				Memory_power(power) =
					get_power!power -> Memory_power(power)
					[]
					set_power?x__ -> Memory_power(x__)
					[]
					terminate -> SKIP
				
				-- varMemory process
				varMemory(id__) = Memory_power(Power_On)
				
				getsetLocalChannels = {|get_power,set_power|}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__)
				
				D__(id__) = STM(id__) \ internal_events
				O__(id__) = sbisim(diamond(D__(id__)))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = sbisim(diamond(FVS__(id__)))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				HUP__(id__) = O__(id__) [|{share__}|] SKIP
						endmodule
			-- compileOperationDef
			module OP_checkLimits
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
				
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_s0|
				              NID_f0
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_setPoint, set_setPoint, setL_setPoint, setR_setPoint: core_real
				channel get_res, set_res, setL_res, setR_res: core_boolean
				channel get_errorFlag, set_errorFlag, setL_errorFlag, setR_errorFlag: core_boolean
				channel get_lim, set_lim, setL_lim, setR_lim: core_boolean
				channel get_supplyLim, set_supplyLim, setL_supplyLim, setR_supplyLim: core_boolean
				channel get_ActualHV, set_ActualHV, setL_ActualHV, setR_ActualHV: core_real
				channel get_errorAck, set_errorAck, setL_errorAck, setR_errorAck: core_boolean
				channel get_overLimit, set_overLimit, setL_overLimit, setR_overLimit: core_real
				channel get_underLimit, set_underLimit, setL_underLimit, setR_underLimit: core_real
				
				-- Shared variable channels
				channel set_EXT_setPoint: core_real
				channel set_EXT_res: core_boolean
				channel set_EXT_errorFlag: core_boolean
				channel set_EXT_lim: core_boolean
				channel set_EXT_supplyLim: core_boolean
				channel set_EXT_ActualHV: core_real
				channel set_EXT_errorAck: core_boolean
				channel set_EXT_overLimit: core_real
				channel set_EXT_underLimit: core_real
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel ext_setPoint__: NIDS.InOut.core_real
				channel ext_setPoint: InOut.core_real
				channel ext_pow24VStatus__: NIDS.InOut.Power
				channel ext_pow24VStatus: InOut.Power
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i0::enter,
				s0::enter,
				f0::enter
				|}
				
				enteredSS = 	{|
				s0::entered,
				f0::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
					set_EXT_setPoint,
					set_EXT_res,
					set_EXT_errorFlag,
					set_EXT_lim,
					set_EXT_supplyLim,
					set_EXT_ActualHV,
					set_EXT_errorAck,
					set_EXT_overLimit,
					set_EXT_underLimit
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	set_EXT_setPoint, set_setPoint,
					set_EXT_res, set_res,
					set_EXT_errorFlag, set_errorFlag,
					set_EXT_lim, set_lim,
					set_EXT_supplyLim, set_supplyLim,
					set_EXT_ActualHV, set_ActualHV,
					set_EXT_errorAck, set_errorAck,
					set_EXT_overLimit, set_overLimit,
					set_EXT_underLimit, set_underLimit
				,	ext_setPoint,
					ext_pow24VStatus
					, share__
					|}
				
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: s0
				module s0
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f0
				module f0
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					--	Rule: behaviours(Node)
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
							
							Entering 	= entered -> SKIP ; Active
							Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
							Interrupted	= share__choice(exit -> exited -> Inactive)
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
				
				-- STM processes
				STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = share__choice(get_ActualHV?ActualHV -> get_underLimit?underLimit -> get_overLimit?overLimit -> (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s0::enter -> SKIP))))
						 	 [] dbisim((((ActualHV<=overLimit) and (ActualHV>=underLimit)))&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_lim!false -> SKIP))) ; f0::enter -> SKIP)))
						 	 [] dbisim((((ActualHV<underLimit) or (ActualHV>overLimit)))&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_lim!true -> SKIP))) ; f0::enter -> SKIP)))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							s0::enter,
							f0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,internal__.NID_s0,internal__.NID_s0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::D__(id__)
								   [| { share__, terminate } |] (
								   s0::D__(id__)
								   [| { share__, terminate } |] (
								   f0::D__(id__)
								   )
								   )
								 )
								 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0,internal__.NID_s0|}]]
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[set_ActualHV <- setL_ActualHV,set_underLimit <- setL_underLimit,set_overLimit <- setL_overLimit]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_ActualHV
								 			,setL_underLimit
								 			,setL_overLimit
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_ActualHV,setL_underLimit,setL_overLimit |} ]]
								 )
								)[[setL_ActualHV <- set_ActualHV,setL_underLimit <- set_underLimit,setL_overLimit <- set_overLimit]]
								)
							)
							 \ hideSet)
							[[
								ext_setPoint__.x____ <- ext_setPoint,
								ext_pow24VStatus__.x____ <- ext_pow24VStatus
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				
				Stateful(id__) = 
					((
						(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							s0::enter,
							f0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,internal__.NID_s0,internal__.NID_s0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::VS_O__(id__)
								   [| { share__, terminate } |] (
								   s0::VS_O__(id__)
								   [| { share__, terminate } |] (
								   f0::VS_O__(id__)
								   )
								   )
								 )
								 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0,internal__.NID_s0|}]]
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[set_ActualHV <- setL_ActualHV,set_underLimit <- setL_underLimit,set_overLimit <- setL_overLimit]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_ActualHV
								 			,setL_underLimit
								 			,setL_overLimit
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_ActualHV,setL_underLimit,setL_overLimit |} ]]
								 )
								)[[setL_ActualHV <- set_ActualHV,setL_underLimit <- set_underLimit,setL_overLimit <- set_overLimit]]
								)
							)
							 \ hideSet)
							[[
								ext_setPoint__.x____ <- ext_setPoint,
								ext_pow24VStatus__.x____ <- ext_pow24VStatus
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				
				Stateful_VS_O(id__) = 
					dbisim((
						(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__)
				
				D__(id__) = STM(id__) \ internal_events
				O__(id__) = sbisim(diamond(D__(id__)))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = sbisim(diamond(FVS__(id__)))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				HUP__(id__) = O__(id__) [|{share__}|] SKIP
						endmodule
		
			-- declaring machines
			module stm_ref0
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_Ramping|
				              NID_Init|
				              NID_Wait24Vpower|
				              NID_ClosedLoop|
				              NID_ErrorMode|
				              NID_i0|
				              NID_j0
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_power, set_power, setL_power, setR_power: Power
				channel get_setPoint, set_setPoint, setL_setPoint, setR_setPoint: core_real
				channel get_res, set_res, setL_res, setR_res: core_boolean
				channel get_errorFlag, set_errorFlag, setL_errorFlag, setR_errorFlag: core_boolean
				channel get_lim, set_lim, setL_lim, setR_lim: core_boolean
				channel get_supplyLim, set_supplyLim, setL_supplyLim, setR_supplyLim: core_boolean
				channel get_ActualHV, set_ActualHV, setL_ActualHV, setR_ActualHV: core_real
				channel get_errorAck, set_errorAck, setL_errorAck, setR_errorAck: core_boolean
				channel get_overLimit, set_overLimit, setL_overLimit, setR_overLimit: core_real
				channel get_underLimit, set_underLimit, setL_underLimit, setR_underLimit: core_real
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				channel get_supplyVoltCheck_power, set_supplyVoltCheck_power: Power
				
				-- Declaring state machine events
				channel currentState__: NIDS.InOut.State
				channel currentState: InOut.State
				channel ext_setPoint__: NIDS.InOut.core_real
				channel ext_setPoint: InOut.core_real
				channel ext_pow24VStatus__: NIDS.InOut.Power
				channel ext_pow24VStatus: InOut.Power
				channel int_overLimit__: NIDS.InOut.core_real
				channel int_overLimit: InOut.core_real
				channel int_pwmSignal__: NIDS.InOut.Power
				channel int_pwmSignal: InOut.Power
				channel int_underLimit__: NIDS.InOut.core_real
				channel int_underLimit: InOut.core_real
				channel int_DisableHV__: NIDS.InOut
				channel int_DisableHV: InOut
				channel int_ActualHV__: NIDS.InOut.core_real
				channel int_ActualHV: InOut.core_real
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				Ramping::enter,
				Init::enter,
				Wait24Vpower::enter,
				ClosedLoop::enter,
				ErrorMode::enter,
				i0::enter,
				j0::enter
				|}
				
				enteredSS = 	{|
				Ramping::entered,
				Init::entered,
				Wait24Vpower::entered,
				ClosedLoop::entered,
				ErrorMode::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	currentState,
					ext_setPoint,
					ext_pow24VStatus,
					int_overLimit,
					int_pwmSignal,
					int_underLimit,
					int_DisableHV,
					int_ActualHV
					|}
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- State: Ramping
				module Ramping
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= true&(share__choice(currentState.out!State_Ramp -> SKIP)) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= true&(share__choice(currentState.out!State_Ramp -> SKIP)) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: Init
				module Init
				
				enterSS = 
						{|			i0::enter,
							si0::enter
						|}
				enteredSS = 
						{|			si0::entered
						|}
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					-- declaring identifiers of transitions
					datatype NIDS = 
					              NID_i0|
					              NID_si0
					
					channel internal__ : NIDS
					channel currentState__: NIDS.InOut.State
					channel ext_setPoint__: NIDS.InOut.core_real
					channel ext_pow24VStatus__: NIDS.InOut.Power
					channel int_overLimit__: NIDS.InOut.core_real
					channel int_pwmSignal__: NIDS.InOut.Power
					channel int_underLimit__: NIDS.InOut.core_real
					channel int_DisableHV__: NIDS.InOut
					channel int_ActualHV__: NIDS.InOut.core_real
					
					--	Nodes
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: si0
					module si0
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(share__choice(get_setPoint?setPoint -> true & (share__choice(set_overLimit!overLimitF(Plus(setPoint, 2, core_real)) -> SKIP))));share__choice(share__choice(get_setPoint?setPoint -> true & (share__choice(set_underLimit!underLimitF(Minus(setPoint, 2, core_real)) -> SKIP))));share__choice(get_underLimit?underLimit -> true&(share__choice(int_underLimit.out!underLimit -> SKIP)));share__choice(get_overLimit?overLimit -> true&(share__choice(int_overLimit.out!overLimit -> SKIP))) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(share__choice(get_setPoint?setPoint -> true & (share__choice(set_overLimit!overLimitF(Plus(setPoint, 2, core_real)) -> SKIP))));share__choice(share__choice(get_setPoint?setPoint -> true & (share__choice(set_underLimit!underLimitF(Minus(setPoint, 2, core_real)) -> SKIP))));share__choice(get_underLimit?underLimit -> true&(share__choice(int_underLimit.out!underLimit -> SKIP)));share__choice(get_overLimit?overLimit -> true&(share__choice(int_overLimit.out!overLimit -> SKIP))) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= true&(share__choice(currentState.out!State_Init -> SKIP));true&CALL__disableHV(
									id__,
									false
								) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
					
						Behaviour 	= dbisim(
							((
							 (((let
							 	-- IMPLEMENTATION NOTE:
							 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							 	-- modules for defining the semantics of each node.
							 	enterSS = {|
							 	i0::enter,
							 	si0::enter
							 	|}
							 	hideSet = union(enterSS,{|exit,exited,internal__|})
							 within 
							 	((let
							 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							 		-- because CSPM modules are used for the semantics of Node.
							 		flowevts = union(enterSS,{|exit,exited,interrupt|})
							 		transSync = {|internal__.NID_i0|}
							 	within
							 		((
							 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							 		   i0::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   si0::D__(id__)
							 		   )
							 		 )
							 		 [[si0::interrupt <- x__ | x__ <- {|interrupt|}]]
							 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 		 )
							 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 		 )
							 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 		|}) |]
							 		 ((i0::enter -> Transitions(id__))
							 		  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 		 )
							 		)
							 		)
							 	)
							 	 \ hideSet)
							 	[[
							 		currentState__.x____ <- currentState,
							 		ext_setPoint__.x____ <- ext_setPoint,
							 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
							 		int_overLimit__.x____ <- int_overLimit,
							 		int_pwmSignal__.x____ <- int_pwmSignal,
							 		int_underLimit__.x____ <- int_underLimit,
							 		int_DisableHV__.x____ <- int_DisableHV,
							 		int_ActualHV__.x____ <- int_ActualHV
							 		| x____ <- NIDS
							 	]]
							 )
							 )
							  [[ share__ <- x__ | x__ <- {| share__,setR_power,setR_ActualHV,setR_errorFlag,setR_underLimit,setR_lim,setR_supplyLim,setR_errorAck,setR_res,setR_overLimit,setR_setPoint |} ]] 
							  [[set_power <- setL_power,set_ActualHV <- setL_ActualHV,set_errorFlag <- setL_errorFlag,set_underLimit <- setL_underLimit,set_lim <- setL_lim,set_supplyLim <- setL_supplyLim,set_errorAck <- setL_errorAck,set_res <- setL_res,set_overLimit <- setL_overLimit,set_setPoint <- setL_setPoint]]
							 )
							 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
							 			,setL_power
							 			,setL_ActualHV
							 			,setL_errorFlag
							 			,setL_underLimit
							 			,setL_lim
							 			,setL_supplyLim
							 			,setL_errorAck
							 			,setL_res
							 			,setL_overLimit
							 			,setL_setPoint
							 			,setR_power
							 			 			,setR_ActualHV
							 			 			,setR_errorFlag
							 			 			,setR_underLimit
							 			 			,setR_lim
							 			 			,setR_supplyLim
							 			 			,setR_errorAck
							 			 			,setR_res
							 			 			,setR_overLimit
							 			 			,setR_setPoint
							 			|}) |]
							 ((During)
							  [[ share__ <- x__ | x__ <- {| share__,setL_power,setL_ActualHV,setL_errorFlag,setL_underLimit,setL_lim,setL_supplyLim,setL_errorAck,setL_res,setL_overLimit,setL_setPoint |} ]]
							  [[set_power <- setR_power,set_ActualHV <- setR_ActualHV,set_errorFlag <- setR_errorFlag,set_underLimit <- setR_underLimit,set_lim <- setR_lim,set_supplyLim <- setR_supplyLim,set_errorAck <- setR_errorAck,set_res <- setR_res,set_overLimit <- setR_overLimit,set_setPoint <- setR_setPoint]]
							 )
							)[[setL_power <- set_power,setL_ActualHV <- set_ActualHV,setL_errorFlag <- set_errorFlag,setL_underLimit <- set_underLimit,setL_lim <- set_lim,setL_supplyLim <- set_supplyLim,setL_errorAck <- set_errorAck,setL_res <- set_res,setL_overLimit <- set_overLimit,setL_setPoint <- set_setPoint]]
							 [[setR_power <- set_power,setR_ActualHV <- set_ActualHV,setR_errorFlag <- set_errorFlag,setR_underLimit <- set_underLimit,setR_lim <- set_lim,setR_supplyLim <- set_supplyLim,setR_errorAck <- set_errorAck,setR_res <- set_res,setR_overLimit <- set_overLimit,setR_setPoint <- set_setPoint]]
							)\union(enteredSS,{terminate}) 
						)
						During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
								 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= true&(share__choice(currentState.out!State_Init -> SKIP));true&CALL__disableHV(
									id__,
									false
								) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
					
						Behaviour 	= dbisim(
							((
							 (((let
							 	-- IMPLEMENTATION NOTE:
							 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							 	-- modules for defining the semantics of each node.
							 	enterSS = {|
							 	i0::enter,
							 	si0::enter
							 	|}
							 	hideSet = union(enterSS,{|exit,exited,internal__|})
							 within 
							 	((let
							 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							 		-- because CSPM modules are used for the semantics of Node.
							 		flowevts = union(enterSS,{|exit,exited,interrupt|})
							 		transSync = {|internal__.NID_i0|}
							 	within
							 		((
							 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							 		   i0::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   si0::VS_O__(id__)
							 		   )
							 		 )
							 		 [[si0::interrupt <- x__ | x__ <- {|interrupt|}]]
							 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 		 )
							 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 		 )
							 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 		|}) |]
							 		 ((i0::enter -> Transitions(id__))
							 		  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 		 )
							 		)
							 		)
							 	)
							 	 \ hideSet)
							 	[[
							 		currentState__.x____ <- currentState,
							 		ext_setPoint__.x____ <- ext_setPoint,
							 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
							 		int_overLimit__.x____ <- int_overLimit,
							 		int_pwmSignal__.x____ <- int_pwmSignal,
							 		int_underLimit__.x____ <- int_underLimit,
							 		int_DisableHV__.x____ <- int_DisableHV,
							 		int_ActualHV__.x____ <- int_ActualHV
							 		| x____ <- NIDS
							 	]]
							 )
							 )
							  [[ share__ <- x__ | x__ <- {| share__,setR_power,setR_ActualHV,setR_errorFlag,setR_underLimit,setR_lim,setR_supplyLim,setR_errorAck,setR_res,setR_overLimit,setR_setPoint |} ]] 
							  [[set_power <- setL_power,set_ActualHV <- setL_ActualHV,set_errorFlag <- setL_errorFlag,set_underLimit <- setL_underLimit,set_lim <- setL_lim,set_supplyLim <- setL_supplyLim,set_errorAck <- setL_errorAck,set_res <- setL_res,set_overLimit <- setL_overLimit,set_setPoint <- setL_setPoint]]
							 )
							 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
							 			,setL_power
							 			,setL_ActualHV
							 			,setL_errorFlag
							 			,setL_underLimit
							 			,setL_lim
							 			,setL_supplyLim
							 			,setL_errorAck
							 			,setL_res
							 			,setL_overLimit
							 			,setL_setPoint
							 			,setR_power
							 			 			,setR_ActualHV
							 			 			,setR_errorFlag
							 			 			,setR_underLimit
							 			 			,setR_lim
							 			 			,setR_supplyLim
							 			 			,setR_errorAck
							 			 			,setR_res
							 			 			,setR_overLimit
							 			 			,setR_setPoint
							 			|}) |]
							 ((During)
							  [[ share__ <- x__ | x__ <- {| share__,setL_power,setL_ActualHV,setL_errorFlag,setL_underLimit,setL_lim,setL_supplyLim,setL_errorAck,setL_res,setL_overLimit,setL_setPoint |} ]]
							  [[set_power <- setR_power,set_ActualHV <- setR_ActualHV,set_errorFlag <- setR_errorFlag,set_underLimit <- setR_underLimit,set_lim <- setR_lim,set_supplyLim <- setR_supplyLim,set_errorAck <- setR_errorAck,set_res <- setR_res,set_overLimit <- setR_overLimit,set_setPoint <- setR_setPoint]]
							 )
							)[[setL_power <- set_power,setL_ActualHV <- set_ActualHV,setL_errorFlag <- set_errorFlag,setL_underLimit <- set_underLimit,setL_lim <- set_lim,setL_supplyLim <- set_supplyLim,setL_errorAck <- set_errorAck,setL_res <- set_res,setL_overLimit <- set_overLimit,setL_setPoint <- set_setPoint]]
							 [[setR_power <- set_power,setR_ActualHV <- set_ActualHV,setR_errorFlag <- set_errorFlag,setR_underLimit <- set_underLimit,setR_lim <- set_lim,setR_supplyLim <- set_supplyLim,setR_errorAck <- set_errorAck,setR_res <- set_res,setR_overLimit <- set_overLimit,setR_setPoint <- set_setPoint]]
							)\{terminate} 
						)
						During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
								 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
					within
						Inactive [| {terminate} |> SKIP)
					
					Transitions(id__) = ((let
						Trans = (
							((share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((true&(share__choice(ext_setPoint.in?setPoint -> (SStop /\ set_setPoint!setPoint -> SKIP))) ; si0::enter -> SKIP))))
							 ) ; Trans)
							 []
							 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
						)
					within
						Trans
					)
					)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: Wait24Vpower
				module Wait24Vpower
				
				enterSS = 
						{|			i0::enter,
							si0::enter,
							s1::enter
						|}
				enteredSS = 
						{|			si0::entered,
							s1::entered
						|}
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					-- declaring identifiers of transitions
					datatype NIDS = 
					              NID_i0|
					              NID_si0|
					              NID_s1
					
					channel internal__ : NIDS
					channel currentState__: NIDS.InOut.State
					channel ext_setPoint__: NIDS.InOut.core_real
					channel ext_pow24VStatus__: NIDS.InOut.Power
					channel int_overLimit__: NIDS.InOut.core_real
					channel int_pwmSignal__: NIDS.InOut.Power
					channel int_underLimit__: NIDS.InOut.core_real
					channel int_DisableHV__: NIDS.InOut
					channel int_ActualHV__: NIDS.InOut.core_real
					
					--	Nodes
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: si0
					module si0
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__supplyVoltCheck(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__supplyVoltCheck(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: s1
					module s1
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__disableHV(
										id__,
										true
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__disableHV(
										id__,
										true
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= true&(share__choice(currentState.out!State_Wait24Vpower -> SKIP));true&CALL__disableHV(
									id__,
									false
								) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
					
						Behaviour 	= dbisim(
							((
							 (((let
							 	-- IMPLEMENTATION NOTE:
							 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							 	-- modules for defining the semantics of each node.
							 	enterSS = {|
							 	i0::enter,
							 	si0::enter,
							 	s1::enter
							 	|}
							 	hideSet = union(enterSS,{|exit,exited,internal__|})
							 within 
							 	((let
							 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							 		-- because CSPM modules are used for the semantics of Node.
							 		flowevts = union(enterSS,{|exit,exited,interrupt|})
							 		transSync = {|internal__.NID_i0,internal__.NID_si0|}
							 	within
							 		((
							 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							 		   i0::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   si0::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   s1::D__(id__)
							 		   )
							 		   )
							 		 )
							 		 [[si0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_si0|}]]
							 		 [[s1::interrupt <- x__ | x__ <- {|interrupt|}]]
							 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 		 )
							 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 		  [[set_lim <- setL_lim,set_setPoint <- setL_setPoint]]
							 		 )
							 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 		 			,setL_lim
							 		 			,setL_setPoint
							 		|}) |]
							 		 ((i0::enter -> Transitions(id__))
							 		  [[ share__ <- x__ | x__ <- {| share__,setL_lim,setL_setPoint |} ]]
							 		 )
							 		)[[setL_lim <- set_lim,setL_setPoint <- set_setPoint]]
							 		)
							 	)
							 	 \ hideSet)
							 	[[
							 		currentState__.x____ <- currentState,
							 		ext_setPoint__.x____ <- ext_setPoint,
							 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
							 		int_overLimit__.x____ <- int_overLimit,
							 		int_pwmSignal__.x____ <- int_pwmSignal,
							 		int_underLimit__.x____ <- int_underLimit,
							 		int_DisableHV__.x____ <- int_DisableHV,
							 		int_ActualHV__.x____ <- int_ActualHV
							 		| x____ <- NIDS
							 	]]
							 )
							 )
							  [[ share__ <- x__ | x__ <- {| share__,setR_power,setR_ActualHV,setR_errorFlag,setR_underLimit,setR_lim,setR_supplyLim,setR_errorAck,setR_res,setR_overLimit,setR_setPoint |} ]] 
							  [[set_power <- setL_power,set_ActualHV <- setL_ActualHV,set_errorFlag <- setL_errorFlag,set_underLimit <- setL_underLimit,set_lim <- setL_lim,set_supplyLim <- setL_supplyLim,set_errorAck <- setL_errorAck,set_res <- setL_res,set_overLimit <- setL_overLimit,set_setPoint <- setL_setPoint]]
							 )
							 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
							 			,setL_power
							 			,setL_ActualHV
							 			,setL_errorFlag
							 			,setL_underLimit
							 			,setL_lim
							 			,setL_supplyLim
							 			,setL_errorAck
							 			,setL_res
							 			,setL_overLimit
							 			,setL_setPoint
							 			,setR_power
							 			 			,setR_ActualHV
							 			 			,setR_errorFlag
							 			 			,setR_underLimit
							 			 			,setR_lim
							 			 			,setR_supplyLim
							 			 			,setR_errorAck
							 			 			,setR_res
							 			 			,setR_overLimit
							 			 			,setR_setPoint
							 			|}) |]
							 ((During)
							  [[ share__ <- x__ | x__ <- {| share__,setL_power,setL_ActualHV,setL_errorFlag,setL_underLimit,setL_lim,setL_supplyLim,setL_errorAck,setL_res,setL_overLimit,setL_setPoint |} ]]
							  [[set_power <- setR_power,set_ActualHV <- setR_ActualHV,set_errorFlag <- setR_errorFlag,set_underLimit <- setR_underLimit,set_lim <- setR_lim,set_supplyLim <- setR_supplyLim,set_errorAck <- setR_errorAck,set_res <- setR_res,set_overLimit <- setR_overLimit,set_setPoint <- setR_setPoint]]
							 )
							)[[setL_power <- set_power,setL_ActualHV <- set_ActualHV,setL_errorFlag <- set_errorFlag,setL_underLimit <- set_underLimit,setL_lim <- set_lim,setL_supplyLim <- set_supplyLim,setL_errorAck <- set_errorAck,setL_res <- set_res,setL_overLimit <- set_overLimit,setL_setPoint <- set_setPoint]]
							 [[setR_power <- set_power,setR_ActualHV <- set_ActualHV,setR_errorFlag <- set_errorFlag,setR_underLimit <- set_underLimit,setR_lim <- set_lim,setR_supplyLim <- set_supplyLim,setR_errorAck <- set_errorAck,setR_res <- set_res,setR_overLimit <- set_overLimit,setR_setPoint <- set_setPoint]]
							)\union(enteredSS,{terminate}) 
						)
						During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
								 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= true&(share__choice(currentState.out!State_Wait24Vpower -> SKIP));true&CALL__disableHV(
									id__,
									false
								) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
					
						Behaviour 	= dbisim(
							((
							 (((let
							 	-- IMPLEMENTATION NOTE:
							 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							 	-- modules for defining the semantics of each node.
							 	enterSS = {|
							 	i0::enter,
							 	si0::enter,
							 	s1::enter
							 	|}
							 	hideSet = union(enterSS,{|exit,exited,internal__|})
							 within 
							 	((let
							 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							 		-- because CSPM modules are used for the semantics of Node.
							 		flowevts = union(enterSS,{|exit,exited,interrupt|})
							 		transSync = {|internal__.NID_i0,internal__.NID_si0|}
							 	within
							 		((
							 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							 		   i0::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   si0::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   s1::VS_O__(id__)
							 		   )
							 		   )
							 		 )
							 		 [[si0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_si0|}]]
							 		 [[s1::interrupt <- x__ | x__ <- {|interrupt|}]]
							 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 		 )
							 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 		  [[set_lim <- setL_lim,set_setPoint <- setL_setPoint]]
							 		 )
							 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 		 			,setL_lim
							 		 			,setL_setPoint
							 		|}) |]
							 		 ((i0::enter -> Transitions(id__))
							 		  [[ share__ <- x__ | x__ <- {| share__,setL_lim,setL_setPoint |} ]]
							 		 )
							 		)[[setL_lim <- set_lim,setL_setPoint <- set_setPoint]]
							 		)
							 	)
							 	 \ hideSet)
							 	[[
							 		currentState__.x____ <- currentState,
							 		ext_setPoint__.x____ <- ext_setPoint,
							 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
							 		int_overLimit__.x____ <- int_overLimit,
							 		int_pwmSignal__.x____ <- int_pwmSignal,
							 		int_underLimit__.x____ <- int_underLimit,
							 		int_DisableHV__.x____ <- int_DisableHV,
							 		int_ActualHV__.x____ <- int_ActualHV
							 		| x____ <- NIDS
							 	]]
							 )
							 )
							  [[ share__ <- x__ | x__ <- {| share__,setR_power,setR_ActualHV,setR_errorFlag,setR_underLimit,setR_lim,setR_supplyLim,setR_errorAck,setR_res,setR_overLimit,setR_setPoint |} ]] 
							  [[set_power <- setL_power,set_ActualHV <- setL_ActualHV,set_errorFlag <- setL_errorFlag,set_underLimit <- setL_underLimit,set_lim <- setL_lim,set_supplyLim <- setL_supplyLim,set_errorAck <- setL_errorAck,set_res <- setL_res,set_overLimit <- setL_overLimit,set_setPoint <- setL_setPoint]]
							 )
							 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
							 			,setL_power
							 			,setL_ActualHV
							 			,setL_errorFlag
							 			,setL_underLimit
							 			,setL_lim
							 			,setL_supplyLim
							 			,setL_errorAck
							 			,setL_res
							 			,setL_overLimit
							 			,setL_setPoint
							 			,setR_power
							 			 			,setR_ActualHV
							 			 			,setR_errorFlag
							 			 			,setR_underLimit
							 			 			,setR_lim
							 			 			,setR_supplyLim
							 			 			,setR_errorAck
							 			 			,setR_res
							 			 			,setR_overLimit
							 			 			,setR_setPoint
							 			|}) |]
							 ((During)
							  [[ share__ <- x__ | x__ <- {| share__,setL_power,setL_ActualHV,setL_errorFlag,setL_underLimit,setL_lim,setL_supplyLim,setL_errorAck,setL_res,setL_overLimit,setL_setPoint |} ]]
							  [[set_power <- setR_power,set_ActualHV <- setR_ActualHV,set_errorFlag <- setR_errorFlag,set_underLimit <- setR_underLimit,set_lim <- setR_lim,set_supplyLim <- setR_supplyLim,set_errorAck <- setR_errorAck,set_res <- setR_res,set_overLimit <- setR_overLimit,set_setPoint <- setR_setPoint]]
							 )
							)[[setL_power <- set_power,setL_ActualHV <- set_ActualHV,setL_errorFlag <- set_errorFlag,setL_underLimit <- set_underLimit,setL_lim <- set_lim,setL_supplyLim <- set_supplyLim,setL_errorAck <- set_errorAck,setL_res <- set_res,setL_overLimit <- set_overLimit,setL_setPoint <- set_setPoint]]
							 [[setR_power <- set_power,setR_ActualHV <- set_ActualHV,setR_errorFlag <- set_errorFlag,setR_underLimit <- set_underLimit,setR_lim <- set_lim,setR_supplyLim <- set_supplyLim,setR_errorAck <- set_errorAck,setR_res <- set_res,setR_overLimit <- set_overLimit,setR_setPoint <- set_setPoint]]
							)\{terminate} 
						)
						During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
								 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
					within
						Inactive [| {terminate} |> SKIP)
					
					Transitions(id__) = ((let
						Trans = share__choice(get_lim?lim -> get_setPoint?setPoint -> (
							((share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((true&(share__choice(ext_setPoint.in?setPoint -> (SStop /\ set_setPoint!setPoint -> SKIP))) ; si0::enter -> SKIP))))
							 	 [] dbisim((((setPoint!=0) or (lim==true)))&(internal__!NID_si0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s1::enter -> SKIP)))
							 ) ; Trans)
							 []
							 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
						)
						)
					within
						Trans
					)
					)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: ClosedLoop
				module ClosedLoop
				
				enterSS = 
						{|			i0::enter,
							s1::enter,
							s2::enter,
							s3::enter,
							s4::enter
						|}
				enteredSS = 
						{|			s1::entered,
							s2::entered,
							s3::entered,
							s4::entered
						|}
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					-- declaring identifiers of transitions
					datatype NIDS = 
					              NID_i0|
					              NID_s1|
					              NID_s2|
					              NID_s3|
					              NID_s4
					
					channel internal__ : NIDS
					channel currentState__: NIDS.InOut.State
					channel ext_setPoint__: NIDS.InOut.core_real
					channel ext_pow24VStatus__: NIDS.InOut.Power
					channel int_overLimit__: NIDS.InOut.core_real
					channel int_pwmSignal__: NIDS.InOut.Power
					channel int_underLimit__: NIDS.InOut.core_real
					channel int_DisableHV__: NIDS.InOut
					channel int_ActualHV__: NIDS.InOut.core_real
					
					--	Nodes
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: s1
					module s1
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(true & (share__choice(set_lim!false -> SKIP)));true&CALL__disableHV(
										id__,
										true
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(true & (share__choice(set_lim!false -> SKIP)));true&CALL__disableHV(
										id__,
										true
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: s2
					module s2
					
					enterSS = 
							{|			i0::enter,
								s0::enter,
								s1::enter,
								j0::enter
							|}
					enteredSS = 
							{|			s0::entered,
								s1::entered
							|}
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						-- declaring identifiers of transitions
						datatype NIDS = 
						              NID_i0|
						              NID_s0|
						              NID_s1|
						              NID_j0
						
						channel internal__ : NIDS
						channel currentState__: NIDS.InOut.State
						channel ext_setPoint__: NIDS.InOut.core_real
						channel ext_pow24VStatus__: NIDS.InOut.Power
						channel int_overLimit__: NIDS.InOut.core_real
						channel int_pwmSignal__: NIDS.InOut.Power
						channel int_underLimit__: NIDS.InOut.core_real
						channel int_DisableHV__: NIDS.InOut
						channel int_ActualHV__: NIDS.InOut.core_real
						
						--	Nodes
						-- declaring all nodes
						
						----------------------------------------------------------------------
						-- Initial: i0
						module i0
						exports
						
							channel enter, interrupt
							
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__) = D__(id__)
						
						endmodule
						----------------------------------------------------------------------
						
						
						----------------------------------------------------------------------
						-- State: s0
						module s0
						
						enterSS = {}
						
						enteredSS = {}
						
						exports
						
							--  Declarations
							
							channel enter, entered, interrupt
							channel enteredL, enteredR
							
											
							
							--	Nodes
							-- declaring all nodes
							
							
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&CALL__checkLimits(
											id__
										) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&CALL__checkLimits(
											id__
										) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
						
						endmodule
						----------------------------------------------------------------------
						
						
						----------------------------------------------------------------------
						-- State: s1
						module s1
						
						enterSS = {}
						
						enteredSS = {}
						
						exports
						
							--  Declarations
							
							channel enter, entered, interrupt
							channel enteredL, enteredR
							
											
							
							--	Nodes
							-- declaring all nodes
							
							
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&(share__choice(ext_setPoint.in?setPoint -> (SStop /\ set_setPoint!setPoint -> SKIP))) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&(share__choice(ext_setPoint.in?setPoint -> (SStop /\ set_setPoint!setPoint -> SKIP))) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
						
						endmodule
						----------------------------------------------------------------------
						
						
						----------------------------------------------------------------------
						-- Junction: j0
						module j0
						exports
						
							channel enter, interrupt
							
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = D__(id__)
						
						endmodule
						----------------------------------------------------------------------
						
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
						
							Behaviour 	= dbisim(
								((
								 (((let
								 	-- IMPLEMENTATION NOTE:
								 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								 	-- modules for defining the semantics of each node.
								 	enterSS = {|
								 	i0::enter,
								 	s0::enter,
								 	s1::enter,
								 	j0::enter
								 	|}
								 	hideSet = union(enterSS,{|exit,exited,internal__|})
								 within 
								 	((let
								 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								 		-- because CSPM modules are used for the semantics of Node.
								 		flowevts = union(enterSS,{|exit,exited,interrupt|})
								 		transSync = {|internal__.NID_i0,internal__.NID_s0,internal__.NID_j0,internal__.NID_s1|}
								 	within
								 		((
								 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								 		   i0::D__(id__)
								 		   [| { share__, terminate } |] (
								 		   s0::D__(id__)
								 		   [| { share__, terminate } |] (
								 		   s1::D__(id__)
								 		   [| { share__, terminate } |] (
								 		   j0::D__(id__)
								 		   )
								 		   )
								 		   )
								 		 )
								 		 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
								 		 [[s1::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s1|}]]
								 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 		 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0|}]]
								 		 )
								 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 		 )
								 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 		|}) |]
								 		 ((i0::enter -> Transitions(id__))
								 		  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 		 )
								 		)
								 		)
								 	)
								 	 \ hideSet)
								 	[[
								 		currentState__.x____ <- currentState,
								 		ext_setPoint__.x____ <- ext_setPoint,
								 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								 		int_overLimit__.x____ <- int_overLimit,
								 		int_pwmSignal__.x____ <- int_pwmSignal,
								 		int_underLimit__.x____ <- int_underLimit,
								 		int_DisableHV__.x____ <- int_DisableHV,
								 		int_ActualHV__.x____ <- int_ActualHV
								 		| x____ <- NIDS
								 	]]
								 )
								 )
								  [[ share__ <- x__ | x__ <- {| share__,setR_power,setR_ActualHV,setR_errorFlag,setR_underLimit,setR_lim,setR_supplyLim,setR_errorAck,setR_res,setR_overLimit,setR_setPoint |} ]] 
								  [[set_power <- setL_power,set_ActualHV <- setL_ActualHV,set_errorFlag <- setL_errorFlag,set_underLimit <- setL_underLimit,set_lim <- setL_lim,set_supplyLim <- setL_supplyLim,set_errorAck <- setL_errorAck,set_res <- setL_res,set_overLimit <- setL_overLimit,set_setPoint <- setL_setPoint]]
								 )
								 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
								 			,setL_power
								 			,setL_ActualHV
								 			,setL_errorFlag
								 			,setL_underLimit
								 			,setL_lim
								 			,setL_supplyLim
								 			,setL_errorAck
								 			,setL_res
								 			,setL_overLimit
								 			,setL_setPoint
								 			,setR_power
								 			 			,setR_ActualHV
								 			 			,setR_errorFlag
								 			 			,setR_underLimit
								 			 			,setR_lim
								 			 			,setR_supplyLim
								 			 			,setR_errorAck
								 			 			,setR_res
								 			 			,setR_overLimit
								 			 			,setR_setPoint
								 			|}) |]
								 ((During)
								  [[ share__ <- x__ | x__ <- {| share__,setL_power,setL_ActualHV,setL_errorFlag,setL_underLimit,setL_lim,setL_supplyLim,setL_errorAck,setL_res,setL_overLimit,setL_setPoint |} ]]
								  [[set_power <- setR_power,set_ActualHV <- setR_ActualHV,set_errorFlag <- setR_errorFlag,set_underLimit <- setR_underLimit,set_lim <- setR_lim,set_supplyLim <- setR_supplyLim,set_errorAck <- setR_errorAck,set_res <- setR_res,set_overLimit <- setR_overLimit,set_setPoint <- setR_setPoint]]
								 )
								)[[setL_power <- set_power,setL_ActualHV <- set_ActualHV,setL_errorFlag <- set_errorFlag,setL_underLimit <- set_underLimit,setL_lim <- set_lim,setL_supplyLim <- set_supplyLim,setL_errorAck <- set_errorAck,setL_res <- set_res,setL_overLimit <- set_overLimit,setL_setPoint <- set_setPoint]]
								 [[setR_power <- set_power,setR_ActualHV <- set_ActualHV,setR_errorFlag <- set_errorFlag,setR_underLimit <- set_underLimit,setR_lim <- set_lim,setR_supplyLim <- set_supplyLim,setR_errorAck <- set_errorAck,setR_res <- set_res,setR_overLimit <- set_overLimit,setR_setPoint <- set_setPoint]]
								)\union(enteredSS,{terminate}) 
							)
							During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
									 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
						
							Behaviour 	= dbisim(
								((
								 (((let
								 	-- IMPLEMENTATION NOTE:
								 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								 	-- modules for defining the semantics of each node.
								 	enterSS = {|
								 	i0::enter,
								 	s0::enter,
								 	s1::enter,
								 	j0::enter
								 	|}
								 	hideSet = union(enterSS,{|exit,exited,internal__|})
								 within 
								 	((let
								 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								 		-- because CSPM modules are used for the semantics of Node.
								 		flowevts = union(enterSS,{|exit,exited,interrupt|})
								 		transSync = {|internal__.NID_i0,internal__.NID_s0,internal__.NID_j0,internal__.NID_s1|}
								 	within
								 		((
								 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								 		   i0::VS_O__(id__)
								 		   [| { share__, terminate } |] (
								 		   s0::VS_O__(id__)
								 		   [| { share__, terminate } |] (
								 		   s1::VS_O__(id__)
								 		   [| { share__, terminate } |] (
								 		   j0::VS_O__(id__)
								 		   )
								 		   )
								 		   )
								 		 )
								 		 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
								 		 [[s1::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s1|}]]
								 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 		 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0|}]]
								 		 )
								 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 		 )
								 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 		|}) |]
								 		 ((i0::enter -> Transitions(id__))
								 		  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 		 )
								 		)
								 		)
								 	)
								 	 \ hideSet)
								 	[[
								 		currentState__.x____ <- currentState,
								 		ext_setPoint__.x____ <- ext_setPoint,
								 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								 		int_overLimit__.x____ <- int_overLimit,
								 		int_pwmSignal__.x____ <- int_pwmSignal,
								 		int_underLimit__.x____ <- int_underLimit,
								 		int_DisableHV__.x____ <- int_DisableHV,
								 		int_ActualHV__.x____ <- int_ActualHV
								 		| x____ <- NIDS
								 	]]
								 )
								 )
								  [[ share__ <- x__ | x__ <- {| share__,setR_power,setR_ActualHV,setR_errorFlag,setR_underLimit,setR_lim,setR_supplyLim,setR_errorAck,setR_res,setR_overLimit,setR_setPoint |} ]] 
								  [[set_power <- setL_power,set_ActualHV <- setL_ActualHV,set_errorFlag <- setL_errorFlag,set_underLimit <- setL_underLimit,set_lim <- setL_lim,set_supplyLim <- setL_supplyLim,set_errorAck <- setL_errorAck,set_res <- setL_res,set_overLimit <- setL_overLimit,set_setPoint <- setL_setPoint]]
								 )
								 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
								 			,setL_power
								 			,setL_ActualHV
								 			,setL_errorFlag
								 			,setL_underLimit
								 			,setL_lim
								 			,setL_supplyLim
								 			,setL_errorAck
								 			,setL_res
								 			,setL_overLimit
								 			,setL_setPoint
								 			,setR_power
								 			 			,setR_ActualHV
								 			 			,setR_errorFlag
								 			 			,setR_underLimit
								 			 			,setR_lim
								 			 			,setR_supplyLim
								 			 			,setR_errorAck
								 			 			,setR_res
								 			 			,setR_overLimit
								 			 			,setR_setPoint
								 			|}) |]
								 ((During)
								  [[ share__ <- x__ | x__ <- {| share__,setL_power,setL_ActualHV,setL_errorFlag,setL_underLimit,setL_lim,setL_supplyLim,setL_errorAck,setL_res,setL_overLimit,setL_setPoint |} ]]
								  [[set_power <- setR_power,set_ActualHV <- setR_ActualHV,set_errorFlag <- setR_errorFlag,set_underLimit <- setR_underLimit,set_lim <- setR_lim,set_supplyLim <- setR_supplyLim,set_errorAck <- setR_errorAck,set_res <- setR_res,set_overLimit <- setR_overLimit,set_setPoint <- setR_setPoint]]
								 )
								)[[setL_power <- set_power,setL_ActualHV <- set_ActualHV,setL_errorFlag <- set_errorFlag,setL_underLimit <- set_underLimit,setL_lim <- set_lim,setL_supplyLim <- set_supplyLim,setL_errorAck <- set_errorAck,setL_res <- set_res,setL_overLimit <- set_overLimit,setL_setPoint <- set_setPoint]]
								 [[setR_power <- set_power,setR_ActualHV <- set_ActualHV,setR_errorFlag <- set_errorFlag,setR_underLimit <- set_underLimit,setR_lim <- set_lim,setR_supplyLim <- set_supplyLim,setR_errorAck <- set_errorAck,setR_res <- set_res,setR_overLimit <- set_overLimit,setR_setPoint <- set_setPoint]]
								)\{terminate} 
							)
							During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
									 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
						within
							Inactive [| {terminate} |> SKIP)
						
						Transitions(id__) = ((let
							Trans = (
								((share__ -> SKIP
								 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s1::enter -> SKIP))))
								 	 [] dbisim((true)&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s1::enter -> SKIP)))
								 	 [] dbisim((true)&(internal__!NID_j0 -> SKIP ;  ((share__choice(get_ActualHV?ActualHV -> true&(share__choice(int_ActualHV.out!ActualHV -> SKIP))) ; s0::enter -> SKIP))))
								 	 [] dbisim((true)&(internal__!NID_s1 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(share__choice(get_setPoint?setPoint -> true & (share__choice(set_ActualHV!setPoint -> SKIP)))) ; j0::enter -> SKIP)))
								 ) ; Trans)
								 []
								 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
								 []
								 terminate -> SKIP
							)
						within
							Trans
						)
						)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: s3
					module s3
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__checkLimits(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__checkLimits(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: s4
					module s4
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__supplyVoltCheck(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__supplyVoltCheck(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= true&(share__choice(currentState.out!State_ClosedLoop -> SKIP)) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
					
						Behaviour 	= dbisim(
							((
							 (((let
							 	-- IMPLEMENTATION NOTE:
							 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							 	-- modules for defining the semantics of each node.
							 	enterSS = {|
							 	i0::enter,
							 	s1::enter,
							 	s2::enter,
							 	s3::enter,
							 	s4::enter
							 	|}
							 	hideSet = union(enterSS,{|exit,exited,internal__|})
							 within 
							 	((let
							 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							 		-- because CSPM modules are used for the semantics of Node.
							 		flowevts = union(enterSS,{|exit,exited,interrupt|})
							 		transSync = {|internal__.NID_s4,internal__.NID_s2,internal__.NID_s4,internal__.NID_s3,internal__.NID_s3,internal__.NID_i0|}
							 	within
							 		((
							 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							 		   i0::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   s1::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   s2::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   s3::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   s4::D__(id__)
							 		   )
							 		   )
							 		   )
							 		   )
							 		 )
							 		 [[s1::interrupt <- x__ | x__ <- {|interrupt|}]]
							 		 [[s2::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s2|}]]
							 		 [[s3::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s3,internal__.NID_s3|}]]
							 		 [[s4::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s4,internal__.NID_s4|}]]
							 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 		 )
							 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 		  [[set_lim <- setL_lim]]
							 		 )
							 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 		 			,setL_lim
							 		|}) |]
							 		 ((i0::enter -> Transitions(id__))
							 		  [[ share__ <- x__ | x__ <- {| share__,setL_lim |} ]]
							 		 )
							 		)[[setL_lim <- set_lim]]
							 		)
							 	)
							 	 \ hideSet)
							 	[[
							 		currentState__.x____ <- currentState,
							 		ext_setPoint__.x____ <- ext_setPoint,
							 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
							 		int_overLimit__.x____ <- int_overLimit,
							 		int_pwmSignal__.x____ <- int_pwmSignal,
							 		int_underLimit__.x____ <- int_underLimit,
							 		int_DisableHV__.x____ <- int_DisableHV,
							 		int_ActualHV__.x____ <- int_ActualHV
							 		| x____ <- NIDS
							 	]]
							 )
							 )
							  [[ share__ <- x__ | x__ <- {| share__,setR_power,setR_ActualHV,setR_errorFlag,setR_underLimit,setR_lim,setR_supplyLim,setR_errorAck,setR_res,setR_overLimit,setR_setPoint |} ]] 
							  [[set_power <- setL_power,set_ActualHV <- setL_ActualHV,set_errorFlag <- setL_errorFlag,set_underLimit <- setL_underLimit,set_lim <- setL_lim,set_supplyLim <- setL_supplyLim,set_errorAck <- setL_errorAck,set_res <- setL_res,set_overLimit <- setL_overLimit,set_setPoint <- setL_setPoint]]
							 )
							 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
							 			,setL_power
							 			,setL_ActualHV
							 			,setL_errorFlag
							 			,setL_underLimit
							 			,setL_lim
							 			,setL_supplyLim
							 			,setL_errorAck
							 			,setL_res
							 			,setL_overLimit
							 			,setL_setPoint
							 			,setR_power
							 			 			,setR_ActualHV
							 			 			,setR_errorFlag
							 			 			,setR_underLimit
							 			 			,setR_lim
							 			 			,setR_supplyLim
							 			 			,setR_errorAck
							 			 			,setR_res
							 			 			,setR_overLimit
							 			 			,setR_setPoint
							 			|}) |]
							 ((During)
							  [[ share__ <- x__ | x__ <- {| share__,setL_power,setL_ActualHV,setL_errorFlag,setL_underLimit,setL_lim,setL_supplyLim,setL_errorAck,setL_res,setL_overLimit,setL_setPoint |} ]]
							  [[set_power <- setR_power,set_ActualHV <- setR_ActualHV,set_errorFlag <- setR_errorFlag,set_underLimit <- setR_underLimit,set_lim <- setR_lim,set_supplyLim <- setR_supplyLim,set_errorAck <- setR_errorAck,set_res <- setR_res,set_overLimit <- setR_overLimit,set_setPoint <- setR_setPoint]]
							 )
							)[[setL_power <- set_power,setL_ActualHV <- set_ActualHV,setL_errorFlag <- set_errorFlag,setL_underLimit <- set_underLimit,setL_lim <- set_lim,setL_supplyLim <- set_supplyLim,setL_errorAck <- set_errorAck,setL_res <- set_res,setL_overLimit <- set_overLimit,setL_setPoint <- set_setPoint]]
							 [[setR_power <- set_power,setR_ActualHV <- set_ActualHV,setR_errorFlag <- set_errorFlag,setR_underLimit <- set_underLimit,setR_lim <- set_lim,setR_supplyLim <- set_supplyLim,setR_errorAck <- set_errorAck,setR_res <- set_res,setR_overLimit <- set_overLimit,setR_setPoint <- set_setPoint]]
							)\union(enteredSS,{terminate}) 
						)
						During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
								 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= true&(share__choice(currentState.out!State_ClosedLoop -> SKIP)) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
					
						Behaviour 	= dbisim(
							((
							 (((let
							 	-- IMPLEMENTATION NOTE:
							 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							 	-- modules for defining the semantics of each node.
							 	enterSS = {|
							 	i0::enter,
							 	s1::enter,
							 	s2::enter,
							 	s3::enter,
							 	s4::enter
							 	|}
							 	hideSet = union(enterSS,{|exit,exited,internal__|})
							 within 
							 	((let
							 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							 		-- because CSPM modules are used for the semantics of Node.
							 		flowevts = union(enterSS,{|exit,exited,interrupt|})
							 		transSync = {|internal__.NID_s4,internal__.NID_s2,internal__.NID_s4,internal__.NID_s3,internal__.NID_s3,internal__.NID_i0|}
							 	within
							 		((
							 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							 		   i0::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   s1::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   s2::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   s3::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   s4::VS_O__(id__)
							 		   )
							 		   )
							 		   )
							 		   )
							 		 )
							 		 [[s1::interrupt <- x__ | x__ <- {|interrupt|}]]
							 		 [[s2::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s2|}]]
							 		 [[s3::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s3,internal__.NID_s3|}]]
							 		 [[s4::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s4,internal__.NID_s4|}]]
							 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 		 )
							 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 		  [[set_lim <- setL_lim]]
							 		 )
							 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 		 			,setL_lim
							 		|}) |]
							 		 ((i0::enter -> Transitions(id__))
							 		  [[ share__ <- x__ | x__ <- {| share__,setL_lim |} ]]
							 		 )
							 		)[[setL_lim <- set_lim]]
							 		)
							 	)
							 	 \ hideSet)
							 	[[
							 		currentState__.x____ <- currentState,
							 		ext_setPoint__.x____ <- ext_setPoint,
							 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
							 		int_overLimit__.x____ <- int_overLimit,
							 		int_pwmSignal__.x____ <- int_pwmSignal,
							 		int_underLimit__.x____ <- int_underLimit,
							 		int_DisableHV__.x____ <- int_DisableHV,
							 		int_ActualHV__.x____ <- int_ActualHV
							 		| x____ <- NIDS
							 	]]
							 )
							 )
							  [[ share__ <- x__ | x__ <- {| share__,setR_power,setR_ActualHV,setR_errorFlag,setR_underLimit,setR_lim,setR_supplyLim,setR_errorAck,setR_res,setR_overLimit,setR_setPoint |} ]] 
							  [[set_power <- setL_power,set_ActualHV <- setL_ActualHV,set_errorFlag <- setL_errorFlag,set_underLimit <- setL_underLimit,set_lim <- setL_lim,set_supplyLim <- setL_supplyLim,set_errorAck <- setL_errorAck,set_res <- setL_res,set_overLimit <- setL_overLimit,set_setPoint <- setL_setPoint]]
							 )
							 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
							 			,setL_power
							 			,setL_ActualHV
							 			,setL_errorFlag
							 			,setL_underLimit
							 			,setL_lim
							 			,setL_supplyLim
							 			,setL_errorAck
							 			,setL_res
							 			,setL_overLimit
							 			,setL_setPoint
							 			,setR_power
							 			 			,setR_ActualHV
							 			 			,setR_errorFlag
							 			 			,setR_underLimit
							 			 			,setR_lim
							 			 			,setR_supplyLim
							 			 			,setR_errorAck
							 			 			,setR_res
							 			 			,setR_overLimit
							 			 			,setR_setPoint
							 			|}) |]
							 ((During)
							  [[ share__ <- x__ | x__ <- {| share__,setL_power,setL_ActualHV,setL_errorFlag,setL_underLimit,setL_lim,setL_supplyLim,setL_errorAck,setL_res,setL_overLimit,setL_setPoint |} ]]
							  [[set_power <- setR_power,set_ActualHV <- setR_ActualHV,set_errorFlag <- setR_errorFlag,set_underLimit <- setR_underLimit,set_lim <- setR_lim,set_supplyLim <- setR_supplyLim,set_errorAck <- setR_errorAck,set_res <- setR_res,set_overLimit <- setR_overLimit,set_setPoint <- setR_setPoint]]
							 )
							)[[setL_power <- set_power,setL_ActualHV <- set_ActualHV,setL_errorFlag <- set_errorFlag,setL_underLimit <- set_underLimit,setL_lim <- set_lim,setL_supplyLim <- set_supplyLim,setL_errorAck <- set_errorAck,setL_res <- set_res,setL_overLimit <- set_overLimit,setL_setPoint <- set_setPoint]]
							 [[setR_power <- set_power,setR_ActualHV <- set_ActualHV,setR_errorFlag <- set_errorFlag,setR_underLimit <- set_underLimit,setR_lim <- set_lim,setR_supplyLim <- set_supplyLim,setR_errorAck <- set_errorAck,setR_res <- set_res,setR_overLimit <- set_overLimit,setR_setPoint <- set_setPoint]]
							)\{terminate} 
						)
						During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
								 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
					within
						Inactive [| {terminate} |> SKIP)
					
					Transitions(id__) = ((let
						Trans = share__choice(get_lim?lim -> (
							((share__ -> SKIP
							 [] dbisim(((lim==true))&(internal__!NID_s4 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s1::enter -> SKIP)))
							 	 [] dbisim(((lim==true))&(internal__!NID_s2 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s1::enter -> SKIP)))
							 	 [] dbisim(((lim==false))&(internal__!NID_s4 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(int_pwmSignal.out!Power_On -> SKIP)) ; s3::enter -> SKIP)))
							 	 [] dbisim((true)&(internal__!NID_s3 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s2::enter -> SKIP)))
							 	 [] dbisim(((lim==true))&(internal__!NID_s3 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s1::enter -> SKIP)))
							 	 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s4::enter -> SKIP))))
							 ) ; Trans)
							 []
							 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
						)
						)
					within
						Trans
					)
					)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: ErrorMode
				module ErrorMode
				
				enterSS = 
						{|			i0::enter,
							f0::enter,
							s1::enter,
							s2::enter,
							j0::enter
						|}
				enteredSS = 
						{|			f0::entered,
							s1::entered,
							s2::entered
						|}
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					-- declaring identifiers of transitions
					datatype NIDS = 
					              NID_i0|
					              NID_f0|
					              NID_s1|
					              NID_s2|
					              NID_j0
					
					channel internal__ : NIDS
					channel currentState__: NIDS.InOut.State
					channel ext_setPoint__: NIDS.InOut.core_real
					channel ext_pow24VStatus__: NIDS.InOut.Power
					channel int_overLimit__: NIDS.InOut.core_real
					channel int_pwmSignal__: NIDS.InOut.Power
					channel int_underLimit__: NIDS.InOut.core_real
					channel int_DisableHV__: NIDS.InOut
					channel int_ActualHV__: NIDS.InOut.core_real
					
					--	Nodes
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Final state: f0
					module f0
					
					exports
					
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
						--	Rule: behaviours(Node)
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
								
								Entering 	= entered -> SKIP ; Active
								Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
								Interrupted	= share__choice(exit -> exited -> Inactive)
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: s1
					module s1
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(true & (share__choice(set_setPoint!0 -> SKIP))) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(true & (share__choice(set_setPoint!0 -> SKIP))) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: s2
					module s2
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(true & (share__choice(set_ActualHV!0 -> SKIP))) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(true & (share__choice(set_ActualHV!0 -> SKIP))) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Junction: j0
					module j0
					exports
					
						channel enter, interrupt
						
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					
					endmodule
					----------------------------------------------------------------------
					
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= true&(share__choice(currentState.out!State_ErrorMode -> SKIP));true&CALL__disableHV(
									id__,
									false
								) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
					
						Behaviour 	= dbisim(
							((
							 (((let
							 	-- IMPLEMENTATION NOTE:
							 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							 	-- modules for defining the semantics of each node.
							 	enterSS = {|
							 	i0::enter,
							 	f0::enter,
							 	s1::enter,
							 	s2::enter,
							 	j0::enter
							 	|}
							 	hideSet = union(enterSS,{|exit,exited,internal__|})
							 within 
							 	((let
							 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							 		-- because CSPM modules are used for the semantics of Node.
							 		flowevts = union(enterSS,{|exit,exited,interrupt|})
							 		transSync = {|internal__.NID_s1,internal__.NID_i0,internal__.NID_s2,internal__.NID_j0,internal__.NID_j0|}
							 	within
							 		((
							 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							 		   i0::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   f0::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   s1::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   s2::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   j0::D__(id__)
							 		   )
							 		   )
							 		   )
							 		   )
							 		 )
							 		 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
							 		 [[s1::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s1|}]]
							 		 [[s2::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s2|}]]
							 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 		 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
							 		 )
							 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 		  [[set_ActualHV <- setL_ActualHV,set_setPoint <- setL_setPoint]]
							 		 )
							 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 		 			,setL_ActualHV
							 		 			,setL_setPoint
							 		|}) |]
							 		 ((i0::enter -> Transitions(id__))
							 		  [[ share__ <- x__ | x__ <- {| share__,setL_ActualHV,setL_setPoint |} ]]
							 		 )
							 		)[[setL_ActualHV <- set_ActualHV,setL_setPoint <- set_setPoint]]
							 		)
							 	)
							 	 \ hideSet)
							 	[[
							 		currentState__.x____ <- currentState,
							 		ext_setPoint__.x____ <- ext_setPoint,
							 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
							 		int_overLimit__.x____ <- int_overLimit,
							 		int_pwmSignal__.x____ <- int_pwmSignal,
							 		int_underLimit__.x____ <- int_underLimit,
							 		int_DisableHV__.x____ <- int_DisableHV,
							 		int_ActualHV__.x____ <- int_ActualHV
							 		| x____ <- NIDS
							 	]]
							 )
							 )
							  [[ share__ <- x__ | x__ <- {| share__,setR_power,setR_ActualHV,setR_errorFlag,setR_underLimit,setR_lim,setR_supplyLim,setR_errorAck,setR_res,setR_overLimit,setR_setPoint |} ]] 
							  [[set_power <- setL_power,set_ActualHV <- setL_ActualHV,set_errorFlag <- setL_errorFlag,set_underLimit <- setL_underLimit,set_lim <- setL_lim,set_supplyLim <- setL_supplyLim,set_errorAck <- setL_errorAck,set_res <- setL_res,set_overLimit <- setL_overLimit,set_setPoint <- setL_setPoint]]
							 )
							 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
							 			,setL_power
							 			,setL_ActualHV
							 			,setL_errorFlag
							 			,setL_underLimit
							 			,setL_lim
							 			,setL_supplyLim
							 			,setL_errorAck
							 			,setL_res
							 			,setL_overLimit
							 			,setL_setPoint
							 			,setR_power
							 			 			,setR_ActualHV
							 			 			,setR_errorFlag
							 			 			,setR_underLimit
							 			 			,setR_lim
							 			 			,setR_supplyLim
							 			 			,setR_errorAck
							 			 			,setR_res
							 			 			,setR_overLimit
							 			 			,setR_setPoint
							 			|}) |]
							 ((During)
							  [[ share__ <- x__ | x__ <- {| share__,setL_power,setL_ActualHV,setL_errorFlag,setL_underLimit,setL_lim,setL_supplyLim,setL_errorAck,setL_res,setL_overLimit,setL_setPoint |} ]]
							  [[set_power <- setR_power,set_ActualHV <- setR_ActualHV,set_errorFlag <- setR_errorFlag,set_underLimit <- setR_underLimit,set_lim <- setR_lim,set_supplyLim <- setR_supplyLim,set_errorAck <- setR_errorAck,set_res <- setR_res,set_overLimit <- setR_overLimit,set_setPoint <- setR_setPoint]]
							 )
							)[[setL_power <- set_power,setL_ActualHV <- set_ActualHV,setL_errorFlag <- set_errorFlag,setL_underLimit <- set_underLimit,setL_lim <- set_lim,setL_supplyLim <- set_supplyLim,setL_errorAck <- set_errorAck,setL_res <- set_res,setL_overLimit <- set_overLimit,setL_setPoint <- set_setPoint]]
							 [[setR_power <- set_power,setR_ActualHV <- set_ActualHV,setR_errorFlag <- set_errorFlag,setR_underLimit <- set_underLimit,setR_lim <- set_lim,setR_supplyLim <- set_supplyLim,setR_errorAck <- set_errorAck,setR_res <- set_res,setR_overLimit <- set_overLimit,setR_setPoint <- set_setPoint]]
							)\union(enteredSS,{terminate}) 
						)
						During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
								 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= true&(share__choice(currentState.out!State_ErrorMode -> SKIP));true&CALL__disableHV(
									id__,
									false
								) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
					
						Behaviour 	= dbisim(
							((
							 (((let
							 	-- IMPLEMENTATION NOTE:
							 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							 	-- modules for defining the semantics of each node.
							 	enterSS = {|
							 	i0::enter,
							 	f0::enter,
							 	s1::enter,
							 	s2::enter,
							 	j0::enter
							 	|}
							 	hideSet = union(enterSS,{|exit,exited,internal__|})
							 within 
							 	((let
							 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							 		-- because CSPM modules are used for the semantics of Node.
							 		flowevts = union(enterSS,{|exit,exited,interrupt|})
							 		transSync = {|internal__.NID_s1,internal__.NID_i0,internal__.NID_s2,internal__.NID_j0,internal__.NID_j0|}
							 	within
							 		((
							 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							 		   i0::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   f0::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   s1::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   s2::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   j0::VS_O__(id__)
							 		   )
							 		   )
							 		   )
							 		   )
							 		 )
							 		 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
							 		 [[s1::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s1|}]]
							 		 [[s2::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s2|}]]
							 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 		 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
							 		 )
							 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 		  [[set_ActualHV <- setL_ActualHV,set_setPoint <- setL_setPoint]]
							 		 )
							 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 		 			,setL_ActualHV
							 		 			,setL_setPoint
							 		|}) |]
							 		 ((i0::enter -> Transitions(id__))
							 		  [[ share__ <- x__ | x__ <- {| share__,setL_ActualHV,setL_setPoint |} ]]
							 		 )
							 		)[[setL_ActualHV <- set_ActualHV,setL_setPoint <- set_setPoint]]
							 		)
							 	)
							 	 \ hideSet)
							 	[[
							 		currentState__.x____ <- currentState,
							 		ext_setPoint__.x____ <- ext_setPoint,
							 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
							 		int_overLimit__.x____ <- int_overLimit,
							 		int_pwmSignal__.x____ <- int_pwmSignal,
							 		int_underLimit__.x____ <- int_underLimit,
							 		int_DisableHV__.x____ <- int_DisableHV,
							 		int_ActualHV__.x____ <- int_ActualHV
							 		| x____ <- NIDS
							 	]]
							 )
							 )
							  [[ share__ <- x__ | x__ <- {| share__,setR_power,setR_ActualHV,setR_errorFlag,setR_underLimit,setR_lim,setR_supplyLim,setR_errorAck,setR_res,setR_overLimit,setR_setPoint |} ]] 
							  [[set_power <- setL_power,set_ActualHV <- setL_ActualHV,set_errorFlag <- setL_errorFlag,set_underLimit <- setL_underLimit,set_lim <- setL_lim,set_supplyLim <- setL_supplyLim,set_errorAck <- setL_errorAck,set_res <- setL_res,set_overLimit <- setL_overLimit,set_setPoint <- setL_setPoint]]
							 )
							 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
							 			,setL_power
							 			,setL_ActualHV
							 			,setL_errorFlag
							 			,setL_underLimit
							 			,setL_lim
							 			,setL_supplyLim
							 			,setL_errorAck
							 			,setL_res
							 			,setL_overLimit
							 			,setL_setPoint
							 			,setR_power
							 			 			,setR_ActualHV
							 			 			,setR_errorFlag
							 			 			,setR_underLimit
							 			 			,setR_lim
							 			 			,setR_supplyLim
							 			 			,setR_errorAck
							 			 			,setR_res
							 			 			,setR_overLimit
							 			 			,setR_setPoint
							 			|}) |]
							 ((During)
							  [[ share__ <- x__ | x__ <- {| share__,setL_power,setL_ActualHV,setL_errorFlag,setL_underLimit,setL_lim,setL_supplyLim,setL_errorAck,setL_res,setL_overLimit,setL_setPoint |} ]]
							  [[set_power <- setR_power,set_ActualHV <- setR_ActualHV,set_errorFlag <- setR_errorFlag,set_underLimit <- setR_underLimit,set_lim <- setR_lim,set_supplyLim <- setR_supplyLim,set_errorAck <- setR_errorAck,set_res <- setR_res,set_overLimit <- setR_overLimit,set_setPoint <- setR_setPoint]]
							 )
							)[[setL_power <- set_power,setL_ActualHV <- set_ActualHV,setL_errorFlag <- set_errorFlag,setL_underLimit <- set_underLimit,setL_lim <- set_lim,setL_supplyLim <- set_supplyLim,setL_errorAck <- set_errorAck,setL_res <- set_res,setL_overLimit <- set_overLimit,setL_setPoint <- set_setPoint]]
							 [[setR_power <- set_power,setR_ActualHV <- set_ActualHV,setR_errorFlag <- set_errorFlag,setR_underLimit <- set_underLimit,setR_lim <- set_lim,setR_supplyLim <- set_supplyLim,setR_errorAck <- set_errorAck,setR_res <- set_res,setR_overLimit <- set_overLimit,setR_setPoint <- set_setPoint]]
							)\{terminate} 
						)
						During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
								 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
					within
						Inactive [| {terminate} |> SKIP)
					
					Transitions(id__) = ((let
						Trans = share__choice(get_ActualHV?ActualHV -> get_setPoint?setPoint -> (
							((share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_s1 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(get_setPoint?setPoint -> true&(share__choice(ext_setPoint.out!setPoint -> SKIP))) ; s2::enter -> SKIP)))
							 	 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((share__choice(true & (share__choice(set_errorAck!false -> SKIP))) ; s1::enter -> SKIP))))
							 	 [] dbisim((true)&(internal__!NID_s2 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(get_ActualHV?ActualHV -> true&(share__choice(int_ActualHV.out!ActualHV -> SKIP))) ; j0::enter -> SKIP)))
							 	 [] dbisim((((setPoint==0) and (ActualHV==0)))&(internal__!NID_j0 -> SKIP ;  ((share__choice(true & (share__choice(set_errorAck!true -> SKIP))) ; f0::enter -> SKIP))))
							 	 [] dbisim((((setPoint!=0) or (ActualHV!=0)))&(internal__!NID_j0 -> SKIP ;  ((SKIP ; s1::enter -> SKIP))))
							 ) ; Trans)
							 []
							 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
						)
						)
					within
						Trans
					)
					)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: j0
				module j0
				exports
				
					channel enter, interrupt
					
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				CALL__disableHV(id__,
							param_arg) = (OP_disableHV::O__(id__,
							param_arg))
				[[
					OP_disableHV::int_pwmSignal <- int_pwmSignal
				]]
				[[
					OP_disableHV::get_setPoint <- get_setPoint,
					OP_disableHV::set_setPoint <- set_setPoint,
					OP_disableHV::get_res <- get_res,
					OP_disableHV::set_res <- set_res,
					OP_disableHV::get_errorFlag <- get_errorFlag,
					OP_disableHV::set_errorFlag <- set_errorFlag,
					OP_disableHV::get_lim <- get_lim,
					OP_disableHV::set_lim <- set_lim,
					OP_disableHV::get_supplyLim <- get_supplyLim,
					OP_disableHV::set_supplyLim <- set_supplyLim,
					OP_disableHV::get_ActualHV <- get_ActualHV,
					OP_disableHV::set_ActualHV <- set_ActualHV,
					OP_disableHV::get_errorAck <- get_errorAck,
					OP_disableHV::set_errorAck <- set_errorAck,
					OP_disableHV::get_overLimit <- get_overLimit,
					OP_disableHV::set_overLimit <- set_overLimit,
					OP_disableHV::get_underLimit <- get_underLimit,
					OP_disableHV::set_underLimit <- set_underLimit
				]]
				CALL__supplyVoltCheck(id__) = (OP_supplyVoltCheck::O__(id__))
				[[
					OP_supplyVoltCheck::ext_setPoint <- ext_setPoint,
					OP_supplyVoltCheck::ext_pow24VStatus <- ext_pow24VStatus
				]]
				[[
					OP_supplyVoltCheck::get_setPoint <- get_setPoint,
					OP_supplyVoltCheck::set_setPoint <- set_setPoint,
					OP_supplyVoltCheck::get_res <- get_res,
					OP_supplyVoltCheck::set_res <- set_res,
					OP_supplyVoltCheck::get_errorFlag <- get_errorFlag,
					OP_supplyVoltCheck::set_errorFlag <- set_errorFlag,
					OP_supplyVoltCheck::get_lim <- get_lim,
					OP_supplyVoltCheck::set_lim <- set_lim,
					OP_supplyVoltCheck::get_supplyLim <- get_supplyLim,
					OP_supplyVoltCheck::set_supplyLim <- set_supplyLim,
					OP_supplyVoltCheck::get_ActualHV <- get_ActualHV,
					OP_supplyVoltCheck::set_ActualHV <- set_ActualHV,
					OP_supplyVoltCheck::get_errorAck <- get_errorAck,
					OP_supplyVoltCheck::set_errorAck <- set_errorAck,
					OP_supplyVoltCheck::get_overLimit <- get_overLimit,
					OP_supplyVoltCheck::set_overLimit <- set_overLimit,
					OP_supplyVoltCheck::get_underLimit <- get_underLimit,
					OP_supplyVoltCheck::set_underLimit <- set_underLimit
				]]
				CALL__checkLimits(id__) = (OP_checkLimits::O__(id__))
				[[
					OP_checkLimits::ext_setPoint <- ext_setPoint,
					OP_checkLimits::ext_pow24VStatus <- ext_pow24VStatus
				]]
				[[
					OP_checkLimits::get_setPoint <- get_setPoint,
					OP_checkLimits::set_setPoint <- set_setPoint,
					OP_checkLimits::get_res <- get_res,
					OP_checkLimits::set_res <- set_res,
					OP_checkLimits::get_errorFlag <- get_errorFlag,
					OP_checkLimits::set_errorFlag <- set_errorFlag,
					OP_checkLimits::get_lim <- get_lim,
					OP_checkLimits::set_lim <- set_lim,
					OP_checkLimits::get_supplyLim <- get_supplyLim,
					OP_checkLimits::set_supplyLim <- set_supplyLim,
					OP_checkLimits::get_ActualHV <- get_ActualHV,
					OP_checkLimits::set_ActualHV <- set_ActualHV,
					OP_checkLimits::get_errorAck <- get_errorAck,
					OP_checkLimits::set_errorAck <- set_errorAck,
					OP_checkLimits::get_overLimit <- get_overLimit,
					OP_checkLimits::set_overLimit <- set_overLimit,
					OP_checkLimits::get_underLimit <- get_underLimit,
					OP_checkLimits::set_underLimit <- set_underLimit
				]]
				-- END of Operation calls --
				
				-- STM processes
				STM(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				
				STM_VS_O(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = share__choice(get_lim?lim -> get_errorAck?errorAck -> get_res?res -> get_setPoint?setPoint -> (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_Ramping -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Init::enter -> SKIP)))
						 	 [] dbisim((true)&(internal__!NID_Init -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Wait24Vpower::enter -> SKIP)))
						 	 [] dbisim(((res==true))&(internal__!NID_Wait24Vpower -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_res!false -> SKIP))) ; ErrorMode::enter -> SKIP)))
						 	 [] dbisim(((((setPoint==0) and (lim==false)) and (res==false)))&(internal__!NID_Wait24Vpower -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; ClosedLoop::enter -> SKIP)))
						 	 [] dbisim(((res==true))&(internal__!NID_ClosedLoop -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_res!false -> SKIP))) ; ErrorMode::enter -> SKIP)))
						 	 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; Ramping::enter -> SKIP))))
						 	 [] dbisim((errorAck)&(internal__!NID_ErrorMode -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Wait24Vpower::enter -> SKIP)))
						 	 [] dbisim((true)&(int_DisableHV__!NID_Wait24Vpower.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; j0::enter -> SKIP)))
						 	 [] dbisim((true)&(int_DisableHV__!NID_ClosedLoop.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; j0::enter -> SKIP)))
						 	 [] dbisim((true)&(internal__!NID_j0 -> SKIP ;  ((true&CALL__disableHV(
						 			id__,
						 			true
						 		);share__choice(true & (share__choice(set_res!false -> SKIP))) ; ErrorMode::enter -> SKIP))))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							Ramping::enter,
							Init::enter,
							Wait24Vpower::enter,
							ClosedLoop::enter,
							ErrorMode::enter,
							i0::enter,
							j0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_Ramping,internal__.NID_Init,internal__.NID_Wait24Vpower,internal__.NID_Wait24Vpower,internal__.NID_ClosedLoop,internal__.NID_i0,internal__.NID_ErrorMode,int_DisableHV__.NID_Wait24Vpower.in,int_DisableHV__.NID_ClosedLoop.in,internal__.NID_j0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   Ramping::D__(id__)
								   [| { share__, terminate } |] (
								   Init::D__(id__)
								   [| { share__, terminate } |] (
								   Wait24Vpower::D__(id__)
								   [| { share__, terminate } |] (
								   ClosedLoop::D__(id__)
								   [| { share__, terminate } |] (
								   ErrorMode::D__(id__)
								   [| { share__, terminate } |] (
								   i0::D__(id__)
								   [| { share__, terminate } |] (
								   j0::D__(id__)
								   )
								   )
								   )
								   )
								   )
								   )
								 )
								 [[Ramping::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Ramping|}]]
								 [[Init::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Init|}]]
								 [[Wait24Vpower::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Wait24Vpower,internal__.NID_Wait24Vpower,int_DisableHV__.NID_Wait24Vpower.in|}]]
								 [[ClosedLoop::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_ClosedLoop,int_DisableHV__.NID_ClosedLoop.in|}]]
								 [[ErrorMode::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_ErrorMode|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[set_lim <- setL_lim,set_errorAck <- setL_errorAck,set_res <- setL_res,set_setPoint <- setL_setPoint]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_lim
								 			,setL_errorAck
								 			,setL_res
								 			,setL_setPoint
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_lim,setL_errorAck,setL_res,setL_setPoint |} ]]
								 )
								)[[setL_lim <- set_lim,setL_errorAck <- set_errorAck,setL_res <- set_res,setL_setPoint <- set_setPoint]]
								)
							)
							 \ hideSet)
							[[
								currentState__.x____ <- currentState,
								ext_setPoint__.x____ <- ext_setPoint,
								ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								int_overLimit__.x____ <- int_overLimit,
								int_pwmSignal__.x____ <- int_pwmSignal,
								int_underLimit__.x____ <- int_underLimit,
								int_DisableHV__.x____ <- int_DisableHV,
								int_ActualHV__.x____ <- int_ActualHV
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				IteratedBehaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				Stateful(id__) = 
					((
						(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful(id__) =
					(dbisim(
						sbisim(
							dbisim(
								sbisim(
									dbisim(
										sbisim(
											dbisim(
												sbisim(
													dbisim(
														sbisim(
															dbisim(
																sbisim(
																	dbisim(
																		sbisim(
																			dbisim(
																				sbisim(
																					dbisim(
																						sbisim(
																							dbisim(
																								sbisim(
																									Behaviour(id__)
																									[| {|get_underLimit,set_underLimit,terminate|} |]
																									Memory_underLimit(0)
																								)\{|get_underLimit,set_underLimit|}
																							)
																							[| {|get_overLimit,set_overLimit,terminate|} |]
																							Memory_overLimit(0)
																						)\{|get_overLimit,set_overLimit|}
																					)
																					[| {|get_errorAck,set_errorAck,terminate|} |]
																					Memory_errorAck(false)
																				)\{|get_errorAck,set_errorAck|}
																			)
																			[| {|get_ActualHV,set_ActualHV,terminate|} |]
																			Memory_ActualHV(0)
																		)\{|get_ActualHV,set_ActualHV|}
																	)
																	[| {|get_supplyLim,set_supplyLim,terminate|} |]
																	Memory_supplyLim(false)
																)\{|get_supplyLim,set_supplyLim|}
															)
															[| {|get_lim,set_lim,terminate|} |]
															Memory_lim(false)
														)\{|get_lim,set_lim|}
													)
													[| {|get_errorFlag,set_errorFlag,terminate|} |]
													Memory_errorFlag(true)
												)\{|get_errorFlag,set_errorFlag|}
											)
											[| {|get_res,set_res,terminate|} |]
											Memory_res(false)
										)\{|get_res,set_res|}
									)
									[| {|get_setPoint,set_setPoint,terminate|} |]
									Memory_setPoint(0)
								)\{|get_setPoint,set_setPoint|}
							)
							[| {|get_power,set_power,terminate|} |]
							Memory_power(Power_On)
						)\{|get_power,set_power|}
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							Ramping::enter,
							Init::enter,
							Wait24Vpower::enter,
							ClosedLoop::enter,
							ErrorMode::enter,
							i0::enter,
							j0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_Ramping,internal__.NID_Init,internal__.NID_Wait24Vpower,internal__.NID_Wait24Vpower,internal__.NID_ClosedLoop,internal__.NID_i0,internal__.NID_ErrorMode,int_DisableHV__.NID_Wait24Vpower.in,int_DisableHV__.NID_ClosedLoop.in,internal__.NID_j0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   Ramping::VS_O__(id__)
								   [| { share__, terminate } |] (
								   Init::VS_O__(id__)
								   [| { share__, terminate } |] (
								   Wait24Vpower::VS_O__(id__)
								   [| { share__, terminate } |] (
								   ClosedLoop::VS_O__(id__)
								   [| { share__, terminate } |] (
								   ErrorMode::VS_O__(id__)
								   [| { share__, terminate } |] (
								   i0::VS_O__(id__)
								   [| { share__, terminate } |] (
								   j0::VS_O__(id__)
								   )
								   )
								   )
								   )
								   )
								   )
								 )
								 [[Ramping::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Ramping|}]]
								 [[Init::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Init|}]]
								 [[Wait24Vpower::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Wait24Vpower,internal__.NID_Wait24Vpower,int_DisableHV__.NID_Wait24Vpower.in|}]]
								 [[ClosedLoop::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_ClosedLoop,int_DisableHV__.NID_ClosedLoop.in|}]]
								 [[ErrorMode::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_ErrorMode|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[set_lim <- setL_lim,set_errorAck <- setL_errorAck,set_res <- setL_res,set_setPoint <- setL_setPoint]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_lim
								 			,setL_errorAck
								 			,setL_res
								 			,setL_setPoint
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_lim,setL_errorAck,setL_res,setL_setPoint |} ]]
								 )
								)[[setL_lim <- set_lim,setL_errorAck <- set_errorAck,setL_res <- set_res,setL_setPoint <- set_setPoint]]
								)
							)
							 \ hideSet)
							[[
								currentState__.x____ <- currentState,
								ext_setPoint__.x____ <- ext_setPoint,
								ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								int_overLimit__.x____ <- int_overLimit,
								int_pwmSignal__.x____ <- int_pwmSignal,
								int_underLimit__.x____ <- int_underLimit,
								int_DisableHV__.x____ <- int_DisableHV,
								int_ActualHV__.x____ <- int_ActualHV
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				IteratedBehaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				Stateful_VS_O(id__) = 
					dbisim((
						(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful_VS_O(id__) =
					(dbisim(
						sbisim(
							dbisim(
								sbisim(
									dbisim(
										sbisim(
											dbisim(
												sbisim(
													dbisim(
														sbisim(
															dbisim(
																sbisim(
																	dbisim(
																		sbisim(
																			dbisim(
																				sbisim(
																					dbisim(
																						sbisim(
																							dbisim(
																								sbisim(
																									Behaviour_VS_O(id__)
																									[| {|get_underLimit,set_underLimit,terminate|} |]
																									Memory_underLimit(0)
																								)\{|get_underLimit,set_underLimit|}
																							)
																							[| {|get_overLimit,set_overLimit,terminate|} |]
																							Memory_overLimit(0)
																						)\{|get_overLimit,set_overLimit|}
																					)
																					[| {|get_errorAck,set_errorAck,terminate|} |]
																					Memory_errorAck(false)
																				)\{|get_errorAck,set_errorAck|}
																			)
																			[| {|get_ActualHV,set_ActualHV,terminate|} |]
																			Memory_ActualHV(0)
																		)\{|get_ActualHV,set_ActualHV|}
																	)
																	[| {|get_supplyLim,set_supplyLim,terminate|} |]
																	Memory_supplyLim(false)
																)\{|get_supplyLim,set_supplyLim|}
															)
															[| {|get_lim,set_lim,terminate|} |]
															Memory_lim(false)
														)\{|get_lim,set_lim|}
													)
													[| {|get_errorFlag,set_errorFlag,terminate|} |]
													Memory_errorFlag(true)
												)\{|get_errorFlag,set_errorFlag|}
											)
											[| {|get_res,set_res,terminate|} |]
											Memory_res(false)
										)\{|get_res,set_res|}
									)
									[| {|get_setPoint,set_setPoint,terminate|} |]
									Memory_setPoint(0)
								)\{|get_setPoint,set_setPoint|}
							)
							[| {|get_power,set_power,terminate|} |]
							Memory_power(Power_On)
						)\{|get_power,set_power|}
					)
					)
				
				-- END
				
				-- Memory
				-- Memory variables
				Memory_power(power) =
					get_power!power -> Memory_power(power)
					[]
					set_power?x__ -> Memory_power(x__)
					[]
					terminate -> SKIP
				Memory_setPoint(setPoint) =
					get_setPoint!setPoint -> Memory_setPoint(setPoint)
					[]
					set_setPoint?x__ -> Memory_setPoint(x__)
					[]
					terminate -> SKIP
				Memory_res(res) =
					get_res!res -> Memory_res(res)
					[]
					set_res?x__ -> Memory_res(x__)
					[]
					terminate -> SKIP
				Memory_errorFlag(errorFlag) =
					get_errorFlag!errorFlag -> Memory_errorFlag(errorFlag)
					[]
					set_errorFlag?x__ -> Memory_errorFlag(x__)
					[]
					terminate -> SKIP
				Memory_lim(lim) =
					get_lim!lim -> Memory_lim(lim)
					[]
					set_lim?x__ -> Memory_lim(x__)
					[]
					terminate -> SKIP
				Memory_supplyLim(supplyLim) =
					get_supplyLim!supplyLim -> Memory_supplyLim(supplyLim)
					[]
					set_supplyLim?x__ -> Memory_supplyLim(x__)
					[]
					terminate -> SKIP
				Memory_ActualHV(ActualHV) =
					get_ActualHV!ActualHV -> Memory_ActualHV(ActualHV)
					[]
					set_ActualHV?x__ -> Memory_ActualHV(x__)
					[]
					terminate -> SKIP
				Memory_errorAck(errorAck) =
					get_errorAck!errorAck -> Memory_errorAck(errorAck)
					[]
					set_errorAck?x__ -> Memory_errorAck(x__)
					[]
					terminate -> SKIP
				Memory_overLimit(overLimit) =
					get_overLimit!overLimit -> Memory_overLimit(overLimit)
					[]
					set_overLimit?x__ -> Memory_overLimit(x__)
					[]
					terminate -> SKIP
				Memory_underLimit(underLimit) =
					get_underLimit!underLimit -> Memory_underLimit(underLimit)
					[]
					set_underLimit?x__ -> Memory_underLimit(x__)
					[]
					terminate -> SKIP
				
				-- varMemory process
				varMemory(id__) = Memory_power(Power_On)
				[| { terminate } |] (
				Memory_setPoint(0)
				[| { terminate } |] (
				Memory_res(false)
				[| { terminate } |] (
				Memory_errorFlag(true)
				[| { terminate } |] (
				Memory_lim(false)
				[| { terminate } |] (
				Memory_supplyLim(false)
				[| { terminate } |] (
				Memory_ActualHV(0)
				[| { terminate } |] (
				Memory_errorAck(false)
				[| { terminate } |] (
				Memory_overLimit(0)
				[| { terminate } |] (
				Memory_underLimit(0)
				)
				)
				)
				)
				)
				)
				)
				)
				)
				
				getsetLocalChannels = {|get_power,set_power,get_setPoint,set_setPoint,get_res,set_res,get_errorFlag,set_errorFlag,get_lim,set_lim,get_supplyLim,set_supplyLim,get_ActualHV,set_ActualHV,get_errorAck,set_errorAck,get_overLimit,set_overLimit,get_underLimit,set_underLimit|}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__)
				
				D__(id__) = STM(id__) \ internal_events
				O__(id__) = sbisim(diamond(D__(id__)))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = sbisim(diamond(FVS__(id__)))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				HUP__(id__) = O__(id__) [|{share__}|] SKIP
				
				-- Shared memory
				-- Shared memory variables
				
				-- sharedVarMemory process
				sharedVarMemory(id__) = terminate -> SKIP
				
				sharedVarSync = {||}
				
				sharedVarHide = {||}
			endmodule
			
				-- undefined operations
				
				-- declaring controller memory
				Memory(id__) = SKIP
				
				D__(id__) = 	((
						stm_ref0::D__(id__)[[
							stm_ref0::terminate <- terminate,
							stm_ref0::int_DisableHV <- int_DisableHV,
							stm_ref0::int_ActualHV <- int_ActualHV,
							stm_ref0::int_underLimit <- int_underLimit,
							stm_ref0::int_overLimit <- int_overLimit,
							stm_ref0::ext_setPoint <- ext_setPoint,
							stm_ref0::int_pwmSignal <- int_pwmSignal,
							stm_ref0::ext_pow24VStatus <- ext_pow24VStatus,
							stm_ref0::currentState <- currentState
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				
				-- VS version
				VS__(id__) = 	((
						stm_ref0::VS__(id__)[[
							stm_ref0::terminate <- terminate,
							stm_ref0::int_DisableHV <- int_DisableHV,
							stm_ref0::int_ActualHV <- int_ActualHV,
							stm_ref0::int_underLimit <- int_underLimit,
							stm_ref0::int_overLimit <- int_overLimit,
							stm_ref0::ext_setPoint <- ext_setPoint,
							stm_ref0::int_pwmSignal <- int_pwmSignal,
							stm_ref0::ext_pow24VStatus <- ext_pow24VStatus,
							stm_ref0::currentState <- currentState
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
			
				-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
				O__(id__) = sbisim(diamond(	((
						stm_ref0::O__(id__)[[
							stm_ref0::terminate <- terminate,
							stm_ref0::int_DisableHV <- int_DisableHV,
							stm_ref0::int_ActualHV <- int_ActualHV,
							stm_ref0::int_underLimit <- int_underLimit,
							stm_ref0::int_overLimit <- int_overLimit,
							stm_ref0::ext_setPoint <- ext_setPoint,
							stm_ref0::int_pwmSignal <- int_pwmSignal,
							stm_ref0::ext_pow24VStatus <- ext_pow24VStatus,
							stm_ref0::currentState <- currentState
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				))
								
				-- VS_O version
				VS_O__(id__) = sbisim(diamond(	((
						stm_ref0::VS_O__(id__)[[
							stm_ref0::terminate <- terminate,
							stm_ref0::int_DisableHV <- int_DisableHV,
							stm_ref0::int_ActualHV <- int_ActualHV,
							stm_ref0::int_underLimit <- int_underLimit,
							stm_ref0::int_overLimit <- int_overLimit,
							stm_ref0::ext_setPoint <- ext_setPoint,
							stm_ref0::int_pwmSignal <- int_pwmSignal,
							stm_ref0::ext_pow24VStatus <- ext_pow24VStatus,
							stm_ref0::currentState <- currentState
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				))
			
				HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP			
	
		endmodule
		module ctrl_ref1
			shared_variable_events = {|
			|}
			
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
	
			-- declaring controller events
			channel ext_pow24VStatus: InOut.Power
			channel int_overLimit: InOut.core_real
			channel int_underLimit: InOut.core_real
			channel int_DisableHV: InOut
			channel int_ActualHV: InOut.core_real
			
			
			
			-- declaring call and ret events for undefined operations
			
			-- declaring controller termination channel
			channel terminate
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	ext_pow24VStatus,
				int_overLimit,
				int_underLimit,
				int_DisableHV,
				int_ActualHV
			|}
	
			-- defined operations
		
			-- declaring machines
			module stm_ref0
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_s0
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_overLimit, set_overLimit, setL_overLimit, setR_overLimit: core_real
				channel get_underLimit, set_underLimit, setL_underLimit, setR_underLimit: core_real
				channel get_ActualHV, set_ActualHV, setL_ActualHV, setR_ActualHV: core_real
				channel get_power, set_power, setL_power, setR_power: Power
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel int_overLimit__: NIDS.InOut.core_real
				channel int_overLimit: InOut.core_real
				channel int_underLimit__: NIDS.InOut.core_real
				channel int_underLimit: InOut.core_real
				channel int_DisableHV__: NIDS.InOut
				channel int_DisableHV: InOut
				channel int_ActualHV__: NIDS.InOut.core_real
				channel int_ActualHV: InOut.core_real
				channel ext_pow24VStatus__: NIDS.InOut.Power
				channel ext_pow24VStatus: InOut.Power
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i0::enter,
				s0::enter
				|}
				
				enteredSS = 	{|
				s0::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	int_overLimit,
					int_underLimit,
					int_DisableHV,
					int_ActualHV,
					ext_pow24VStatus
					|}
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: s0
				module s0
				
				enterSS = 
						{|			i0::enter,
							f0::enter,
							Waiting::enter,
							PowerStatusRead::enter,
							ActualHVRead::enter,
							PowerAndActualHVRead::enter
						|}
				enteredSS = 
						{|			f0::entered,
							Waiting::entered,
							PowerStatusRead::entered,
							ActualHVRead::entered,
							PowerAndActualHVRead::entered
						|}
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					-- declaring identifiers of transitions
					datatype NIDS = 
					              NID_i0|
					              NID_f0|
					              NID_Waiting|
					              NID_PowerStatusRead|
					              NID_ActualHVRead|
					              NID_PowerAndActualHVRead
					
					channel internal__ : NIDS
					channel int_overLimit__: NIDS.InOut.core_real
					channel int_underLimit__: NIDS.InOut.core_real
					channel int_DisableHV__: NIDS.InOut
					channel int_ActualHV__: NIDS.InOut.core_real
					channel ext_pow24VStatus__: NIDS.InOut.Power
					
					--	Nodes
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Final state: f0
					module f0
					
					exports
					
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
						--	Rule: behaviours(Node)
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
								
								Entering 	= entered -> SKIP ; Active
								Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
								Interrupted	= share__choice(exit -> exited -> Inactive)
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: Waiting
					module Waiting
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: PowerStatusRead
					module PowerStatusRead
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: ActualHVRead
					module ActualHVRead
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: PowerAndActualHVRead
					module PowerAndActualHVRead
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
					
						Behaviour 	= dbisim(
							((
							 (((let
							 	-- IMPLEMENTATION NOTE:
							 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							 	-- modules for defining the semantics of each node.
							 	enterSS = {|
							 	i0::enter,
							 	f0::enter,
							 	Waiting::enter,
							 	PowerStatusRead::enter,
							 	ActualHVRead::enter,
							 	PowerAndActualHVRead::enter
							 	|}
							 	hideSet = union(enterSS,{|exit,exited,internal__|})
							 within 
							 	((let
							 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							 		-- because CSPM modules are used for the semantics of Node.
							 		flowevts = union(enterSS,{|exit,exited,interrupt|})
							 		transSync = {|internal__.NID_i0,internal__.NID_ActualHVRead,internal__.NID_ActualHVRead,internal__.NID_PowerStatusRead,ext_pow24VStatus__.NID_Waiting.in,int_ActualHV__.NID_Waiting.in,int_ActualHV__.NID_PowerStatusRead.in,ext_pow24VStatus__.NID_ActualHVRead.in,internal__.NID_PowerAndActualHVRead,internal__.NID_PowerAndActualHVRead,internal__.NID_PowerAndActualHVRead|}
							 	within
							 		((
							 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							 		   i0::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   f0::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   Waiting::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   PowerStatusRead::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   ActualHVRead::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   PowerAndActualHVRead::D__(id__)
							 		   )
							 		   )
							 		   )
							 		   )
							 		   )
							 		 )
							 		 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
							 		 [[Waiting::interrupt <- x__ | x__ <- {|interrupt,ext_pow24VStatus__.NID_Waiting.in,int_ActualHV__.NID_Waiting.in|}]]
							 		 [[PowerStatusRead::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_PowerStatusRead,int_ActualHV__.NID_PowerStatusRead.in|}]]
							 		 [[ActualHVRead::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_ActualHVRead,internal__.NID_ActualHVRead,ext_pow24VStatus__.NID_ActualHVRead.in|}]]
							 		 [[PowerAndActualHVRead::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_PowerAndActualHVRead,internal__.NID_PowerAndActualHVRead,internal__.NID_PowerAndActualHVRead|}]]
							 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 		 )
							 		  [[ share__ <- x__ | x__ <- {| share__,setR_power,setR_ActualHV |} ]] 
							 		  [[set_overLimit <- setL_overLimit,set_power <- setL_power,set_underLimit <- setL_underLimit,set_ActualHV <- setL_ActualHV]]
							 		 )
							 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 		 			,setL_overLimit
							 		 			,setL_power
							 		 			,setL_underLimit
							 		 			,setL_ActualHV
							 		 			,setR_power
							 		 			 			,setR_ActualHV
							 		 			|}) |]
							 		 ((i0::enter -> Transitions(id__))
							 		  [[ share__ <- x__ | x__ <- {| share__,setL_overLimit,setL_power,setL_underLimit,setL_ActualHV |} ]]
							 		  [[set_power <- setR_power,set_ActualHV <- setR_ActualHV]]
							 		 )
							 		)[[setL_overLimit <- set_overLimit,setL_power <- set_power,setL_underLimit <- set_underLimit,setL_ActualHV <- set_ActualHV]]
							 		 [[setR_power <- set_power,setR_ActualHV <- set_ActualHV]]
							 		)
							 	)
							 	 \ hideSet)
							 	[[
							 		int_overLimit__.x____ <- int_overLimit,
							 		int_underLimit__.x____ <- int_underLimit,
							 		int_DisableHV__.x____ <- int_DisableHV,
							 		int_ActualHV__.x____ <- int_ActualHV,
							 		ext_pow24VStatus__.x____ <- ext_pow24VStatus
							 		| x____ <- NIDS
							 	]]
							 )
							 )
							  [[ share__ <- x__ | x__ <- {| share__,setR_overLimit,setR_power,setR_underLimit,setR_ActualHV |} ]] 
							  [[set_overLimit <- setL_overLimit,set_power <- setL_power,set_underLimit <- setL_underLimit,set_ActualHV <- setL_ActualHV]]
							 )
							 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
							 			,setL_overLimit
							 			,setL_power
							 			,setL_underLimit
							 			,setL_ActualHV
							 			,setR_overLimit
							 			 			,setR_power
							 			 			,setR_underLimit
							 			 			,setR_ActualHV
							 			|}) |]
							 ((During)
							  [[ share__ <- x__ | x__ <- {| share__,setL_overLimit,setL_power,setL_underLimit,setL_ActualHV |} ]]
							  [[set_overLimit <- setR_overLimit,set_power <- setR_power,set_underLimit <- setR_underLimit,set_ActualHV <- setR_ActualHV]]
							 )
							)[[setL_overLimit <- set_overLimit,setL_power <- set_power,setL_underLimit <- set_underLimit,setL_ActualHV <- set_ActualHV]]
							 [[setR_overLimit <- set_overLimit,setR_power <- set_power,setR_underLimit <- set_underLimit,setR_ActualHV <- set_ActualHV]]
							)\union(enteredSS,{terminate}) 
						)
						During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
								 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
					
						Behaviour 	= dbisim(
							((
							 (((let
							 	-- IMPLEMENTATION NOTE:
							 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							 	-- modules for defining the semantics of each node.
							 	enterSS = {|
							 	i0::enter,
							 	f0::enter,
							 	Waiting::enter,
							 	PowerStatusRead::enter,
							 	ActualHVRead::enter,
							 	PowerAndActualHVRead::enter
							 	|}
							 	hideSet = union(enterSS,{|exit,exited,internal__|})
							 within 
							 	((let
							 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							 		-- because CSPM modules are used for the semantics of Node.
							 		flowevts = union(enterSS,{|exit,exited,interrupt|})
							 		transSync = {|internal__.NID_i0,internal__.NID_ActualHVRead,internal__.NID_ActualHVRead,internal__.NID_PowerStatusRead,ext_pow24VStatus__.NID_Waiting.in,int_ActualHV__.NID_Waiting.in,int_ActualHV__.NID_PowerStatusRead.in,ext_pow24VStatus__.NID_ActualHVRead.in,internal__.NID_PowerAndActualHVRead,internal__.NID_PowerAndActualHVRead,internal__.NID_PowerAndActualHVRead|}
							 	within
							 		((
							 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							 		   i0::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   f0::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   Waiting::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   PowerStatusRead::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   ActualHVRead::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   PowerAndActualHVRead::VS_O__(id__)
							 		   )
							 		   )
							 		   )
							 		   )
							 		   )
							 		 )
							 		 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
							 		 [[Waiting::interrupt <- x__ | x__ <- {|interrupt,ext_pow24VStatus__.NID_Waiting.in,int_ActualHV__.NID_Waiting.in|}]]
							 		 [[PowerStatusRead::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_PowerStatusRead,int_ActualHV__.NID_PowerStatusRead.in|}]]
							 		 [[ActualHVRead::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_ActualHVRead,internal__.NID_ActualHVRead,ext_pow24VStatus__.NID_ActualHVRead.in|}]]
							 		 [[PowerAndActualHVRead::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_PowerAndActualHVRead,internal__.NID_PowerAndActualHVRead,internal__.NID_PowerAndActualHVRead|}]]
							 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 		 )
							 		  [[ share__ <- x__ | x__ <- {| share__,setR_power,setR_ActualHV |} ]] 
							 		  [[set_overLimit <- setL_overLimit,set_power <- setL_power,set_underLimit <- setL_underLimit,set_ActualHV <- setL_ActualHV]]
							 		 )
							 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 		 			,setL_overLimit
							 		 			,setL_power
							 		 			,setL_underLimit
							 		 			,setL_ActualHV
							 		 			,setR_power
							 		 			 			,setR_ActualHV
							 		 			|}) |]
							 		 ((i0::enter -> Transitions(id__))
							 		  [[ share__ <- x__ | x__ <- {| share__,setL_overLimit,setL_power,setL_underLimit,setL_ActualHV |} ]]
							 		  [[set_power <- setR_power,set_ActualHV <- setR_ActualHV]]
							 		 )
							 		)[[setL_overLimit <- set_overLimit,setL_power <- set_power,setL_underLimit <- set_underLimit,setL_ActualHV <- set_ActualHV]]
							 		 [[setR_power <- set_power,setR_ActualHV <- set_ActualHV]]
							 		)
							 	)
							 	 \ hideSet)
							 	[[
							 		int_overLimit__.x____ <- int_overLimit,
							 		int_underLimit__.x____ <- int_underLimit,
							 		int_DisableHV__.x____ <- int_DisableHV,
							 		int_ActualHV__.x____ <- int_ActualHV,
							 		ext_pow24VStatus__.x____ <- ext_pow24VStatus
							 		| x____ <- NIDS
							 	]]
							 )
							 )
							  [[ share__ <- x__ | x__ <- {| share__,setR_overLimit,setR_power,setR_underLimit,setR_ActualHV |} ]] 
							  [[set_overLimit <- setL_overLimit,set_power <- setL_power,set_underLimit <- setL_underLimit,set_ActualHV <- setL_ActualHV]]
							 )
							 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
							 			,setL_overLimit
							 			,setL_power
							 			,setL_underLimit
							 			,setL_ActualHV
							 			,setR_overLimit
							 			 			,setR_power
							 			 			,setR_underLimit
							 			 			,setR_ActualHV
							 			|}) |]
							 ((During)
							  [[ share__ <- x__ | x__ <- {| share__,setL_overLimit,setL_power,setL_underLimit,setL_ActualHV |} ]]
							  [[set_overLimit <- setR_overLimit,set_power <- setR_power,set_underLimit <- setR_underLimit,set_ActualHV <- setR_ActualHV]]
							 )
							)[[setL_overLimit <- set_overLimit,setL_power <- set_power,setL_underLimit <- set_underLimit,setL_ActualHV <- set_ActualHV]]
							 [[setR_overLimit <- set_overLimit,setR_power <- set_power,setR_underLimit <- set_underLimit,setR_ActualHV <- set_ActualHV]]
							)\{terminate} 
						)
						During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
								 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
					within
						Inactive [| {terminate} |> SKIP)
					
					Transitions(id__) = ((let
						Trans = share__choice(get_overLimit?overLimit -> get_power?power -> get_underLimit?underLimit -> get_ActualHV?ActualHV -> (
							((share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; Waiting::enter -> SKIP))))
							 	 [] dbisim(((ActualHV>overLimit))&(internal__!NID_ActualHVRead -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(int_DisableHV.out -> SKIP)) ; f0::enter -> SKIP)))
							 	 [] dbisim(((ActualHV<underLimit))&(internal__!NID_ActualHVRead -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(int_DisableHV.out -> SKIP)) ; f0::enter -> SKIP)))
							 	 [] dbisim(((power==Power_Off))&(internal__!NID_PowerStatusRead -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(int_DisableHV.out -> SKIP)) ; f0::enter -> SKIP)))
							 	 [] dbisim((true)&(ext_pow24VStatus__!NID_Waiting.in?power:{power|power <- Power, true} -> share__choice(set_power!power -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; PowerStatusRead::enter -> SKIP)))
							 	 [] dbisim((true)&(int_ActualHV__!NID_Waiting.in?ActualHV:{ActualHV|ActualHV <- core_real, true} -> share__choice(set_ActualHV!ActualHV -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; ActualHVRead::enter -> SKIP)))
							 	 [] dbisim((true)&(int_ActualHV__!NID_PowerStatusRead.in?ActualHV:{ActualHV|ActualHV <- core_real, true} -> share__choice(set_ActualHV!ActualHV -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; PowerAndActualHVRead::enter -> SKIP)))
							 	 [] dbisim((true)&(ext_pow24VStatus__!NID_ActualHVRead.in?power:{power|power <- Power, true} -> share__choice(set_power!power -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; PowerAndActualHVRead::enter -> SKIP)))
							 	 [] dbisim(((ActualHV<underLimit))&(internal__!NID_PowerAndActualHVRead -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(int_DisableHV.out -> SKIP)) ; f0::enter -> SKIP)))
							 	 [] dbisim(((ActualHV>overLimit))&(internal__!NID_PowerAndActualHVRead -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(int_DisableHV.out -> SKIP)) ; f0::enter -> SKIP)))
							 	 [] dbisim(((power==Power_Off))&(internal__!NID_PowerAndActualHVRead -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(int_DisableHV.out -> SKIP)) ; f0::enter -> SKIP)))
							 ) ; Trans)
							 []
							 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
						)
						)
					within
						Trans
					)
					)
					
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
				
				-- STM processes
				STM(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				
				STM_VS_O(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((true&(share__choice(int_overLimit.in?overLimit -> (SStop /\ set_overLimit!overLimit -> SKIP)));true&(share__choice(int_underLimit.in?underLimit -> (SStop /\ set_underLimit!underLimit -> SKIP))) ; s0::enter -> SKIP))))
						 	 [] dbisim((true)&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s0::enter -> SKIP)))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							s0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,internal__.NID_s0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::D__(id__)
								   [| { share__, terminate } |] (
								   s0::D__(id__)
								   )
								 )
								 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								int_overLimit__.x____ <- int_overLimit,
								int_underLimit__.x____ <- int_underLimit,
								int_DisableHV__.x____ <- int_DisableHV,
								int_ActualHV__.x____ <- int_ActualHV,
								ext_pow24VStatus__.x____ <- ext_pow24VStatus
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				IteratedBehaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				Stateful(id__) = 
					((
						(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful(id__) =
					(dbisim(
						sbisim(
							dbisim(
								sbisim(
									dbisim(
										sbisim(
											dbisim(
												sbisim(
													Behaviour(id__)
													[| {|get_power,set_power,terminate|} |]
													Memory_power(Power_On)
												)\{|get_power,set_power|}
											)
											[| {|get_ActualHV,set_ActualHV,terminate|} |]
											Memory_ActualHV(0)
										)\{|get_ActualHV,set_ActualHV|}
									)
									[| {|get_underLimit,set_underLimit,terminate|} |]
									Memory_underLimit(0)
								)\{|get_underLimit,set_underLimit|}
							)
							[| {|get_overLimit,set_overLimit,terminate|} |]
							Memory_overLimit(0)
						)\{|get_overLimit,set_overLimit|}
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							s0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,internal__.NID_s0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::VS_O__(id__)
								   [| { share__, terminate } |] (
								   s0::VS_O__(id__)
								   )
								 )
								 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								int_overLimit__.x____ <- int_overLimit,
								int_underLimit__.x____ <- int_underLimit,
								int_DisableHV__.x____ <- int_DisableHV,
								int_ActualHV__.x____ <- int_ActualHV,
								ext_pow24VStatus__.x____ <- ext_pow24VStatus
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				IteratedBehaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				Stateful_VS_O(id__) = 
					dbisim((
						(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful_VS_O(id__) =
					(dbisim(
						sbisim(
							dbisim(
								sbisim(
									dbisim(
										sbisim(
											dbisim(
												sbisim(
													Behaviour_VS_O(id__)
													[| {|get_power,set_power,terminate|} |]
													Memory_power(Power_On)
												)\{|get_power,set_power|}
											)
											[| {|get_ActualHV,set_ActualHV,terminate|} |]
											Memory_ActualHV(0)
										)\{|get_ActualHV,set_ActualHV|}
									)
									[| {|get_underLimit,set_underLimit,terminate|} |]
									Memory_underLimit(0)
								)\{|get_underLimit,set_underLimit|}
							)
							[| {|get_overLimit,set_overLimit,terminate|} |]
							Memory_overLimit(0)
						)\{|get_overLimit,set_overLimit|}
					)
					)
				
				-- END
				
				-- Memory
				-- Memory variables
				Memory_overLimit(overLimit) =
					get_overLimit!overLimit -> Memory_overLimit(overLimit)
					[]
					set_overLimit?x__ -> Memory_overLimit(x__)
					[]
					terminate -> SKIP
				Memory_underLimit(underLimit) =
					get_underLimit!underLimit -> Memory_underLimit(underLimit)
					[]
					set_underLimit?x__ -> Memory_underLimit(x__)
					[]
					terminate -> SKIP
				Memory_ActualHV(ActualHV) =
					get_ActualHV!ActualHV -> Memory_ActualHV(ActualHV)
					[]
					set_ActualHV?x__ -> Memory_ActualHV(x__)
					[]
					terminate -> SKIP
				Memory_power(power) =
					get_power!power -> Memory_power(power)
					[]
					set_power?x__ -> Memory_power(x__)
					[]
					terminate -> SKIP
				
				-- varMemory process
				varMemory(id__) = Memory_overLimit(0)
				[| { terminate } |] (
				Memory_underLimit(0)
				[| { terminate } |] (
				Memory_ActualHV(0)
				[| { terminate } |] (
				Memory_power(Power_On)
				)
				)
				)
				
				getsetLocalChannels = {|get_overLimit,set_overLimit,get_underLimit,set_underLimit,get_ActualHV,set_ActualHV,get_power,set_power|}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__)
				
				D__(id__) = STM(id__) \ internal_events
				O__(id__) = sbisim(diamond(D__(id__)))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = sbisim(diamond(FVS__(id__)))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				HUP__(id__) = O__(id__) [|{share__}|] SKIP
				
				-- Shared memory
				-- Shared memory variables
				
				-- sharedVarMemory process
				sharedVarMemory(id__) = terminate -> SKIP
				
				sharedVarSync = {||}
				
				sharedVarHide = {||}
			endmodule
			
				-- undefined operations
				
				-- declaring controller memory
				Memory(id__) = SKIP
				
				D__(id__) = 	((
						stm_ref0::D__(id__)[[
							stm_ref0::terminate <- terminate,
							stm_ref0::int_ActualHV <- int_ActualHV,
							stm_ref0::int_DisableHV <- int_DisableHV,
							stm_ref0::int_underLimit <- int_underLimit,
							stm_ref0::int_overLimit <- int_overLimit,
							stm_ref0::ext_pow24VStatus <- ext_pow24VStatus
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				
				-- VS version
				VS__(id__) = 	((
						stm_ref0::VS__(id__)[[
							stm_ref0::terminate <- terminate,
							stm_ref0::int_ActualHV <- int_ActualHV,
							stm_ref0::int_DisableHV <- int_DisableHV,
							stm_ref0::int_underLimit <- int_underLimit,
							stm_ref0::int_overLimit <- int_overLimit,
							stm_ref0::ext_pow24VStatus <- ext_pow24VStatus
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
			
				-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
				O__(id__) = sbisim(diamond(	((
						stm_ref0::O__(id__)[[
							stm_ref0::terminate <- terminate,
							stm_ref0::int_ActualHV <- int_ActualHV,
							stm_ref0::int_DisableHV <- int_DisableHV,
							stm_ref0::int_underLimit <- int_underLimit,
							stm_ref0::int_overLimit <- int_overLimit,
							stm_ref0::ext_pow24VStatus <- ext_pow24VStatus
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				))
								
				-- VS_O version
				VS_O__(id__) = sbisim(diamond(	((
						stm_ref0::VS_O__(id__)[[
							stm_ref0::terminate <- terminate,
							stm_ref0::int_ActualHV <- int_ActualHV,
							stm_ref0::int_DisableHV <- int_DisableHV,
							stm_ref0::int_underLimit <- int_underLimit,
							stm_ref0::int_overLimit <- int_overLimit,
							stm_ref0::ext_pow24VStatus <- ext_pow24VStatus
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				))
			
				HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP			
	
		endmodule
		module ctrl_ref2
			shared_variable_events = {|
			|}
			
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
	
			-- declaring controller events
			channel ext_pow24VStatus: InOut.Power
			channel ext_pow24_1: InOut.Power
			channel ext_pow24_2: InOut.Power
			
			
			
			-- declaring call and ret events for undefined operations
			
			-- declaring controller termination channel
			channel terminate
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	ext_pow24VStatus,
				ext_pow24_1,
				ext_pow24_2
			|}
	
			-- defined operations
		
			-- declaring machines
			module stm0
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_s0
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_power, set_power, setL_power, setR_power: Power
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel ext_pow24VStatus__: NIDS.InOut.Power
				channel ext_pow24VStatus: InOut.Power
				channel ext_pow24_1__: NIDS.InOut.Power
				channel ext_pow24_1: InOut.Power
				channel ext_pow24_2__: NIDS.InOut.Power
				channel ext_pow24_2: InOut.Power
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i0::enter,
				s0::enter
				|}
				
				enteredSS = 	{|
				s0::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	ext_pow24VStatus,
					ext_pow24_1,
					ext_pow24_2
					|}
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: s0
				module s0
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= true&(share__choice(ext_pow24VStatus.in?power -> (SStop /\ set_power!power -> SKIP))) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= true&(share__choice(ext_pow24VStatus.in?power -> (SStop /\ set_power!power -> SKIP))) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
				
				-- STM processes
				STM(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				
				STM_VS_O(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s0::enter -> SKIP))))
						 	 [] dbisim((true)&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(get_power?power -> true&(share__choice(ext_pow24_1.out!power -> SKIP)));share__choice(get_power?power -> true&(share__choice(ext_pow24_2.out!power -> SKIP))) ; s0::enter -> SKIP)))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							s0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,internal__.NID_s0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::D__(id__)
								   [| { share__, terminate } |] (
								   s0::D__(id__)
								   )
								 )
								 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								ext_pow24_1__.x____ <- ext_pow24_1,
								ext_pow24_2__.x____ <- ext_pow24_2
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				IteratedBehaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				Stateful(id__) = 
					((
						(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful(id__) =
					(dbisim(
						sbisim(
							Behaviour(id__)
							[| {|get_power,set_power,terminate|} |]
							Memory_power(Power_On)
						)\{|get_power,set_power|}
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							s0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,internal__.NID_s0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::VS_O__(id__)
								   [| { share__, terminate } |] (
								   s0::VS_O__(id__)
								   )
								 )
								 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								ext_pow24_1__.x____ <- ext_pow24_1,
								ext_pow24_2__.x____ <- ext_pow24_2
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				IteratedBehaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				Stateful_VS_O(id__) = 
					dbisim((
						(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful_VS_O(id__) =
					(dbisim(
						sbisim(
							Behaviour_VS_O(id__)
							[| {|get_power,set_power,terminate|} |]
							Memory_power(Power_On)
						)\{|get_power,set_power|}
					)
					)
				
				-- END
				
				-- Memory
				-- Memory variables
				Memory_power(power) =
					get_power!power -> Memory_power(power)
					[]
					set_power?x__ -> Memory_power(x__)
					[]
					terminate -> SKIP
				
				-- varMemory process
				varMemory(id__) = Memory_power(Power_On)
				
				getsetLocalChannels = {|get_power,set_power|}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__)
				
				D__(id__) = STM(id__) \ internal_events
				O__(id__) = sbisim(diamond(D__(id__)))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = sbisim(diamond(FVS__(id__)))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				HUP__(id__) = O__(id__) [|{share__}|] SKIP
				
				-- Shared memory
				-- Shared memory variables
				
				-- sharedVarMemory process
				sharedVarMemory(id__) = terminate -> SKIP
				
				sharedVarSync = {||}
				
				sharedVarHide = {||}
			endmodule
			
				-- undefined operations
				
				-- declaring controller memory
				Memory(id__) = SKIP
				
				D__(id__) = 	((
						stm0::D__(id__)[[
							stm0::terminate <- terminate,
							stm0::ext_pow24VStatus <- ext_pow24VStatus,
							stm0::ext_pow24_1 <- ext_pow24_1,
							stm0::ext_pow24_2 <- ext_pow24_2
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				
				-- VS version
				VS__(id__) = 	((
						stm0::VS__(id__)[[
							stm0::terminate <- terminate,
							stm0::ext_pow24VStatus <- ext_pow24VStatus,
							stm0::ext_pow24_1 <- ext_pow24_1,
							stm0::ext_pow24_2 <- ext_pow24_2
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
			
				-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
				O__(id__) = sbisim(diamond(	((
						stm0::O__(id__)[[
							stm0::terminate <- terminate,
							stm0::ext_pow24VStatus <- ext_pow24VStatus,
							stm0::ext_pow24_1 <- ext_pow24_1,
							stm0::ext_pow24_2 <- ext_pow24_2
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				))
								
				-- VS_O version
				VS_O__(id__) = sbisim(diamond(	((
						stm0::VS_O__(id__)[[
							stm0::terminate <- terminate,
							stm0::ext_pow24VStatus <- ext_pow24VStatus,
							stm0::ext_pow24_1 <- ext_pow24_1,
							stm0::ext_pow24_2 <- ext_pow24_2
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				))
			
				HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP			
	
		endmodule
		module ctrl_ref3
			shared_variable_events = {|
			|}
			
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
	
			-- declaring controller events
			channel int_ActualHV: InOut.core_real
			channel ActualHV_1: InOut.core_real
			channel ActualHV_2: InOut.core_real
			
			
			
			-- declaring call and ret events for undefined operations
			
			-- declaring controller termination channel
			channel terminate
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	int_ActualHV,
				ActualHV_1,
				ActualHV_2
			|}
	
			-- defined operations
		
			-- declaring machines
			module stm0
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_s0
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_ActualHV, set_ActualHV, setL_ActualHV, setR_ActualHV: core_real
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel int_ActualHV__: NIDS.InOut.core_real
				channel int_ActualHV: InOut.core_real
				channel ActualHV_1__: NIDS.InOut.core_real
				channel ActualHV_1: InOut.core_real
				channel ActualHV_2__: NIDS.InOut.core_real
				channel ActualHV_2: InOut.core_real
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i0::enter,
				s0::enter
				|}
				
				enteredSS = 	{|
				s0::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	int_ActualHV,
					ActualHV_1,
					ActualHV_2
					|}
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: s0
				module s0
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= true&(share__choice(int_ActualHV.in?ActualHV -> (SStop /\ set_ActualHV!ActualHV -> SKIP))) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= true&(share__choice(int_ActualHV.in?ActualHV -> (SStop /\ set_ActualHV!ActualHV -> SKIP))) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
				
				-- STM processes
				STM(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				
				STM_VS_O(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s0::enter -> SKIP))))
						 	 [] dbisim((true)&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(get_ActualHV?ActualHV -> true&(share__choice(ActualHV_1.out!ActualHV -> SKIP)));share__choice(get_ActualHV?ActualHV -> true&(share__choice(ActualHV_2.out!ActualHV -> SKIP))) ; s0::enter -> SKIP)))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							s0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,internal__.NID_s0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::D__(id__)
								   [| { share__, terminate } |] (
								   s0::D__(id__)
								   )
								 )
								 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								int_ActualHV__.x____ <- int_ActualHV,
								ActualHV_1__.x____ <- ActualHV_1,
								ActualHV_2__.x____ <- ActualHV_2
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				IteratedBehaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				Stateful(id__) = 
					((
						(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful(id__) =
					(dbisim(
						sbisim(
							Behaviour(id__)
							[| {|get_ActualHV,set_ActualHV,terminate|} |]
							Memory_ActualHV(0)
						)\{|get_ActualHV,set_ActualHV|}
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							s0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,internal__.NID_s0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::VS_O__(id__)
								   [| { share__, terminate } |] (
								   s0::VS_O__(id__)
								   )
								 )
								 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								int_ActualHV__.x____ <- int_ActualHV,
								ActualHV_1__.x____ <- ActualHV_1,
								ActualHV_2__.x____ <- ActualHV_2
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				IteratedBehaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				Stateful_VS_O(id__) = 
					dbisim((
						(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful_VS_O(id__) =
					(dbisim(
						sbisim(
							Behaviour_VS_O(id__)
							[| {|get_ActualHV,set_ActualHV,terminate|} |]
							Memory_ActualHV(0)
						)\{|get_ActualHV,set_ActualHV|}
					)
					)
				
				-- END
				
				-- Memory
				-- Memory variables
				Memory_ActualHV(ActualHV) =
					get_ActualHV!ActualHV -> Memory_ActualHV(ActualHV)
					[]
					set_ActualHV?x__ -> Memory_ActualHV(x__)
					[]
					terminate -> SKIP
				
				-- varMemory process
				varMemory(id__) = Memory_ActualHV(0)
				
				getsetLocalChannels = {|get_ActualHV,set_ActualHV|}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__)
				
				D__(id__) = STM(id__) \ internal_events
				O__(id__) = sbisim(diamond(D__(id__)))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = sbisim(diamond(FVS__(id__)))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				HUP__(id__) = O__(id__) [|{share__}|] SKIP
				
				-- Shared memory
				-- Shared memory variables
				
				-- sharedVarMemory process
				sharedVarMemory(id__) = terminate -> SKIP
				
				sharedVarSync = {||}
				
				sharedVarHide = {||}
			endmodule
			
				-- undefined operations
				
				-- declaring controller memory
				Memory(id__) = SKIP
				
				D__(id__) = 	((
						stm0::D__(id__)[[
							stm0::terminate <- terminate,
							stm0::int_ActualHV <- int_ActualHV,
							stm0::ActualHV_1 <- ActualHV_1,
							stm0::ActualHV_2 <- ActualHV_2
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				
				-- VS version
				VS__(id__) = 	((
						stm0::VS__(id__)[[
							stm0::terminate <- terminate,
							stm0::int_ActualHV <- int_ActualHV,
							stm0::ActualHV_1 <- ActualHV_1,
							stm0::ActualHV_2 <- ActualHV_2
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
			
				-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
				O__(id__) = sbisim(diamond(	((
						stm0::O__(id__)[[
							stm0::terminate <- terminate,
							stm0::int_ActualHV <- int_ActualHV,
							stm0::ActualHV_1 <- ActualHV_1,
							stm0::ActualHV_2 <- ActualHV_2
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				))
								
				-- VS_O version
				VS_O__(id__) = sbisim(diamond(	((
						stm0::VS_O__(id__)[[
							stm0::terminate <- terminate,
							stm0::int_ActualHV <- int_ActualHV,
							stm0::ActualHV_1 <- ActualHV_1,
							stm0::ActualHV_2 <- ActualHV_2
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				))
			
				HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP			
	
		endmodule
	
	-- declaring module memory
	Memory(id__) = SKIP
	
	D__(id__) = let
		Buffer0(<v>) = 
			ctrl_ref1::int_DisableHV.out -> Buffer0(<1>) 
			[]
			ctrl_ref0::int_DisableHV.in -> Buffer0(<>)
		Buffer0(<>) = ctrl_ref1::int_DisableHV.out -> Buffer0(<1>)
		Buffer1(<v>) = 
			ctrl_ref0::int_underLimit.out?x -> Buffer1(<x>)
			[]
			ctrl_ref1::int_underLimit.in!v -> Buffer1(<>)
		Buffer1(<>) = ctrl_ref0::int_underLimit.out?x -> Buffer1(<x>)
		Buffer2(<v>) = 
			ctrl_ref0::int_overLimit.out?x -> Buffer2(<x>)
			[]
			ctrl_ref1::int_overLimit.in!v -> Buffer2(<>)
		Buffer2(<>) = ctrl_ref0::int_overLimit.out?x -> Buffer2(<x>)
		Buffer3(<v>) = 
			ctrl_ref0::int_ActualHV.out?x -> Buffer3(<x>)
			[]
			ctrl_ref3::int_ActualHV.in!v -> Buffer3(<>)
		Buffer3(<>) = ctrl_ref0::int_ActualHV.out?x -> Buffer3(<x>)
		Buffer4(<v>) = 
			ctrl_ref3::ActualHV_1.out?x -> Buffer4(<x>)
			[]
			ctrl_ref1::int_ActualHV.in!v -> Buffer4(<>)
		Buffer4(<>) = ctrl_ref3::ActualHV_1.out?x -> Buffer4(<x>)
		Buffer5(<v>) = 
			ctrl_ref2::ext_pow24_2.out?x -> Buffer5(<x>)
			[]
			ctrl_ref1::ext_pow24VStatus.in!v -> Buffer5(<>)
		Buffer5(<>) = ctrl_ref2::ext_pow24_2.out?x -> Buffer5(<x>)
		Buffer6(<v>) = 
			ctrl_ref2::ext_pow24_1.out?x -> Buffer6(<x>)
			[]
			ctrl_ref0::ext_pow24VStatus.in!v -> Buffer6(<>)
		Buffer6(<>) = ctrl_ref2::ext_pow24_1.out?x -> Buffer6(<x>)
		
	within
		(
			(
				(Buffer0(<>)|||
				Buffer1(<>)|||
				Buffer2(<>)|||
				Buffer3(<>)|||
				Buffer4(<>)|||
				Buffer5(<>)|||
				Buffer6(<>)
				)
					[|{|ctrl_ref0::int_DisableHV,ctrl_ref1::int_DisableHV,ctrl_ref1::int_underLimit,ctrl_ref0::int_underLimit,ctrl_ref1::int_overLimit,ctrl_ref0::int_overLimit,ctrl_ref3::int_ActualHV,ctrl_ref0::int_ActualHV,ctrl_ref1::int_ActualHV,ctrl_ref3::ActualHV_1,ctrl_ref1::ext_pow24VStatus,ctrl_ref2::ext_pow24_2,ctrl_ref0::ext_pow24VStatus,ctrl_ref2::ext_pow24_1|}|]
				(
					(
						(
							ctrl_ref0::D__(id__)[[
								ctrl_ref0::terminate <- terminate,
								ctrl_ref0::ext_setPoint <- ext_setPoint,
								ctrl_ref0::int_pwmSignal <- int_pwmSignal,
								ctrl_ref0::currentState <- currentState
							]]
						)
							[|{|terminate|}|]
						(
							(
								ctrl_ref1::D__(id__)[[
									ctrl_ref1::terminate <- terminate
								]]
							)
								[|{|terminate|}|]
							(
								(
									ctrl_ref2::D__(id__)[[
										ctrl_ref2::terminate <- terminate,
										ctrl_ref2::ext_pow24VStatus <- ext_pow24VStatus
									]]
								)
									[|{|terminate|}|]
								(
									ctrl_ref3::D__(id__)[[
										ctrl_ref3::terminate <- terminate,
										ctrl_ref3::ActualHV_2 <- int_ActualHV
									]]
								)
							)
							\
							diff(
								{|terminate|},
								{|terminate|}
							)
						)
						\
						diff(
							{|terminate|},
							{|terminate|}
						)
					)
					\
					diff(
						{|terminate|},
						{|terminate|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
			)
			\ Union({
				{|
					ctrl_ref0::int_DisableHV,
					ctrl_ref1::int_DisableHV,
					ctrl_ref1::int_underLimit,
					ctrl_ref0::int_underLimit,
					ctrl_ref1::int_overLimit,
					ctrl_ref0::int_overLimit,
					ctrl_ref3::int_ActualHV,
					ctrl_ref0::int_ActualHV,
					ctrl_ref1::int_ActualHV,
					ctrl_ref3::ActualHV_1,
					ctrl_ref1::ext_pow24VStatus,
					ctrl_ref2::ext_pow24_2,
					ctrl_ref0::ext_pow24VStatus,
					ctrl_ref2::ext_pow24_1
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}
	
	-- visible state equivalent
	
	VS__(id__) = let
		Buffer0(<v>) = 
			ctrl_ref1::int_DisableHV.out -> Buffer0(<1>) 
			[]
			ctrl_ref0::int_DisableHV.in -> Buffer0(<>)
		Buffer0(<>) = ctrl_ref1::int_DisableHV.out -> Buffer0(<1>)
		Buffer1(<v>) = 
			ctrl_ref0::int_underLimit.out?x -> Buffer1(<x>)
			[]
			ctrl_ref1::int_underLimit.in!v -> Buffer1(<>)
		Buffer1(<>) = ctrl_ref0::int_underLimit.out?x -> Buffer1(<x>)
		Buffer2(<v>) = 
			ctrl_ref0::int_overLimit.out?x -> Buffer2(<x>)
			[]
			ctrl_ref1::int_overLimit.in!v -> Buffer2(<>)
		Buffer2(<>) = ctrl_ref0::int_overLimit.out?x -> Buffer2(<x>)
		Buffer3(<v>) = 
			ctrl_ref0::int_ActualHV.out?x -> Buffer3(<x>)
			[]
			ctrl_ref3::int_ActualHV.in!v -> Buffer3(<>)
		Buffer3(<>) = ctrl_ref0::int_ActualHV.out?x -> Buffer3(<x>)
		Buffer4(<v>) = 
			ctrl_ref3::ActualHV_1.out?x -> Buffer4(<x>)
			[]
			ctrl_ref1::int_ActualHV.in!v -> Buffer4(<>)
		Buffer4(<>) = ctrl_ref3::ActualHV_1.out?x -> Buffer4(<x>)
		Buffer5(<v>) = 
			ctrl_ref2::ext_pow24_2.out?x -> Buffer5(<x>)
			[]
			ctrl_ref1::ext_pow24VStatus.in!v -> Buffer5(<>)
		Buffer5(<>) = ctrl_ref2::ext_pow24_2.out?x -> Buffer5(<x>)
		Buffer6(<v>) = 
			ctrl_ref2::ext_pow24_1.out?x -> Buffer6(<x>)
			[]
			ctrl_ref0::ext_pow24VStatus.in!v -> Buffer6(<>)
		Buffer6(<>) = ctrl_ref2::ext_pow24_1.out?x -> Buffer6(<x>)
		
	within
		(
			(
				(Buffer0(<>)|||
				Buffer1(<>)|||
				Buffer2(<>)|||
				Buffer3(<>)|||
				Buffer4(<>)|||
				Buffer5(<>)|||
				Buffer6(<>)
				)
					[|{|ctrl_ref0::int_DisableHV,ctrl_ref1::int_DisableHV,ctrl_ref1::int_underLimit,ctrl_ref0::int_underLimit,ctrl_ref1::int_overLimit,ctrl_ref0::int_overLimit,ctrl_ref3::int_ActualHV,ctrl_ref0::int_ActualHV,ctrl_ref1::int_ActualHV,ctrl_ref3::ActualHV_1,ctrl_ref1::ext_pow24VStatus,ctrl_ref2::ext_pow24_2,ctrl_ref0::ext_pow24VStatus,ctrl_ref2::ext_pow24_1|}|]
				(
					(
						(
							ctrl_ref0::VS__(id__)[[
								ctrl_ref0::terminate <- terminate,
								ctrl_ref0::ext_setPoint <- ext_setPoint,
								ctrl_ref0::int_pwmSignal <- int_pwmSignal,
								ctrl_ref0::currentState <- currentState
							]]
						)
							[|{|terminate|}|]
						(
							(
								ctrl_ref1::VS__(id__)[[
									ctrl_ref1::terminate <- terminate
								]]
							)
								[|{|terminate|}|]
							(
								(
									ctrl_ref2::VS__(id__)[[
										ctrl_ref2::terminate <- terminate,
										ctrl_ref2::ext_pow24VStatus <- ext_pow24VStatus
									]]
								)
									[|{|terminate|}|]
								(
									ctrl_ref3::VS__(id__)[[
										ctrl_ref3::terminate <- terminate,
										ctrl_ref3::ActualHV_2 <- int_ActualHV
									]]
								)
							)
							\
							diff(
								{|terminate|},
								{|terminate|}
							)
						)
						\
						diff(
							{|terminate|},
							{|terminate|}
						)
					)
					\
					diff(
						{|terminate|},
						{|terminate|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
			)
			\ Union({
				{|
					ctrl_ref0::int_DisableHV,
					ctrl_ref1::int_DisableHV,
					ctrl_ref1::int_underLimit,
					ctrl_ref0::int_underLimit,
					ctrl_ref1::int_overLimit,
					ctrl_ref0::int_overLimit,
					ctrl_ref3::int_ActualHV,
					ctrl_ref0::int_ActualHV,
					ctrl_ref1::int_ActualHV,
					ctrl_ref3::ActualHV_1,
					ctrl_ref1::ext_pow24VStatus,
					ctrl_ref2::ext_pow24_2,
					ctrl_ref0::ext_pow24VStatus,
					ctrl_ref2::ext_pow24_1
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}
	
	-- O version (optimised)
	
	O__(id__) = sbisim(diamond(let
		Buffer0(<v>) = 
			ctrl_ref1::int_DisableHV.out -> Buffer0(<1>) 
			[]
			ctrl_ref0::int_DisableHV.in -> Buffer0(<>)
		Buffer0(<>) = ctrl_ref1::int_DisableHV.out -> Buffer0(<1>)
		Buffer1(<v>) = 
			ctrl_ref0::int_underLimit.out?x -> Buffer1(<x>)
			[]
			ctrl_ref1::int_underLimit.in!v -> Buffer1(<>)
		Buffer1(<>) = ctrl_ref0::int_underLimit.out?x -> Buffer1(<x>)
		Buffer2(<v>) = 
			ctrl_ref0::int_overLimit.out?x -> Buffer2(<x>)
			[]
			ctrl_ref1::int_overLimit.in!v -> Buffer2(<>)
		Buffer2(<>) = ctrl_ref0::int_overLimit.out?x -> Buffer2(<x>)
		Buffer3(<v>) = 
			ctrl_ref0::int_ActualHV.out?x -> Buffer3(<x>)
			[]
			ctrl_ref3::int_ActualHV.in!v -> Buffer3(<>)
		Buffer3(<>) = ctrl_ref0::int_ActualHV.out?x -> Buffer3(<x>)
		Buffer4(<v>) = 
			ctrl_ref3::ActualHV_1.out?x -> Buffer4(<x>)
			[]
			ctrl_ref1::int_ActualHV.in!v -> Buffer4(<>)
		Buffer4(<>) = ctrl_ref3::ActualHV_1.out?x -> Buffer4(<x>)
		Buffer5(<v>) = 
			ctrl_ref2::ext_pow24_2.out?x -> Buffer5(<x>)
			[]
			ctrl_ref1::ext_pow24VStatus.in!v -> Buffer5(<>)
		Buffer5(<>) = ctrl_ref2::ext_pow24_2.out?x -> Buffer5(<x>)
		Buffer6(<v>) = 
			ctrl_ref2::ext_pow24_1.out?x -> Buffer6(<x>)
			[]
			ctrl_ref0::ext_pow24VStatus.in!v -> Buffer6(<>)
		Buffer6(<>) = ctrl_ref2::ext_pow24_1.out?x -> Buffer6(<x>)
		
	within
		(
			(
				(Buffer0(<>)|||
				Buffer1(<>)|||
				Buffer2(<>)|||
				Buffer3(<>)|||
				Buffer4(<>)|||
				Buffer5(<>)|||
				Buffer6(<>)
				)
					[|{|ctrl_ref0::int_DisableHV,ctrl_ref1::int_DisableHV,ctrl_ref1::int_underLimit,ctrl_ref0::int_underLimit,ctrl_ref1::int_overLimit,ctrl_ref0::int_overLimit,ctrl_ref3::int_ActualHV,ctrl_ref0::int_ActualHV,ctrl_ref1::int_ActualHV,ctrl_ref3::ActualHV_1,ctrl_ref1::ext_pow24VStatus,ctrl_ref2::ext_pow24_2,ctrl_ref0::ext_pow24VStatus,ctrl_ref2::ext_pow24_1|}|]
				(
					(
						(
							ctrl_ref0::O__(id__)[[
								ctrl_ref0::terminate <- terminate,
								ctrl_ref0::ext_setPoint <- ext_setPoint,
								ctrl_ref0::int_pwmSignal <- int_pwmSignal,
								ctrl_ref0::currentState <- currentState
							]]
						)
							[|{|terminate|}|]
						(
							(
								ctrl_ref1::O__(id__)[[
									ctrl_ref1::terminate <- terminate
								]]
							)
								[|{|terminate|}|]
							(
								(
									ctrl_ref2::O__(id__)[[
										ctrl_ref2::terminate <- terminate,
										ctrl_ref2::ext_pow24VStatus <- ext_pow24VStatus
									]]
								)
									[|{|terminate|}|]
								(
									ctrl_ref3::O__(id__)[[
										ctrl_ref3::terminate <- terminate,
										ctrl_ref3::ActualHV_2 <- int_ActualHV
									]]
								)
							)
							\
							diff(
								{|terminate|},
								{|terminate|}
							)
						)
						\
						diff(
							{|terminate|},
							{|terminate|}
						)
					)
					\
					diff(
						{|terminate|},
						{|terminate|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
			)
			\ Union({
				{|
					ctrl_ref0::int_DisableHV,
					ctrl_ref1::int_DisableHV,
					ctrl_ref1::int_underLimit,
					ctrl_ref0::int_underLimit,
					ctrl_ref1::int_overLimit,
					ctrl_ref0::int_overLimit,
					ctrl_ref3::int_ActualHV,
					ctrl_ref0::int_ActualHV,
					ctrl_ref1::int_ActualHV,
					ctrl_ref3::ActualHV_1,
					ctrl_ref1::ext_pow24VStatus,
					ctrl_ref2::ext_pow24_2,
					ctrl_ref0::ext_pow24VStatus,
					ctrl_ref2::ext_pow24_1
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}
	))
	
	-- visible state optimised equivalent
	
	VS_O__(id__) = sbisim(diamond(let
		Buffer0(<v>) = 
			ctrl_ref1::int_DisableHV.out -> Buffer0(<1>) 
			[]
			ctrl_ref0::int_DisableHV.in -> Buffer0(<>)
		Buffer0(<>) = ctrl_ref1::int_DisableHV.out -> Buffer0(<1>)
		Buffer1(<v>) = 
			ctrl_ref0::int_underLimit.out?x -> Buffer1(<x>)
			[]
			ctrl_ref1::int_underLimit.in!v -> Buffer1(<>)
		Buffer1(<>) = ctrl_ref0::int_underLimit.out?x -> Buffer1(<x>)
		Buffer2(<v>) = 
			ctrl_ref0::int_overLimit.out?x -> Buffer2(<x>)
			[]
			ctrl_ref1::int_overLimit.in!v -> Buffer2(<>)
		Buffer2(<>) = ctrl_ref0::int_overLimit.out?x -> Buffer2(<x>)
		Buffer3(<v>) = 
			ctrl_ref0::int_ActualHV.out?x -> Buffer3(<x>)
			[]
			ctrl_ref3::int_ActualHV.in!v -> Buffer3(<>)
		Buffer3(<>) = ctrl_ref0::int_ActualHV.out?x -> Buffer3(<x>)
		Buffer4(<v>) = 
			ctrl_ref3::ActualHV_1.out?x -> Buffer4(<x>)
			[]
			ctrl_ref1::int_ActualHV.in!v -> Buffer4(<>)
		Buffer4(<>) = ctrl_ref3::ActualHV_1.out?x -> Buffer4(<x>)
		Buffer5(<v>) = 
			ctrl_ref2::ext_pow24_2.out?x -> Buffer5(<x>)
			[]
			ctrl_ref1::ext_pow24VStatus.in!v -> Buffer5(<>)
		Buffer5(<>) = ctrl_ref2::ext_pow24_2.out?x -> Buffer5(<x>)
		Buffer6(<v>) = 
			ctrl_ref2::ext_pow24_1.out?x -> Buffer6(<x>)
			[]
			ctrl_ref0::ext_pow24VStatus.in!v -> Buffer6(<>)
		Buffer6(<>) = ctrl_ref2::ext_pow24_1.out?x -> Buffer6(<x>)
		
	within
		(
			(
				(Buffer0(<>)|||
				Buffer1(<>)|||
				Buffer2(<>)|||
				Buffer3(<>)|||
				Buffer4(<>)|||
				Buffer5(<>)|||
				Buffer6(<>)
				)
					[|{|ctrl_ref0::int_DisableHV,ctrl_ref1::int_DisableHV,ctrl_ref1::int_underLimit,ctrl_ref0::int_underLimit,ctrl_ref1::int_overLimit,ctrl_ref0::int_overLimit,ctrl_ref3::int_ActualHV,ctrl_ref0::int_ActualHV,ctrl_ref1::int_ActualHV,ctrl_ref3::ActualHV_1,ctrl_ref1::ext_pow24VStatus,ctrl_ref2::ext_pow24_2,ctrl_ref0::ext_pow24VStatus,ctrl_ref2::ext_pow24_1|}|]
				(
					(
						(
							ctrl_ref0::VS_O__(id__)[[
								ctrl_ref0::terminate <- terminate,
								ctrl_ref0::ext_setPoint <- ext_setPoint,
								ctrl_ref0::int_pwmSignal <- int_pwmSignal,
								ctrl_ref0::currentState <- currentState
							]]
						)
							[|{|terminate|}|]
						(
							(
								ctrl_ref1::VS_O__(id__)[[
									ctrl_ref1::terminate <- terminate
								]]
							)
								[|{|terminate|}|]
							(
								(
									ctrl_ref2::VS_O__(id__)[[
										ctrl_ref2::terminate <- terminate,
										ctrl_ref2::ext_pow24VStatus <- ext_pow24VStatus
									]]
								)
									[|{|terminate|}|]
								(
									ctrl_ref3::VS_O__(id__)[[
										ctrl_ref3::terminate <- terminate,
										ctrl_ref3::ActualHV_2 <- int_ActualHV
									]]
								)
							)
							\
							diff(
								{|terminate|},
								{|terminate|}
							)
						)
						\
						diff(
							{|terminate|},
							{|terminate|}
						)
					)
					\
					diff(
						{|terminate|},
						{|terminate|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
			)
			\ Union({
				{|
					ctrl_ref0::int_DisableHV,
					ctrl_ref1::int_DisableHV,
					ctrl_ref1::int_underLimit,
					ctrl_ref0::int_underLimit,
					ctrl_ref1::int_overLimit,
					ctrl_ref0::int_overLimit,
					ctrl_ref3::int_ActualHV,
					ctrl_ref0::int_ActualHV,
					ctrl_ref1::int_ActualHV,
					ctrl_ref3::ActualHV_1,
					ctrl_ref1::ext_pow24VStatus,
					ctrl_ref2::ext_pow24_2,
					ctrl_ref0::ext_pow24VStatus,
					ctrl_ref2::ext_pow24_1
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}
	))
	
	-- O version (optimised) with visible assignments
	
	AS_O__(id__) = sbisim(diamond(let
		Buffer0(<v>) = 
			ctrl_ref1::int_DisableHV.out -> Buffer0(<1>) 
			[]
			ctrl_ref0::int_DisableHV.in -> Buffer0(<>)
		Buffer0(<>) = ctrl_ref1::int_DisableHV.out -> Buffer0(<1>)
		Buffer1(<v>) = 
			ctrl_ref0::int_underLimit.out?x -> Buffer1(<x>)
			[]
			ctrl_ref1::int_underLimit.in!v -> Buffer1(<>)
		Buffer1(<>) = ctrl_ref0::int_underLimit.out?x -> Buffer1(<x>)
		Buffer2(<v>) = 
			ctrl_ref0::int_overLimit.out?x -> Buffer2(<x>)
			[]
			ctrl_ref1::int_overLimit.in!v -> Buffer2(<>)
		Buffer2(<>) = ctrl_ref0::int_overLimit.out?x -> Buffer2(<x>)
		Buffer3(<v>) = 
			ctrl_ref0::int_ActualHV.out?x -> Buffer3(<x>)
			[]
			ctrl_ref3::int_ActualHV.in!v -> Buffer3(<>)
		Buffer3(<>) = ctrl_ref0::int_ActualHV.out?x -> Buffer3(<x>)
		Buffer4(<v>) = 
			ctrl_ref3::ActualHV_1.out?x -> Buffer4(<x>)
			[]
			ctrl_ref1::int_ActualHV.in!v -> Buffer4(<>)
		Buffer4(<>) = ctrl_ref3::ActualHV_1.out?x -> Buffer4(<x>)
		Buffer5(<v>) = 
			ctrl_ref2::ext_pow24_2.out?x -> Buffer5(<x>)
			[]
			ctrl_ref1::ext_pow24VStatus.in!v -> Buffer5(<>)
		Buffer5(<>) = ctrl_ref2::ext_pow24_2.out?x -> Buffer5(<x>)
		Buffer6(<v>) = 
			ctrl_ref2::ext_pow24_1.out?x -> Buffer6(<x>)
			[]
			ctrl_ref0::ext_pow24VStatus.in!v -> Buffer6(<>)
		Buffer6(<>) = ctrl_ref2::ext_pow24_1.out?x -> Buffer6(<x>)
		
	within
		(
			(
				(Buffer0(<>)|||
				Buffer1(<>)|||
				Buffer2(<>)|||
				Buffer3(<>)|||
				Buffer4(<>)|||
				Buffer5(<>)|||
				Buffer6(<>)
				)
					[|{|ctrl_ref0::int_DisableHV,ctrl_ref1::int_DisableHV,ctrl_ref1::int_underLimit,ctrl_ref0::int_underLimit,ctrl_ref1::int_overLimit,ctrl_ref0::int_overLimit,ctrl_ref3::int_ActualHV,ctrl_ref0::int_ActualHV,ctrl_ref1::int_ActualHV,ctrl_ref3::ActualHV_1,ctrl_ref1::ext_pow24VStatus,ctrl_ref2::ext_pow24_2,ctrl_ref0::ext_pow24VStatus,ctrl_ref2::ext_pow24_1|}|]
				(
					(
						(
							ctrl_ref0::O__(id__)[[
								ctrl_ref0::terminate <- terminate,
								ctrl_ref0::ext_setPoint <- ext_setPoint,
								ctrl_ref0::int_pwmSignal <- int_pwmSignal,
								ctrl_ref0::currentState <- currentState
							]]
						)
							[|{|terminate|}|]
						(
							(
								ctrl_ref1::O__(id__)[[
									ctrl_ref1::terminate <- terminate
								]]
							)
								[|{|terminate|}|]
							(
								(
									ctrl_ref2::O__(id__)[[
										ctrl_ref2::terminate <- terminate,
										ctrl_ref2::ext_pow24VStatus <- ext_pow24VStatus
									]]
								)
									[|{|terminate|}|]
								(
									ctrl_ref3::O__(id__)[[
										ctrl_ref3::terminate <- terminate,
										ctrl_ref3::ActualHV_2 <- int_ActualHV
									]]
								)
							)
							\
							diff(
								{|terminate|},
								{|terminate|}
							)
						)
						\
						diff(
							{|terminate|},
							{|terminate|}
						)
					)
					\
					diff(
						{|terminate|},
						{|terminate|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
			)
			\ Union({
				{|
					ctrl_ref0::int_DisableHV,
					ctrl_ref1::int_DisableHV,
					ctrl_ref1::int_underLimit,
					ctrl_ref0::int_underLimit,
					ctrl_ref1::int_overLimit,
					ctrl_ref0::int_overLimit,
					ctrl_ref3::int_ActualHV,
					ctrl_ref0::int_ActualHV,
					ctrl_ref1::int_ActualHV,
					ctrl_ref3::ActualHV_1,
					ctrl_ref1::ext_pow24VStatus,
					ctrl_ref2::ext_pow24_2,
					ctrl_ref0::ext_pow24VStatus,
					ctrl_ref2::ext_pow24_1
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}
	))
	
endmodule

	module ctrl0
		shared_variable_events = {|
		|}
		
	exports
		transparent diamond
		transparent sbisim
		transparent dbisim
		transparent chase

		-- declaring controller events
		channel currentState: InOut.State
		channel ext_setPoint: InOut.core_real
		channel ext_pow24VStatus: InOut.Power
		channel int_overLimit: InOut.core_real
		channel int_pwmSignal: InOut.Power
		channel int_underLimit: InOut.core_real
		channel int_DisableHV: InOut
		channel int_ActualHV: InOut.core_real
		
		
		
		-- declaring call and ret events for undefined operations
		
		-- declaring controller termination channel
		channel terminate
		
		-- channel set with all visible events
		sem__events = {|
			terminate
		,	currentState,
			ext_setPoint,
			ext_pow24VStatus,
			int_overLimit,
			int_pwmSignal,
			int_underLimit,
			int_DisableHV,
			int_ActualHV
		|}

		-- defined operations
		-- compileOperationDef
		module OP_disableHV
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i0|
			              NID_s1|
			              NID_f0|
			              NID_s0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_setPoint, set_setPoint, setL_setPoint, setR_setPoint: core_real
			channel get_res, set_res, setL_res, setR_res: core_boolean
			channel get_errorFlag, set_errorFlag, setL_errorFlag, setR_errorFlag: core_boolean
			channel get_lim, set_lim, setL_lim, setR_lim: core_boolean
			channel get_supplyLim, set_supplyLim, setL_supplyLim, setR_supplyLim: core_boolean
			channel get_ActualHV, set_ActualHV, setL_ActualHV, setR_ActualHV: core_real
			channel get_errorAck, set_errorAck, setL_errorAck, setR_errorAck: core_boolean
			channel get_overLimit, set_overLimit, setL_overLimit, setR_overLimit: core_real
			channel get_underLimit, set_underLimit, setL_underLimit, setR_underLimit: core_real
			
			-- Shared variable channels
			channel set_EXT_setPoint: core_real
			channel set_EXT_res: core_boolean
			channel set_EXT_errorFlag: core_boolean
			channel set_EXT_lim: core_boolean
			channel set_EXT_supplyLim: core_boolean
			channel set_EXT_ActualHV: core_real
			channel set_EXT_errorAck: core_boolean
			channel set_EXT_overLimit: core_real
			channel set_EXT_underLimit: core_real
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel int_pwmSignal__: NIDS.InOut.Power
			channel int_pwmSignal: InOut.Power
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i0::enter,
			s1::enter,
			f0::enter,
			s0::enter
			|}
			
			enteredSS = 	{|
			s1::entered,
			f0::entered,
			s0::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
				set_EXT_setPoint,
				set_EXT_res,
				set_EXT_errorFlag,
				set_EXT_lim,
				set_EXT_supplyLim,
				set_EXT_ActualHV,
				set_EXT_errorAck,
				set_EXT_overLimit,
				set_EXT_underLimit
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	set_EXT_setPoint, set_setPoint,
				set_EXT_res, set_res,
				set_EXT_errorFlag, set_errorFlag,
				set_EXT_lim, set_lim,
				set_EXT_supplyLim, set_supplyLim,
				set_EXT_ActualHV, set_ActualHV,
				set_EXT_errorAck, set_errorAck,
				set_EXT_overLimit, set_overLimit,
				set_EXT_underLimit, set_underLimit
			,	int_pwmSignal
				, share__
				|}
			
			-- Nodes --
			-- declaring all nodes
			
			----------------------------------------------------------------------
			-- Initial: i0
			module i0
			exports
			
				channel enter, interrupt
				
				D__(id__,
							param_arg) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__,
							param_arg) = D__(id__,
							param_arg)
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- State: s1
			module s1
			
			enterSS = {}
			
			enteredSS = {}
			
			exports
			
				--  Declarations
				
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
								
				
				--	Nodes
				-- declaring all nodes
				
				
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
							param_arg) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(true & (share__choice(set_setPoint!0 -> SKIP))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
							param_arg) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(true & (share__choice(set_setPoint!0 -> SKIP))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- Final state: f0
			module f0
			
			exports
			
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
				--	Rule: behaviours(Node)
				D__(id__,
							param_arg) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
						
						Entering 	= entered -> SKIP ; Active
						Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
						Interrupted	= share__choice(exit -> exited -> Inactive)
					within
						Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
							param_arg) = D__(id__,
							param_arg)
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- State: s0
			module s0
			
			enterSS = {}
			
			enteredSS = {}
			
			exports
			
				--  Declarations
				
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
								
				
				--	Nodes
				-- declaring all nodes
				
				
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
							param_arg) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(int_pwmSignal.out!Power_Off -> SKIP)) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
							param_arg) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(int_pwmSignal.out!Power_Off -> SKIP)) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
			
			endmodule
			----------------------------------------------------------------------
			
			-- END of Nodes --
			
			-- Operation calls --
			-- Only the undefined operations are declared here.
			-- If the state machine is in isolation, all required operations will be undefined.
			-- If it is in the context of a controller, the required operations not provided by the
			-- controller will be declared here, and the defined operations will be defined in the
			-- context of the Controller module, and therefore within scope of the state machine module.
			
			-- END of Operation calls --
			
			-- STM processes
			STM(id__,
						param_arg) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
			Stateful(id__,
						param_arg) \ {terminate}
			
			STM_VS_O(id__,
						param_arg) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
			Stateful(id__,
						param_arg) \ {terminate}
			
			-- Transitions
			Transitions(id__,
						param_arg) = ((let
				Trans = (
					((share__ -> SKIP
					 [] dbisim(((param_arg==false))&(internal__!NID_s1 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_res!false -> SKIP))) ; f0::enter -> SKIP)))
					 	 [] dbisim(((param_arg==true))&(internal__!NID_s1 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_res!true -> SKIP))) ; f0::enter -> SKIP)))
					 	 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s0::enter -> SKIP))))
					 	 [] dbisim((true)&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s1::enter -> SKIP)))
					 ) ; Trans)
					 []
					 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
					 []
					 terminate -> SKIP
				)
			within
				Trans
			)
			)
			
			-- Stateful
			-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
			
			-- Named process definitions
			MachineBody(id__,
						param_arg) = 
				dbisim((
				let
					finalNodesEntered = {|f0::entered|}
				within
					((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						i0::enter,
						s1::enter,
						f0::enter,
						s0::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited,interrupt|})
							transSync = {|internal__.NID_s1,internal__.NID_s1,internal__.NID_i0,internal__.NID_s0|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   i0::D__(id__,
							   			param_arg)
							   [| { share__, terminate } |] (
							   s1::D__(id__,
							   			param_arg)
							   [| { share__, terminate } |] (
							   f0::D__(id__,
							   			param_arg)
							   [| { share__, terminate } |] (
							   s0::D__(id__,
							   			param_arg)
							   )
							   )
							   )
							 )
							 [[s1::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s1,internal__.NID_s1|}]]
							 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
							 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
							 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 )
							 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							|}) |]
							 ((i0::enter -> Transitions(id__,
							 			param_arg))
							  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 )
							)
							)
						)
						 \ hideSet)
						[[
							int_pwmSignal__.x____ <- int_pwmSignal
							| x____ <- NIDS
						]]
					)
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour(id__,
						param_arg) = 
				dbisim((MachineBody(id__,
							param_arg)\ enteredSS)
				)
			
			
			Stateful(id__,
						param_arg) = 
				((
					(Behaviour(id__,
								param_arg) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
								param_arg))
				 	\getsetLocalChannels
				)
				)
			
			
			-- Visible counterparts
			MachineBody_VS_O(id__,
						param_arg) = 
				dbisim((
				let
					finalNodesEntered = {|f0::entered|}
				within
					((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						i0::enter,
						s1::enter,
						f0::enter,
						s0::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited,interrupt|})
							transSync = {|internal__.NID_s1,internal__.NID_s1,internal__.NID_i0,internal__.NID_s0|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   i0::VS_O__(id__,
							   			param_arg)
							   [| { share__, terminate } |] (
							   s1::VS_O__(id__,
							   			param_arg)
							   [| { share__, terminate } |] (
							   f0::VS_O__(id__,
							   			param_arg)
							   [| { share__, terminate } |] (
							   s0::VS_O__(id__,
							   			param_arg)
							   )
							   )
							   )
							 )
							 [[s1::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s1,internal__.NID_s1|}]]
							 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
							 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
							 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 )
							 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							|}) |]
							 ((i0::enter -> Transitions(id__,
							 			param_arg))
							  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 )
							)
							)
						)
						 \ hideSet)
						[[
							int_pwmSignal__.x____ <- int_pwmSignal
							| x____ <- NIDS
						]]
					)
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour_VS_O(id__,
						param_arg) = 
				dbisim((MachineBody_VS_O(id__,
							param_arg))
				)
			
			
			Stateful_VS_O(id__,
						param_arg) = 
				dbisim((
					(Behaviour_VS_O(id__,
								param_arg) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
								param_arg))
				 	\getsetLocalChannels
				)
				)
			
			
			-- END
			
			-- Memory
			-- Memory variables
			
			-- varMemory process
			varMemory(id__,
						param_arg) = terminate -> SKIP
			
			getsetLocalChannels = {||}
			
			-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
			FVS__(id__,
						param_arg) = STM_VS_O(id__,
						param_arg)
			
			D__(id__,
						param_arg) = STM(id__,
						param_arg) \ internal_events
			O__(id__,
						param_arg) = sbisim(diamond(D__(id__,
						param_arg)))
			VS__(id__,
						param_arg) = FVS__(id__,
						param_arg)
			VS_O__(id__,
						param_arg) = sbisim(diamond(FVS__(id__,
						param_arg)))
			HEXT__(id__,
						param_arg) = O__(id__,
						param_arg) [|shared_variable_events|] SKIP
			HUP__(id__,
						param_arg) = O__(id__,
						param_arg) [|{share__}|] SKIP
					endmodule
		-- compileOperationDef
		module OP_supplyVoltCheck
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i0|
			              NID_s0|
			              NID_f0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_power, set_power, setL_power, setR_power: Power
			channel get_setPoint, set_setPoint, setL_setPoint, setR_setPoint: core_real
			channel get_res, set_res, setL_res, setR_res: core_boolean
			channel get_errorFlag, set_errorFlag, setL_errorFlag, setR_errorFlag: core_boolean
			channel get_lim, set_lim, setL_lim, setR_lim: core_boolean
			channel get_supplyLim, set_supplyLim, setL_supplyLim, setR_supplyLim: core_boolean
			channel get_ActualHV, set_ActualHV, setL_ActualHV, setR_ActualHV: core_real
			channel get_errorAck, set_errorAck, setL_errorAck, setR_errorAck: core_boolean
			channel get_overLimit, set_overLimit, setL_overLimit, setR_overLimit: core_real
			channel get_underLimit, set_underLimit, setL_underLimit, setR_underLimit: core_real
			
			-- Shared variable channels
			channel set_EXT_setPoint: core_real
			channel set_EXT_res: core_boolean
			channel set_EXT_errorFlag: core_boolean
			channel set_EXT_lim: core_boolean
			channel set_EXT_supplyLim: core_boolean
			channel set_EXT_ActualHV: core_real
			channel set_EXT_errorAck: core_boolean
			channel set_EXT_overLimit: core_real
			channel set_EXT_underLimit: core_real
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel ext_setPoint__: NIDS.InOut.core_real
			channel ext_setPoint: InOut.core_real
			channel ext_pow24VStatus__: NIDS.InOut.Power
			channel ext_pow24VStatus: InOut.Power
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i0::enter,
			s0::enter,
			f0::enter
			|}
			
			enteredSS = 	{|
			s0::entered,
			f0::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
				set_EXT_setPoint,
				set_EXT_res,
				set_EXT_errorFlag,
				set_EXT_lim,
				set_EXT_supplyLim,
				set_EXT_ActualHV,
				set_EXT_errorAck,
				set_EXT_overLimit,
				set_EXT_underLimit
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	set_EXT_setPoint, set_setPoint,
				set_EXT_res, set_res,
				set_EXT_errorFlag, set_errorFlag,
				set_EXT_lim, set_lim,
				set_EXT_supplyLim, set_supplyLim,
				set_EXT_ActualHV, set_ActualHV,
				set_EXT_errorAck, set_errorAck,
				set_EXT_overLimit, set_overLimit,
				set_EXT_underLimit, set_underLimit
			,	ext_setPoint,
				ext_pow24VStatus
				, share__
				|}
			
			-- Nodes --
			-- declaring all nodes
			
			----------------------------------------------------------------------
			-- Initial: i0
			module i0
			exports
			
				channel enter, interrupt
				
				D__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__) = D__(id__)
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- State: s0
			module s0
			
			enterSS = {}
			
			enteredSS = {}
			
			exports
			
				--  Declarations
				
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
								
				
				--	Nodes
				-- declaring all nodes
				
				
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- Final state: f0
			module f0
			
			exports
			
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
				--	Rule: behaviours(Node)
				D__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
						
						Entering 	= entered -> SKIP ; Active
						Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
						Interrupted	= share__choice(exit -> exited -> Inactive)
					within
						Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = D__(id__)
			
			endmodule
			----------------------------------------------------------------------
			
			-- END of Nodes --
			
			-- Operation calls --
			-- Only the undefined operations are declared here.
			-- If the state machine is in isolation, all required operations will be undefined.
			-- If it is in the context of a controller, the required operations not provided by the
			-- controller will be declared here, and the defined operations will be defined in the
			-- context of the Controller module, and therefore within scope of the state machine module.
			
			-- END of Operation calls --
			
			-- STM processes
			STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
			Stateful(id__) \ {terminate}
			
			STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
			Stateful(id__) \ {terminate}
			
			-- Transitions
			Transitions(id__) = ((let
				Trans = share__choice(get_power?power -> (
					((share__ -> SKIP
					 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s0::enter -> SKIP))))
					 	 [] dbisim((ext_pow24VStatus__!NID_s0.in?power:{power|power <- Power, (power==Power_On)} -> share__choice(set_power!power -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_lim!false -> SKIP))) ; f0::enter -> SKIP)))
					 	 [] dbisim((ext_pow24VStatus__!NID_s0.in?power:{power|power <- Power, (power==Power_Off)} -> share__choice(set_power!power -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_lim!true -> SKIP))) ; f0::enter -> SKIP)))
					 ) ; Trans)
					 []
					 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
					 []
					 terminate -> SKIP
				)
				)
			within
				Trans
			)
			)
			
			-- Stateful
			-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
			
			-- Named process definitions
			MachineBody(id__) = 
				dbisim((
				let
					finalNodesEntered = {|f0::entered|}
				within
					((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						i0::enter,
						s0::enter,
						f0::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited,interrupt|})
							transSync = {|internal__.NID_i0,ext_pow24VStatus__.NID_s0.in,ext_pow24VStatus__.NID_s0.in|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   i0::D__(id__)
							   [| { share__, terminate } |] (
							   s0::D__(id__)
							   [| { share__, terminate } |] (
							   f0::D__(id__)
							   )
							   )
							 )
							 [[s0::interrupt <- x__ | x__ <- {|interrupt,ext_pow24VStatus__.NID_s0.in,ext_pow24VStatus__.NID_s0.in|}]]
							 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
							 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__,setR_power |} ]] 
							  [[set_power <- setL_power]]
							 )
							 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 			,setL_power
							 			,setR_power
							 			|}) |]
							 ((i0::enter -> Transitions(id__))
							  [[ share__ <- x__ | x__ <- {| share__,setL_power |} ]]
							  [[set_power <- setR_power]]
							 )
							)[[setL_power <- set_power]]
							 [[setR_power <- set_power]]
							)
						)
						 \ hideSet)
						[[
							ext_setPoint__.x____ <- ext_setPoint,
							ext_pow24VStatus__.x____ <- ext_pow24VStatus
							| x____ <- NIDS
						]]
					)
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour(id__) = 
				dbisim((MachineBody(id__)\ enteredSS)
				)
			
			
			Stateful(id__) = 
				((
					(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
				 	\getsetLocalChannels
				)
				)
			
			
			-- Visible counterparts
			MachineBody_VS_O(id__) = 
				dbisim((
				let
					finalNodesEntered = {|f0::entered|}
				within
					((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						i0::enter,
						s0::enter,
						f0::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited,interrupt|})
							transSync = {|internal__.NID_i0,ext_pow24VStatus__.NID_s0.in,ext_pow24VStatus__.NID_s0.in|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   i0::VS_O__(id__)
							   [| { share__, terminate } |] (
							   s0::VS_O__(id__)
							   [| { share__, terminate } |] (
							   f0::VS_O__(id__)
							   )
							   )
							 )
							 [[s0::interrupt <- x__ | x__ <- {|interrupt,ext_pow24VStatus__.NID_s0.in,ext_pow24VStatus__.NID_s0.in|}]]
							 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
							 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__,setR_power |} ]] 
							  [[set_power <- setL_power]]
							 )
							 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 			,setL_power
							 			,setR_power
							 			|}) |]
							 ((i0::enter -> Transitions(id__))
							  [[ share__ <- x__ | x__ <- {| share__,setL_power |} ]]
							  [[set_power <- setR_power]]
							 )
							)[[setL_power <- set_power]]
							 [[setR_power <- set_power]]
							)
						)
						 \ hideSet)
						[[
							ext_setPoint__.x____ <- ext_setPoint,
							ext_pow24VStatus__.x____ <- ext_pow24VStatus
							| x____ <- NIDS
						]]
					)
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour_VS_O(id__) = 
				dbisim((MachineBody_VS_O(id__))
				)
			
			
			Stateful_VS_O(id__) = 
				dbisim((
					(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
				 	\getsetLocalChannels
				)
				)
			
			
			-- END
			
			-- Memory
			-- Memory variables
			Memory_power(power) =
				get_power!power -> Memory_power(power)
				[]
				set_power?x__ -> Memory_power(x__)
				[]
				terminate -> SKIP
			
			-- varMemory process
			varMemory(id__) = Memory_power(Power_On)
			
			getsetLocalChannels = {|get_power,set_power|}
			
			-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
			FVS__(id__) = STM_VS_O(id__)
			
			D__(id__) = STM(id__) \ internal_events
			O__(id__) = sbisim(diamond(D__(id__)))
			VS__(id__) = FVS__(id__)
			VS_O__(id__) = sbisim(diamond(FVS__(id__)))
			HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
			HUP__(id__) = O__(id__) [|{share__}|] SKIP
					endmodule
		-- compileOperationDef
		module OP_checkLimits
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i0|
			              NID_s0|
			              NID_f0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_setPoint, set_setPoint, setL_setPoint, setR_setPoint: core_real
			channel get_res, set_res, setL_res, setR_res: core_boolean
			channel get_errorFlag, set_errorFlag, setL_errorFlag, setR_errorFlag: core_boolean
			channel get_lim, set_lim, setL_lim, setR_lim: core_boolean
			channel get_supplyLim, set_supplyLim, setL_supplyLim, setR_supplyLim: core_boolean
			channel get_ActualHV, set_ActualHV, setL_ActualHV, setR_ActualHV: core_real
			channel get_errorAck, set_errorAck, setL_errorAck, setR_errorAck: core_boolean
			channel get_overLimit, set_overLimit, setL_overLimit, setR_overLimit: core_real
			channel get_underLimit, set_underLimit, setL_underLimit, setR_underLimit: core_real
			
			-- Shared variable channels
			channel set_EXT_setPoint: core_real
			channel set_EXT_res: core_boolean
			channel set_EXT_errorFlag: core_boolean
			channel set_EXT_lim: core_boolean
			channel set_EXT_supplyLim: core_boolean
			channel set_EXT_ActualHV: core_real
			channel set_EXT_errorAck: core_boolean
			channel set_EXT_overLimit: core_real
			channel set_EXT_underLimit: core_real
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel ext_setPoint__: NIDS.InOut.core_real
			channel ext_setPoint: InOut.core_real
			channel ext_pow24VStatus__: NIDS.InOut.Power
			channel ext_pow24VStatus: InOut.Power
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i0::enter,
			s0::enter,
			f0::enter
			|}
			
			enteredSS = 	{|
			s0::entered,
			f0::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
				set_EXT_setPoint,
				set_EXT_res,
				set_EXT_errorFlag,
				set_EXT_lim,
				set_EXT_supplyLim,
				set_EXT_ActualHV,
				set_EXT_errorAck,
				set_EXT_overLimit,
				set_EXT_underLimit
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	set_EXT_setPoint, set_setPoint,
				set_EXT_res, set_res,
				set_EXT_errorFlag, set_errorFlag,
				set_EXT_lim, set_lim,
				set_EXT_supplyLim, set_supplyLim,
				set_EXT_ActualHV, set_ActualHV,
				set_EXT_errorAck, set_errorAck,
				set_EXT_overLimit, set_overLimit,
				set_EXT_underLimit, set_underLimit
			,	ext_setPoint,
				ext_pow24VStatus
				, share__
				|}
			
			-- Nodes --
			-- declaring all nodes
			
			----------------------------------------------------------------------
			-- Initial: i0
			module i0
			exports
			
				channel enter, interrupt
				
				D__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__) = D__(id__)
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- State: s0
			module s0
			
			enterSS = {}
			
			enteredSS = {}
			
			exports
			
				--  Declarations
				
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
								
				
				--	Nodes
				-- declaring all nodes
				
				
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- Final state: f0
			module f0
			
			exports
			
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
				--	Rule: behaviours(Node)
				D__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
						
						Entering 	= entered -> SKIP ; Active
						Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
						Interrupted	= share__choice(exit -> exited -> Inactive)
					within
						Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = D__(id__)
			
			endmodule
			----------------------------------------------------------------------
			
			-- END of Nodes --
			
			-- Operation calls --
			-- Only the undefined operations are declared here.
			-- If the state machine is in isolation, all required operations will be undefined.
			-- If it is in the context of a controller, the required operations not provided by the
			-- controller will be declared here, and the defined operations will be defined in the
			-- context of the Controller module, and therefore within scope of the state machine module.
			
			-- END of Operation calls --
			
			-- STM processes
			STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
			Stateful(id__) \ {terminate}
			
			STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
			Stateful(id__) \ {terminate}
			
			-- Transitions
			Transitions(id__) = ((let
				Trans = share__choice(get_ActualHV?ActualHV -> get_underLimit?underLimit -> get_overLimit?overLimit -> (
					((share__ -> SKIP
					 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s0::enter -> SKIP))))
					 	 [] dbisim((((ActualHV<=overLimit) and (ActualHV>=underLimit)))&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_lim!false -> SKIP))) ; f0::enter -> SKIP)))
					 	 [] dbisim((((ActualHV<underLimit) or (ActualHV>overLimit)))&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_lim!true -> SKIP))) ; f0::enter -> SKIP)))
					 ) ; Trans)
					 []
					 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
					 []
					 terminate -> SKIP
				)
				)
			within
				Trans
			)
			)
			
			-- Stateful
			-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
			
			-- Named process definitions
			MachineBody(id__) = 
				dbisim((
				let
					finalNodesEntered = {|f0::entered|}
				within
					((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						i0::enter,
						s0::enter,
						f0::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited,interrupt|})
							transSync = {|internal__.NID_i0,internal__.NID_s0,internal__.NID_s0|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   i0::D__(id__)
							   [| { share__, terminate } |] (
							   s0::D__(id__)
							   [| { share__, terminate } |] (
							   f0::D__(id__)
							   )
							   )
							 )
							 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0,internal__.NID_s0|}]]
							 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
							 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							  [[set_ActualHV <- setL_ActualHV,set_underLimit <- setL_underLimit,set_overLimit <- setL_overLimit]]
							 )
							 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 			,setL_ActualHV
							 			,setL_underLimit
							 			,setL_overLimit
							|}) |]
							 ((i0::enter -> Transitions(id__))
							  [[ share__ <- x__ | x__ <- {| share__,setL_ActualHV,setL_underLimit,setL_overLimit |} ]]
							 )
							)[[setL_ActualHV <- set_ActualHV,setL_underLimit <- set_underLimit,setL_overLimit <- set_overLimit]]
							)
						)
						 \ hideSet)
						[[
							ext_setPoint__.x____ <- ext_setPoint,
							ext_pow24VStatus__.x____ <- ext_pow24VStatus
							| x____ <- NIDS
						]]
					)
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour(id__) = 
				dbisim((MachineBody(id__)\ enteredSS)
				)
			
			
			Stateful(id__) = 
				((
					(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
				 	\getsetLocalChannels
				)
				)
			
			
			-- Visible counterparts
			MachineBody_VS_O(id__) = 
				dbisim((
				let
					finalNodesEntered = {|f0::entered|}
				within
					((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						i0::enter,
						s0::enter,
						f0::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited,interrupt|})
							transSync = {|internal__.NID_i0,internal__.NID_s0,internal__.NID_s0|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   i0::VS_O__(id__)
							   [| { share__, terminate } |] (
							   s0::VS_O__(id__)
							   [| { share__, terminate } |] (
							   f0::VS_O__(id__)
							   )
							   )
							 )
							 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0,internal__.NID_s0|}]]
							 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
							 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							  [[set_ActualHV <- setL_ActualHV,set_underLimit <- setL_underLimit,set_overLimit <- setL_overLimit]]
							 )
							 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 			,setL_ActualHV
							 			,setL_underLimit
							 			,setL_overLimit
							|}) |]
							 ((i0::enter -> Transitions(id__))
							  [[ share__ <- x__ | x__ <- {| share__,setL_ActualHV,setL_underLimit,setL_overLimit |} ]]
							 )
							)[[setL_ActualHV <- set_ActualHV,setL_underLimit <- set_underLimit,setL_overLimit <- set_overLimit]]
							)
						)
						 \ hideSet)
						[[
							ext_setPoint__.x____ <- ext_setPoint,
							ext_pow24VStatus__.x____ <- ext_pow24VStatus
							| x____ <- NIDS
						]]
					)
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour_VS_O(id__) = 
				dbisim((MachineBody_VS_O(id__))
				)
			
			
			Stateful_VS_O(id__) = 
				dbisim((
					(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
				 	\getsetLocalChannels
				)
				)
			
			
			-- END
			
			-- Memory
			-- Memory variables
			
			-- varMemory process
			varMemory(id__) = terminate -> SKIP
			
			getsetLocalChannels = {||}
			
			-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
			FVS__(id__) = STM_VS_O(id__)
			
			D__(id__) = STM(id__) \ internal_events
			O__(id__) = sbisim(diamond(D__(id__)))
			VS__(id__) = FVS__(id__)
			VS_O__(id__) = sbisim(diamond(FVS__(id__)))
			HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
			HUP__(id__) = O__(id__) [|{share__}|] SKIP
					endmodule
	
		-- declaring machines
		module stm_ref0
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
		
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_Ramping|
			              NID_Init|
			              NID_Wait24Vpower|
			              NID_ClosedLoop|
			              NID_ErrorMode|
			              NID_i0|
			              NID_j0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_power, set_power, setL_power, setR_power: Power
			channel get_setPoint, set_setPoint, setL_setPoint, setR_setPoint: core_real
			channel get_res, set_res, setL_res, setR_res: core_boolean
			channel get_errorFlag, set_errorFlag, setL_errorFlag, setR_errorFlag: core_boolean
			channel get_lim, set_lim, setL_lim, setR_lim: core_boolean
			channel get_supplyLim, set_supplyLim, setL_supplyLim, setR_supplyLim: core_boolean
			channel get_ActualHV, set_ActualHV, setL_ActualHV, setR_ActualHV: core_real
			channel get_errorAck, set_errorAck, setL_errorAck, setR_errorAck: core_boolean
			channel get_overLimit, set_overLimit, setL_overLimit, setR_overLimit: core_real
			channel get_underLimit, set_underLimit, setL_underLimit, setR_underLimit: core_real
			
			-- Shared variable channels
			
			-- Local variable channels for defined operations that are required by the state machine
			channel get_supplyVoltCheck_power, set_supplyVoltCheck_power: Power
			
			-- Declaring state machine events
			channel currentState__: NIDS.InOut.State
			channel currentState: InOut.State
			channel ext_setPoint__: NIDS.InOut.core_real
			channel ext_setPoint: InOut.core_real
			channel ext_pow24VStatus__: NIDS.InOut.Power
			channel ext_pow24VStatus: InOut.Power
			channel int_overLimit__: NIDS.InOut.core_real
			channel int_overLimit: InOut.core_real
			channel int_pwmSignal__: NIDS.InOut.Power
			channel int_pwmSignal: InOut.Power
			channel int_underLimit__: NIDS.InOut.core_real
			channel int_underLimit: InOut.core_real
			channel int_DisableHV__: NIDS.InOut
			channel int_DisableHV: InOut
			channel int_ActualHV__: NIDS.InOut.core_real
			channel int_ActualHV: InOut.core_real
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			Ramping::enter,
			Init::enter,
			Wait24Vpower::enter,
			ClosedLoop::enter,
			ErrorMode::enter,
			i0::enter,
			j0::enter
			|}
			
			enteredSS = 	{|
			Ramping::entered,
			Init::entered,
			Wait24Vpower::entered,
			ClosedLoop::entered,
			ErrorMode::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	currentState,
				ext_setPoint,
				ext_pow24VStatus,
				int_overLimit,
				int_pwmSignal,
				int_underLimit,
				int_DisableHV,
				int_ActualHV
				|}
		
			-- Nodes --
			-- declaring all nodes
			
			----------------------------------------------------------------------
			-- State: Ramping
			module Ramping
			
			enterSS = {}
			
			enteredSS = {}
			
			exports
			
				--  Declarations
				
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
								
				
				--	Nodes
				-- declaring all nodes
				
				
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(currentState.out!State_Ramp -> SKIP)) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(currentState.out!State_Ramp -> SKIP)) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- State: Init
			module Init
			
			enterSS = 
					{|			i0::enter,
						si0::enter
					|}
			enteredSS = 
					{|			si0::entered
					|}
			exports
			
				--  Declarations
				
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
								
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_si0
				
				channel internal__ : NIDS
				channel currentState__: NIDS.InOut.State
				channel ext_setPoint__: NIDS.InOut.core_real
				channel ext_pow24VStatus__: NIDS.InOut.Power
				channel int_overLimit__: NIDS.InOut.core_real
				channel int_pwmSignal__: NIDS.InOut.Power
				channel int_underLimit__: NIDS.InOut.core_real
				channel int_DisableHV__: NIDS.InOut
				channel int_ActualHV__: NIDS.InOut.core_real
				
				--	Nodes
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: si0
				module si0
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(share__choice(get_setPoint?setPoint -> true & (share__choice(set_overLimit!overLimitF(Plus(setPoint, 2, core_real)) -> SKIP))));share__choice(share__choice(get_setPoint?setPoint -> true & (share__choice(set_underLimit!underLimitF(Minus(setPoint, 2, core_real)) -> SKIP))));share__choice(get_underLimit?underLimit -> true&(share__choice(int_underLimit.out!underLimit -> SKIP)));share__choice(get_overLimit?overLimit -> true&(share__choice(int_overLimit.out!overLimit -> SKIP))) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(share__choice(get_setPoint?setPoint -> true & (share__choice(set_overLimit!overLimitF(Plus(setPoint, 2, core_real)) -> SKIP))));share__choice(share__choice(get_setPoint?setPoint -> true & (share__choice(set_underLimit!underLimitF(Minus(setPoint, 2, core_real)) -> SKIP))));share__choice(get_underLimit?underLimit -> true&(share__choice(int_underLimit.out!underLimit -> SKIP)));share__choice(get_overLimit?overLimit -> true&(share__choice(int_overLimit.out!overLimit -> SKIP))) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(currentState.out!State_Init -> SKIP));true&CALL__disableHV(
								id__,
								false
							) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
				
					Behaviour 	= dbisim(
						((
						 (((let
						 	-- IMPLEMENTATION NOTE:
						 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						 	-- modules for defining the semantics of each node.
						 	enterSS = {|
						 	i0::enter,
						 	si0::enter
						 	|}
						 	hideSet = union(enterSS,{|exit,exited,internal__|})
						 within 
						 	((let
						 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						 		-- because CSPM modules are used for the semantics of Node.
						 		flowevts = union(enterSS,{|exit,exited,interrupt|})
						 		transSync = {|internal__.NID_i0|}
						 	within
						 		((
						 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						 		   i0::D__(id__)
						 		   [| { share__, terminate } |] (
						 		   si0::D__(id__)
						 		   )
						 		 )
						 		 [[si0::interrupt <- x__ | x__ <- {|interrupt|}]]
						 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
						 		 )
						 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
						 		 )
						 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						 		|}) |]
						 		 ((i0::enter -> Transitions(id__))
						 		  [[ share__ <- x__ | x__ <- {| share__ |} ]]
						 		 )
						 		)
						 		)
						 	)
						 	 \ hideSet)
						 	[[
						 		currentState__.x____ <- currentState,
						 		ext_setPoint__.x____ <- ext_setPoint,
						 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
						 		int_overLimit__.x____ <- int_overLimit,
						 		int_pwmSignal__.x____ <- int_pwmSignal,
						 		int_underLimit__.x____ <- int_underLimit,
						 		int_DisableHV__.x____ <- int_DisableHV,
						 		int_ActualHV__.x____ <- int_ActualHV
						 		| x____ <- NIDS
						 	]]
						 )
						 )
						  [[ share__ <- x__ | x__ <- {| share__,setR_power,setR_ActualHV,setR_errorFlag,setR_underLimit,setR_lim,setR_supplyLim,setR_errorAck,setR_res,setR_overLimit,setR_setPoint |} ]] 
						  [[set_power <- setL_power,set_ActualHV <- setL_ActualHV,set_errorFlag <- setL_errorFlag,set_underLimit <- setL_underLimit,set_lim <- setL_lim,set_supplyLim <- setL_supplyLim,set_errorAck <- setL_errorAck,set_res <- setL_res,set_overLimit <- setL_overLimit,set_setPoint <- setL_setPoint]]
						 )
						 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
						 			,setL_power
						 			,setL_ActualHV
						 			,setL_errorFlag
						 			,setL_underLimit
						 			,setL_lim
						 			,setL_supplyLim
						 			,setL_errorAck
						 			,setL_res
						 			,setL_overLimit
						 			,setL_setPoint
						 			,setR_power
						 			 			,setR_ActualHV
						 			 			,setR_errorFlag
						 			 			,setR_underLimit
						 			 			,setR_lim
						 			 			,setR_supplyLim
						 			 			,setR_errorAck
						 			 			,setR_res
						 			 			,setR_overLimit
						 			 			,setR_setPoint
						 			|}) |]
						 ((During)
						  [[ share__ <- x__ | x__ <- {| share__,setL_power,setL_ActualHV,setL_errorFlag,setL_underLimit,setL_lim,setL_supplyLim,setL_errorAck,setL_res,setL_overLimit,setL_setPoint |} ]]
						  [[set_power <- setR_power,set_ActualHV <- setR_ActualHV,set_errorFlag <- setR_errorFlag,set_underLimit <- setR_underLimit,set_lim <- setR_lim,set_supplyLim <- setR_supplyLim,set_errorAck <- setR_errorAck,set_res <- setR_res,set_overLimit <- setR_overLimit,set_setPoint <- setR_setPoint]]
						 )
						)[[setL_power <- set_power,setL_ActualHV <- set_ActualHV,setL_errorFlag <- set_errorFlag,setL_underLimit <- set_underLimit,setL_lim <- set_lim,setL_supplyLim <- set_supplyLim,setL_errorAck <- set_errorAck,setL_res <- set_res,setL_overLimit <- set_overLimit,setL_setPoint <- set_setPoint]]
						 [[setR_power <- set_power,setR_ActualHV <- set_ActualHV,setR_errorFlag <- set_errorFlag,setR_underLimit <- set_underLimit,setR_lim <- set_lim,setR_supplyLim <- set_supplyLim,setR_errorAck <- set_errorAck,setR_res <- set_res,setR_overLimit <- set_overLimit,setR_setPoint <- set_setPoint]]
						)\union(enteredSS,{terminate}) 
					)
					During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
							 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(currentState.out!State_Init -> SKIP));true&CALL__disableHV(
								id__,
								false
							) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
				
					Behaviour 	= dbisim(
						((
						 (((let
						 	-- IMPLEMENTATION NOTE:
						 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						 	-- modules for defining the semantics of each node.
						 	enterSS = {|
						 	i0::enter,
						 	si0::enter
						 	|}
						 	hideSet = union(enterSS,{|exit,exited,internal__|})
						 within 
						 	((let
						 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						 		-- because CSPM modules are used for the semantics of Node.
						 		flowevts = union(enterSS,{|exit,exited,interrupt|})
						 		transSync = {|internal__.NID_i0|}
						 	within
						 		((
						 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						 		   i0::VS_O__(id__)
						 		   [| { share__, terminate } |] (
						 		   si0::VS_O__(id__)
						 		   )
						 		 )
						 		 [[si0::interrupt <- x__ | x__ <- {|interrupt|}]]
						 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
						 		 )
						 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
						 		 )
						 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						 		|}) |]
						 		 ((i0::enter -> Transitions(id__))
						 		  [[ share__ <- x__ | x__ <- {| share__ |} ]]
						 		 )
						 		)
						 		)
						 	)
						 	 \ hideSet)
						 	[[
						 		currentState__.x____ <- currentState,
						 		ext_setPoint__.x____ <- ext_setPoint,
						 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
						 		int_overLimit__.x____ <- int_overLimit,
						 		int_pwmSignal__.x____ <- int_pwmSignal,
						 		int_underLimit__.x____ <- int_underLimit,
						 		int_DisableHV__.x____ <- int_DisableHV,
						 		int_ActualHV__.x____ <- int_ActualHV
						 		| x____ <- NIDS
						 	]]
						 )
						 )
						  [[ share__ <- x__ | x__ <- {| share__,setR_power,setR_ActualHV,setR_errorFlag,setR_underLimit,setR_lim,setR_supplyLim,setR_errorAck,setR_res,setR_overLimit,setR_setPoint |} ]] 
						  [[set_power <- setL_power,set_ActualHV <- setL_ActualHV,set_errorFlag <- setL_errorFlag,set_underLimit <- setL_underLimit,set_lim <- setL_lim,set_supplyLim <- setL_supplyLim,set_errorAck <- setL_errorAck,set_res <- setL_res,set_overLimit <- setL_overLimit,set_setPoint <- setL_setPoint]]
						 )
						 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
						 			,setL_power
						 			,setL_ActualHV
						 			,setL_errorFlag
						 			,setL_underLimit
						 			,setL_lim
						 			,setL_supplyLim
						 			,setL_errorAck
						 			,setL_res
						 			,setL_overLimit
						 			,setL_setPoint
						 			,setR_power
						 			 			,setR_ActualHV
						 			 			,setR_errorFlag
						 			 			,setR_underLimit
						 			 			,setR_lim
						 			 			,setR_supplyLim
						 			 			,setR_errorAck
						 			 			,setR_res
						 			 			,setR_overLimit
						 			 			,setR_setPoint
						 			|}) |]
						 ((During)
						  [[ share__ <- x__ | x__ <- {| share__,setL_power,setL_ActualHV,setL_errorFlag,setL_underLimit,setL_lim,setL_supplyLim,setL_errorAck,setL_res,setL_overLimit,setL_setPoint |} ]]
						  [[set_power <- setR_power,set_ActualHV <- setR_ActualHV,set_errorFlag <- setR_errorFlag,set_underLimit <- setR_underLimit,set_lim <- setR_lim,set_supplyLim <- setR_supplyLim,set_errorAck <- setR_errorAck,set_res <- setR_res,set_overLimit <- setR_overLimit,set_setPoint <- setR_setPoint]]
						 )
						)[[setL_power <- set_power,setL_ActualHV <- set_ActualHV,setL_errorFlag <- set_errorFlag,setL_underLimit <- set_underLimit,setL_lim <- set_lim,setL_supplyLim <- set_supplyLim,setL_errorAck <- set_errorAck,setL_res <- set_res,setL_overLimit <- set_overLimit,setL_setPoint <- set_setPoint]]
						 [[setR_power <- set_power,setR_ActualHV <- set_ActualHV,setR_errorFlag <- set_errorFlag,setR_underLimit <- set_underLimit,setR_lim <- set_lim,setR_supplyLim <- set_supplyLim,setR_errorAck <- set_errorAck,setR_res <- set_res,setR_overLimit <- set_overLimit,setR_setPoint <- set_setPoint]]
						)\{terminate} 
					)
					During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
							 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
				within
					Inactive [| {terminate} |> SKIP)
				
				Transitions(id__) = ((let
					Trans = (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((true&(share__choice(ext_setPoint.in?setPoint -> (SStop /\ set_setPoint!setPoint -> SKIP))) ; si0::enter -> SKIP))))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
				within
					Trans
				)
				)
				
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- State: Wait24Vpower
			module Wait24Vpower
			
			enterSS = 
					{|			i0::enter,
						si0::enter,
						s1::enter
					|}
			enteredSS = 
					{|			si0::entered,
						s1::entered
					|}
			exports
			
				--  Declarations
				
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
								
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_si0|
				              NID_s1
				
				channel internal__ : NIDS
				channel currentState__: NIDS.InOut.State
				channel ext_setPoint__: NIDS.InOut.core_real
				channel ext_pow24VStatus__: NIDS.InOut.Power
				channel int_overLimit__: NIDS.InOut.core_real
				channel int_pwmSignal__: NIDS.InOut.Power
				channel int_underLimit__: NIDS.InOut.core_real
				channel int_DisableHV__: NIDS.InOut
				channel int_ActualHV__: NIDS.InOut.core_real
				
				--	Nodes
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: si0
				module si0
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= true&CALL__supplyVoltCheck(
									id__
								) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= true&CALL__supplyVoltCheck(
									id__
								) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: s1
				module s1
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= true&CALL__disableHV(
									id__,
									true
								) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= true&CALL__disableHV(
									id__,
									true
								) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(currentState.out!State_Wait24Vpower -> SKIP));true&CALL__disableHV(
								id__,
								false
							) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
				
					Behaviour 	= dbisim(
						((
						 (((let
						 	-- IMPLEMENTATION NOTE:
						 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						 	-- modules for defining the semantics of each node.
						 	enterSS = {|
						 	i0::enter,
						 	si0::enter,
						 	s1::enter
						 	|}
						 	hideSet = union(enterSS,{|exit,exited,internal__|})
						 within 
						 	((let
						 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						 		-- because CSPM modules are used for the semantics of Node.
						 		flowevts = union(enterSS,{|exit,exited,interrupt|})
						 		transSync = {|internal__.NID_i0,internal__.NID_si0|}
						 	within
						 		((
						 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						 		   i0::D__(id__)
						 		   [| { share__, terminate } |] (
						 		   si0::D__(id__)
						 		   [| { share__, terminate } |] (
						 		   s1::D__(id__)
						 		   )
						 		   )
						 		 )
						 		 [[si0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_si0|}]]
						 		 [[s1::interrupt <- x__ | x__ <- {|interrupt|}]]
						 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
						 		 )
						 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
						 		  [[set_lim <- setL_lim,set_setPoint <- setL_setPoint]]
						 		 )
						 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						 		 			,setL_lim
						 		 			,setL_setPoint
						 		|}) |]
						 		 ((i0::enter -> Transitions(id__))
						 		  [[ share__ <- x__ | x__ <- {| share__,setL_lim,setL_setPoint |} ]]
						 		 )
						 		)[[setL_lim <- set_lim,setL_setPoint <- set_setPoint]]
						 		)
						 	)
						 	 \ hideSet)
						 	[[
						 		currentState__.x____ <- currentState,
						 		ext_setPoint__.x____ <- ext_setPoint,
						 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
						 		int_overLimit__.x____ <- int_overLimit,
						 		int_pwmSignal__.x____ <- int_pwmSignal,
						 		int_underLimit__.x____ <- int_underLimit,
						 		int_DisableHV__.x____ <- int_DisableHV,
						 		int_ActualHV__.x____ <- int_ActualHV
						 		| x____ <- NIDS
						 	]]
						 )
						 )
						  [[ share__ <- x__ | x__ <- {| share__,setR_power,setR_ActualHV,setR_errorFlag,setR_underLimit,setR_lim,setR_supplyLim,setR_errorAck,setR_res,setR_overLimit,setR_setPoint |} ]] 
						  [[set_power <- setL_power,set_ActualHV <- setL_ActualHV,set_errorFlag <- setL_errorFlag,set_underLimit <- setL_underLimit,set_lim <- setL_lim,set_supplyLim <- setL_supplyLim,set_errorAck <- setL_errorAck,set_res <- setL_res,set_overLimit <- setL_overLimit,set_setPoint <- setL_setPoint]]
						 )
						 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
						 			,setL_power
						 			,setL_ActualHV
						 			,setL_errorFlag
						 			,setL_underLimit
						 			,setL_lim
						 			,setL_supplyLim
						 			,setL_errorAck
						 			,setL_res
						 			,setL_overLimit
						 			,setL_setPoint
						 			,setR_power
						 			 			,setR_ActualHV
						 			 			,setR_errorFlag
						 			 			,setR_underLimit
						 			 			,setR_lim
						 			 			,setR_supplyLim
						 			 			,setR_errorAck
						 			 			,setR_res
						 			 			,setR_overLimit
						 			 			,setR_setPoint
						 			|}) |]
						 ((During)
						  [[ share__ <- x__ | x__ <- {| share__,setL_power,setL_ActualHV,setL_errorFlag,setL_underLimit,setL_lim,setL_supplyLim,setL_errorAck,setL_res,setL_overLimit,setL_setPoint |} ]]
						  [[set_power <- setR_power,set_ActualHV <- setR_ActualHV,set_errorFlag <- setR_errorFlag,set_underLimit <- setR_underLimit,set_lim <- setR_lim,set_supplyLim <- setR_supplyLim,set_errorAck <- setR_errorAck,set_res <- setR_res,set_overLimit <- setR_overLimit,set_setPoint <- setR_setPoint]]
						 )
						)[[setL_power <- set_power,setL_ActualHV <- set_ActualHV,setL_errorFlag <- set_errorFlag,setL_underLimit <- set_underLimit,setL_lim <- set_lim,setL_supplyLim <- set_supplyLim,setL_errorAck <- set_errorAck,setL_res <- set_res,setL_overLimit <- set_overLimit,setL_setPoint <- set_setPoint]]
						 [[setR_power <- set_power,setR_ActualHV <- set_ActualHV,setR_errorFlag <- set_errorFlag,setR_underLimit <- set_underLimit,setR_lim <- set_lim,setR_supplyLim <- set_supplyLim,setR_errorAck <- set_errorAck,setR_res <- set_res,setR_overLimit <- set_overLimit,setR_setPoint <- set_setPoint]]
						)\union(enteredSS,{terminate}) 
					)
					During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
							 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(currentState.out!State_Wait24Vpower -> SKIP));true&CALL__disableHV(
								id__,
								false
							) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
				
					Behaviour 	= dbisim(
						((
						 (((let
						 	-- IMPLEMENTATION NOTE:
						 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						 	-- modules for defining the semantics of each node.
						 	enterSS = {|
						 	i0::enter,
						 	si0::enter,
						 	s1::enter
						 	|}
						 	hideSet = union(enterSS,{|exit,exited,internal__|})
						 within 
						 	((let
						 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						 		-- because CSPM modules are used for the semantics of Node.
						 		flowevts = union(enterSS,{|exit,exited,interrupt|})
						 		transSync = {|internal__.NID_i0,internal__.NID_si0|}
						 	within
						 		((
						 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						 		   i0::VS_O__(id__)
						 		   [| { share__, terminate } |] (
						 		   si0::VS_O__(id__)
						 		   [| { share__, terminate } |] (
						 		   s1::VS_O__(id__)
						 		   )
						 		   )
						 		 )
						 		 [[si0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_si0|}]]
						 		 [[s1::interrupt <- x__ | x__ <- {|interrupt|}]]
						 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
						 		 )
						 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
						 		  [[set_lim <- setL_lim,set_setPoint <- setL_setPoint]]
						 		 )
						 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						 		 			,setL_lim
						 		 			,setL_setPoint
						 		|}) |]
						 		 ((i0::enter -> Transitions(id__))
						 		  [[ share__ <- x__ | x__ <- {| share__,setL_lim,setL_setPoint |} ]]
						 		 )
						 		)[[setL_lim <- set_lim,setL_setPoint <- set_setPoint]]
						 		)
						 	)
						 	 \ hideSet)
						 	[[
						 		currentState__.x____ <- currentState,
						 		ext_setPoint__.x____ <- ext_setPoint,
						 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
						 		int_overLimit__.x____ <- int_overLimit,
						 		int_pwmSignal__.x____ <- int_pwmSignal,
						 		int_underLimit__.x____ <- int_underLimit,
						 		int_DisableHV__.x____ <- int_DisableHV,
						 		int_ActualHV__.x____ <- int_ActualHV
						 		| x____ <- NIDS
						 	]]
						 )
						 )
						  [[ share__ <- x__ | x__ <- {| share__,setR_power,setR_ActualHV,setR_errorFlag,setR_underLimit,setR_lim,setR_supplyLim,setR_errorAck,setR_res,setR_overLimit,setR_setPoint |} ]] 
						  [[set_power <- setL_power,set_ActualHV <- setL_ActualHV,set_errorFlag <- setL_errorFlag,set_underLimit <- setL_underLimit,set_lim <- setL_lim,set_supplyLim <- setL_supplyLim,set_errorAck <- setL_errorAck,set_res <- setL_res,set_overLimit <- setL_overLimit,set_setPoint <- setL_setPoint]]
						 )
						 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
						 			,setL_power
						 			,setL_ActualHV
						 			,setL_errorFlag
						 			,setL_underLimit
						 			,setL_lim
						 			,setL_supplyLim
						 			,setL_errorAck
						 			,setL_res
						 			,setL_overLimit
						 			,setL_setPoint
						 			,setR_power
						 			 			,setR_ActualHV
						 			 			,setR_errorFlag
						 			 			,setR_underLimit
						 			 			,setR_lim
						 			 			,setR_supplyLim
						 			 			,setR_errorAck
						 			 			,setR_res
						 			 			,setR_overLimit
						 			 			,setR_setPoint
						 			|}) |]
						 ((During)
						  [[ share__ <- x__ | x__ <- {| share__,setL_power,setL_ActualHV,setL_errorFlag,setL_underLimit,setL_lim,setL_supplyLim,setL_errorAck,setL_res,setL_overLimit,setL_setPoint |} ]]
						  [[set_power <- setR_power,set_ActualHV <- setR_ActualHV,set_errorFlag <- setR_errorFlag,set_underLimit <- setR_underLimit,set_lim <- setR_lim,set_supplyLim <- setR_supplyLim,set_errorAck <- setR_errorAck,set_res <- setR_res,set_overLimit <- setR_overLimit,set_setPoint <- setR_setPoint]]
						 )
						)[[setL_power <- set_power,setL_ActualHV <- set_ActualHV,setL_errorFlag <- set_errorFlag,setL_underLimit <- set_underLimit,setL_lim <- set_lim,setL_supplyLim <- set_supplyLim,setL_errorAck <- set_errorAck,setL_res <- set_res,setL_overLimit <- set_overLimit,setL_setPoint <- set_setPoint]]
						 [[setR_power <- set_power,setR_ActualHV <- set_ActualHV,setR_errorFlag <- set_errorFlag,setR_underLimit <- set_underLimit,setR_lim <- set_lim,setR_supplyLim <- set_supplyLim,setR_errorAck <- set_errorAck,setR_res <- set_res,setR_overLimit <- set_overLimit,setR_setPoint <- set_setPoint]]
						)\{terminate} 
					)
					During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
							 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
				within
					Inactive [| {terminate} |> SKIP)
				
				Transitions(id__) = ((let
					Trans = share__choice(get_lim?lim -> get_setPoint?setPoint -> (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((true&(share__choice(ext_setPoint.in?setPoint -> (SStop /\ set_setPoint!setPoint -> SKIP))) ; si0::enter -> SKIP))))
						 	 [] dbisim((((setPoint!=0) or (lim==true)))&(internal__!NID_si0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s1::enter -> SKIP)))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
					)
				within
					Trans
				)
				)
				
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- State: ClosedLoop
			module ClosedLoop
			
			enterSS = 
					{|			i0::enter,
						s1::enter,
						s2::enter,
						s3::enter,
						s4::enter
					|}
			enteredSS = 
					{|			s1::entered,
						s2::entered,
						s3::entered,
						s4::entered
					|}
			exports
			
				--  Declarations
				
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
								
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_s1|
				              NID_s2|
				              NID_s3|
				              NID_s4
				
				channel internal__ : NIDS
				channel currentState__: NIDS.InOut.State
				channel ext_setPoint__: NIDS.InOut.core_real
				channel ext_pow24VStatus__: NIDS.InOut.Power
				channel int_overLimit__: NIDS.InOut.core_real
				channel int_pwmSignal__: NIDS.InOut.Power
				channel int_underLimit__: NIDS.InOut.core_real
				channel int_DisableHV__: NIDS.InOut
				channel int_ActualHV__: NIDS.InOut.core_real
				
				--	Nodes
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: s1
				module s1
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(true & (share__choice(set_lim!false -> SKIP)));true&CALL__disableHV(
									id__,
									true
								) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(true & (share__choice(set_lim!false -> SKIP)));true&CALL__disableHV(
									id__,
									true
								) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: s2
				module s2
				
				enterSS = 
						{|			i0::enter,
							s0::enter,
							s1::enter,
							j0::enter
						|}
				enteredSS = 
						{|			s0::entered,
							s1::entered
						|}
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					-- declaring identifiers of transitions
					datatype NIDS = 
					              NID_i0|
					              NID_s0|
					              NID_s1|
					              NID_j0
					
					channel internal__ : NIDS
					channel currentState__: NIDS.InOut.State
					channel ext_setPoint__: NIDS.InOut.core_real
					channel ext_pow24VStatus__: NIDS.InOut.Power
					channel int_overLimit__: NIDS.InOut.core_real
					channel int_pwmSignal__: NIDS.InOut.Power
					channel int_underLimit__: NIDS.InOut.core_real
					channel int_DisableHV__: NIDS.InOut
					channel int_ActualHV__: NIDS.InOut.core_real
					
					--	Nodes
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: s0
					module s0
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__checkLimits(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__checkLimits(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: s1
					module s1
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&(share__choice(ext_setPoint.in?setPoint -> (SStop /\ set_setPoint!setPoint -> SKIP))) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&(share__choice(ext_setPoint.in?setPoint -> (SStop /\ set_setPoint!setPoint -> SKIP))) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Junction: j0
					module j0
					exports
					
						channel enter, interrupt
						
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					
					endmodule
					----------------------------------------------------------------------
					
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
					
						Behaviour 	= dbisim(
							((
							 (((let
							 	-- IMPLEMENTATION NOTE:
							 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							 	-- modules for defining the semantics of each node.
							 	enterSS = {|
							 	i0::enter,
							 	s0::enter,
							 	s1::enter,
							 	j0::enter
							 	|}
							 	hideSet = union(enterSS,{|exit,exited,internal__|})
							 within 
							 	((let
							 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							 		-- because CSPM modules are used for the semantics of Node.
							 		flowevts = union(enterSS,{|exit,exited,interrupt|})
							 		transSync = {|internal__.NID_i0,internal__.NID_s0,internal__.NID_j0,internal__.NID_s1|}
							 	within
							 		((
							 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							 		   i0::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   s0::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   s1::D__(id__)
							 		   [| { share__, terminate } |] (
							 		   j0::D__(id__)
							 		   )
							 		   )
							 		   )
							 		 )
							 		 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
							 		 [[s1::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s1|}]]
							 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 		 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0|}]]
							 		 )
							 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 		 )
							 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 		|}) |]
							 		 ((i0::enter -> Transitions(id__))
							 		  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 		 )
							 		)
							 		)
							 	)
							 	 \ hideSet)
							 	[[
							 		currentState__.x____ <- currentState,
							 		ext_setPoint__.x____ <- ext_setPoint,
							 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
							 		int_overLimit__.x____ <- int_overLimit,
							 		int_pwmSignal__.x____ <- int_pwmSignal,
							 		int_underLimit__.x____ <- int_underLimit,
							 		int_DisableHV__.x____ <- int_DisableHV,
							 		int_ActualHV__.x____ <- int_ActualHV
							 		| x____ <- NIDS
							 	]]
							 )
							 )
							  [[ share__ <- x__ | x__ <- {| share__,setR_power,setR_ActualHV,setR_errorFlag,setR_underLimit,setR_lim,setR_supplyLim,setR_errorAck,setR_res,setR_overLimit,setR_setPoint |} ]] 
							  [[set_power <- setL_power,set_ActualHV <- setL_ActualHV,set_errorFlag <- setL_errorFlag,set_underLimit <- setL_underLimit,set_lim <- setL_lim,set_supplyLim <- setL_supplyLim,set_errorAck <- setL_errorAck,set_res <- setL_res,set_overLimit <- setL_overLimit,set_setPoint <- setL_setPoint]]
							 )
							 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
							 			,setL_power
							 			,setL_ActualHV
							 			,setL_errorFlag
							 			,setL_underLimit
							 			,setL_lim
							 			,setL_supplyLim
							 			,setL_errorAck
							 			,setL_res
							 			,setL_overLimit
							 			,setL_setPoint
							 			,setR_power
							 			 			,setR_ActualHV
							 			 			,setR_errorFlag
							 			 			,setR_underLimit
							 			 			,setR_lim
							 			 			,setR_supplyLim
							 			 			,setR_errorAck
							 			 			,setR_res
							 			 			,setR_overLimit
							 			 			,setR_setPoint
							 			|}) |]
							 ((During)
							  [[ share__ <- x__ | x__ <- {| share__,setL_power,setL_ActualHV,setL_errorFlag,setL_underLimit,setL_lim,setL_supplyLim,setL_errorAck,setL_res,setL_overLimit,setL_setPoint |} ]]
							  [[set_power <- setR_power,set_ActualHV <- setR_ActualHV,set_errorFlag <- setR_errorFlag,set_underLimit <- setR_underLimit,set_lim <- setR_lim,set_supplyLim <- setR_supplyLim,set_errorAck <- setR_errorAck,set_res <- setR_res,set_overLimit <- setR_overLimit,set_setPoint <- setR_setPoint]]
							 )
							)[[setL_power <- set_power,setL_ActualHV <- set_ActualHV,setL_errorFlag <- set_errorFlag,setL_underLimit <- set_underLimit,setL_lim <- set_lim,setL_supplyLim <- set_supplyLim,setL_errorAck <- set_errorAck,setL_res <- set_res,setL_overLimit <- set_overLimit,setL_setPoint <- set_setPoint]]
							 [[setR_power <- set_power,setR_ActualHV <- set_ActualHV,setR_errorFlag <- set_errorFlag,setR_underLimit <- set_underLimit,setR_lim <- set_lim,setR_supplyLim <- set_supplyLim,setR_errorAck <- set_errorAck,setR_res <- set_res,setR_overLimit <- set_overLimit,setR_setPoint <- set_setPoint]]
							)\union(enteredSS,{terminate}) 
						)
						During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
								 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
					
						Behaviour 	= dbisim(
							((
							 (((let
							 	-- IMPLEMENTATION NOTE:
							 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							 	-- modules for defining the semantics of each node.
							 	enterSS = {|
							 	i0::enter,
							 	s0::enter,
							 	s1::enter,
							 	j0::enter
							 	|}
							 	hideSet = union(enterSS,{|exit,exited,internal__|})
							 within 
							 	((let
							 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							 		-- because CSPM modules are used for the semantics of Node.
							 		flowevts = union(enterSS,{|exit,exited,interrupt|})
							 		transSync = {|internal__.NID_i0,internal__.NID_s0,internal__.NID_j0,internal__.NID_s1|}
							 	within
							 		((
							 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							 		   i0::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   s0::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   s1::VS_O__(id__)
							 		   [| { share__, terminate } |] (
							 		   j0::VS_O__(id__)
							 		   )
							 		   )
							 		   )
							 		 )
							 		 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
							 		 [[s1::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s1|}]]
							 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 		 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0|}]]
							 		 )
							 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 		 )
							 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 		|}) |]
							 		 ((i0::enter -> Transitions(id__))
							 		  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 		 )
							 		)
							 		)
							 	)
							 	 \ hideSet)
							 	[[
							 		currentState__.x____ <- currentState,
							 		ext_setPoint__.x____ <- ext_setPoint,
							 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
							 		int_overLimit__.x____ <- int_overLimit,
							 		int_pwmSignal__.x____ <- int_pwmSignal,
							 		int_underLimit__.x____ <- int_underLimit,
							 		int_DisableHV__.x____ <- int_DisableHV,
							 		int_ActualHV__.x____ <- int_ActualHV
							 		| x____ <- NIDS
							 	]]
							 )
							 )
							  [[ share__ <- x__ | x__ <- {| share__,setR_power,setR_ActualHV,setR_errorFlag,setR_underLimit,setR_lim,setR_supplyLim,setR_errorAck,setR_res,setR_overLimit,setR_setPoint |} ]] 
							  [[set_power <- setL_power,set_ActualHV <- setL_ActualHV,set_errorFlag <- setL_errorFlag,set_underLimit <- setL_underLimit,set_lim <- setL_lim,set_supplyLim <- setL_supplyLim,set_errorAck <- setL_errorAck,set_res <- setL_res,set_overLimit <- setL_overLimit,set_setPoint <- setL_setPoint]]
							 )
							 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
							 			,setL_power
							 			,setL_ActualHV
							 			,setL_errorFlag
							 			,setL_underLimit
							 			,setL_lim
							 			,setL_supplyLim
							 			,setL_errorAck
							 			,setL_res
							 			,setL_overLimit
							 			,setL_setPoint
							 			,setR_power
							 			 			,setR_ActualHV
							 			 			,setR_errorFlag
							 			 			,setR_underLimit
							 			 			,setR_lim
							 			 			,setR_supplyLim
							 			 			,setR_errorAck
							 			 			,setR_res
							 			 			,setR_overLimit
							 			 			,setR_setPoint
							 			|}) |]
							 ((During)
							  [[ share__ <- x__ | x__ <- {| share__,setL_power,setL_ActualHV,setL_errorFlag,setL_underLimit,setL_lim,setL_supplyLim,setL_errorAck,setL_res,setL_overLimit,setL_setPoint |} ]]
							  [[set_power <- setR_power,set_ActualHV <- setR_ActualHV,set_errorFlag <- setR_errorFlag,set_underLimit <- setR_underLimit,set_lim <- setR_lim,set_supplyLim <- setR_supplyLim,set_errorAck <- setR_errorAck,set_res <- setR_res,set_overLimit <- setR_overLimit,set_setPoint <- setR_setPoint]]
							 )
							)[[setL_power <- set_power,setL_ActualHV <- set_ActualHV,setL_errorFlag <- set_errorFlag,setL_underLimit <- set_underLimit,setL_lim <- set_lim,setL_supplyLim <- set_supplyLim,setL_errorAck <- set_errorAck,setL_res <- set_res,setL_overLimit <- set_overLimit,setL_setPoint <- set_setPoint]]
							 [[setR_power <- set_power,setR_ActualHV <- set_ActualHV,setR_errorFlag <- set_errorFlag,setR_underLimit <- set_underLimit,setR_lim <- set_lim,setR_supplyLim <- set_supplyLim,setR_errorAck <- set_errorAck,setR_res <- set_res,setR_overLimit <- set_overLimit,setR_setPoint <- set_setPoint]]
							)\{terminate} 
						)
						During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
								 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
					within
						Inactive [| {terminate} |> SKIP)
					
					Transitions(id__) = ((let
						Trans = (
							((share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s1::enter -> SKIP))))
							 	 [] dbisim((true)&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s1::enter -> SKIP)))
							 	 [] dbisim((true)&(internal__!NID_j0 -> SKIP ;  ((share__choice(get_ActualHV?ActualHV -> true&(share__choice(int_ActualHV.out!ActualHV -> SKIP))) ; s0::enter -> SKIP))))
							 	 [] dbisim((true)&(internal__!NID_s1 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(share__choice(get_setPoint?setPoint -> true & (share__choice(set_ActualHV!setPoint -> SKIP)))) ; j0::enter -> SKIP)))
							 ) ; Trans)
							 []
							 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
						)
					within
						Trans
					)
					)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: s3
				module s3
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= true&CALL__checkLimits(
									id__
								) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= true&CALL__checkLimits(
									id__
								) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: s4
				module s4
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= true&CALL__supplyVoltCheck(
									id__
								) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= true&CALL__supplyVoltCheck(
									id__
								) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(currentState.out!State_ClosedLoop -> SKIP)) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
				
					Behaviour 	= dbisim(
						((
						 (((let
						 	-- IMPLEMENTATION NOTE:
						 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						 	-- modules for defining the semantics of each node.
						 	enterSS = {|
						 	i0::enter,
						 	s1::enter,
						 	s2::enter,
						 	s3::enter,
						 	s4::enter
						 	|}
						 	hideSet = union(enterSS,{|exit,exited,internal__|})
						 within 
						 	((let
						 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						 		-- because CSPM modules are used for the semantics of Node.
						 		flowevts = union(enterSS,{|exit,exited,interrupt|})
						 		transSync = {|internal__.NID_s4,internal__.NID_s2,internal__.NID_s4,internal__.NID_s3,internal__.NID_s3,internal__.NID_i0|}
						 	within
						 		((
						 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						 		   i0::D__(id__)
						 		   [| { share__, terminate } |] (
						 		   s1::D__(id__)
						 		   [| { share__, terminate } |] (
						 		   s2::D__(id__)
						 		   [| { share__, terminate } |] (
						 		   s3::D__(id__)
						 		   [| { share__, terminate } |] (
						 		   s4::D__(id__)
						 		   )
						 		   )
						 		   )
						 		   )
						 		 )
						 		 [[s1::interrupt <- x__ | x__ <- {|interrupt|}]]
						 		 [[s2::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s2|}]]
						 		 [[s3::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s3,internal__.NID_s3|}]]
						 		 [[s4::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s4,internal__.NID_s4|}]]
						 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
						 		 )
						 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
						 		  [[set_lim <- setL_lim]]
						 		 )
						 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						 		 			,setL_lim
						 		|}) |]
						 		 ((i0::enter -> Transitions(id__))
						 		  [[ share__ <- x__ | x__ <- {| share__,setL_lim |} ]]
						 		 )
						 		)[[setL_lim <- set_lim]]
						 		)
						 	)
						 	 \ hideSet)
						 	[[
						 		currentState__.x____ <- currentState,
						 		ext_setPoint__.x____ <- ext_setPoint,
						 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
						 		int_overLimit__.x____ <- int_overLimit,
						 		int_pwmSignal__.x____ <- int_pwmSignal,
						 		int_underLimit__.x____ <- int_underLimit,
						 		int_DisableHV__.x____ <- int_DisableHV,
						 		int_ActualHV__.x____ <- int_ActualHV
						 		| x____ <- NIDS
						 	]]
						 )
						 )
						  [[ share__ <- x__ | x__ <- {| share__,setR_power,setR_ActualHV,setR_errorFlag,setR_underLimit,setR_lim,setR_supplyLim,setR_errorAck,setR_res,setR_overLimit,setR_setPoint |} ]] 
						  [[set_power <- setL_power,set_ActualHV <- setL_ActualHV,set_errorFlag <- setL_errorFlag,set_underLimit <- setL_underLimit,set_lim <- setL_lim,set_supplyLim <- setL_supplyLim,set_errorAck <- setL_errorAck,set_res <- setL_res,set_overLimit <- setL_overLimit,set_setPoint <- setL_setPoint]]
						 )
						 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
						 			,setL_power
						 			,setL_ActualHV
						 			,setL_errorFlag
						 			,setL_underLimit
						 			,setL_lim
						 			,setL_supplyLim
						 			,setL_errorAck
						 			,setL_res
						 			,setL_overLimit
						 			,setL_setPoint
						 			,setR_power
						 			 			,setR_ActualHV
						 			 			,setR_errorFlag
						 			 			,setR_underLimit
						 			 			,setR_lim
						 			 			,setR_supplyLim
						 			 			,setR_errorAck
						 			 			,setR_res
						 			 			,setR_overLimit
						 			 			,setR_setPoint
						 			|}) |]
						 ((During)
						  [[ share__ <- x__ | x__ <- {| share__,setL_power,setL_ActualHV,setL_errorFlag,setL_underLimit,setL_lim,setL_supplyLim,setL_errorAck,setL_res,setL_overLimit,setL_setPoint |} ]]
						  [[set_power <- setR_power,set_ActualHV <- setR_ActualHV,set_errorFlag <- setR_errorFlag,set_underLimit <- setR_underLimit,set_lim <- setR_lim,set_supplyLim <- setR_supplyLim,set_errorAck <- setR_errorAck,set_res <- setR_res,set_overLimit <- setR_overLimit,set_setPoint <- setR_setPoint]]
						 )
						)[[setL_power <- set_power,setL_ActualHV <- set_ActualHV,setL_errorFlag <- set_errorFlag,setL_underLimit <- set_underLimit,setL_lim <- set_lim,setL_supplyLim <- set_supplyLim,setL_errorAck <- set_errorAck,setL_res <- set_res,setL_overLimit <- set_overLimit,setL_setPoint <- set_setPoint]]
						 [[setR_power <- set_power,setR_ActualHV <- set_ActualHV,setR_errorFlag <- set_errorFlag,setR_underLimit <- set_underLimit,setR_lim <- set_lim,setR_supplyLim <- set_supplyLim,setR_errorAck <- set_errorAck,setR_res <- set_res,setR_overLimit <- set_overLimit,setR_setPoint <- set_setPoint]]
						)\union(enteredSS,{terminate}) 
					)
					During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
							 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(currentState.out!State_ClosedLoop -> SKIP)) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
				
					Behaviour 	= dbisim(
						((
						 (((let
						 	-- IMPLEMENTATION NOTE:
						 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						 	-- modules for defining the semantics of each node.
						 	enterSS = {|
						 	i0::enter,
						 	s1::enter,
						 	s2::enter,
						 	s3::enter,
						 	s4::enter
						 	|}
						 	hideSet = union(enterSS,{|exit,exited,internal__|})
						 within 
						 	((let
						 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						 		-- because CSPM modules are used for the semantics of Node.
						 		flowevts = union(enterSS,{|exit,exited,interrupt|})
						 		transSync = {|internal__.NID_s4,internal__.NID_s2,internal__.NID_s4,internal__.NID_s3,internal__.NID_s3,internal__.NID_i0|}
						 	within
						 		((
						 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						 		   i0::VS_O__(id__)
						 		   [| { share__, terminate } |] (
						 		   s1::VS_O__(id__)
						 		   [| { share__, terminate } |] (
						 		   s2::VS_O__(id__)
						 		   [| { share__, terminate } |] (
						 		   s3::VS_O__(id__)
						 		   [| { share__, terminate } |] (
						 		   s4::VS_O__(id__)
						 		   )
						 		   )
						 		   )
						 		   )
						 		 )
						 		 [[s1::interrupt <- x__ | x__ <- {|interrupt|}]]
						 		 [[s2::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s2|}]]
						 		 [[s3::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s3,internal__.NID_s3|}]]
						 		 [[s4::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s4,internal__.NID_s4|}]]
						 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
						 		 )
						 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
						 		  [[set_lim <- setL_lim]]
						 		 )
						 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						 		 			,setL_lim
						 		|}) |]
						 		 ((i0::enter -> Transitions(id__))
						 		  [[ share__ <- x__ | x__ <- {| share__,setL_lim |} ]]
						 		 )
						 		)[[setL_lim <- set_lim]]
						 		)
						 	)
						 	 \ hideSet)
						 	[[
						 		currentState__.x____ <- currentState,
						 		ext_setPoint__.x____ <- ext_setPoint,
						 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
						 		int_overLimit__.x____ <- int_overLimit,
						 		int_pwmSignal__.x____ <- int_pwmSignal,
						 		int_underLimit__.x____ <- int_underLimit,
						 		int_DisableHV__.x____ <- int_DisableHV,
						 		int_ActualHV__.x____ <- int_ActualHV
						 		| x____ <- NIDS
						 	]]
						 )
						 )
						  [[ share__ <- x__ | x__ <- {| share__,setR_power,setR_ActualHV,setR_errorFlag,setR_underLimit,setR_lim,setR_supplyLim,setR_errorAck,setR_res,setR_overLimit,setR_setPoint |} ]] 
						  [[set_power <- setL_power,set_ActualHV <- setL_ActualHV,set_errorFlag <- setL_errorFlag,set_underLimit <- setL_underLimit,set_lim <- setL_lim,set_supplyLim <- setL_supplyLim,set_errorAck <- setL_errorAck,set_res <- setL_res,set_overLimit <- setL_overLimit,set_setPoint <- setL_setPoint]]
						 )
						 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
						 			,setL_power
						 			,setL_ActualHV
						 			,setL_errorFlag
						 			,setL_underLimit
						 			,setL_lim
						 			,setL_supplyLim
						 			,setL_errorAck
						 			,setL_res
						 			,setL_overLimit
						 			,setL_setPoint
						 			,setR_power
						 			 			,setR_ActualHV
						 			 			,setR_errorFlag
						 			 			,setR_underLimit
						 			 			,setR_lim
						 			 			,setR_supplyLim
						 			 			,setR_errorAck
						 			 			,setR_res
						 			 			,setR_overLimit
						 			 			,setR_setPoint
						 			|}) |]
						 ((During)
						  [[ share__ <- x__ | x__ <- {| share__,setL_power,setL_ActualHV,setL_errorFlag,setL_underLimit,setL_lim,setL_supplyLim,setL_errorAck,setL_res,setL_overLimit,setL_setPoint |} ]]
						  [[set_power <- setR_power,set_ActualHV <- setR_ActualHV,set_errorFlag <- setR_errorFlag,set_underLimit <- setR_underLimit,set_lim <- setR_lim,set_supplyLim <- setR_supplyLim,set_errorAck <- setR_errorAck,set_res <- setR_res,set_overLimit <- setR_overLimit,set_setPoint <- setR_setPoint]]
						 )
						)[[setL_power <- set_power,setL_ActualHV <- set_ActualHV,setL_errorFlag <- set_errorFlag,setL_underLimit <- set_underLimit,setL_lim <- set_lim,setL_supplyLim <- set_supplyLim,setL_errorAck <- set_errorAck,setL_res <- set_res,setL_overLimit <- set_overLimit,setL_setPoint <- set_setPoint]]
						 [[setR_power <- set_power,setR_ActualHV <- set_ActualHV,setR_errorFlag <- set_errorFlag,setR_underLimit <- set_underLimit,setR_lim <- set_lim,setR_supplyLim <- set_supplyLim,setR_errorAck <- set_errorAck,setR_res <- set_res,setR_overLimit <- set_overLimit,setR_setPoint <- set_setPoint]]
						)\{terminate} 
					)
					During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
							 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
				within
					Inactive [| {terminate} |> SKIP)
				
				Transitions(id__) = ((let
					Trans = share__choice(get_lim?lim -> (
						((share__ -> SKIP
						 [] dbisim(((lim==true))&(internal__!NID_s4 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s1::enter -> SKIP)))
						 	 [] dbisim(((lim==true))&(internal__!NID_s2 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s1::enter -> SKIP)))
						 	 [] dbisim(((lim==false))&(internal__!NID_s4 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(int_pwmSignal.out!Power_On -> SKIP)) ; s3::enter -> SKIP)))
						 	 [] dbisim((true)&(internal__!NID_s3 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s2::enter -> SKIP)))
						 	 [] dbisim(((lim==true))&(internal__!NID_s3 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s1::enter -> SKIP)))
						 	 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s4::enter -> SKIP))))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
					)
				within
					Trans
				)
				)
				
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- State: ErrorMode
			module ErrorMode
			
			enterSS = 
					{|			i0::enter,
						f0::enter,
						s1::enter,
						s2::enter,
						j0::enter
					|}
			enteredSS = 
					{|			f0::entered,
						s1::entered,
						s2::entered
					|}
			exports
			
				--  Declarations
				
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
								
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_f0|
				              NID_s1|
				              NID_s2|
				              NID_j0
				
				channel internal__ : NIDS
				channel currentState__: NIDS.InOut.State
				channel ext_setPoint__: NIDS.InOut.core_real
				channel ext_pow24VStatus__: NIDS.InOut.Power
				channel int_overLimit__: NIDS.InOut.core_real
				channel int_pwmSignal__: NIDS.InOut.Power
				channel int_underLimit__: NIDS.InOut.core_real
				channel int_DisableHV__: NIDS.InOut
				channel int_ActualHV__: NIDS.InOut.core_real
				
				--	Nodes
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f0
				module f0
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					--	Rule: behaviours(Node)
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
							
							Entering 	= entered -> SKIP ; Active
							Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
							Interrupted	= share__choice(exit -> exited -> Inactive)
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: s1
				module s1
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(true & (share__choice(set_setPoint!0 -> SKIP))) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(true & (share__choice(set_setPoint!0 -> SKIP))) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: s2
				module s2
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(true & (share__choice(set_ActualHV!0 -> SKIP))) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(true & (share__choice(set_ActualHV!0 -> SKIP))) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: j0
				module j0
				exports
				
					channel enter, interrupt
					
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				
				
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(currentState.out!State_ErrorMode -> SKIP));true&CALL__disableHV(
								id__,
								false
							) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
				
					Behaviour 	= dbisim(
						((
						 (((let
						 	-- IMPLEMENTATION NOTE:
						 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						 	-- modules for defining the semantics of each node.
						 	enterSS = {|
						 	i0::enter,
						 	f0::enter,
						 	s1::enter,
						 	s2::enter,
						 	j0::enter
						 	|}
						 	hideSet = union(enterSS,{|exit,exited,internal__|})
						 within 
						 	((let
						 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						 		-- because CSPM modules are used for the semantics of Node.
						 		flowevts = union(enterSS,{|exit,exited,interrupt|})
						 		transSync = {|internal__.NID_s1,internal__.NID_i0,internal__.NID_s2,internal__.NID_j0,internal__.NID_j0|}
						 	within
						 		((
						 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						 		   i0::D__(id__)
						 		   [| { share__, terminate } |] (
						 		   f0::D__(id__)
						 		   [| { share__, terminate } |] (
						 		   s1::D__(id__)
						 		   [| { share__, terminate } |] (
						 		   s2::D__(id__)
						 		   [| { share__, terminate } |] (
						 		   j0::D__(id__)
						 		   )
						 		   )
						 		   )
						 		   )
						 		 )
						 		 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
						 		 [[s1::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s1|}]]
						 		 [[s2::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s2|}]]
						 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
						 		 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
						 		 )
						 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
						 		  [[set_ActualHV <- setL_ActualHV,set_setPoint <- setL_setPoint]]
						 		 )
						 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						 		 			,setL_ActualHV
						 		 			,setL_setPoint
						 		|}) |]
						 		 ((i0::enter -> Transitions(id__))
						 		  [[ share__ <- x__ | x__ <- {| share__,setL_ActualHV,setL_setPoint |} ]]
						 		 )
						 		)[[setL_ActualHV <- set_ActualHV,setL_setPoint <- set_setPoint]]
						 		)
						 	)
						 	 \ hideSet)
						 	[[
						 		currentState__.x____ <- currentState,
						 		ext_setPoint__.x____ <- ext_setPoint,
						 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
						 		int_overLimit__.x____ <- int_overLimit,
						 		int_pwmSignal__.x____ <- int_pwmSignal,
						 		int_underLimit__.x____ <- int_underLimit,
						 		int_DisableHV__.x____ <- int_DisableHV,
						 		int_ActualHV__.x____ <- int_ActualHV
						 		| x____ <- NIDS
						 	]]
						 )
						 )
						  [[ share__ <- x__ | x__ <- {| share__,setR_power,setR_ActualHV,setR_errorFlag,setR_underLimit,setR_lim,setR_supplyLim,setR_errorAck,setR_res,setR_overLimit,setR_setPoint |} ]] 
						  [[set_power <- setL_power,set_ActualHV <- setL_ActualHV,set_errorFlag <- setL_errorFlag,set_underLimit <- setL_underLimit,set_lim <- setL_lim,set_supplyLim <- setL_supplyLim,set_errorAck <- setL_errorAck,set_res <- setL_res,set_overLimit <- setL_overLimit,set_setPoint <- setL_setPoint]]
						 )
						 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
						 			,setL_power
						 			,setL_ActualHV
						 			,setL_errorFlag
						 			,setL_underLimit
						 			,setL_lim
						 			,setL_supplyLim
						 			,setL_errorAck
						 			,setL_res
						 			,setL_overLimit
						 			,setL_setPoint
						 			,setR_power
						 			 			,setR_ActualHV
						 			 			,setR_errorFlag
						 			 			,setR_underLimit
						 			 			,setR_lim
						 			 			,setR_supplyLim
						 			 			,setR_errorAck
						 			 			,setR_res
						 			 			,setR_overLimit
						 			 			,setR_setPoint
						 			|}) |]
						 ((During)
						  [[ share__ <- x__ | x__ <- {| share__,setL_power,setL_ActualHV,setL_errorFlag,setL_underLimit,setL_lim,setL_supplyLim,setL_errorAck,setL_res,setL_overLimit,setL_setPoint |} ]]
						  [[set_power <- setR_power,set_ActualHV <- setR_ActualHV,set_errorFlag <- setR_errorFlag,set_underLimit <- setR_underLimit,set_lim <- setR_lim,set_supplyLim <- setR_supplyLim,set_errorAck <- setR_errorAck,set_res <- setR_res,set_overLimit <- setR_overLimit,set_setPoint <- setR_setPoint]]
						 )
						)[[setL_power <- set_power,setL_ActualHV <- set_ActualHV,setL_errorFlag <- set_errorFlag,setL_underLimit <- set_underLimit,setL_lim <- set_lim,setL_supplyLim <- set_supplyLim,setL_errorAck <- set_errorAck,setL_res <- set_res,setL_overLimit <- set_overLimit,setL_setPoint <- set_setPoint]]
						 [[setR_power <- set_power,setR_ActualHV <- set_ActualHV,setR_errorFlag <- set_errorFlag,setR_underLimit <- set_underLimit,setR_lim <- set_lim,setR_supplyLim <- set_supplyLim,setR_errorAck <- set_errorAck,setR_res <- set_res,setR_overLimit <- set_overLimit,setR_setPoint <- set_setPoint]]
						)\union(enteredSS,{terminate}) 
					)
					During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
							 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(currentState.out!State_ErrorMode -> SKIP));true&CALL__disableHV(
								id__,
								false
							) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
				
					Behaviour 	= dbisim(
						((
						 (((let
						 	-- IMPLEMENTATION NOTE:
						 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						 	-- modules for defining the semantics of each node.
						 	enterSS = {|
						 	i0::enter,
						 	f0::enter,
						 	s1::enter,
						 	s2::enter,
						 	j0::enter
						 	|}
						 	hideSet = union(enterSS,{|exit,exited,internal__|})
						 within 
						 	((let
						 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						 		-- because CSPM modules are used for the semantics of Node.
						 		flowevts = union(enterSS,{|exit,exited,interrupt|})
						 		transSync = {|internal__.NID_s1,internal__.NID_i0,internal__.NID_s2,internal__.NID_j0,internal__.NID_j0|}
						 	within
						 		((
						 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						 		   i0::VS_O__(id__)
						 		   [| { share__, terminate } |] (
						 		   f0::VS_O__(id__)
						 		   [| { share__, terminate } |] (
						 		   s1::VS_O__(id__)
						 		   [| { share__, terminate } |] (
						 		   s2::VS_O__(id__)
						 		   [| { share__, terminate } |] (
						 		   j0::VS_O__(id__)
						 		   )
						 		   )
						 		   )
						 		   )
						 		 )
						 		 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
						 		 [[s1::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s1|}]]
						 		 [[s2::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s2|}]]
						 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
						 		 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
						 		 )
						 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
						 		  [[set_ActualHV <- setL_ActualHV,set_setPoint <- setL_setPoint]]
						 		 )
						 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						 		 			,setL_ActualHV
						 		 			,setL_setPoint
						 		|}) |]
						 		 ((i0::enter -> Transitions(id__))
						 		  [[ share__ <- x__ | x__ <- {| share__,setL_ActualHV,setL_setPoint |} ]]
						 		 )
						 		)[[setL_ActualHV <- set_ActualHV,setL_setPoint <- set_setPoint]]
						 		)
						 	)
						 	 \ hideSet)
						 	[[
						 		currentState__.x____ <- currentState,
						 		ext_setPoint__.x____ <- ext_setPoint,
						 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
						 		int_overLimit__.x____ <- int_overLimit,
						 		int_pwmSignal__.x____ <- int_pwmSignal,
						 		int_underLimit__.x____ <- int_underLimit,
						 		int_DisableHV__.x____ <- int_DisableHV,
						 		int_ActualHV__.x____ <- int_ActualHV
						 		| x____ <- NIDS
						 	]]
						 )
						 )
						  [[ share__ <- x__ | x__ <- {| share__,setR_power,setR_ActualHV,setR_errorFlag,setR_underLimit,setR_lim,setR_supplyLim,setR_errorAck,setR_res,setR_overLimit,setR_setPoint |} ]] 
						  [[set_power <- setL_power,set_ActualHV <- setL_ActualHV,set_errorFlag <- setL_errorFlag,set_underLimit <- setL_underLimit,set_lim <- setL_lim,set_supplyLim <- setL_supplyLim,set_errorAck <- setL_errorAck,set_res <- setL_res,set_overLimit <- setL_overLimit,set_setPoint <- setL_setPoint]]
						 )
						 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
						 			,setL_power
						 			,setL_ActualHV
						 			,setL_errorFlag
						 			,setL_underLimit
						 			,setL_lim
						 			,setL_supplyLim
						 			,setL_errorAck
						 			,setL_res
						 			,setL_overLimit
						 			,setL_setPoint
						 			,setR_power
						 			 			,setR_ActualHV
						 			 			,setR_errorFlag
						 			 			,setR_underLimit
						 			 			,setR_lim
						 			 			,setR_supplyLim
						 			 			,setR_errorAck
						 			 			,setR_res
						 			 			,setR_overLimit
						 			 			,setR_setPoint
						 			|}) |]
						 ((During)
						  [[ share__ <- x__ | x__ <- {| share__,setL_power,setL_ActualHV,setL_errorFlag,setL_underLimit,setL_lim,setL_supplyLim,setL_errorAck,setL_res,setL_overLimit,setL_setPoint |} ]]
						  [[set_power <- setR_power,set_ActualHV <- setR_ActualHV,set_errorFlag <- setR_errorFlag,set_underLimit <- setR_underLimit,set_lim <- setR_lim,set_supplyLim <- setR_supplyLim,set_errorAck <- setR_errorAck,set_res <- setR_res,set_overLimit <- setR_overLimit,set_setPoint <- setR_setPoint]]
						 )
						)[[setL_power <- set_power,setL_ActualHV <- set_ActualHV,setL_errorFlag <- set_errorFlag,setL_underLimit <- set_underLimit,setL_lim <- set_lim,setL_supplyLim <- set_supplyLim,setL_errorAck <- set_errorAck,setL_res <- set_res,setL_overLimit <- set_overLimit,setL_setPoint <- set_setPoint]]
						 [[setR_power <- set_power,setR_ActualHV <- set_ActualHV,setR_errorFlag <- set_errorFlag,setR_underLimit <- set_underLimit,setR_lim <- set_lim,setR_supplyLim <- set_supplyLim,setR_errorAck <- set_errorAck,setR_res <- set_res,setR_overLimit <- set_overLimit,setR_setPoint <- set_setPoint]]
						)\{terminate} 
					)
					During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
							 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
				within
					Inactive [| {terminate} |> SKIP)
				
				Transitions(id__) = ((let
					Trans = share__choice(get_ActualHV?ActualHV -> get_setPoint?setPoint -> (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_s1 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(get_setPoint?setPoint -> true&(share__choice(ext_setPoint.out!setPoint -> SKIP))) ; s2::enter -> SKIP)))
						 	 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((share__choice(true & (share__choice(set_errorAck!false -> SKIP))) ; s1::enter -> SKIP))))
						 	 [] dbisim((true)&(internal__!NID_s2 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(get_ActualHV?ActualHV -> true&(share__choice(int_ActualHV.out!ActualHV -> SKIP))) ; j0::enter -> SKIP)))
						 	 [] dbisim((((setPoint==0) and (ActualHV==0)))&(internal__!NID_j0 -> SKIP ;  ((share__choice(true & (share__choice(set_errorAck!true -> SKIP))) ; f0::enter -> SKIP))))
						 	 [] dbisim((((setPoint!=0) or (ActualHV!=0)))&(internal__!NID_j0 -> SKIP ;  ((SKIP ; s1::enter -> SKIP))))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
					)
				within
					Trans
				)
				)
				
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- Initial: i0
			module i0
			exports
			
				channel enter, interrupt
				
				D__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__) = D__(id__)
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- Junction: j0
			module j0
			exports
			
				channel enter, interrupt
				
				D__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = D__(id__)
			
			endmodule
			----------------------------------------------------------------------
			
			-- END of Nodes --
			
			-- Operation calls --
			-- Only the undefined operations are declared here.
			-- If the state machine is in isolation, all required operations will be undefined.
			-- If it is in the context of a controller, the required operations not provided by the
			-- controller will be declared here, and the defined operations will be defined in the
			-- context of the Controller module, and therefore within scope of the state machine module.
			
			CALL__disableHV(id__,
						param_arg) = (OP_disableHV::O__(id__,
						param_arg))
			[[
				OP_disableHV::int_pwmSignal <- int_pwmSignal
			]]
			[[
				OP_disableHV::get_setPoint <- get_setPoint,
				OP_disableHV::set_setPoint <- set_setPoint,
				OP_disableHV::get_res <- get_res,
				OP_disableHV::set_res <- set_res,
				OP_disableHV::get_errorFlag <- get_errorFlag,
				OP_disableHV::set_errorFlag <- set_errorFlag,
				OP_disableHV::get_lim <- get_lim,
				OP_disableHV::set_lim <- set_lim,
				OP_disableHV::get_supplyLim <- get_supplyLim,
				OP_disableHV::set_supplyLim <- set_supplyLim,
				OP_disableHV::get_ActualHV <- get_ActualHV,
				OP_disableHV::set_ActualHV <- set_ActualHV,
				OP_disableHV::get_errorAck <- get_errorAck,
				OP_disableHV::set_errorAck <- set_errorAck,
				OP_disableHV::get_overLimit <- get_overLimit,
				OP_disableHV::set_overLimit <- set_overLimit,
				OP_disableHV::get_underLimit <- get_underLimit,
				OP_disableHV::set_underLimit <- set_underLimit
			]]
			CALL__supplyVoltCheck(id__) = (OP_supplyVoltCheck::O__(id__))
			[[
				OP_supplyVoltCheck::ext_setPoint <- ext_setPoint,
				OP_supplyVoltCheck::ext_pow24VStatus <- ext_pow24VStatus
			]]
			[[
				OP_supplyVoltCheck::get_setPoint <- get_setPoint,
				OP_supplyVoltCheck::set_setPoint <- set_setPoint,
				OP_supplyVoltCheck::get_res <- get_res,
				OP_supplyVoltCheck::set_res <- set_res,
				OP_supplyVoltCheck::get_errorFlag <- get_errorFlag,
				OP_supplyVoltCheck::set_errorFlag <- set_errorFlag,
				OP_supplyVoltCheck::get_lim <- get_lim,
				OP_supplyVoltCheck::set_lim <- set_lim,
				OP_supplyVoltCheck::get_supplyLim <- get_supplyLim,
				OP_supplyVoltCheck::set_supplyLim <- set_supplyLim,
				OP_supplyVoltCheck::get_ActualHV <- get_ActualHV,
				OP_supplyVoltCheck::set_ActualHV <- set_ActualHV,
				OP_supplyVoltCheck::get_errorAck <- get_errorAck,
				OP_supplyVoltCheck::set_errorAck <- set_errorAck,
				OP_supplyVoltCheck::get_overLimit <- get_overLimit,
				OP_supplyVoltCheck::set_overLimit <- set_overLimit,
				OP_supplyVoltCheck::get_underLimit <- get_underLimit,
				OP_supplyVoltCheck::set_underLimit <- set_underLimit
			]]
			CALL__checkLimits(id__) = (OP_checkLimits::O__(id__))
			[[
				OP_checkLimits::ext_setPoint <- ext_setPoint,
				OP_checkLimits::ext_pow24VStatus <- ext_pow24VStatus
			]]
			[[
				OP_checkLimits::get_setPoint <- get_setPoint,
				OP_checkLimits::set_setPoint <- set_setPoint,
				OP_checkLimits::get_res <- get_res,
				OP_checkLimits::set_res <- set_res,
				OP_checkLimits::get_errorFlag <- get_errorFlag,
				OP_checkLimits::set_errorFlag <- set_errorFlag,
				OP_checkLimits::get_lim <- get_lim,
				OP_checkLimits::set_lim <- set_lim,
				OP_checkLimits::get_supplyLim <- get_supplyLim,
				OP_checkLimits::set_supplyLim <- set_supplyLim,
				OP_checkLimits::get_ActualHV <- get_ActualHV,
				OP_checkLimits::set_ActualHV <- set_ActualHV,
				OP_checkLimits::get_errorAck <- get_errorAck,
				OP_checkLimits::set_errorAck <- set_errorAck,
				OP_checkLimits::get_overLimit <- get_overLimit,
				OP_checkLimits::set_overLimit <- set_overLimit,
				OP_checkLimits::get_underLimit <- get_underLimit,
				OP_checkLimits::set_underLimit <- set_underLimit
			]]
			-- END of Operation calls --
			
			-- STM processes
			STM(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
			( 
				(
					(
						(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
					 	[[ share__ <- x__ | x__ <- {||} ]]
					)
				[| {share__} |]
				SKIP
				)
				[| union(sharedVarSync,{terminate}) |]
				dbisim(sharedVarMemory(id__))
			)\sharedVarHide
			
			STM_VS_O(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
			( 
				(
					(
						(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
					 	[[ share__ <- x__ | x__ <- {||} ]]
					)
				[| {share__} |]
				SKIP
				)
				[| union(sharedVarSync,{terminate}) |]
				dbisim(sharedVarMemory(id__))
			)\sharedVarHide
			
			-- Transitions
			Transitions(id__) = ((let
				Trans = share__choice(get_lim?lim -> get_errorAck?errorAck -> get_res?res -> get_setPoint?setPoint -> (
					((share__ -> SKIP
					 [] dbisim((true)&(internal__!NID_Ramping -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Init::enter -> SKIP)))
					 	 [] dbisim((true)&(internal__!NID_Init -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Wait24Vpower::enter -> SKIP)))
					 	 [] dbisim(((res==true))&(internal__!NID_Wait24Vpower -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_res!false -> SKIP))) ; ErrorMode::enter -> SKIP)))
					 	 [] dbisim(((((setPoint==0) and (lim==false)) and (res==false)))&(internal__!NID_Wait24Vpower -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; ClosedLoop::enter -> SKIP)))
					 	 [] dbisim(((res==true))&(internal__!NID_ClosedLoop -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_res!false -> SKIP))) ; ErrorMode::enter -> SKIP)))
					 	 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; Ramping::enter -> SKIP))))
					 	 [] dbisim((errorAck)&(internal__!NID_ErrorMode -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Wait24Vpower::enter -> SKIP)))
					 	 [] dbisim((true)&(int_DisableHV__!NID_Wait24Vpower.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; j0::enter -> SKIP)))
					 	 [] dbisim((true)&(int_DisableHV__!NID_ClosedLoop.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; j0::enter -> SKIP)))
					 	 [] dbisim((true)&(internal__!NID_j0 -> SKIP ;  ((true&CALL__disableHV(
					 			id__,
					 			true
					 		);share__choice(true & (share__choice(set_res!false -> SKIP))) ; ErrorMode::enter -> SKIP))))
					 ) ; Trans)
					 []
					 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
					 []
					 terminate -> SKIP
				)
				)
			within
				Trans
			)
			)
			
			-- Stateful
			-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
			
			-- Named process definitions
			MachineBody(id__) = 
				dbisim((
				let
					finalNodesEntered = {||}
				within
					((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						Ramping::enter,
						Init::enter,
						Wait24Vpower::enter,
						ClosedLoop::enter,
						ErrorMode::enter,
						i0::enter,
						j0::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited,interrupt|})
							transSync = {|internal__.NID_Ramping,internal__.NID_Init,internal__.NID_Wait24Vpower,internal__.NID_Wait24Vpower,internal__.NID_ClosedLoop,internal__.NID_i0,internal__.NID_ErrorMode,int_DisableHV__.NID_Wait24Vpower.in,int_DisableHV__.NID_ClosedLoop.in,internal__.NID_j0|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   Ramping::D__(id__)
							   [| { share__, terminate } |] (
							   Init::D__(id__)
							   [| { share__, terminate } |] (
							   Wait24Vpower::D__(id__)
							   [| { share__, terminate } |] (
							   ClosedLoop::D__(id__)
							   [| { share__, terminate } |] (
							   ErrorMode::D__(id__)
							   [| { share__, terminate } |] (
							   i0::D__(id__)
							   [| { share__, terminate } |] (
							   j0::D__(id__)
							   )
							   )
							   )
							   )
							   )
							   )
							 )
							 [[Ramping::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Ramping|}]]
							 [[Init::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Init|}]]
							 [[Wait24Vpower::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Wait24Vpower,internal__.NID_Wait24Vpower,int_DisableHV__.NID_Wait24Vpower.in|}]]
							 [[ClosedLoop::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_ClosedLoop,int_DisableHV__.NID_ClosedLoop.in|}]]
							 [[ErrorMode::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_ErrorMode|}]]
							 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							  [[set_lim <- setL_lim,set_errorAck <- setL_errorAck,set_res <- setL_res,set_setPoint <- setL_setPoint]]
							 )
							 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 			,setL_lim
							 			,setL_errorAck
							 			,setL_res
							 			,setL_setPoint
							|}) |]
							 ((i0::enter -> Transitions(id__))
							  [[ share__ <- x__ | x__ <- {| share__,setL_lim,setL_errorAck,setL_res,setL_setPoint |} ]]
							 )
							)[[setL_lim <- set_lim,setL_errorAck <- set_errorAck,setL_res <- set_res,setL_setPoint <- set_setPoint]]
							)
						)
						 \ hideSet)
						[[
							currentState__.x____ <- currentState,
							ext_setPoint__.x____ <- ext_setPoint,
							ext_pow24VStatus__.x____ <- ext_pow24VStatus,
							int_overLimit__.x____ <- int_overLimit,
							int_pwmSignal__.x____ <- int_pwmSignal,
							int_underLimit__.x____ <- int_underLimit,
							int_DisableHV__.x____ <- int_DisableHV,
							int_ActualHV__.x____ <- int_ActualHV
							| x____ <- NIDS
						]]
					)
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour(id__) = 
				dbisim((MachineBody(id__)\ enteredSS)
				)
			
			IteratedBehaviour(id__) = 
				dbisim((MachineBody(id__)\ enteredSS)
				)
			
			Stateful(id__) = 
				((
					(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
				 	\getsetLocalChannels
				)
				)
			
			IteratedStateful(id__) =
				(dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										dbisim(
											sbisim(
												dbisim(
													sbisim(
														dbisim(
															sbisim(
																dbisim(
																	sbisim(
																		dbisim(
																			sbisim(
																				dbisim(
																					sbisim(
																						dbisim(
																							sbisim(
																								Behaviour(id__)
																								[| {|get_underLimit,set_underLimit,terminate|} |]
																								Memory_underLimit(0)
																							)\{|get_underLimit,set_underLimit|}
																						)
																						[| {|get_overLimit,set_overLimit,terminate|} |]
																						Memory_overLimit(0)
																					)\{|get_overLimit,set_overLimit|}
																				)
																				[| {|get_errorAck,set_errorAck,terminate|} |]
																				Memory_errorAck(false)
																			)\{|get_errorAck,set_errorAck|}
																		)
																		[| {|get_ActualHV,set_ActualHV,terminate|} |]
																		Memory_ActualHV(0)
																	)\{|get_ActualHV,set_ActualHV|}
																)
																[| {|get_supplyLim,set_supplyLim,terminate|} |]
																Memory_supplyLim(false)
															)\{|get_supplyLim,set_supplyLim|}
														)
														[| {|get_lim,set_lim,terminate|} |]
														Memory_lim(false)
													)\{|get_lim,set_lim|}
												)
												[| {|get_errorFlag,set_errorFlag,terminate|} |]
												Memory_errorFlag(true)
											)\{|get_errorFlag,set_errorFlag|}
										)
										[| {|get_res,set_res,terminate|} |]
										Memory_res(false)
									)\{|get_res,set_res|}
								)
								[| {|get_setPoint,set_setPoint,terminate|} |]
								Memory_setPoint(0)
							)\{|get_setPoint,set_setPoint|}
						)
						[| {|get_power,set_power,terminate|} |]
						Memory_power(Power_On)
					)\{|get_power,set_power|}
				)
				)
			
			-- Visible counterparts
			MachineBody_VS_O(id__) = 
				dbisim((
				let
					finalNodesEntered = {||}
				within
					((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						Ramping::enter,
						Init::enter,
						Wait24Vpower::enter,
						ClosedLoop::enter,
						ErrorMode::enter,
						i0::enter,
						j0::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited,interrupt|})
							transSync = {|internal__.NID_Ramping,internal__.NID_Init,internal__.NID_Wait24Vpower,internal__.NID_Wait24Vpower,internal__.NID_ClosedLoop,internal__.NID_i0,internal__.NID_ErrorMode,int_DisableHV__.NID_Wait24Vpower.in,int_DisableHV__.NID_ClosedLoop.in,internal__.NID_j0|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   Ramping::VS_O__(id__)
							   [| { share__, terminate } |] (
							   Init::VS_O__(id__)
							   [| { share__, terminate } |] (
							   Wait24Vpower::VS_O__(id__)
							   [| { share__, terminate } |] (
							   ClosedLoop::VS_O__(id__)
							   [| { share__, terminate } |] (
							   ErrorMode::VS_O__(id__)
							   [| { share__, terminate } |] (
							   i0::VS_O__(id__)
							   [| { share__, terminate } |] (
							   j0::VS_O__(id__)
							   )
							   )
							   )
							   )
							   )
							   )
							 )
							 [[Ramping::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Ramping|}]]
							 [[Init::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Init|}]]
							 [[Wait24Vpower::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Wait24Vpower,internal__.NID_Wait24Vpower,int_DisableHV__.NID_Wait24Vpower.in|}]]
							 [[ClosedLoop::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_ClosedLoop,int_DisableHV__.NID_ClosedLoop.in|}]]
							 [[ErrorMode::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_ErrorMode|}]]
							 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							  [[set_lim <- setL_lim,set_errorAck <- setL_errorAck,set_res <- setL_res,set_setPoint <- setL_setPoint]]
							 )
							 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 			,setL_lim
							 			,setL_errorAck
							 			,setL_res
							 			,setL_setPoint
							|}) |]
							 ((i0::enter -> Transitions(id__))
							  [[ share__ <- x__ | x__ <- {| share__,setL_lim,setL_errorAck,setL_res,setL_setPoint |} ]]
							 )
							)[[setL_lim <- set_lim,setL_errorAck <- set_errorAck,setL_res <- set_res,setL_setPoint <- set_setPoint]]
							)
						)
						 \ hideSet)
						[[
							currentState__.x____ <- currentState,
							ext_setPoint__.x____ <- ext_setPoint,
							ext_pow24VStatus__.x____ <- ext_pow24VStatus,
							int_overLimit__.x____ <- int_overLimit,
							int_pwmSignal__.x____ <- int_pwmSignal,
							int_underLimit__.x____ <- int_underLimit,
							int_DisableHV__.x____ <- int_DisableHV,
							int_ActualHV__.x____ <- int_ActualHV
							| x____ <- NIDS
						]]
					)
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour_VS_O(id__) = 
				dbisim((MachineBody_VS_O(id__))
				)
			
			IteratedBehaviour_VS_O(id__) = 
				dbisim((MachineBody_VS_O(id__))
				)
			
			Stateful_VS_O(id__) = 
				dbisim((
					(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
				 	\getsetLocalChannels
				)
				)
			
			IteratedStateful_VS_O(id__) =
				(dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										dbisim(
											sbisim(
												dbisim(
													sbisim(
														dbisim(
															sbisim(
																dbisim(
																	sbisim(
																		dbisim(
																			sbisim(
																				dbisim(
																					sbisim(
																						dbisim(
																							sbisim(
																								Behaviour_VS_O(id__)
																								[| {|get_underLimit,set_underLimit,terminate|} |]
																								Memory_underLimit(0)
																							)\{|get_underLimit,set_underLimit|}
																						)
																						[| {|get_overLimit,set_overLimit,terminate|} |]
																						Memory_overLimit(0)
																					)\{|get_overLimit,set_overLimit|}
																				)
																				[| {|get_errorAck,set_errorAck,terminate|} |]
																				Memory_errorAck(false)
																			)\{|get_errorAck,set_errorAck|}
																		)
																		[| {|get_ActualHV,set_ActualHV,terminate|} |]
																		Memory_ActualHV(0)
																	)\{|get_ActualHV,set_ActualHV|}
																)
																[| {|get_supplyLim,set_supplyLim,terminate|} |]
																Memory_supplyLim(false)
															)\{|get_supplyLim,set_supplyLim|}
														)
														[| {|get_lim,set_lim,terminate|} |]
														Memory_lim(false)
													)\{|get_lim,set_lim|}
												)
												[| {|get_errorFlag,set_errorFlag,terminate|} |]
												Memory_errorFlag(true)
											)\{|get_errorFlag,set_errorFlag|}
										)
										[| {|get_res,set_res,terminate|} |]
										Memory_res(false)
									)\{|get_res,set_res|}
								)
								[| {|get_setPoint,set_setPoint,terminate|} |]
								Memory_setPoint(0)
							)\{|get_setPoint,set_setPoint|}
						)
						[| {|get_power,set_power,terminate|} |]
						Memory_power(Power_On)
					)\{|get_power,set_power|}
				)
				)
			
			-- END
			
			-- Memory
			-- Memory variables
			Memory_power(power) =
				get_power!power -> Memory_power(power)
				[]
				set_power?x__ -> Memory_power(x__)
				[]
				terminate -> SKIP
			Memory_setPoint(setPoint) =
				get_setPoint!setPoint -> Memory_setPoint(setPoint)
				[]
				set_setPoint?x__ -> Memory_setPoint(x__)
				[]
				terminate -> SKIP
			Memory_res(res) =
				get_res!res -> Memory_res(res)
				[]
				set_res?x__ -> Memory_res(x__)
				[]
				terminate -> SKIP
			Memory_errorFlag(errorFlag) =
				get_errorFlag!errorFlag -> Memory_errorFlag(errorFlag)
				[]
				set_errorFlag?x__ -> Memory_errorFlag(x__)
				[]
				terminate -> SKIP
			Memory_lim(lim) =
				get_lim!lim -> Memory_lim(lim)
				[]
				set_lim?x__ -> Memory_lim(x__)
				[]
				terminate -> SKIP
			Memory_supplyLim(supplyLim) =
				get_supplyLim!supplyLim -> Memory_supplyLim(supplyLim)
				[]
				set_supplyLim?x__ -> Memory_supplyLim(x__)
				[]
				terminate -> SKIP
			Memory_ActualHV(ActualHV) =
				get_ActualHV!ActualHV -> Memory_ActualHV(ActualHV)
				[]
				set_ActualHV?x__ -> Memory_ActualHV(x__)
				[]
				terminate -> SKIP
			Memory_errorAck(errorAck) =
				get_errorAck!errorAck -> Memory_errorAck(errorAck)
				[]
				set_errorAck?x__ -> Memory_errorAck(x__)
				[]
				terminate -> SKIP
			Memory_overLimit(overLimit) =
				get_overLimit!overLimit -> Memory_overLimit(overLimit)
				[]
				set_overLimit?x__ -> Memory_overLimit(x__)
				[]
				terminate -> SKIP
			Memory_underLimit(underLimit) =
				get_underLimit!underLimit -> Memory_underLimit(underLimit)
				[]
				set_underLimit?x__ -> Memory_underLimit(x__)
				[]
				terminate -> SKIP
			
			-- varMemory process
			varMemory(id__) = Memory_power(Power_On)
			[| { terminate } |] (
			Memory_setPoint(0)
			[| { terminate } |] (
			Memory_res(false)
			[| { terminate } |] (
			Memory_errorFlag(true)
			[| { terminate } |] (
			Memory_lim(false)
			[| { terminate } |] (
			Memory_supplyLim(false)
			[| { terminate } |] (
			Memory_ActualHV(0)
			[| { terminate } |] (
			Memory_errorAck(false)
			[| { terminate } |] (
			Memory_overLimit(0)
			[| { terminate } |] (
			Memory_underLimit(0)
			)
			)
			)
			)
			)
			)
			)
			)
			)
			
			getsetLocalChannels = {|get_power,set_power,get_setPoint,set_setPoint,get_res,set_res,get_errorFlag,set_errorFlag,get_lim,set_lim,get_supplyLim,set_supplyLim,get_ActualHV,set_ActualHV,get_errorAck,set_errorAck,get_overLimit,set_overLimit,get_underLimit,set_underLimit|}
			
			-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
			FVS__(id__) = STM_VS_O(id__)
			
			D__(id__) = STM(id__) \ internal_events
			O__(id__) = sbisim(diamond(D__(id__)))
			VS__(id__) = FVS__(id__)
			VS_O__(id__) = sbisim(diamond(FVS__(id__)))
			HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
			HUP__(id__) = O__(id__) [|{share__}|] SKIP
			
			-- Shared memory
			-- Shared memory variables
			
			-- sharedVarMemory process
			sharedVarMemory(id__) = terminate -> SKIP
			
			sharedVarSync = {||}
			
			sharedVarHide = {||}
		endmodule
		
			-- undefined operations
			
			-- declaring controller memory
			Memory(id__) = SKIP
			
			D__(id__) = 	((
					stm_ref0::D__(id__)[[
						stm_ref0::terminate <- terminate,
						stm_ref0::int_DisableHV <- int_DisableHV,
						stm_ref0::int_ActualHV <- int_ActualHV,
						stm_ref0::int_underLimit <- int_underLimit,
						stm_ref0::int_overLimit <- int_overLimit,
						stm_ref0::ext_setPoint <- ext_setPoint,
						stm_ref0::int_pwmSignal <- int_pwmSignal,
						stm_ref0::ext_pow24VStatus <- ext_pow24VStatus,
						stm_ref0::currentState <- currentState
					]]
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				Memory(id__)
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
			
			-- VS version
			VS__(id__) = 	((
					stm_ref0::VS__(id__)[[
						stm_ref0::terminate <- terminate,
						stm_ref0::int_DisableHV <- int_DisableHV,
						stm_ref0::int_ActualHV <- int_ActualHV,
						stm_ref0::int_underLimit <- int_underLimit,
						stm_ref0::int_overLimit <- int_overLimit,
						stm_ref0::ext_setPoint <- ext_setPoint,
						stm_ref0::int_pwmSignal <- int_pwmSignal,
						stm_ref0::ext_pow24VStatus <- ext_pow24VStatus,
						stm_ref0::currentState <- currentState
					]]
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				Memory(id__)
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
		
			-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
			O__(id__) = sbisim(diamond(	((
					stm_ref0::O__(id__)[[
						stm_ref0::terminate <- terminate,
						stm_ref0::int_DisableHV <- int_DisableHV,
						stm_ref0::int_ActualHV <- int_ActualHV,
						stm_ref0::int_underLimit <- int_underLimit,
						stm_ref0::int_overLimit <- int_overLimit,
						stm_ref0::ext_setPoint <- ext_setPoint,
						stm_ref0::int_pwmSignal <- int_pwmSignal,
						stm_ref0::ext_pow24VStatus <- ext_pow24VStatus,
						stm_ref0::currentState <- currentState
					]]
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				dbisim(Memory(id__))
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
			))
							
			-- VS_O version
			VS_O__(id__) = sbisim(diamond(	((
					stm_ref0::VS_O__(id__)[[
						stm_ref0::terminate <- terminate,
						stm_ref0::int_DisableHV <- int_DisableHV,
						stm_ref0::int_ActualHV <- int_ActualHV,
						stm_ref0::int_underLimit <- int_underLimit,
						stm_ref0::int_overLimit <- int_overLimit,
						stm_ref0::ext_setPoint <- ext_setPoint,
						stm_ref0::int_pwmSignal <- int_pwmSignal,
						stm_ref0::ext_pow24VStatus <- ext_pow24VStatus,
						stm_ref0::currentState <- currentState
					]]
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				dbisim(Memory(id__))
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
			))
		
			HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP			

	endmodule
	module ctrl1
		shared_variable_events = {|
		|}
		
	exports
		transparent diamond
		transparent sbisim
		transparent dbisim
		transparent chase

		-- declaring controller events
		channel ext_pow24VStatus: InOut.Power
		channel int_overLimit: InOut.core_real
		channel int_underLimit: InOut.core_real
		channel int_DisableHV: InOut
		channel int_ActualHV: InOut.core_real
		
		
		
		-- declaring call and ret events for undefined operations
		
		-- declaring controller termination channel
		channel terminate
		
		-- channel set with all visible events
		sem__events = {|
			terminate
		,	ext_pow24VStatus,
			int_overLimit,
			int_underLimit,
			int_DisableHV,
			int_ActualHV
		|}

		-- defined operations
	
		-- declaring machines
		module stm_ref0
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
		
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i0|
			              NID_s0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_overLimit, set_overLimit, setL_overLimit, setR_overLimit: core_real
			channel get_underLimit, set_underLimit, setL_underLimit, setR_underLimit: core_real
			channel get_ActualHV, set_ActualHV, setL_ActualHV, setR_ActualHV: core_real
			channel get_power, set_power, setL_power, setR_power: Power
			
			-- Shared variable channels
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel int_overLimit__: NIDS.InOut.core_real
			channel int_overLimit: InOut.core_real
			channel int_underLimit__: NIDS.InOut.core_real
			channel int_underLimit: InOut.core_real
			channel int_DisableHV__: NIDS.InOut
			channel int_DisableHV: InOut
			channel int_ActualHV__: NIDS.InOut.core_real
			channel int_ActualHV: InOut.core_real
			channel ext_pow24VStatus__: NIDS.InOut.Power
			channel ext_pow24VStatus: InOut.Power
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i0::enter,
			s0::enter
			|}
			
			enteredSS = 	{|
			s0::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	int_overLimit,
				int_underLimit,
				int_DisableHV,
				int_ActualHV,
				ext_pow24VStatus
				|}
		
			-- Nodes --
			-- declaring all nodes
			
			----------------------------------------------------------------------
			-- Initial: i0
			module i0
			exports
			
				channel enter, interrupt
				
				D__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__) = D__(id__)
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- State: s0
			module s0
			
			enterSS = 
					{|			i0::enter,
						f0::enter,
						Waiting::enter,
						PowerStatusRead::enter,
						ActualHVRead::enter,
						PowerAndActualHVRead::enter
					|}
			enteredSS = 
					{|			f0::entered,
						Waiting::entered,
						PowerStatusRead::entered,
						ActualHVRead::entered,
						PowerAndActualHVRead::entered
					|}
			exports
			
				--  Declarations
				
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
								
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_f0|
				              NID_Waiting|
				              NID_PowerStatusRead|
				              NID_ActualHVRead|
				              NID_PowerAndActualHVRead
				
				channel internal__ : NIDS
				channel int_overLimit__: NIDS.InOut.core_real
				channel int_underLimit__: NIDS.InOut.core_real
				channel int_DisableHV__: NIDS.InOut
				channel int_ActualHV__: NIDS.InOut.core_real
				channel ext_pow24VStatus__: NIDS.InOut.Power
				
				--	Nodes
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f0
				module f0
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					--	Rule: behaviours(Node)
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
							
							Entering 	= entered -> SKIP ; Active
							Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
							Interrupted	= share__choice(exit -> exited -> Inactive)
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: Waiting
				module Waiting
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: PowerStatusRead
				module PowerStatusRead
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: ActualHVRead
				module ActualHVRead
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: PowerAndActualHVRead
				module PowerAndActualHVRead
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
				
					Behaviour 	= dbisim(
						((
						 (((let
						 	-- IMPLEMENTATION NOTE:
						 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						 	-- modules for defining the semantics of each node.
						 	enterSS = {|
						 	i0::enter,
						 	f0::enter,
						 	Waiting::enter,
						 	PowerStatusRead::enter,
						 	ActualHVRead::enter,
						 	PowerAndActualHVRead::enter
						 	|}
						 	hideSet = union(enterSS,{|exit,exited,internal__|})
						 within 
						 	((let
						 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						 		-- because CSPM modules are used for the semantics of Node.
						 		flowevts = union(enterSS,{|exit,exited,interrupt|})
						 		transSync = {|internal__.NID_i0,internal__.NID_ActualHVRead,internal__.NID_ActualHVRead,internal__.NID_PowerStatusRead,ext_pow24VStatus__.NID_Waiting.in,int_ActualHV__.NID_Waiting.in,int_ActualHV__.NID_PowerStatusRead.in,ext_pow24VStatus__.NID_ActualHVRead.in,internal__.NID_PowerAndActualHVRead,internal__.NID_PowerAndActualHVRead,internal__.NID_PowerAndActualHVRead|}
						 	within
						 		((
						 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						 		   i0::D__(id__)
						 		   [| { share__, terminate } |] (
						 		   f0::D__(id__)
						 		   [| { share__, terminate } |] (
						 		   Waiting::D__(id__)
						 		   [| { share__, terminate } |] (
						 		   PowerStatusRead::D__(id__)
						 		   [| { share__, terminate } |] (
						 		   ActualHVRead::D__(id__)
						 		   [| { share__, terminate } |] (
						 		   PowerAndActualHVRead::D__(id__)
						 		   )
						 		   )
						 		   )
						 		   )
						 		   )
						 		 )
						 		 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
						 		 [[Waiting::interrupt <- x__ | x__ <- {|interrupt,ext_pow24VStatus__.NID_Waiting.in,int_ActualHV__.NID_Waiting.in|}]]
						 		 [[PowerStatusRead::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_PowerStatusRead,int_ActualHV__.NID_PowerStatusRead.in|}]]
						 		 [[ActualHVRead::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_ActualHVRead,internal__.NID_ActualHVRead,ext_pow24VStatus__.NID_ActualHVRead.in|}]]
						 		 [[PowerAndActualHVRead::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_PowerAndActualHVRead,internal__.NID_PowerAndActualHVRead,internal__.NID_PowerAndActualHVRead|}]]
						 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
						 		 )
						 		  [[ share__ <- x__ | x__ <- {| share__,setR_power,setR_ActualHV |} ]] 
						 		  [[set_overLimit <- setL_overLimit,set_power <- setL_power,set_underLimit <- setL_underLimit,set_ActualHV <- setL_ActualHV]]
						 		 )
						 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						 		 			,setL_overLimit
						 		 			,setL_power
						 		 			,setL_underLimit
						 		 			,setL_ActualHV
						 		 			,setR_power
						 		 			 			,setR_ActualHV
						 		 			|}) |]
						 		 ((i0::enter -> Transitions(id__))
						 		  [[ share__ <- x__ | x__ <- {| share__,setL_overLimit,setL_power,setL_underLimit,setL_ActualHV |} ]]
						 		  [[set_power <- setR_power,set_ActualHV <- setR_ActualHV]]
						 		 )
						 		)[[setL_overLimit <- set_overLimit,setL_power <- set_power,setL_underLimit <- set_underLimit,setL_ActualHV <- set_ActualHV]]
						 		 [[setR_power <- set_power,setR_ActualHV <- set_ActualHV]]
						 		)
						 	)
						 	 \ hideSet)
						 	[[
						 		int_overLimit__.x____ <- int_overLimit,
						 		int_underLimit__.x____ <- int_underLimit,
						 		int_DisableHV__.x____ <- int_DisableHV,
						 		int_ActualHV__.x____ <- int_ActualHV,
						 		ext_pow24VStatus__.x____ <- ext_pow24VStatus
						 		| x____ <- NIDS
						 	]]
						 )
						 )
						  [[ share__ <- x__ | x__ <- {| share__,setR_overLimit,setR_power,setR_underLimit,setR_ActualHV |} ]] 
						  [[set_overLimit <- setL_overLimit,set_power <- setL_power,set_underLimit <- setL_underLimit,set_ActualHV <- setL_ActualHV]]
						 )
						 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
						 			,setL_overLimit
						 			,setL_power
						 			,setL_underLimit
						 			,setL_ActualHV
						 			,setR_overLimit
						 			 			,setR_power
						 			 			,setR_underLimit
						 			 			,setR_ActualHV
						 			|}) |]
						 ((During)
						  [[ share__ <- x__ | x__ <- {| share__,setL_overLimit,setL_power,setL_underLimit,setL_ActualHV |} ]]
						  [[set_overLimit <- setR_overLimit,set_power <- setR_power,set_underLimit <- setR_underLimit,set_ActualHV <- setR_ActualHV]]
						 )
						)[[setL_overLimit <- set_overLimit,setL_power <- set_power,setL_underLimit <- set_underLimit,setL_ActualHV <- set_ActualHV]]
						 [[setR_overLimit <- set_overLimit,setR_power <- set_power,setR_underLimit <- set_underLimit,setR_ActualHV <- set_ActualHV]]
						)\union(enteredSS,{terminate}) 
					)
					During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
							 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
				
					Behaviour 	= dbisim(
						((
						 (((let
						 	-- IMPLEMENTATION NOTE:
						 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						 	-- modules for defining the semantics of each node.
						 	enterSS = {|
						 	i0::enter,
						 	f0::enter,
						 	Waiting::enter,
						 	PowerStatusRead::enter,
						 	ActualHVRead::enter,
						 	PowerAndActualHVRead::enter
						 	|}
						 	hideSet = union(enterSS,{|exit,exited,internal__|})
						 within 
						 	((let
						 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						 		-- because CSPM modules are used for the semantics of Node.
						 		flowevts = union(enterSS,{|exit,exited,interrupt|})
						 		transSync = {|internal__.NID_i0,internal__.NID_ActualHVRead,internal__.NID_ActualHVRead,internal__.NID_PowerStatusRead,ext_pow24VStatus__.NID_Waiting.in,int_ActualHV__.NID_Waiting.in,int_ActualHV__.NID_PowerStatusRead.in,ext_pow24VStatus__.NID_ActualHVRead.in,internal__.NID_PowerAndActualHVRead,internal__.NID_PowerAndActualHVRead,internal__.NID_PowerAndActualHVRead|}
						 	within
						 		((
						 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						 		   i0::VS_O__(id__)
						 		   [| { share__, terminate } |] (
						 		   f0::VS_O__(id__)
						 		   [| { share__, terminate } |] (
						 		   Waiting::VS_O__(id__)
						 		   [| { share__, terminate } |] (
						 		   PowerStatusRead::VS_O__(id__)
						 		   [| { share__, terminate } |] (
						 		   ActualHVRead::VS_O__(id__)
						 		   [| { share__, terminate } |] (
						 		   PowerAndActualHVRead::VS_O__(id__)
						 		   )
						 		   )
						 		   )
						 		   )
						 		   )
						 		 )
						 		 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
						 		 [[Waiting::interrupt <- x__ | x__ <- {|interrupt,ext_pow24VStatus__.NID_Waiting.in,int_ActualHV__.NID_Waiting.in|}]]
						 		 [[PowerStatusRead::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_PowerStatusRead,int_ActualHV__.NID_PowerStatusRead.in|}]]
						 		 [[ActualHVRead::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_ActualHVRead,internal__.NID_ActualHVRead,ext_pow24VStatus__.NID_ActualHVRead.in|}]]
						 		 [[PowerAndActualHVRead::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_PowerAndActualHVRead,internal__.NID_PowerAndActualHVRead,internal__.NID_PowerAndActualHVRead|}]]
						 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
						 		 )
						 		  [[ share__ <- x__ | x__ <- {| share__,setR_power,setR_ActualHV |} ]] 
						 		  [[set_overLimit <- setL_overLimit,set_power <- setL_power,set_underLimit <- setL_underLimit,set_ActualHV <- setL_ActualHV]]
						 		 )
						 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						 		 			,setL_overLimit
						 		 			,setL_power
						 		 			,setL_underLimit
						 		 			,setL_ActualHV
						 		 			,setR_power
						 		 			 			,setR_ActualHV
						 		 			|}) |]
						 		 ((i0::enter -> Transitions(id__))
						 		  [[ share__ <- x__ | x__ <- {| share__,setL_overLimit,setL_power,setL_underLimit,setL_ActualHV |} ]]
						 		  [[set_power <- setR_power,set_ActualHV <- setR_ActualHV]]
						 		 )
						 		)[[setL_overLimit <- set_overLimit,setL_power <- set_power,setL_underLimit <- set_underLimit,setL_ActualHV <- set_ActualHV]]
						 		 [[setR_power <- set_power,setR_ActualHV <- set_ActualHV]]
						 		)
						 	)
						 	 \ hideSet)
						 	[[
						 		int_overLimit__.x____ <- int_overLimit,
						 		int_underLimit__.x____ <- int_underLimit,
						 		int_DisableHV__.x____ <- int_DisableHV,
						 		int_ActualHV__.x____ <- int_ActualHV,
						 		ext_pow24VStatus__.x____ <- ext_pow24VStatus
						 		| x____ <- NIDS
						 	]]
						 )
						 )
						  [[ share__ <- x__ | x__ <- {| share__,setR_overLimit,setR_power,setR_underLimit,setR_ActualHV |} ]] 
						  [[set_overLimit <- setL_overLimit,set_power <- setL_power,set_underLimit <- setL_underLimit,set_ActualHV <- setL_ActualHV]]
						 )
						 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
						 			,setL_overLimit
						 			,setL_power
						 			,setL_underLimit
						 			,setL_ActualHV
						 			,setR_overLimit
						 			 			,setR_power
						 			 			,setR_underLimit
						 			 			,setR_ActualHV
						 			|}) |]
						 ((During)
						  [[ share__ <- x__ | x__ <- {| share__,setL_overLimit,setL_power,setL_underLimit,setL_ActualHV |} ]]
						  [[set_overLimit <- setR_overLimit,set_power <- setR_power,set_underLimit <- setR_underLimit,set_ActualHV <- setR_ActualHV]]
						 )
						)[[setL_overLimit <- set_overLimit,setL_power <- set_power,setL_underLimit <- set_underLimit,setL_ActualHV <- set_ActualHV]]
						 [[setR_overLimit <- set_overLimit,setR_power <- set_power,setR_underLimit <- set_underLimit,setR_ActualHV <- set_ActualHV]]
						)\{terminate} 
					)
					During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
							 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
				within
					Inactive [| {terminate} |> SKIP)
				
				Transitions(id__) = ((let
					Trans = share__choice(get_overLimit?overLimit -> get_power?power -> get_underLimit?underLimit -> get_ActualHV?ActualHV -> (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; Waiting::enter -> SKIP))))
						 	 [] dbisim(((ActualHV>overLimit))&(internal__!NID_ActualHVRead -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(int_DisableHV.out -> SKIP)) ; f0::enter -> SKIP)))
						 	 [] dbisim(((ActualHV<underLimit))&(internal__!NID_ActualHVRead -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(int_DisableHV.out -> SKIP)) ; f0::enter -> SKIP)))
						 	 [] dbisim(((power==Power_Off))&(internal__!NID_PowerStatusRead -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(int_DisableHV.out -> SKIP)) ; f0::enter -> SKIP)))
						 	 [] dbisim((true)&(ext_pow24VStatus__!NID_Waiting.in?power:{power|power <- Power, true} -> share__choice(set_power!power -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; PowerStatusRead::enter -> SKIP)))
						 	 [] dbisim((true)&(int_ActualHV__!NID_Waiting.in?ActualHV:{ActualHV|ActualHV <- core_real, true} -> share__choice(set_ActualHV!ActualHV -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; ActualHVRead::enter -> SKIP)))
						 	 [] dbisim((true)&(int_ActualHV__!NID_PowerStatusRead.in?ActualHV:{ActualHV|ActualHV <- core_real, true} -> share__choice(set_ActualHV!ActualHV -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; PowerAndActualHVRead::enter -> SKIP)))
						 	 [] dbisim((true)&(ext_pow24VStatus__!NID_ActualHVRead.in?power:{power|power <- Power, true} -> share__choice(set_power!power -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; PowerAndActualHVRead::enter -> SKIP)))
						 	 [] dbisim(((ActualHV<underLimit))&(internal__!NID_PowerAndActualHVRead -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(int_DisableHV.out -> SKIP)) ; f0::enter -> SKIP)))
						 	 [] dbisim(((ActualHV>overLimit))&(internal__!NID_PowerAndActualHVRead -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(int_DisableHV.out -> SKIP)) ; f0::enter -> SKIP)))
						 	 [] dbisim(((power==Power_Off))&(internal__!NID_PowerAndActualHVRead -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(int_DisableHV.out -> SKIP)) ; f0::enter -> SKIP)))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
					)
				within
					Trans
				)
				)
				
			
			endmodule
			----------------------------------------------------------------------
			
			-- END of Nodes --
			
			-- Operation calls --
			-- Only the undefined operations are declared here.
			-- If the state machine is in isolation, all required operations will be undefined.
			-- If it is in the context of a controller, the required operations not provided by the
			-- controller will be declared here, and the defined operations will be defined in the
			-- context of the Controller module, and therefore within scope of the state machine module.
			
			-- END of Operation calls --
			
			-- STM processes
			STM(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
			( 
				(
					(
						(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
					 	[[ share__ <- x__ | x__ <- {||} ]]
					)
				[| {share__} |]
				SKIP
				)
				[| union(sharedVarSync,{terminate}) |]
				dbisim(sharedVarMemory(id__))
			)\sharedVarHide
			
			STM_VS_O(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
			( 
				(
					(
						(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
					 	[[ share__ <- x__ | x__ <- {||} ]]
					)
				[| {share__} |]
				SKIP
				)
				[| union(sharedVarSync,{terminate}) |]
				dbisim(sharedVarMemory(id__))
			)\sharedVarHide
			
			-- Transitions
			Transitions(id__) = ((let
				Trans = (
					((share__ -> SKIP
					 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((true&(share__choice(int_overLimit.in?overLimit -> (SStop /\ set_overLimit!overLimit -> SKIP)));true&(share__choice(int_underLimit.in?underLimit -> (SStop /\ set_underLimit!underLimit -> SKIP))) ; s0::enter -> SKIP))))
					 	 [] dbisim((true)&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s0::enter -> SKIP)))
					 ) ; Trans)
					 []
					 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
					 []
					 terminate -> SKIP
				)
			within
				Trans
			)
			)
			
			-- Stateful
			-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
			
			-- Named process definitions
			MachineBody(id__) = 
				dbisim((
				let
					finalNodesEntered = {||}
				within
					((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						i0::enter,
						s0::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited,interrupt|})
							transSync = {|internal__.NID_i0,internal__.NID_s0|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   i0::D__(id__)
							   [| { share__, terminate } |] (
							   s0::D__(id__)
							   )
							 )
							 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
							 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 )
							 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							|}) |]
							 ((i0::enter -> Transitions(id__))
							  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 )
							)
							)
						)
						 \ hideSet)
						[[
							int_overLimit__.x____ <- int_overLimit,
							int_underLimit__.x____ <- int_underLimit,
							int_DisableHV__.x____ <- int_DisableHV,
							int_ActualHV__.x____ <- int_ActualHV,
							ext_pow24VStatus__.x____ <- ext_pow24VStatus
							| x____ <- NIDS
						]]
					)
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour(id__) = 
				dbisim((MachineBody(id__)\ enteredSS)
				)
			
			IteratedBehaviour(id__) = 
				dbisim((MachineBody(id__)\ enteredSS)
				)
			
			Stateful(id__) = 
				((
					(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
				 	\getsetLocalChannels
				)
				)
			
			IteratedStateful(id__) =
				(dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										dbisim(
											sbisim(
												Behaviour(id__)
												[| {|get_power,set_power,terminate|} |]
												Memory_power(Power_On)
											)\{|get_power,set_power|}
										)
										[| {|get_ActualHV,set_ActualHV,terminate|} |]
										Memory_ActualHV(0)
									)\{|get_ActualHV,set_ActualHV|}
								)
								[| {|get_underLimit,set_underLimit,terminate|} |]
								Memory_underLimit(0)
							)\{|get_underLimit,set_underLimit|}
						)
						[| {|get_overLimit,set_overLimit,terminate|} |]
						Memory_overLimit(0)
					)\{|get_overLimit,set_overLimit|}
				)
				)
			
			-- Visible counterparts
			MachineBody_VS_O(id__) = 
				dbisim((
				let
					finalNodesEntered = {||}
				within
					((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						i0::enter,
						s0::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited,interrupt|})
							transSync = {|internal__.NID_i0,internal__.NID_s0|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   i0::VS_O__(id__)
							   [| { share__, terminate } |] (
							   s0::VS_O__(id__)
							   )
							 )
							 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
							 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 )
							 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							|}) |]
							 ((i0::enter -> Transitions(id__))
							  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 )
							)
							)
						)
						 \ hideSet)
						[[
							int_overLimit__.x____ <- int_overLimit,
							int_underLimit__.x____ <- int_underLimit,
							int_DisableHV__.x____ <- int_DisableHV,
							int_ActualHV__.x____ <- int_ActualHV,
							ext_pow24VStatus__.x____ <- ext_pow24VStatus
							| x____ <- NIDS
						]]
					)
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour_VS_O(id__) = 
				dbisim((MachineBody_VS_O(id__))
				)
			
			IteratedBehaviour_VS_O(id__) = 
				dbisim((MachineBody_VS_O(id__))
				)
			
			Stateful_VS_O(id__) = 
				dbisim((
					(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
				 	\getsetLocalChannels
				)
				)
			
			IteratedStateful_VS_O(id__) =
				(dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										dbisim(
											sbisim(
												Behaviour_VS_O(id__)
												[| {|get_power,set_power,terminate|} |]
												Memory_power(Power_On)
											)\{|get_power,set_power|}
										)
										[| {|get_ActualHV,set_ActualHV,terminate|} |]
										Memory_ActualHV(0)
									)\{|get_ActualHV,set_ActualHV|}
								)
								[| {|get_underLimit,set_underLimit,terminate|} |]
								Memory_underLimit(0)
							)\{|get_underLimit,set_underLimit|}
						)
						[| {|get_overLimit,set_overLimit,terminate|} |]
						Memory_overLimit(0)
					)\{|get_overLimit,set_overLimit|}
				)
				)
			
			-- END
			
			-- Memory
			-- Memory variables
			Memory_overLimit(overLimit) =
				get_overLimit!overLimit -> Memory_overLimit(overLimit)
				[]
				set_overLimit?x__ -> Memory_overLimit(x__)
				[]
				terminate -> SKIP
			Memory_underLimit(underLimit) =
				get_underLimit!underLimit -> Memory_underLimit(underLimit)
				[]
				set_underLimit?x__ -> Memory_underLimit(x__)
				[]
				terminate -> SKIP
			Memory_ActualHV(ActualHV) =
				get_ActualHV!ActualHV -> Memory_ActualHV(ActualHV)
				[]
				set_ActualHV?x__ -> Memory_ActualHV(x__)
				[]
				terminate -> SKIP
			Memory_power(power) =
				get_power!power -> Memory_power(power)
				[]
				set_power?x__ -> Memory_power(x__)
				[]
				terminate -> SKIP
			
			-- varMemory process
			varMemory(id__) = Memory_overLimit(0)
			[| { terminate } |] (
			Memory_underLimit(0)
			[| { terminate } |] (
			Memory_ActualHV(0)
			[| { terminate } |] (
			Memory_power(Power_On)
			)
			)
			)
			
			getsetLocalChannels = {|get_overLimit,set_overLimit,get_underLimit,set_underLimit,get_ActualHV,set_ActualHV,get_power,set_power|}
			
			-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
			FVS__(id__) = STM_VS_O(id__)
			
			D__(id__) = STM(id__) \ internal_events
			O__(id__) = sbisim(diamond(D__(id__)))
			VS__(id__) = FVS__(id__)
			VS_O__(id__) = sbisim(diamond(FVS__(id__)))
			HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
			HUP__(id__) = O__(id__) [|{share__}|] SKIP
			
			-- Shared memory
			-- Shared memory variables
			
			-- sharedVarMemory process
			sharedVarMemory(id__) = terminate -> SKIP
			
			sharedVarSync = {||}
			
			sharedVarHide = {||}
		endmodule
		
			-- undefined operations
			
			-- declaring controller memory
			Memory(id__) = SKIP
			
			D__(id__) = 	((
					stm_ref0::D__(id__)[[
						stm_ref0::terminate <- terminate,
						stm_ref0::int_ActualHV <- int_ActualHV,
						stm_ref0::int_DisableHV <- int_DisableHV,
						stm_ref0::int_underLimit <- int_underLimit,
						stm_ref0::int_overLimit <- int_overLimit,
						stm_ref0::ext_pow24VStatus <- ext_pow24VStatus
					]]
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				Memory(id__)
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
			
			-- VS version
			VS__(id__) = 	((
					stm_ref0::VS__(id__)[[
						stm_ref0::terminate <- terminate,
						stm_ref0::int_ActualHV <- int_ActualHV,
						stm_ref0::int_DisableHV <- int_DisableHV,
						stm_ref0::int_underLimit <- int_underLimit,
						stm_ref0::int_overLimit <- int_overLimit,
						stm_ref0::ext_pow24VStatus <- ext_pow24VStatus
					]]
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				Memory(id__)
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
		
			-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
			O__(id__) = sbisim(diamond(	((
					stm_ref0::O__(id__)[[
						stm_ref0::terminate <- terminate,
						stm_ref0::int_ActualHV <- int_ActualHV,
						stm_ref0::int_DisableHV <- int_DisableHV,
						stm_ref0::int_underLimit <- int_underLimit,
						stm_ref0::int_overLimit <- int_overLimit,
						stm_ref0::ext_pow24VStatus <- ext_pow24VStatus
					]]
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				dbisim(Memory(id__))
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
			))
							
			-- VS_O version
			VS_O__(id__) = sbisim(diamond(	((
					stm_ref0::VS_O__(id__)[[
						stm_ref0::terminate <- terminate,
						stm_ref0::int_ActualHV <- int_ActualHV,
						stm_ref0::int_DisableHV <- int_DisableHV,
						stm_ref0::int_underLimit <- int_underLimit,
						stm_ref0::int_overLimit <- int_overLimit,
						stm_ref0::ext_pow24VStatus <- ext_pow24VStatus
					]]
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				dbisim(Memory(id__))
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
			))
		
			HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP			

	endmodule
	module ctrl2
		shared_variable_events = {|
		|}
		
	exports
		transparent diamond
		transparent sbisim
		transparent dbisim
		transparent chase

		-- declaring controller events
		channel ext_pow24VStatus: InOut.Power
		channel ext_pow24_1: InOut.Power
		channel ext_pow24_2: InOut.Power
		
		
		
		-- declaring call and ret events for undefined operations
		
		-- declaring controller termination channel
		channel terminate
		
		-- channel set with all visible events
		sem__events = {|
			terminate
		,	ext_pow24VStatus,
			ext_pow24_1,
			ext_pow24_2
		|}

		-- defined operations
	
		-- declaring machines
		module stm0
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
		
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i0|
			              NID_s0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_power, set_power, setL_power, setR_power: Power
			
			-- Shared variable channels
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel ext_pow24VStatus__: NIDS.InOut.Power
			channel ext_pow24VStatus: InOut.Power
			channel ext_pow24_1__: NIDS.InOut.Power
			channel ext_pow24_1: InOut.Power
			channel ext_pow24_2__: NIDS.InOut.Power
			channel ext_pow24_2: InOut.Power
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i0::enter,
			s0::enter
			|}
			
			enteredSS = 	{|
			s0::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	ext_pow24VStatus,
				ext_pow24_1,
				ext_pow24_2
				|}
		
			-- Nodes --
			-- declaring all nodes
			
			----------------------------------------------------------------------
			-- Initial: i0
			module i0
			exports
			
				channel enter, interrupt
				
				D__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__) = D__(id__)
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- State: s0
			module s0
			
			enterSS = {}
			
			enteredSS = {}
			
			exports
			
				--  Declarations
				
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
								
				
				--	Nodes
				-- declaring all nodes
				
				
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(ext_pow24VStatus.in?power -> (SStop /\ set_power!power -> SKIP))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(ext_pow24VStatus.in?power -> (SStop /\ set_power!power -> SKIP))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
			
			endmodule
			----------------------------------------------------------------------
			
			-- END of Nodes --
			
			-- Operation calls --
			-- Only the undefined operations are declared here.
			-- If the state machine is in isolation, all required operations will be undefined.
			-- If it is in the context of a controller, the required operations not provided by the
			-- controller will be declared here, and the defined operations will be defined in the
			-- context of the Controller module, and therefore within scope of the state machine module.
			
			-- END of Operation calls --
			
			-- STM processes
			STM(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
			( 
				(
					(
						(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
					 	[[ share__ <- x__ | x__ <- {||} ]]
					)
				[| {share__} |]
				SKIP
				)
				[| union(sharedVarSync,{terminate}) |]
				dbisim(sharedVarMemory(id__))
			)\sharedVarHide
			
			STM_VS_O(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
			( 
				(
					(
						(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
					 	[[ share__ <- x__ | x__ <- {||} ]]
					)
				[| {share__} |]
				SKIP
				)
				[| union(sharedVarSync,{terminate}) |]
				dbisim(sharedVarMemory(id__))
			)\sharedVarHide
			
			-- Transitions
			Transitions(id__) = ((let
				Trans = (
					((share__ -> SKIP
					 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s0::enter -> SKIP))))
					 	 [] dbisim((true)&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(get_power?power -> true&(share__choice(ext_pow24_1.out!power -> SKIP)));share__choice(get_power?power -> true&(share__choice(ext_pow24_2.out!power -> SKIP))) ; s0::enter -> SKIP)))
					 ) ; Trans)
					 []
					 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
					 []
					 terminate -> SKIP
				)
			within
				Trans
			)
			)
			
			-- Stateful
			-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
			
			-- Named process definitions
			MachineBody(id__) = 
				dbisim((
				let
					finalNodesEntered = {||}
				within
					((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						i0::enter,
						s0::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited,interrupt|})
							transSync = {|internal__.NID_i0,internal__.NID_s0|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   i0::D__(id__)
							   [| { share__, terminate } |] (
							   s0::D__(id__)
							   )
							 )
							 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
							 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 )
							 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							|}) |]
							 ((i0::enter -> Transitions(id__))
							  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 )
							)
							)
						)
						 \ hideSet)
						[[
							ext_pow24VStatus__.x____ <- ext_pow24VStatus,
							ext_pow24_1__.x____ <- ext_pow24_1,
							ext_pow24_2__.x____ <- ext_pow24_2
							| x____ <- NIDS
						]]
					)
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour(id__) = 
				dbisim((MachineBody(id__)\ enteredSS)
				)
			
			IteratedBehaviour(id__) = 
				dbisim((MachineBody(id__)\ enteredSS)
				)
			
			Stateful(id__) = 
				((
					(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
				 	\getsetLocalChannels
				)
				)
			
			IteratedStateful(id__) =
				(dbisim(
					sbisim(
						Behaviour(id__)
						[| {|get_power,set_power,terminate|} |]
						Memory_power(Power_On)
					)\{|get_power,set_power|}
				)
				)
			
			-- Visible counterparts
			MachineBody_VS_O(id__) = 
				dbisim((
				let
					finalNodesEntered = {||}
				within
					((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						i0::enter,
						s0::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited,interrupt|})
							transSync = {|internal__.NID_i0,internal__.NID_s0|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   i0::VS_O__(id__)
							   [| { share__, terminate } |] (
							   s0::VS_O__(id__)
							   )
							 )
							 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
							 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 )
							 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							|}) |]
							 ((i0::enter -> Transitions(id__))
							  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 )
							)
							)
						)
						 \ hideSet)
						[[
							ext_pow24VStatus__.x____ <- ext_pow24VStatus,
							ext_pow24_1__.x____ <- ext_pow24_1,
							ext_pow24_2__.x____ <- ext_pow24_2
							| x____ <- NIDS
						]]
					)
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour_VS_O(id__) = 
				dbisim((MachineBody_VS_O(id__))
				)
			
			IteratedBehaviour_VS_O(id__) = 
				dbisim((MachineBody_VS_O(id__))
				)
			
			Stateful_VS_O(id__) = 
				dbisim((
					(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
				 	\getsetLocalChannels
				)
				)
			
			IteratedStateful_VS_O(id__) =
				(dbisim(
					sbisim(
						Behaviour_VS_O(id__)
						[| {|get_power,set_power,terminate|} |]
						Memory_power(Power_On)
					)\{|get_power,set_power|}
				)
				)
			
			-- END
			
			-- Memory
			-- Memory variables
			Memory_power(power) =
				get_power!power -> Memory_power(power)
				[]
				set_power?x__ -> Memory_power(x__)
				[]
				terminate -> SKIP
			
			-- varMemory process
			varMemory(id__) = Memory_power(Power_On)
			
			getsetLocalChannels = {|get_power,set_power|}
			
			-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
			FVS__(id__) = STM_VS_O(id__)
			
			D__(id__) = STM(id__) \ internal_events
			O__(id__) = sbisim(diamond(D__(id__)))
			VS__(id__) = FVS__(id__)
			VS_O__(id__) = sbisim(diamond(FVS__(id__)))
			HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
			HUP__(id__) = O__(id__) [|{share__}|] SKIP
			
			-- Shared memory
			-- Shared memory variables
			
			-- sharedVarMemory process
			sharedVarMemory(id__) = terminate -> SKIP
			
			sharedVarSync = {||}
			
			sharedVarHide = {||}
		endmodule
		
			-- undefined operations
			
			-- declaring controller memory
			Memory(id__) = SKIP
			
			D__(id__) = 	((
					stm0::D__(id__)[[
						stm0::terminate <- terminate,
						stm0::ext_pow24VStatus <- ext_pow24VStatus,
						stm0::ext_pow24_1 <- ext_pow24_1,
						stm0::ext_pow24_2 <- ext_pow24_2
					]]
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				Memory(id__)
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
			
			-- VS version
			VS__(id__) = 	((
					stm0::VS__(id__)[[
						stm0::terminate <- terminate,
						stm0::ext_pow24VStatus <- ext_pow24VStatus,
						stm0::ext_pow24_1 <- ext_pow24_1,
						stm0::ext_pow24_2 <- ext_pow24_2
					]]
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				Memory(id__)
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
		
			-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
			O__(id__) = sbisim(diamond(	((
					stm0::O__(id__)[[
						stm0::terminate <- terminate,
						stm0::ext_pow24VStatus <- ext_pow24VStatus,
						stm0::ext_pow24_1 <- ext_pow24_1,
						stm0::ext_pow24_2 <- ext_pow24_2
					]]
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				dbisim(Memory(id__))
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
			))
							
			-- VS_O version
			VS_O__(id__) = sbisim(diamond(	((
					stm0::VS_O__(id__)[[
						stm0::terminate <- terminate,
						stm0::ext_pow24VStatus <- ext_pow24VStatus,
						stm0::ext_pow24_1 <- ext_pow24_1,
						stm0::ext_pow24_2 <- ext_pow24_2
					]]
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				dbisim(Memory(id__))
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
			))
		
			HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP			

	endmodule
	module ctrl3
		shared_variable_events = {|
		|}
		
	exports
		transparent diamond
		transparent sbisim
		transparent dbisim
		transparent chase

		-- declaring controller events
		channel int_ActualHV: InOut.core_real
		channel ActualHV_1: InOut.core_real
		channel ActualHV_2: InOut.core_real
		
		
		
		-- declaring call and ret events for undefined operations
		
		-- declaring controller termination channel
		channel terminate
		
		-- channel set with all visible events
		sem__events = {|
			terminate
		,	int_ActualHV,
			ActualHV_1,
			ActualHV_2
		|}

		-- defined operations
	
		-- declaring machines
		module stm0
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
		
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i0|
			              NID_s0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_ActualHV, set_ActualHV, setL_ActualHV, setR_ActualHV: core_real
			
			-- Shared variable channels
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel int_ActualHV__: NIDS.InOut.core_real
			channel int_ActualHV: InOut.core_real
			channel ActualHV_1__: NIDS.InOut.core_real
			channel ActualHV_1: InOut.core_real
			channel ActualHV_2__: NIDS.InOut.core_real
			channel ActualHV_2: InOut.core_real
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i0::enter,
			s0::enter
			|}
			
			enteredSS = 	{|
			s0::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	int_ActualHV,
				ActualHV_1,
				ActualHV_2
				|}
		
			-- Nodes --
			-- declaring all nodes
			
			----------------------------------------------------------------------
			-- Initial: i0
			module i0
			exports
			
				channel enter, interrupt
				
				D__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__) = D__(id__)
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- State: s0
			module s0
			
			enterSS = {}
			
			enteredSS = {}
			
			exports
			
				--  Declarations
				
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
								
				
				--	Nodes
				-- declaring all nodes
				
				
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(int_ActualHV.in?ActualHV -> (SStop /\ set_ActualHV!ActualHV -> SKIP))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(int_ActualHV.in?ActualHV -> (SStop /\ set_ActualHV!ActualHV -> SKIP))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
			
			endmodule
			----------------------------------------------------------------------
			
			-- END of Nodes --
			
			-- Operation calls --
			-- Only the undefined operations are declared here.
			-- If the state machine is in isolation, all required operations will be undefined.
			-- If it is in the context of a controller, the required operations not provided by the
			-- controller will be declared here, and the defined operations will be defined in the
			-- context of the Controller module, and therefore within scope of the state machine module.
			
			-- END of Operation calls --
			
			-- STM processes
			STM(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
			( 
				(
					(
						(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
					 	[[ share__ <- x__ | x__ <- {||} ]]
					)
				[| {share__} |]
				SKIP
				)
				[| union(sharedVarSync,{terminate}) |]
				dbisim(sharedVarMemory(id__))
			)\sharedVarHide
			
			STM_VS_O(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
			( 
				(
					(
						(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
					 	[[ share__ <- x__ | x__ <- {||} ]]
					)
				[| {share__} |]
				SKIP
				)
				[| union(sharedVarSync,{terminate}) |]
				dbisim(sharedVarMemory(id__))
			)\sharedVarHide
			
			-- Transitions
			Transitions(id__) = ((let
				Trans = (
					((share__ -> SKIP
					 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s0::enter -> SKIP))))
					 	 [] dbisim((true)&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(get_ActualHV?ActualHV -> true&(share__choice(ActualHV_1.out!ActualHV -> SKIP)));share__choice(get_ActualHV?ActualHV -> true&(share__choice(ActualHV_2.out!ActualHV -> SKIP))) ; s0::enter -> SKIP)))
					 ) ; Trans)
					 []
					 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
					 []
					 terminate -> SKIP
				)
			within
				Trans
			)
			)
			
			-- Stateful
			-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
			
			-- Named process definitions
			MachineBody(id__) = 
				dbisim((
				let
					finalNodesEntered = {||}
				within
					((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						i0::enter,
						s0::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited,interrupt|})
							transSync = {|internal__.NID_i0,internal__.NID_s0|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   i0::D__(id__)
							   [| { share__, terminate } |] (
							   s0::D__(id__)
							   )
							 )
							 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
							 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 )
							 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							|}) |]
							 ((i0::enter -> Transitions(id__))
							  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 )
							)
							)
						)
						 \ hideSet)
						[[
							int_ActualHV__.x____ <- int_ActualHV,
							ActualHV_1__.x____ <- ActualHV_1,
							ActualHV_2__.x____ <- ActualHV_2
							| x____ <- NIDS
						]]
					)
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour(id__) = 
				dbisim((MachineBody(id__)\ enteredSS)
				)
			
			IteratedBehaviour(id__) = 
				dbisim((MachineBody(id__)\ enteredSS)
				)
			
			Stateful(id__) = 
				((
					(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
				 	\getsetLocalChannels
				)
				)
			
			IteratedStateful(id__) =
				(dbisim(
					sbisim(
						Behaviour(id__)
						[| {|get_ActualHV,set_ActualHV,terminate|} |]
						Memory_ActualHV(0)
					)\{|get_ActualHV,set_ActualHV|}
				)
				)
			
			-- Visible counterparts
			MachineBody_VS_O(id__) = 
				dbisim((
				let
					finalNodesEntered = {||}
				within
					((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						i0::enter,
						s0::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited,interrupt|})
							transSync = {|internal__.NID_i0,internal__.NID_s0|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   i0::VS_O__(id__)
							   [| { share__, terminate } |] (
							   s0::VS_O__(id__)
							   )
							 )
							 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
							 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 )
							 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							|}) |]
							 ((i0::enter -> Transitions(id__))
							  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 )
							)
							)
						)
						 \ hideSet)
						[[
							int_ActualHV__.x____ <- int_ActualHV,
							ActualHV_1__.x____ <- ActualHV_1,
							ActualHV_2__.x____ <- ActualHV_2
							| x____ <- NIDS
						]]
					)
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour_VS_O(id__) = 
				dbisim((MachineBody_VS_O(id__))
				)
			
			IteratedBehaviour_VS_O(id__) = 
				dbisim((MachineBody_VS_O(id__))
				)
			
			Stateful_VS_O(id__) = 
				dbisim((
					(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
				 	\getsetLocalChannels
				)
				)
			
			IteratedStateful_VS_O(id__) =
				(dbisim(
					sbisim(
						Behaviour_VS_O(id__)
						[| {|get_ActualHV,set_ActualHV,terminate|} |]
						Memory_ActualHV(0)
					)\{|get_ActualHV,set_ActualHV|}
				)
				)
			
			-- END
			
			-- Memory
			-- Memory variables
			Memory_ActualHV(ActualHV) =
				get_ActualHV!ActualHV -> Memory_ActualHV(ActualHV)
				[]
				set_ActualHV?x__ -> Memory_ActualHV(x__)
				[]
				terminate -> SKIP
			
			-- varMemory process
			varMemory(id__) = Memory_ActualHV(0)
			
			getsetLocalChannels = {|get_ActualHV,set_ActualHV|}
			
			-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
			FVS__(id__) = STM_VS_O(id__)
			
			D__(id__) = STM(id__) \ internal_events
			O__(id__) = sbisim(diamond(D__(id__)))
			VS__(id__) = FVS__(id__)
			VS_O__(id__) = sbisim(diamond(FVS__(id__)))
			HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
			HUP__(id__) = O__(id__) [|{share__}|] SKIP
			
			-- Shared memory
			-- Shared memory variables
			
			-- sharedVarMemory process
			sharedVarMemory(id__) = terminate -> SKIP
			
			sharedVarSync = {||}
			
			sharedVarHide = {||}
		endmodule
		
			-- undefined operations
			
			-- declaring controller memory
			Memory(id__) = SKIP
			
			D__(id__) = 	((
					stm0::D__(id__)[[
						stm0::terminate <- terminate,
						stm0::int_ActualHV <- int_ActualHV,
						stm0::ActualHV_1 <- ActualHV_1,
						stm0::ActualHV_2 <- ActualHV_2
					]]
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				Memory(id__)
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
			
			-- VS version
			VS__(id__) = 	((
					stm0::VS__(id__)[[
						stm0::terminate <- terminate,
						stm0::int_ActualHV <- int_ActualHV,
						stm0::ActualHV_1 <- ActualHV_1,
						stm0::ActualHV_2 <- ActualHV_2
					]]
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				Memory(id__)
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
		
			-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
			O__(id__) = sbisim(diamond(	((
					stm0::O__(id__)[[
						stm0::terminate <- terminate,
						stm0::int_ActualHV <- int_ActualHV,
						stm0::ActualHV_1 <- ActualHV_1,
						stm0::ActualHV_2 <- ActualHV_2
					]]
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				dbisim(Memory(id__))
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
			))
							
			-- VS_O version
			VS_O__(id__) = sbisim(diamond(	((
					stm0::VS_O__(id__)[[
						stm0::terminate <- terminate,
						stm0::int_ActualHV <- int_ActualHV,
						stm0::ActualHV_1 <- ActualHV_1,
						stm0::ActualHV_2 <- ActualHV_2
					]]
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				dbisim(Memory(id__))
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
			))
		
			HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP			

	endmodule



