
--
-- RoboChart generator version 3.0.0.qualifier
-- Automatically generated on 22-02-2024 16:13:39
--
-- Iterated compression status: true
-- Assertions compression status: false
--

module State_machine
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_Ramping|
	              NID_Init|
	              NID_Wait24Vpower|
	              NID_ClosedLoop|
	              NID_ErrorMode|
	              NID_i0|
	              NID_j0
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	channel get_power, set_power, setL_power, setR_power: Power
	channel get_setPoint, set_setPoint, setL_setPoint, setR_setPoint: core_real
	channel get_res, set_res, setL_res, setR_res: core_boolean
	channel get_errorFlag, set_errorFlag, setL_errorFlag, setR_errorFlag: core_boolean
	channel get_lim, set_lim, setL_lim, setR_lim: core_boolean
	channel get_supplyLim, set_supplyLim, setL_supplyLim, setR_supplyLim: core_boolean
	channel get_ActualHV, set_ActualHV, setL_ActualHV, setR_ActualHV: core_real
	channel get_errorAck, set_errorAck, setL_errorAck, setR_errorAck: core_boolean
	channel get_overLimit, set_overLimit, setL_overLimit, setR_overLimit: core_real
	channel get_underLimit, set_underLimit, setL_underLimit, setR_underLimit: core_real
	
	-- Shared variable channels
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	channel currentState__: NIDS.InOut.State
	channel currentState: InOut.State
	channel ext_setPoint__: NIDS.InOut.core_real
	channel ext_setPoint: InOut.core_real
	channel ext_pow24VStatus__: NIDS.InOut.Power
	channel ext_pow24VStatus: InOut.Power
	channel int_overLimit__: NIDS.InOut.core_real
	channel int_overLimit: InOut.core_real
	channel int_pwmSignal__: NIDS.InOut.Power
	channel int_pwmSignal: InOut.Power
	channel int_underLimit__: NIDS.InOut.core_real
	channel int_underLimit: InOut.core_real
	channel int_DisableHV__: NIDS.InOut
	channel int_DisableHV: InOut
	channel int_ActualHV__: NIDS.InOut.core_real
	channel int_ActualHV: InOut.core_real
	
	-- Declaring call and ret events for undefined operations
	channel checkLimitsCall
	channel disableHVCall: core_boolean
	channel supplyVoltCheckCall
	
	enterSS = {|
	Ramping::enter,
	Init::enter,
	Wait24Vpower::enter,
	ClosedLoop::enter,
	ErrorMode::enter,
	i0::enter,
	j0::enter
	|}
	
	enteredSS = 	{|
	Ramping::entered,
	Init::entered,
	Wait24Vpower::entered,
	ClosedLoop::entered,
	ErrorMode::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
	|}
	
	-- channel set with all visible events
	sem__events = {|
		terminate
	,	currentState,
		ext_setPoint,
		ext_pow24VStatus,
		int_overLimit,
		int_pwmSignal,
		int_underLimit,
		int_DisableHV,
		int_ActualHV
	,	checkLimitsCall,
		disableHVCall,
		supplyVoltCheckCall
		|}

	-- Nodes --
	-- declaring all nodes
	
	----------------------------------------------------------------------
	-- State: Ramping
	module Ramping
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&(share__choice(currentState.out!State_Ramp -> SKIP)) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&(share__choice(currentState.out!State_Ramp -> SKIP)) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: Init
	module Init
	
	enterSS = 
			{|			i0::enter,
				si0::enter
			|}
	enteredSS = 
			{|			si0::entered
			|}
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		-- declaring identifiers of transitions
		datatype NIDS = 
		              NID_i0|
		              NID_si0
		
		channel internal__ : NIDS
		channel currentState__: NIDS.InOut.State
		channel ext_setPoint__: NIDS.InOut.core_real
		channel ext_pow24VStatus__: NIDS.InOut.Power
		channel int_overLimit__: NIDS.InOut.core_real
		channel int_pwmSignal__: NIDS.InOut.Power
		channel int_underLimit__: NIDS.InOut.core_real
		channel int_DisableHV__: NIDS.InOut
		channel int_ActualHV__: NIDS.InOut.core_real
		
		--	Nodes
		-- declaring all nodes
		
		----------------------------------------------------------------------
		-- Initial: i0
		module i0
		exports
		
			channel enter, interrupt
			
			D__(id__) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(interrupt -> SKIP) ; Inactive
				within
					Inactive [| {terminate} |> SKIP)
			
			VS_O__(id__) = D__(id__)
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: si0
		module si0
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--	Nodes
			-- declaring all nodes
			
			
			--	Rule: behaviours(Node)
			--  Note that FDR has problems with efficiently compiling the process below
			-- 	if using a different recursion pattern.
			D__(id__) = 
			dbisim(let
				-- IMPLEMENTATION NOTE: 
				-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
				-- however FDR struggles with that form in certain cases. So we use the exception operator
				-- instead to 'terminate'.
				
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= share__choice(share__choice(get_setPoint?setPoint -> true & (share__choice(set_overLimit!overLimitF(Plus(setPoint, 2, core_real)) -> SKIP))));share__choice(share__choice(get_setPoint?setPoint -> true & (share__choice(set_underLimit!underLimitF(Minus(setPoint, 2, core_real)) -> SKIP))));share__choice(get_underLimit?underLimit -> true&(share__choice(int_underLimit.out!underLimit -> SKIP)));share__choice(get_overLimit?overLimit -> true&(share__choice(int_overLimit.out!overLimit -> SKIP))) ; 
						 	  Behaviour ; 
						 	  share__choice(exit -> SKIP) ; SKIP ; 
						 	  share__choice(exited -> SKIP) ; Inactive
			
				Behaviour 	= entered -> During
				During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
			within
				Inactive [| {terminate} |> SKIP)
				
			VS_O__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= share__choice(share__choice(get_setPoint?setPoint -> true & (share__choice(set_overLimit!overLimitF(Plus(setPoint, 2, core_real)) -> SKIP))));share__choice(share__choice(get_setPoint?setPoint -> true & (share__choice(set_underLimit!underLimitF(Minus(setPoint, 2, core_real)) -> SKIP))));share__choice(get_underLimit?underLimit -> true&(share__choice(int_underLimit.out!underLimit -> SKIP)));share__choice(get_overLimit?overLimit -> true&(share__choice(int_overLimit.out!overLimit -> SKIP))) ; 
						 	  Behaviour ; 
						 	  share__choice(exit -> SKIP) ; SKIP ; 
						 	  share__choice(exited -> SKIP) ; Inactive
			
				Behaviour 	= entered -> During
				During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
			within
				Inactive [| {terminate} |> SKIP)
			
		
		endmodule
		----------------------------------------------------------------------
		
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&(share__choice(currentState.out!State_Init -> SKIP));true&CALL__disableHV(
						id__,
						false
					) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
		
			Behaviour 	= dbisim(
				((
				 (((let
				 	-- IMPLEMENTATION NOTE:
				 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				 	-- modules for defining the semantics of each node.
				 	enterSS = {|
				 	i0::enter,
				 	si0::enter
				 	|}
				 	hideSet = union(enterSS,{|exit,exited,internal__|})
				 within 
				 	((let
				 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
				 		-- because CSPM modules are used for the semantics of Node.
				 		flowevts = union(enterSS,{|exit,exited,interrupt|})
				 		transSync = {|internal__.NID_i0|}
				 	within
				 		((
				 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
				 		   i0::D__(id__)
				 		   [| { share__, terminate } |] (
				 		   si0::D__(id__)
				 		   )
				 		 )
				 		 [[si0::interrupt <- x__ | x__ <- {|interrupt|}]]
				 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
				 		 )
				 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
				 		 )
				 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
				 		|}) |]
				 		 ((i0::enter -> Transitions(id__))
				 		  [[ share__ <- x__ | x__ <- {| share__ |} ]]
				 		 )
				 		)
				 		)
				 	)
				 	 \ hideSet)
				 	[[
				 		currentState__.x____ <- currentState,
				 		ext_setPoint__.x____ <- ext_setPoint,
				 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
				 		int_overLimit__.x____ <- int_overLimit,
				 		int_pwmSignal__.x____ <- int_pwmSignal,
				 		int_underLimit__.x____ <- int_underLimit,
				 		int_DisableHV__.x____ <- int_DisableHV,
				 		int_ActualHV__.x____ <- int_ActualHV
				 		| x____ <- NIDS
				 	]]
				 )
				 )
				  [[ share__ <- x__ | x__ <- {| share__,setR_power,setR_ActualHV,setR_errorFlag,setR_underLimit,setR_lim,setR_supplyLim,setR_errorAck,setR_res,setR_overLimit,setR_setPoint |} ]] 
				  [[set_power <- setL_power,set_ActualHV <- setL_ActualHV,set_errorFlag <- setL_errorFlag,set_underLimit <- setL_underLimit,set_lim <- setL_lim,set_supplyLim <- setL_supplyLim,set_errorAck <- setL_errorAck,set_res <- setL_res,set_overLimit <- setL_overLimit,set_setPoint <- setL_setPoint]]
				 )
				 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
				 			,setL_power
				 			,setL_ActualHV
				 			,setL_errorFlag
				 			,setL_underLimit
				 			,setL_lim
				 			,setL_supplyLim
				 			,setL_errorAck
				 			,setL_res
				 			,setL_overLimit
				 			,setL_setPoint
				 			,setR_power
				 			 			,setR_ActualHV
				 			 			,setR_errorFlag
				 			 			,setR_underLimit
				 			 			,setR_lim
				 			 			,setR_supplyLim
				 			 			,setR_errorAck
				 			 			,setR_res
				 			 			,setR_overLimit
				 			 			,setR_setPoint
				 			|}) |]
				 ((During)
				  [[ share__ <- x__ | x__ <- {| share__,setL_power,setL_ActualHV,setL_errorFlag,setL_underLimit,setL_lim,setL_supplyLim,setL_errorAck,setL_res,setL_overLimit,setL_setPoint |} ]]
				  [[set_power <- setR_power,set_ActualHV <- setR_ActualHV,set_errorFlag <- setR_errorFlag,set_underLimit <- setR_underLimit,set_lim <- setR_lim,set_supplyLim <- setR_supplyLim,set_errorAck <- setR_errorAck,set_res <- setR_res,set_overLimit <- setR_overLimit,set_setPoint <- setR_setPoint]]
				 )
				)[[setL_power <- set_power,setL_ActualHV <- set_ActualHV,setL_errorFlag <- set_errorFlag,setL_underLimit <- set_underLimit,setL_lim <- set_lim,setL_supplyLim <- set_supplyLim,setL_errorAck <- set_errorAck,setL_res <- set_res,setL_overLimit <- set_overLimit,setL_setPoint <- set_setPoint]]
				 [[setR_power <- set_power,setR_ActualHV <- set_ActualHV,setR_errorFlag <- set_errorFlag,setR_underLimit <- set_underLimit,setR_lim <- set_lim,setR_supplyLim <- set_supplyLim,setR_errorAck <- set_errorAck,setR_res <- set_res,setR_overLimit <- set_overLimit,setR_setPoint <- set_setPoint]]
				)\union(enteredSS,{terminate}) 
			)
			During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
					 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&(share__choice(currentState.out!State_Init -> SKIP));true&CALL__disableHV(
						id__,
						false
					) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
		
			Behaviour 	= dbisim(
				((
				 (((let
				 	-- IMPLEMENTATION NOTE:
				 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				 	-- modules for defining the semantics of each node.
				 	enterSS = {|
				 	i0::enter,
				 	si0::enter
				 	|}
				 	hideSet = union(enterSS,{|exit,exited,internal__|})
				 within 
				 	((let
				 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
				 		-- because CSPM modules are used for the semantics of Node.
				 		flowevts = union(enterSS,{|exit,exited,interrupt|})
				 		transSync = {|internal__.NID_i0|}
				 	within
				 		((
				 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
				 		   i0::VS_O__(id__)
				 		   [| { share__, terminate } |] (
				 		   si0::VS_O__(id__)
				 		   )
				 		 )
				 		 [[si0::interrupt <- x__ | x__ <- {|interrupt|}]]
				 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
				 		 )
				 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
				 		 )
				 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
				 		|}) |]
				 		 ((i0::enter -> Transitions(id__))
				 		  [[ share__ <- x__ | x__ <- {| share__ |} ]]
				 		 )
				 		)
				 		)
				 	)
				 	 \ hideSet)
				 	[[
				 		currentState__.x____ <- currentState,
				 		ext_setPoint__.x____ <- ext_setPoint,
				 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
				 		int_overLimit__.x____ <- int_overLimit,
				 		int_pwmSignal__.x____ <- int_pwmSignal,
				 		int_underLimit__.x____ <- int_underLimit,
				 		int_DisableHV__.x____ <- int_DisableHV,
				 		int_ActualHV__.x____ <- int_ActualHV
				 		| x____ <- NIDS
				 	]]
				 )
				 )
				  [[ share__ <- x__ | x__ <- {| share__,setR_power,setR_ActualHV,setR_errorFlag,setR_underLimit,setR_lim,setR_supplyLim,setR_errorAck,setR_res,setR_overLimit,setR_setPoint |} ]] 
				  [[set_power <- setL_power,set_ActualHV <- setL_ActualHV,set_errorFlag <- setL_errorFlag,set_underLimit <- setL_underLimit,set_lim <- setL_lim,set_supplyLim <- setL_supplyLim,set_errorAck <- setL_errorAck,set_res <- setL_res,set_overLimit <- setL_overLimit,set_setPoint <- setL_setPoint]]
				 )
				 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
				 			,setL_power
				 			,setL_ActualHV
				 			,setL_errorFlag
				 			,setL_underLimit
				 			,setL_lim
				 			,setL_supplyLim
				 			,setL_errorAck
				 			,setL_res
				 			,setL_overLimit
				 			,setL_setPoint
				 			,setR_power
				 			 			,setR_ActualHV
				 			 			,setR_errorFlag
				 			 			,setR_underLimit
				 			 			,setR_lim
				 			 			,setR_supplyLim
				 			 			,setR_errorAck
				 			 			,setR_res
				 			 			,setR_overLimit
				 			 			,setR_setPoint
				 			|}) |]
				 ((During)
				  [[ share__ <- x__ | x__ <- {| share__,setL_power,setL_ActualHV,setL_errorFlag,setL_underLimit,setL_lim,setL_supplyLim,setL_errorAck,setL_res,setL_overLimit,setL_setPoint |} ]]
				  [[set_power <- setR_power,set_ActualHV <- setR_ActualHV,set_errorFlag <- setR_errorFlag,set_underLimit <- setR_underLimit,set_lim <- setR_lim,set_supplyLim <- setR_supplyLim,set_errorAck <- setR_errorAck,set_res <- setR_res,set_overLimit <- setR_overLimit,set_setPoint <- setR_setPoint]]
				 )
				)[[setL_power <- set_power,setL_ActualHV <- set_ActualHV,setL_errorFlag <- set_errorFlag,setL_underLimit <- set_underLimit,setL_lim <- set_lim,setL_supplyLim <- set_supplyLim,setL_errorAck <- set_errorAck,setL_res <- set_res,setL_overLimit <- set_overLimit,setL_setPoint <- set_setPoint]]
				 [[setR_power <- set_power,setR_ActualHV <- set_ActualHV,setR_errorFlag <- set_errorFlag,setR_underLimit <- set_underLimit,setR_lim <- set_lim,setR_supplyLim <- set_supplyLim,setR_errorAck <- set_errorAck,setR_res <- set_res,setR_overLimit <- set_overLimit,setR_setPoint <- set_setPoint]]
				)\{terminate} 
			)
			During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
					 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
		within
			Inactive [| {terminate} |> SKIP)
		
		Transitions(id__) = ((let
			Trans = (
				((share__ -> SKIP
				 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((true&(share__choice(ext_setPoint.in?setPoint -> (SStop /\ set_setPoint!setPoint -> SKIP))) ; si0::enter -> SKIP))))
				 ) ; Trans)
				 []
				 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
				 []
				 terminate -> SKIP
			)
		within
			Trans
		)
		)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: Wait24Vpower
	module Wait24Vpower
	
	enterSS = 
			{|			i0::enter,
				si0::enter,
				s1::enter
			|}
	enteredSS = 
			{|			si0::entered,
				s1::entered
			|}
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		-- declaring identifiers of transitions
		datatype NIDS = 
		              NID_i0|
		              NID_si0|
		              NID_s1
		
		channel internal__ : NIDS
		channel currentState__: NIDS.InOut.State
		channel ext_setPoint__: NIDS.InOut.core_real
		channel ext_pow24VStatus__: NIDS.InOut.Power
		channel int_overLimit__: NIDS.InOut.core_real
		channel int_pwmSignal__: NIDS.InOut.Power
		channel int_underLimit__: NIDS.InOut.core_real
		channel int_DisableHV__: NIDS.InOut
		channel int_ActualHV__: NIDS.InOut.core_real
		
		--	Nodes
		-- declaring all nodes
		
		----------------------------------------------------------------------
		-- Initial: i0
		module i0
		exports
		
			channel enter, interrupt
			
			D__(id__) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(interrupt -> SKIP) ; Inactive
				within
					Inactive [| {terminate} |> SKIP)
			
			VS_O__(id__) = D__(id__)
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: si0
		module si0
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--	Nodes
			-- declaring all nodes
			
			
			--	Rule: behaviours(Node)
			--  Note that FDR has problems with efficiently compiling the process below
			-- 	if using a different recursion pattern.
			D__(id__) = 
			dbisim(let
				-- IMPLEMENTATION NOTE: 
				-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
				-- however FDR struggles with that form in certain cases. So we use the exception operator
				-- instead to 'terminate'.
				
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= true&CALL__supplyVoltCheck(
							id__
						) ; 
						 	  Behaviour ; 
						 	  share__choice(exit -> SKIP) ; SKIP ; 
						 	  share__choice(exited -> SKIP) ; Inactive
			
				Behaviour 	= entered -> During
				During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
			within
				Inactive [| {terminate} |> SKIP)
				
			VS_O__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= true&CALL__supplyVoltCheck(
							id__
						) ; 
						 	  Behaviour ; 
						 	  share__choice(exit -> SKIP) ; SKIP ; 
						 	  share__choice(exited -> SKIP) ; Inactive
			
				Behaviour 	= entered -> During
				During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
			within
				Inactive [| {terminate} |> SKIP)
			
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: s1
		module s1
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--	Nodes
			-- declaring all nodes
			
			
			--	Rule: behaviours(Node)
			--  Note that FDR has problems with efficiently compiling the process below
			-- 	if using a different recursion pattern.
			D__(id__) = 
			dbisim(let
				-- IMPLEMENTATION NOTE: 
				-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
				-- however FDR struggles with that form in certain cases. So we use the exception operator
				-- instead to 'terminate'.
				
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= true&CALL__disableHV(
							id__,
							true
						) ; 
						 	  Behaviour ; 
						 	  share__choice(exit -> SKIP) ; SKIP ; 
						 	  share__choice(exited -> SKIP) ; Inactive
			
				Behaviour 	= entered -> During
				During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
			within
				Inactive [| {terminate} |> SKIP)
				
			VS_O__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= true&CALL__disableHV(
							id__,
							true
						) ; 
						 	  Behaviour ; 
						 	  share__choice(exit -> SKIP) ; SKIP ; 
						 	  share__choice(exited -> SKIP) ; Inactive
			
				Behaviour 	= entered -> During
				During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
			within
				Inactive [| {terminate} |> SKIP)
			
		
		endmodule
		----------------------------------------------------------------------
		
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&(share__choice(currentState.out!State_Wait24Vpower -> SKIP));true&CALL__disableHV(
						id__,
						false
					) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
		
			Behaviour 	= dbisim(
				((
				 (((let
				 	-- IMPLEMENTATION NOTE:
				 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				 	-- modules for defining the semantics of each node.
				 	enterSS = {|
				 	i0::enter,
				 	si0::enter,
				 	s1::enter
				 	|}
				 	hideSet = union(enterSS,{|exit,exited,internal__|})
				 within 
				 	((let
				 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
				 		-- because CSPM modules are used for the semantics of Node.
				 		flowevts = union(enterSS,{|exit,exited,interrupt|})
				 		transSync = {|internal__.NID_i0,internal__.NID_si0|}
				 	within
				 		((
				 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
				 		   i0::D__(id__)
				 		   [| { share__, terminate } |] (
				 		   si0::D__(id__)
				 		   [| { share__, terminate } |] (
				 		   s1::D__(id__)
				 		   )
				 		   )
				 		 )
				 		 [[si0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_si0|}]]
				 		 [[s1::interrupt <- x__ | x__ <- {|interrupt|}]]
				 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
				 		 )
				 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
				 		  [[set_lim <- setL_lim,set_setPoint <- setL_setPoint]]
				 		 )
				 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
				 		 			,setL_lim
				 		 			,setL_setPoint
				 		|}) |]
				 		 ((i0::enter -> Transitions(id__))
				 		  [[ share__ <- x__ | x__ <- {| share__,setL_lim,setL_setPoint |} ]]
				 		 )
				 		)[[setL_lim <- set_lim,setL_setPoint <- set_setPoint]]
				 		)
				 	)
				 	 \ hideSet)
				 	[[
				 		currentState__.x____ <- currentState,
				 		ext_setPoint__.x____ <- ext_setPoint,
				 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
				 		int_overLimit__.x____ <- int_overLimit,
				 		int_pwmSignal__.x____ <- int_pwmSignal,
				 		int_underLimit__.x____ <- int_underLimit,
				 		int_DisableHV__.x____ <- int_DisableHV,
				 		int_ActualHV__.x____ <- int_ActualHV
				 		| x____ <- NIDS
				 	]]
				 )
				 )
				  [[ share__ <- x__ | x__ <- {| share__,setR_power,setR_ActualHV,setR_errorFlag,setR_underLimit,setR_lim,setR_supplyLim,setR_errorAck,setR_res,setR_overLimit,setR_setPoint |} ]] 
				  [[set_power <- setL_power,set_ActualHV <- setL_ActualHV,set_errorFlag <- setL_errorFlag,set_underLimit <- setL_underLimit,set_lim <- setL_lim,set_supplyLim <- setL_supplyLim,set_errorAck <- setL_errorAck,set_res <- setL_res,set_overLimit <- setL_overLimit,set_setPoint <- setL_setPoint]]
				 )
				 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
				 			,setL_power
				 			,setL_ActualHV
				 			,setL_errorFlag
				 			,setL_underLimit
				 			,setL_lim
				 			,setL_supplyLim
				 			,setL_errorAck
				 			,setL_res
				 			,setL_overLimit
				 			,setL_setPoint
				 			,setR_power
				 			 			,setR_ActualHV
				 			 			,setR_errorFlag
				 			 			,setR_underLimit
				 			 			,setR_lim
				 			 			,setR_supplyLim
				 			 			,setR_errorAck
				 			 			,setR_res
				 			 			,setR_overLimit
				 			 			,setR_setPoint
				 			|}) |]
				 ((During)
				  [[ share__ <- x__ | x__ <- {| share__,setL_power,setL_ActualHV,setL_errorFlag,setL_underLimit,setL_lim,setL_supplyLim,setL_errorAck,setL_res,setL_overLimit,setL_setPoint |} ]]
				  [[set_power <- setR_power,set_ActualHV <- setR_ActualHV,set_errorFlag <- setR_errorFlag,set_underLimit <- setR_underLimit,set_lim <- setR_lim,set_supplyLim <- setR_supplyLim,set_errorAck <- setR_errorAck,set_res <- setR_res,set_overLimit <- setR_overLimit,set_setPoint <- setR_setPoint]]
				 )
				)[[setL_power <- set_power,setL_ActualHV <- set_ActualHV,setL_errorFlag <- set_errorFlag,setL_underLimit <- set_underLimit,setL_lim <- set_lim,setL_supplyLim <- set_supplyLim,setL_errorAck <- set_errorAck,setL_res <- set_res,setL_overLimit <- set_overLimit,setL_setPoint <- set_setPoint]]
				 [[setR_power <- set_power,setR_ActualHV <- set_ActualHV,setR_errorFlag <- set_errorFlag,setR_underLimit <- set_underLimit,setR_lim <- set_lim,setR_supplyLim <- set_supplyLim,setR_errorAck <- set_errorAck,setR_res <- set_res,setR_overLimit <- set_overLimit,setR_setPoint <- set_setPoint]]
				)\union(enteredSS,{terminate}) 
			)
			During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
					 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&(share__choice(currentState.out!State_Wait24Vpower -> SKIP));true&CALL__disableHV(
						id__,
						false
					) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
		
			Behaviour 	= dbisim(
				((
				 (((let
				 	-- IMPLEMENTATION NOTE:
				 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				 	-- modules for defining the semantics of each node.
				 	enterSS = {|
				 	i0::enter,
				 	si0::enter,
				 	s1::enter
				 	|}
				 	hideSet = union(enterSS,{|exit,exited,internal__|})
				 within 
				 	((let
				 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
				 		-- because CSPM modules are used for the semantics of Node.
				 		flowevts = union(enterSS,{|exit,exited,interrupt|})
				 		transSync = {|internal__.NID_i0,internal__.NID_si0|}
				 	within
				 		((
				 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
				 		   i0::VS_O__(id__)
				 		   [| { share__, terminate } |] (
				 		   si0::VS_O__(id__)
				 		   [| { share__, terminate } |] (
				 		   s1::VS_O__(id__)
				 		   )
				 		   )
				 		 )
				 		 [[si0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_si0|}]]
				 		 [[s1::interrupt <- x__ | x__ <- {|interrupt|}]]
				 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
				 		 )
				 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
				 		  [[set_lim <- setL_lim,set_setPoint <- setL_setPoint]]
				 		 )
				 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
				 		 			,setL_lim
				 		 			,setL_setPoint
				 		|}) |]
				 		 ((i0::enter -> Transitions(id__))
				 		  [[ share__ <- x__ | x__ <- {| share__,setL_lim,setL_setPoint |} ]]
				 		 )
				 		)[[setL_lim <- set_lim,setL_setPoint <- set_setPoint]]
				 		)
				 	)
				 	 \ hideSet)
				 	[[
				 		currentState__.x____ <- currentState,
				 		ext_setPoint__.x____ <- ext_setPoint,
				 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
				 		int_overLimit__.x____ <- int_overLimit,
				 		int_pwmSignal__.x____ <- int_pwmSignal,
				 		int_underLimit__.x____ <- int_underLimit,
				 		int_DisableHV__.x____ <- int_DisableHV,
				 		int_ActualHV__.x____ <- int_ActualHV
				 		| x____ <- NIDS
				 	]]
				 )
				 )
				  [[ share__ <- x__ | x__ <- {| share__,setR_power,setR_ActualHV,setR_errorFlag,setR_underLimit,setR_lim,setR_supplyLim,setR_errorAck,setR_res,setR_overLimit,setR_setPoint |} ]] 
				  [[set_power <- setL_power,set_ActualHV <- setL_ActualHV,set_errorFlag <- setL_errorFlag,set_underLimit <- setL_underLimit,set_lim <- setL_lim,set_supplyLim <- setL_supplyLim,set_errorAck <- setL_errorAck,set_res <- setL_res,set_overLimit <- setL_overLimit,set_setPoint <- setL_setPoint]]
				 )
				 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
				 			,setL_power
				 			,setL_ActualHV
				 			,setL_errorFlag
				 			,setL_underLimit
				 			,setL_lim
				 			,setL_supplyLim
				 			,setL_errorAck
				 			,setL_res
				 			,setL_overLimit
				 			,setL_setPoint
				 			,setR_power
				 			 			,setR_ActualHV
				 			 			,setR_errorFlag
				 			 			,setR_underLimit
				 			 			,setR_lim
				 			 			,setR_supplyLim
				 			 			,setR_errorAck
				 			 			,setR_res
				 			 			,setR_overLimit
				 			 			,setR_setPoint
				 			|}) |]
				 ((During)
				  [[ share__ <- x__ | x__ <- {| share__,setL_power,setL_ActualHV,setL_errorFlag,setL_underLimit,setL_lim,setL_supplyLim,setL_errorAck,setL_res,setL_overLimit,setL_setPoint |} ]]
				  [[set_power <- setR_power,set_ActualHV <- setR_ActualHV,set_errorFlag <- setR_errorFlag,set_underLimit <- setR_underLimit,set_lim <- setR_lim,set_supplyLim <- setR_supplyLim,set_errorAck <- setR_errorAck,set_res <- setR_res,set_overLimit <- setR_overLimit,set_setPoint <- setR_setPoint]]
				 )
				)[[setL_power <- set_power,setL_ActualHV <- set_ActualHV,setL_errorFlag <- set_errorFlag,setL_underLimit <- set_underLimit,setL_lim <- set_lim,setL_supplyLim <- set_supplyLim,setL_errorAck <- set_errorAck,setL_res <- set_res,setL_overLimit <- set_overLimit,setL_setPoint <- set_setPoint]]
				 [[setR_power <- set_power,setR_ActualHV <- set_ActualHV,setR_errorFlag <- set_errorFlag,setR_underLimit <- set_underLimit,setR_lim <- set_lim,setR_supplyLim <- set_supplyLim,setR_errorAck <- set_errorAck,setR_res <- set_res,setR_overLimit <- set_overLimit,setR_setPoint <- set_setPoint]]
				)\{terminate} 
			)
			During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
					 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
		within
			Inactive [| {terminate} |> SKIP)
		
		Transitions(id__) = ((let
			Trans = share__choice(get_lim?lim -> get_setPoint?setPoint -> (
				((share__ -> SKIP
				 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((true&(share__choice(ext_setPoint.in?setPoint -> (SStop /\ set_setPoint!setPoint -> SKIP))) ; si0::enter -> SKIP))))
				 	 [] dbisim((((setPoint!=0) or (lim==true)))&(internal__!NID_si0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s1::enter -> SKIP)))
				 ) ; Trans)
				 []
				 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
				 []
				 terminate -> SKIP
			)
			)
		within
			Trans
		)
		)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: ClosedLoop
	module ClosedLoop
	
	enterSS = 
			{|			i0::enter,
				s1::enter,
				s2::enter,
				s3::enter,
				s4::enter
			|}
	enteredSS = 
			{|			s1::entered,
				s2::entered,
				s3::entered,
				s4::entered
			|}
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		-- declaring identifiers of transitions
		datatype NIDS = 
		              NID_i0|
		              NID_s1|
		              NID_s2|
		              NID_s3|
		              NID_s4
		
		channel internal__ : NIDS
		channel currentState__: NIDS.InOut.State
		channel ext_setPoint__: NIDS.InOut.core_real
		channel ext_pow24VStatus__: NIDS.InOut.Power
		channel int_overLimit__: NIDS.InOut.core_real
		channel int_pwmSignal__: NIDS.InOut.Power
		channel int_underLimit__: NIDS.InOut.core_real
		channel int_DisableHV__: NIDS.InOut
		channel int_ActualHV__: NIDS.InOut.core_real
		
		--	Nodes
		-- declaring all nodes
		
		----------------------------------------------------------------------
		-- Initial: i0
		module i0
		exports
		
			channel enter, interrupt
			
			D__(id__) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(interrupt -> SKIP) ; Inactive
				within
					Inactive [| {terminate} |> SKIP)
			
			VS_O__(id__) = D__(id__)
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: s1
		module s1
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--	Nodes
			-- declaring all nodes
			
			
			--	Rule: behaviours(Node)
			--  Note that FDR has problems with efficiently compiling the process below
			-- 	if using a different recursion pattern.
			D__(id__) = 
			dbisim(let
				-- IMPLEMENTATION NOTE: 
				-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
				-- however FDR struggles with that form in certain cases. So we use the exception operator
				-- instead to 'terminate'.
				
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= share__choice(true & (share__choice(set_lim!false -> SKIP)));true&CALL__disableHV(
							id__,
							true
						) ; 
						 	  Behaviour ; 
						 	  share__choice(exit -> SKIP) ; SKIP ; 
						 	  share__choice(exited -> SKIP) ; Inactive
			
				Behaviour 	= entered -> During
				During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
			within
				Inactive [| {terminate} |> SKIP)
				
			VS_O__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= share__choice(true & (share__choice(set_lim!false -> SKIP)));true&CALL__disableHV(
							id__,
							true
						) ; 
						 	  Behaviour ; 
						 	  share__choice(exit -> SKIP) ; SKIP ; 
						 	  share__choice(exited -> SKIP) ; Inactive
			
				Behaviour 	= entered -> During
				During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
			within
				Inactive [| {terminate} |> SKIP)
			
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: s2
		module s2
		
		enterSS = 
				{|			i0::enter,
					s0::enter,
					s1::enter,
					j0::enter
				|}
		enteredSS = 
				{|			s0::entered,
					s1::entered
				|}
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i0|
			              NID_s0|
			              NID_s1|
			              NID_j0
			
			channel internal__ : NIDS
			channel currentState__: NIDS.InOut.State
			channel ext_setPoint__: NIDS.InOut.core_real
			channel ext_pow24VStatus__: NIDS.InOut.Power
			channel int_overLimit__: NIDS.InOut.core_real
			channel int_pwmSignal__: NIDS.InOut.Power
			channel int_underLimit__: NIDS.InOut.core_real
			channel int_DisableHV__: NIDS.InOut
			channel int_ActualHV__: NIDS.InOut.core_real
			
			--	Nodes
			-- declaring all nodes
			
			----------------------------------------------------------------------
			-- Initial: i0
			module i0
			exports
			
				channel enter, interrupt
				
				D__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__) = D__(id__)
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- State: s0
			module s0
			
			enterSS = {}
			
			enteredSS = {}
			
			exports
			
				--  Declarations
				
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
								
				
				--	Nodes
				-- declaring all nodes
				
				
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&CALL__checkLimits(
								id__
							) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&CALL__checkLimits(
								id__
							) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- State: s1
			module s1
			
			enterSS = {}
			
			enteredSS = {}
			
			exports
			
				--  Declarations
				
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
								
				
				--	Nodes
				-- declaring all nodes
				
				
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(ext_setPoint.in?setPoint -> (SStop /\ set_setPoint!setPoint -> SKIP))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(ext_setPoint.in?setPoint -> (SStop /\ set_setPoint!setPoint -> SKIP))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- Junction: j0
			module j0
			exports
			
				channel enter, interrupt
				
				D__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = D__(id__)
			
			endmodule
			----------------------------------------------------------------------
			
			
			
			--	Rule: behaviours(Node)
			--  Note that FDR has problems with efficiently compiling the process below
			-- 	if using a different recursion pattern.
			D__(id__) = 
			dbisim(let
				-- IMPLEMENTATION NOTE: 
				-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
				-- however FDR struggles with that form in certain cases. So we use the exception operator
				-- instead to 'terminate'.
				
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= SKIP ; 
						 	  Behaviour ; 
						 	  share__choice(exit -> SKIP) ; SKIP ; 
						 	  share__choice(exited -> SKIP) ; Inactive
			
			
				Behaviour 	= dbisim(
					((
					 (((let
					 	-- IMPLEMENTATION NOTE:
					 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					 	-- modules for defining the semantics of each node.
					 	enterSS = {|
					 	i0::enter,
					 	s0::enter,
					 	s1::enter,
					 	j0::enter
					 	|}
					 	hideSet = union(enterSS,{|exit,exited,internal__|})
					 within 
					 	((let
					 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					 		-- because CSPM modules are used for the semantics of Node.
					 		flowevts = union(enterSS,{|exit,exited,interrupt|})
					 		transSync = {|internal__.NID_i0,internal__.NID_s0,internal__.NID_j0,internal__.NID_s1|}
					 	within
					 		((
					 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					 		   i0::D__(id__)
					 		   [| { share__, terminate } |] (
					 		   s0::D__(id__)
					 		   [| { share__, terminate } |] (
					 		   s1::D__(id__)
					 		   [| { share__, terminate } |] (
					 		   j0::D__(id__)
					 		   )
					 		   )
					 		   )
					 		 )
					 		 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
					 		 [[s1::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s1|}]]
					 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
					 		 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0|}]]
					 		 )
					 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
					 		 )
					 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					 		|}) |]
					 		 ((i0::enter -> Transitions(id__))
					 		  [[ share__ <- x__ | x__ <- {| share__ |} ]]
					 		 )
					 		)
					 		)
					 	)
					 	 \ hideSet)
					 	[[
					 		currentState__.x____ <- currentState,
					 		ext_setPoint__.x____ <- ext_setPoint,
					 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
					 		int_overLimit__.x____ <- int_overLimit,
					 		int_pwmSignal__.x____ <- int_pwmSignal,
					 		int_underLimit__.x____ <- int_underLimit,
					 		int_DisableHV__.x____ <- int_DisableHV,
					 		int_ActualHV__.x____ <- int_ActualHV
					 		| x____ <- NIDS
					 	]]
					 )
					 )
					  [[ share__ <- x__ | x__ <- {| share__,setR_power,setR_ActualHV,setR_errorFlag,setR_underLimit,setR_lim,setR_supplyLim,setR_errorAck,setR_res,setR_overLimit,setR_setPoint |} ]] 
					  [[set_power <- setL_power,set_ActualHV <- setL_ActualHV,set_errorFlag <- setL_errorFlag,set_underLimit <- setL_underLimit,set_lim <- setL_lim,set_supplyLim <- setL_supplyLim,set_errorAck <- setL_errorAck,set_res <- setL_res,set_overLimit <- setL_overLimit,set_setPoint <- setL_setPoint]]
					 )
					 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
					 			,setL_power
					 			,setL_ActualHV
					 			,setL_errorFlag
					 			,setL_underLimit
					 			,setL_lim
					 			,setL_supplyLim
					 			,setL_errorAck
					 			,setL_res
					 			,setL_overLimit
					 			,setL_setPoint
					 			,setR_power
					 			 			,setR_ActualHV
					 			 			,setR_errorFlag
					 			 			,setR_underLimit
					 			 			,setR_lim
					 			 			,setR_supplyLim
					 			 			,setR_errorAck
					 			 			,setR_res
					 			 			,setR_overLimit
					 			 			,setR_setPoint
					 			|}) |]
					 ((During)
					  [[ share__ <- x__ | x__ <- {| share__,setL_power,setL_ActualHV,setL_errorFlag,setL_underLimit,setL_lim,setL_supplyLim,setL_errorAck,setL_res,setL_overLimit,setL_setPoint |} ]]
					  [[set_power <- setR_power,set_ActualHV <- setR_ActualHV,set_errorFlag <- setR_errorFlag,set_underLimit <- setR_underLimit,set_lim <- setR_lim,set_supplyLim <- setR_supplyLim,set_errorAck <- setR_errorAck,set_res <- setR_res,set_overLimit <- setR_overLimit,set_setPoint <- setR_setPoint]]
					 )
					)[[setL_power <- set_power,setL_ActualHV <- set_ActualHV,setL_errorFlag <- set_errorFlag,setL_underLimit <- set_underLimit,setL_lim <- set_lim,setL_supplyLim <- set_supplyLim,setL_errorAck <- set_errorAck,setL_res <- set_res,setL_overLimit <- set_overLimit,setL_setPoint <- set_setPoint]]
					 [[setR_power <- set_power,setR_ActualHV <- set_ActualHV,setR_errorFlag <- set_errorFlag,setR_underLimit <- set_underLimit,setR_lim <- set_lim,setR_supplyLim <- set_supplyLim,setR_errorAck <- set_errorAck,setR_res <- set_res,setR_overLimit <- set_overLimit,setR_setPoint <- set_setPoint]]
					)\union(enteredSS,{terminate}) 
				)
				During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
						 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
			within
				Inactive [| {terminate} |> SKIP)
				
			VS_O__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= SKIP ; 
						 	  Behaviour ; 
						 	  share__choice(exit -> SKIP) ; SKIP ; 
						 	  share__choice(exited -> SKIP) ; Inactive
			
			
				Behaviour 	= dbisim(
					((
					 (((let
					 	-- IMPLEMENTATION NOTE:
					 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					 	-- modules for defining the semantics of each node.
					 	enterSS = {|
					 	i0::enter,
					 	s0::enter,
					 	s1::enter,
					 	j0::enter
					 	|}
					 	hideSet = union(enterSS,{|exit,exited,internal__|})
					 within 
					 	((let
					 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					 		-- because CSPM modules are used for the semantics of Node.
					 		flowevts = union(enterSS,{|exit,exited,interrupt|})
					 		transSync = {|internal__.NID_i0,internal__.NID_s0,internal__.NID_j0,internal__.NID_s1|}
					 	within
					 		((
					 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					 		   i0::VS_O__(id__)
					 		   [| { share__, terminate } |] (
					 		   s0::VS_O__(id__)
					 		   [| { share__, terminate } |] (
					 		   s1::VS_O__(id__)
					 		   [| { share__, terminate } |] (
					 		   j0::VS_O__(id__)
					 		   )
					 		   )
					 		   )
					 		 )
					 		 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
					 		 [[s1::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s1|}]]
					 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
					 		 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0|}]]
					 		 )
					 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
					 		 )
					 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					 		|}) |]
					 		 ((i0::enter -> Transitions(id__))
					 		  [[ share__ <- x__ | x__ <- {| share__ |} ]]
					 		 )
					 		)
					 		)
					 	)
					 	 \ hideSet)
					 	[[
					 		currentState__.x____ <- currentState,
					 		ext_setPoint__.x____ <- ext_setPoint,
					 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
					 		int_overLimit__.x____ <- int_overLimit,
					 		int_pwmSignal__.x____ <- int_pwmSignal,
					 		int_underLimit__.x____ <- int_underLimit,
					 		int_DisableHV__.x____ <- int_DisableHV,
					 		int_ActualHV__.x____ <- int_ActualHV
					 		| x____ <- NIDS
					 	]]
					 )
					 )
					  [[ share__ <- x__ | x__ <- {| share__,setR_power,setR_ActualHV,setR_errorFlag,setR_underLimit,setR_lim,setR_supplyLim,setR_errorAck,setR_res,setR_overLimit,setR_setPoint |} ]] 
					  [[set_power <- setL_power,set_ActualHV <- setL_ActualHV,set_errorFlag <- setL_errorFlag,set_underLimit <- setL_underLimit,set_lim <- setL_lim,set_supplyLim <- setL_supplyLim,set_errorAck <- setL_errorAck,set_res <- setL_res,set_overLimit <- setL_overLimit,set_setPoint <- setL_setPoint]]
					 )
					 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
					 			,setL_power
					 			,setL_ActualHV
					 			,setL_errorFlag
					 			,setL_underLimit
					 			,setL_lim
					 			,setL_supplyLim
					 			,setL_errorAck
					 			,setL_res
					 			,setL_overLimit
					 			,setL_setPoint
					 			,setR_power
					 			 			,setR_ActualHV
					 			 			,setR_errorFlag
					 			 			,setR_underLimit
					 			 			,setR_lim
					 			 			,setR_supplyLim
					 			 			,setR_errorAck
					 			 			,setR_res
					 			 			,setR_overLimit
					 			 			,setR_setPoint
					 			|}) |]
					 ((During)
					  [[ share__ <- x__ | x__ <- {| share__,setL_power,setL_ActualHV,setL_errorFlag,setL_underLimit,setL_lim,setL_supplyLim,setL_errorAck,setL_res,setL_overLimit,setL_setPoint |} ]]
					  [[set_power <- setR_power,set_ActualHV <- setR_ActualHV,set_errorFlag <- setR_errorFlag,set_underLimit <- setR_underLimit,set_lim <- setR_lim,set_supplyLim <- setR_supplyLim,set_errorAck <- setR_errorAck,set_res <- setR_res,set_overLimit <- setR_overLimit,set_setPoint <- setR_setPoint]]
					 )
					)[[setL_power <- set_power,setL_ActualHV <- set_ActualHV,setL_errorFlag <- set_errorFlag,setL_underLimit <- set_underLimit,setL_lim <- set_lim,setL_supplyLim <- set_supplyLim,setL_errorAck <- set_errorAck,setL_res <- set_res,setL_overLimit <- set_overLimit,setL_setPoint <- set_setPoint]]
					 [[setR_power <- set_power,setR_ActualHV <- set_ActualHV,setR_errorFlag <- set_errorFlag,setR_underLimit <- set_underLimit,setR_lim <- set_lim,setR_supplyLim <- set_supplyLim,setR_errorAck <- set_errorAck,setR_res <- set_res,setR_overLimit <- set_overLimit,setR_setPoint <- set_setPoint]]
					)\{terminate} 
				)
				During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
						 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
			within
				Inactive [| {terminate} |> SKIP)
			
			Transitions(id__) = ((let
				Trans = (
					((share__ -> SKIP
					 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s1::enter -> SKIP))))
					 	 [] dbisim((true)&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s1::enter -> SKIP)))
					 	 [] dbisim((true)&(internal__!NID_j0 -> SKIP ;  ((share__choice(get_ActualHV?ActualHV -> true&(share__choice(int_ActualHV.out!ActualHV -> SKIP))) ; s0::enter -> SKIP))))
					 	 [] dbisim((true)&(internal__!NID_s1 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(share__choice(get_setPoint?setPoint -> true & (share__choice(set_ActualHV!setPoint -> SKIP)))) ; j0::enter -> SKIP)))
					 ) ; Trans)
					 []
					 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
					 []
					 terminate -> SKIP
				)
			within
				Trans
			)
			)
			
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: s3
		module s3
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--	Nodes
			-- declaring all nodes
			
			
			--	Rule: behaviours(Node)
			--  Note that FDR has problems with efficiently compiling the process below
			-- 	if using a different recursion pattern.
			D__(id__) = 
			dbisim(let
				-- IMPLEMENTATION NOTE: 
				-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
				-- however FDR struggles with that form in certain cases. So we use the exception operator
				-- instead to 'terminate'.
				
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= true&CALL__checkLimits(
							id__
						) ; 
						 	  Behaviour ; 
						 	  share__choice(exit -> SKIP) ; SKIP ; 
						 	  share__choice(exited -> SKIP) ; Inactive
			
				Behaviour 	= entered -> During
				During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
			within
				Inactive [| {terminate} |> SKIP)
				
			VS_O__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= true&CALL__checkLimits(
							id__
						) ; 
						 	  Behaviour ; 
						 	  share__choice(exit -> SKIP) ; SKIP ; 
						 	  share__choice(exited -> SKIP) ; Inactive
			
				Behaviour 	= entered -> During
				During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
			within
				Inactive [| {terminate} |> SKIP)
			
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: s4
		module s4
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--	Nodes
			-- declaring all nodes
			
			
			--	Rule: behaviours(Node)
			--  Note that FDR has problems with efficiently compiling the process below
			-- 	if using a different recursion pattern.
			D__(id__) = 
			dbisim(let
				-- IMPLEMENTATION NOTE: 
				-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
				-- however FDR struggles with that form in certain cases. So we use the exception operator
				-- instead to 'terminate'.
				
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= true&CALL__supplyVoltCheck(
							id__
						) ; 
						 	  Behaviour ; 
						 	  share__choice(exit -> SKIP) ; SKIP ; 
						 	  share__choice(exited -> SKIP) ; Inactive
			
				Behaviour 	= entered -> During
				During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
			within
				Inactive [| {terminate} |> SKIP)
				
			VS_O__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= true&CALL__supplyVoltCheck(
							id__
						) ; 
						 	  Behaviour ; 
						 	  share__choice(exit -> SKIP) ; SKIP ; 
						 	  share__choice(exited -> SKIP) ; Inactive
			
				Behaviour 	= entered -> During
				During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
			within
				Inactive [| {terminate} |> SKIP)
			
		
		endmodule
		----------------------------------------------------------------------
		
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&(share__choice(currentState.out!State_ClosedLoop -> SKIP)) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
		
			Behaviour 	= dbisim(
				((
				 (((let
				 	-- IMPLEMENTATION NOTE:
				 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				 	-- modules for defining the semantics of each node.
				 	enterSS = {|
				 	i0::enter,
				 	s1::enter,
				 	s2::enter,
				 	s3::enter,
				 	s4::enter
				 	|}
				 	hideSet = union(enterSS,{|exit,exited,internal__|})
				 within 
				 	((let
				 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
				 		-- because CSPM modules are used for the semantics of Node.
				 		flowevts = union(enterSS,{|exit,exited,interrupt|})
				 		transSync = {|internal__.NID_s4,internal__.NID_s2,internal__.NID_s4,internal__.NID_s3,internal__.NID_s3,internal__.NID_i0|}
				 	within
				 		((
				 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
				 		   i0::D__(id__)
				 		   [| { share__, terminate } |] (
				 		   s1::D__(id__)
				 		   [| { share__, terminate } |] (
				 		   s2::D__(id__)
				 		   [| { share__, terminate } |] (
				 		   s3::D__(id__)
				 		   [| { share__, terminate } |] (
				 		   s4::D__(id__)
				 		   )
				 		   )
				 		   )
				 		   )
				 		 )
				 		 [[s1::interrupt <- x__ | x__ <- {|interrupt|}]]
				 		 [[s2::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s2|}]]
				 		 [[s3::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s3,internal__.NID_s3|}]]
				 		 [[s4::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s4,internal__.NID_s4|}]]
				 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
				 		 )
				 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
				 		  [[set_lim <- setL_lim]]
				 		 )
				 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
				 		 			,setL_lim
				 		|}) |]
				 		 ((i0::enter -> Transitions(id__))
				 		  [[ share__ <- x__ | x__ <- {| share__,setL_lim |} ]]
				 		 )
				 		)[[setL_lim <- set_lim]]
				 		)
				 	)
				 	 \ hideSet)
				 	[[
				 		currentState__.x____ <- currentState,
				 		ext_setPoint__.x____ <- ext_setPoint,
				 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
				 		int_overLimit__.x____ <- int_overLimit,
				 		int_pwmSignal__.x____ <- int_pwmSignal,
				 		int_underLimit__.x____ <- int_underLimit,
				 		int_DisableHV__.x____ <- int_DisableHV,
				 		int_ActualHV__.x____ <- int_ActualHV
				 		| x____ <- NIDS
				 	]]
				 )
				 )
				  [[ share__ <- x__ | x__ <- {| share__,setR_power,setR_ActualHV,setR_errorFlag,setR_underLimit,setR_lim,setR_supplyLim,setR_errorAck,setR_res,setR_overLimit,setR_setPoint |} ]] 
				  [[set_power <- setL_power,set_ActualHV <- setL_ActualHV,set_errorFlag <- setL_errorFlag,set_underLimit <- setL_underLimit,set_lim <- setL_lim,set_supplyLim <- setL_supplyLim,set_errorAck <- setL_errorAck,set_res <- setL_res,set_overLimit <- setL_overLimit,set_setPoint <- setL_setPoint]]
				 )
				 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
				 			,setL_power
				 			,setL_ActualHV
				 			,setL_errorFlag
				 			,setL_underLimit
				 			,setL_lim
				 			,setL_supplyLim
				 			,setL_errorAck
				 			,setL_res
				 			,setL_overLimit
				 			,setL_setPoint
				 			,setR_power
				 			 			,setR_ActualHV
				 			 			,setR_errorFlag
				 			 			,setR_underLimit
				 			 			,setR_lim
				 			 			,setR_supplyLim
				 			 			,setR_errorAck
				 			 			,setR_res
				 			 			,setR_overLimit
				 			 			,setR_setPoint
				 			|}) |]
				 ((During)
				  [[ share__ <- x__ | x__ <- {| share__,setL_power,setL_ActualHV,setL_errorFlag,setL_underLimit,setL_lim,setL_supplyLim,setL_errorAck,setL_res,setL_overLimit,setL_setPoint |} ]]
				  [[set_power <- setR_power,set_ActualHV <- setR_ActualHV,set_errorFlag <- setR_errorFlag,set_underLimit <- setR_underLimit,set_lim <- setR_lim,set_supplyLim <- setR_supplyLim,set_errorAck <- setR_errorAck,set_res <- setR_res,set_overLimit <- setR_overLimit,set_setPoint <- setR_setPoint]]
				 )
				)[[setL_power <- set_power,setL_ActualHV <- set_ActualHV,setL_errorFlag <- set_errorFlag,setL_underLimit <- set_underLimit,setL_lim <- set_lim,setL_supplyLim <- set_supplyLim,setL_errorAck <- set_errorAck,setL_res <- set_res,setL_overLimit <- set_overLimit,setL_setPoint <- set_setPoint]]
				 [[setR_power <- set_power,setR_ActualHV <- set_ActualHV,setR_errorFlag <- set_errorFlag,setR_underLimit <- set_underLimit,setR_lim <- set_lim,setR_supplyLim <- set_supplyLim,setR_errorAck <- set_errorAck,setR_res <- set_res,setR_overLimit <- set_overLimit,setR_setPoint <- set_setPoint]]
				)\union(enteredSS,{terminate}) 
			)
			During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
					 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&(share__choice(currentState.out!State_ClosedLoop -> SKIP)) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
		
			Behaviour 	= dbisim(
				((
				 (((let
				 	-- IMPLEMENTATION NOTE:
				 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				 	-- modules for defining the semantics of each node.
				 	enterSS = {|
				 	i0::enter,
				 	s1::enter,
				 	s2::enter,
				 	s3::enter,
				 	s4::enter
				 	|}
				 	hideSet = union(enterSS,{|exit,exited,internal__|})
				 within 
				 	((let
				 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
				 		-- because CSPM modules are used for the semantics of Node.
				 		flowevts = union(enterSS,{|exit,exited,interrupt|})
				 		transSync = {|internal__.NID_s4,internal__.NID_s2,internal__.NID_s4,internal__.NID_s3,internal__.NID_s3,internal__.NID_i0|}
				 	within
				 		((
				 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
				 		   i0::VS_O__(id__)
				 		   [| { share__, terminate } |] (
				 		   s1::VS_O__(id__)
				 		   [| { share__, terminate } |] (
				 		   s2::VS_O__(id__)
				 		   [| { share__, terminate } |] (
				 		   s3::VS_O__(id__)
				 		   [| { share__, terminate } |] (
				 		   s4::VS_O__(id__)
				 		   )
				 		   )
				 		   )
				 		   )
				 		 )
				 		 [[s1::interrupt <- x__ | x__ <- {|interrupt|}]]
				 		 [[s2::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s2|}]]
				 		 [[s3::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s3,internal__.NID_s3|}]]
				 		 [[s4::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s4,internal__.NID_s4|}]]
				 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
				 		 )
				 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
				 		  [[set_lim <- setL_lim]]
				 		 )
				 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
				 		 			,setL_lim
				 		|}) |]
				 		 ((i0::enter -> Transitions(id__))
				 		  [[ share__ <- x__ | x__ <- {| share__,setL_lim |} ]]
				 		 )
				 		)[[setL_lim <- set_lim]]
				 		)
				 	)
				 	 \ hideSet)
				 	[[
				 		currentState__.x____ <- currentState,
				 		ext_setPoint__.x____ <- ext_setPoint,
				 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
				 		int_overLimit__.x____ <- int_overLimit,
				 		int_pwmSignal__.x____ <- int_pwmSignal,
				 		int_underLimit__.x____ <- int_underLimit,
				 		int_DisableHV__.x____ <- int_DisableHV,
				 		int_ActualHV__.x____ <- int_ActualHV
				 		| x____ <- NIDS
				 	]]
				 )
				 )
				  [[ share__ <- x__ | x__ <- {| share__,setR_power,setR_ActualHV,setR_errorFlag,setR_underLimit,setR_lim,setR_supplyLim,setR_errorAck,setR_res,setR_overLimit,setR_setPoint |} ]] 
				  [[set_power <- setL_power,set_ActualHV <- setL_ActualHV,set_errorFlag <- setL_errorFlag,set_underLimit <- setL_underLimit,set_lim <- setL_lim,set_supplyLim <- setL_supplyLim,set_errorAck <- setL_errorAck,set_res <- setL_res,set_overLimit <- setL_overLimit,set_setPoint <- setL_setPoint]]
				 )
				 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
				 			,setL_power
				 			,setL_ActualHV
				 			,setL_errorFlag
				 			,setL_underLimit
				 			,setL_lim
				 			,setL_supplyLim
				 			,setL_errorAck
				 			,setL_res
				 			,setL_overLimit
				 			,setL_setPoint
				 			,setR_power
				 			 			,setR_ActualHV
				 			 			,setR_errorFlag
				 			 			,setR_underLimit
				 			 			,setR_lim
				 			 			,setR_supplyLim
				 			 			,setR_errorAck
				 			 			,setR_res
				 			 			,setR_overLimit
				 			 			,setR_setPoint
				 			|}) |]
				 ((During)
				  [[ share__ <- x__ | x__ <- {| share__,setL_power,setL_ActualHV,setL_errorFlag,setL_underLimit,setL_lim,setL_supplyLim,setL_errorAck,setL_res,setL_overLimit,setL_setPoint |} ]]
				  [[set_power <- setR_power,set_ActualHV <- setR_ActualHV,set_errorFlag <- setR_errorFlag,set_underLimit <- setR_underLimit,set_lim <- setR_lim,set_supplyLim <- setR_supplyLim,set_errorAck <- setR_errorAck,set_res <- setR_res,set_overLimit <- setR_overLimit,set_setPoint <- setR_setPoint]]
				 )
				)[[setL_power <- set_power,setL_ActualHV <- set_ActualHV,setL_errorFlag <- set_errorFlag,setL_underLimit <- set_underLimit,setL_lim <- set_lim,setL_supplyLim <- set_supplyLim,setL_errorAck <- set_errorAck,setL_res <- set_res,setL_overLimit <- set_overLimit,setL_setPoint <- set_setPoint]]
				 [[setR_power <- set_power,setR_ActualHV <- set_ActualHV,setR_errorFlag <- set_errorFlag,setR_underLimit <- set_underLimit,setR_lim <- set_lim,setR_supplyLim <- set_supplyLim,setR_errorAck <- set_errorAck,setR_res <- set_res,setR_overLimit <- set_overLimit,setR_setPoint <- set_setPoint]]
				)\{terminate} 
			)
			During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
					 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
		within
			Inactive [| {terminate} |> SKIP)
		
		Transitions(id__) = ((let
			Trans = share__choice(get_lim?lim -> (
				((share__ -> SKIP
				 [] dbisim(((lim==true))&(internal__!NID_s4 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s1::enter -> SKIP)))
				 	 [] dbisim(((lim==true))&(internal__!NID_s2 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s1::enter -> SKIP)))
				 	 [] dbisim(((lim==false))&(internal__!NID_s4 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(int_pwmSignal.out!Power_On -> SKIP)) ; s3::enter -> SKIP)))
				 	 [] dbisim((true)&(internal__!NID_s3 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s2::enter -> SKIP)))
				 	 [] dbisim(((lim==true))&(internal__!NID_s3 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s1::enter -> SKIP)))
				 	 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s4::enter -> SKIP))))
				 ) ; Trans)
				 []
				 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
				 []
				 terminate -> SKIP
			)
			)
		within
			Trans
		)
		)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: ErrorMode
	module ErrorMode
	
	enterSS = 
			{|			i0::enter,
				f0::enter,
				s1::enter,
				s2::enter,
				j0::enter
			|}
	enteredSS = 
			{|			f0::entered,
				s1::entered,
				s2::entered
			|}
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		-- declaring identifiers of transitions
		datatype NIDS = 
		              NID_i0|
		              NID_f0|
		              NID_s1|
		              NID_s2|
		              NID_j0
		
		channel internal__ : NIDS
		channel currentState__: NIDS.InOut.State
		channel ext_setPoint__: NIDS.InOut.core_real
		channel ext_pow24VStatus__: NIDS.InOut.Power
		channel int_overLimit__: NIDS.InOut.core_real
		channel int_pwmSignal__: NIDS.InOut.Power
		channel int_underLimit__: NIDS.InOut.core_real
		channel int_DisableHV__: NIDS.InOut
		channel int_ActualHV__: NIDS.InOut.core_real
		
		--	Nodes
		-- declaring all nodes
		
		----------------------------------------------------------------------
		-- Initial: i0
		module i0
		exports
		
			channel enter, interrupt
			
			D__(id__) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(interrupt -> SKIP) ; Inactive
				within
					Inactive [| {terminate} |> SKIP)
			
			VS_O__(id__) = D__(id__)
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- Final state: f0
		module f0
		
		exports
		
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
			--	Rule: behaviours(Node)
			D__(id__) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
					
					Entering 	= entered -> SKIP ; Active
					Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
					Interrupted	= share__choice(exit -> exited -> Inactive)
				within
					Inactive [| {terminate} |> SKIP)
				
			VS_O__(id__) = D__(id__)
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: s1
		module s1
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--	Nodes
			-- declaring all nodes
			
			
			--	Rule: behaviours(Node)
			--  Note that FDR has problems with efficiently compiling the process below
			-- 	if using a different recursion pattern.
			D__(id__) = 
			dbisim(let
				-- IMPLEMENTATION NOTE: 
				-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
				-- however FDR struggles with that form in certain cases. So we use the exception operator
				-- instead to 'terminate'.
				
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= share__choice(true & (share__choice(set_setPoint!0 -> SKIP))) ; 
						 	  Behaviour ; 
						 	  share__choice(exit -> SKIP) ; SKIP ; 
						 	  share__choice(exited -> SKIP) ; Inactive
			
				Behaviour 	= entered -> During
				During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
			within
				Inactive [| {terminate} |> SKIP)
				
			VS_O__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= share__choice(true & (share__choice(set_setPoint!0 -> SKIP))) ; 
						 	  Behaviour ; 
						 	  share__choice(exit -> SKIP) ; SKIP ; 
						 	  share__choice(exited -> SKIP) ; Inactive
			
				Behaviour 	= entered -> During
				During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
			within
				Inactive [| {terminate} |> SKIP)
			
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: s2
		module s2
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--	Nodes
			-- declaring all nodes
			
			
			--	Rule: behaviours(Node)
			--  Note that FDR has problems with efficiently compiling the process below
			-- 	if using a different recursion pattern.
			D__(id__) = 
			dbisim(let
				-- IMPLEMENTATION NOTE: 
				-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
				-- however FDR struggles with that form in certain cases. So we use the exception operator
				-- instead to 'terminate'.
				
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= share__choice(true & (share__choice(set_ActualHV!0 -> SKIP))) ; 
						 	  Behaviour ; 
						 	  share__choice(exit -> SKIP) ; SKIP ; 
						 	  share__choice(exited -> SKIP) ; Inactive
			
				Behaviour 	= entered -> During
				During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
			within
				Inactive [| {terminate} |> SKIP)
				
			VS_O__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= share__choice(true & (share__choice(set_ActualHV!0 -> SKIP))) ; 
						 	  Behaviour ; 
						 	  share__choice(exit -> SKIP) ; SKIP ; 
						 	  share__choice(exited -> SKIP) ; Inactive
			
				Behaviour 	= entered -> During
				During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
			within
				Inactive [| {terminate} |> SKIP)
			
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- Junction: j0
		module j0
		exports
		
			channel enter, interrupt
			
			D__(id__) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Active 		= share__choice(interrupt -> SKIP) ; Inactive
				within
					Inactive [| {terminate} |> SKIP)
				
			VS_O__(id__) = D__(id__)
		
		endmodule
		----------------------------------------------------------------------
		
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&(share__choice(currentState.out!State_ErrorMode -> SKIP));true&CALL__disableHV(
						id__,
						false
					) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
		
			Behaviour 	= dbisim(
				((
				 (((let
				 	-- IMPLEMENTATION NOTE:
				 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				 	-- modules for defining the semantics of each node.
				 	enterSS = {|
				 	i0::enter,
				 	f0::enter,
				 	s1::enter,
				 	s2::enter,
				 	j0::enter
				 	|}
				 	hideSet = union(enterSS,{|exit,exited,internal__|})
				 within 
				 	((let
				 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
				 		-- because CSPM modules are used for the semantics of Node.
				 		flowevts = union(enterSS,{|exit,exited,interrupt|})
				 		transSync = {|internal__.NID_s1,internal__.NID_i0,internal__.NID_s2,internal__.NID_j0,internal__.NID_j0|}
				 	within
				 		((
				 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
				 		   i0::D__(id__)
				 		   [| { share__, terminate } |] (
				 		   f0::D__(id__)
				 		   [| { share__, terminate } |] (
				 		   s1::D__(id__)
				 		   [| { share__, terminate } |] (
				 		   s2::D__(id__)
				 		   [| { share__, terminate } |] (
				 		   j0::D__(id__)
				 		   )
				 		   )
				 		   )
				 		   )
				 		 )
				 		 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
				 		 [[s1::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s1|}]]
				 		 [[s2::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s2|}]]
				 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
				 		 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
				 		 )
				 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
				 		  [[set_ActualHV <- setL_ActualHV,set_setPoint <- setL_setPoint]]
				 		 )
				 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
				 		 			,setL_ActualHV
				 		 			,setL_setPoint
				 		|}) |]
				 		 ((i0::enter -> Transitions(id__))
				 		  [[ share__ <- x__ | x__ <- {| share__,setL_ActualHV,setL_setPoint |} ]]
				 		 )
				 		)[[setL_ActualHV <- set_ActualHV,setL_setPoint <- set_setPoint]]
				 		)
				 	)
				 	 \ hideSet)
				 	[[
				 		currentState__.x____ <- currentState,
				 		ext_setPoint__.x____ <- ext_setPoint,
				 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
				 		int_overLimit__.x____ <- int_overLimit,
				 		int_pwmSignal__.x____ <- int_pwmSignal,
				 		int_underLimit__.x____ <- int_underLimit,
				 		int_DisableHV__.x____ <- int_DisableHV,
				 		int_ActualHV__.x____ <- int_ActualHV
				 		| x____ <- NIDS
				 	]]
				 )
				 )
				  [[ share__ <- x__ | x__ <- {| share__,setR_power,setR_ActualHV,setR_errorFlag,setR_underLimit,setR_lim,setR_supplyLim,setR_errorAck,setR_res,setR_overLimit,setR_setPoint |} ]] 
				  [[set_power <- setL_power,set_ActualHV <- setL_ActualHV,set_errorFlag <- setL_errorFlag,set_underLimit <- setL_underLimit,set_lim <- setL_lim,set_supplyLim <- setL_supplyLim,set_errorAck <- setL_errorAck,set_res <- setL_res,set_overLimit <- setL_overLimit,set_setPoint <- setL_setPoint]]
				 )
				 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
				 			,setL_power
				 			,setL_ActualHV
				 			,setL_errorFlag
				 			,setL_underLimit
				 			,setL_lim
				 			,setL_supplyLim
				 			,setL_errorAck
				 			,setL_res
				 			,setL_overLimit
				 			,setL_setPoint
				 			,setR_power
				 			 			,setR_ActualHV
				 			 			,setR_errorFlag
				 			 			,setR_underLimit
				 			 			,setR_lim
				 			 			,setR_supplyLim
				 			 			,setR_errorAck
				 			 			,setR_res
				 			 			,setR_overLimit
				 			 			,setR_setPoint
				 			|}) |]
				 ((During)
				  [[ share__ <- x__ | x__ <- {| share__,setL_power,setL_ActualHV,setL_errorFlag,setL_underLimit,setL_lim,setL_supplyLim,setL_errorAck,setL_res,setL_overLimit,setL_setPoint |} ]]
				  [[set_power <- setR_power,set_ActualHV <- setR_ActualHV,set_errorFlag <- setR_errorFlag,set_underLimit <- setR_underLimit,set_lim <- setR_lim,set_supplyLim <- setR_supplyLim,set_errorAck <- setR_errorAck,set_res <- setR_res,set_overLimit <- setR_overLimit,set_setPoint <- setR_setPoint]]
				 )
				)[[setL_power <- set_power,setL_ActualHV <- set_ActualHV,setL_errorFlag <- set_errorFlag,setL_underLimit <- set_underLimit,setL_lim <- set_lim,setL_supplyLim <- set_supplyLim,setL_errorAck <- set_errorAck,setL_res <- set_res,setL_overLimit <- set_overLimit,setL_setPoint <- set_setPoint]]
				 [[setR_power <- set_power,setR_ActualHV <- set_ActualHV,setR_errorFlag <- set_errorFlag,setR_underLimit <- set_underLimit,setR_lim <- set_lim,setR_supplyLim <- set_supplyLim,setR_errorAck <- set_errorAck,setR_res <- set_res,setR_overLimit <- set_overLimit,setR_setPoint <- set_setPoint]]
				)\union(enteredSS,{terminate}) 
			)
			During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
					 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&(share__choice(currentState.out!State_ErrorMode -> SKIP));true&CALL__disableHV(
						id__,
						false
					) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
		
			Behaviour 	= dbisim(
				((
				 (((let
				 	-- IMPLEMENTATION NOTE:
				 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				 	-- modules for defining the semantics of each node.
				 	enterSS = {|
				 	i0::enter,
				 	f0::enter,
				 	s1::enter,
				 	s2::enter,
				 	j0::enter
				 	|}
				 	hideSet = union(enterSS,{|exit,exited,internal__|})
				 within 
				 	((let
				 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
				 		-- because CSPM modules are used for the semantics of Node.
				 		flowevts = union(enterSS,{|exit,exited,interrupt|})
				 		transSync = {|internal__.NID_s1,internal__.NID_i0,internal__.NID_s2,internal__.NID_j0,internal__.NID_j0|}
				 	within
				 		((
				 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
				 		   i0::VS_O__(id__)
				 		   [| { share__, terminate } |] (
				 		   f0::VS_O__(id__)
				 		   [| { share__, terminate } |] (
				 		   s1::VS_O__(id__)
				 		   [| { share__, terminate } |] (
				 		   s2::VS_O__(id__)
				 		   [| { share__, terminate } |] (
				 		   j0::VS_O__(id__)
				 		   )
				 		   )
				 		   )
				 		   )
				 		 )
				 		 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
				 		 [[s1::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s1|}]]
				 		 [[s2::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s2|}]]
				 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
				 		 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
				 		 )
				 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
				 		  [[set_ActualHV <- setL_ActualHV,set_setPoint <- setL_setPoint]]
				 		 )
				 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
				 		 			,setL_ActualHV
				 		 			,setL_setPoint
				 		|}) |]
				 		 ((i0::enter -> Transitions(id__))
				 		  [[ share__ <- x__ | x__ <- {| share__,setL_ActualHV,setL_setPoint |} ]]
				 		 )
				 		)[[setL_ActualHV <- set_ActualHV,setL_setPoint <- set_setPoint]]
				 		)
				 	)
				 	 \ hideSet)
				 	[[
				 		currentState__.x____ <- currentState,
				 		ext_setPoint__.x____ <- ext_setPoint,
				 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
				 		int_overLimit__.x____ <- int_overLimit,
				 		int_pwmSignal__.x____ <- int_pwmSignal,
				 		int_underLimit__.x____ <- int_underLimit,
				 		int_DisableHV__.x____ <- int_DisableHV,
				 		int_ActualHV__.x____ <- int_ActualHV
				 		| x____ <- NIDS
				 	]]
				 )
				 )
				  [[ share__ <- x__ | x__ <- {| share__,setR_power,setR_ActualHV,setR_errorFlag,setR_underLimit,setR_lim,setR_supplyLim,setR_errorAck,setR_res,setR_overLimit,setR_setPoint |} ]] 
				  [[set_power <- setL_power,set_ActualHV <- setL_ActualHV,set_errorFlag <- setL_errorFlag,set_underLimit <- setL_underLimit,set_lim <- setL_lim,set_supplyLim <- setL_supplyLim,set_errorAck <- setL_errorAck,set_res <- setL_res,set_overLimit <- setL_overLimit,set_setPoint <- setL_setPoint]]
				 )
				 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
				 			,setL_power
				 			,setL_ActualHV
				 			,setL_errorFlag
				 			,setL_underLimit
				 			,setL_lim
				 			,setL_supplyLim
				 			,setL_errorAck
				 			,setL_res
				 			,setL_overLimit
				 			,setL_setPoint
				 			,setR_power
				 			 			,setR_ActualHV
				 			 			,setR_errorFlag
				 			 			,setR_underLimit
				 			 			,setR_lim
				 			 			,setR_supplyLim
				 			 			,setR_errorAck
				 			 			,setR_res
				 			 			,setR_overLimit
				 			 			,setR_setPoint
				 			|}) |]
				 ((During)
				  [[ share__ <- x__ | x__ <- {| share__,setL_power,setL_ActualHV,setL_errorFlag,setL_underLimit,setL_lim,setL_supplyLim,setL_errorAck,setL_res,setL_overLimit,setL_setPoint |} ]]
				  [[set_power <- setR_power,set_ActualHV <- setR_ActualHV,set_errorFlag <- setR_errorFlag,set_underLimit <- setR_underLimit,set_lim <- setR_lim,set_supplyLim <- setR_supplyLim,set_errorAck <- setR_errorAck,set_res <- setR_res,set_overLimit <- setR_overLimit,set_setPoint <- setR_setPoint]]
				 )
				)[[setL_power <- set_power,setL_ActualHV <- set_ActualHV,setL_errorFlag <- set_errorFlag,setL_underLimit <- set_underLimit,setL_lim <- set_lim,setL_supplyLim <- set_supplyLim,setL_errorAck <- set_errorAck,setL_res <- set_res,setL_overLimit <- set_overLimit,setL_setPoint <- set_setPoint]]
				 [[setR_power <- set_power,setR_ActualHV <- set_ActualHV,setR_errorFlag <- set_errorFlag,setR_underLimit <- set_underLimit,setR_lim <- set_lim,setR_supplyLim <- set_supplyLim,setR_errorAck <- set_errorAck,setR_res <- set_res,setR_overLimit <- set_overLimit,setR_setPoint <- set_setPoint]]
				)\{terminate} 
			)
			During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
					 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
		within
			Inactive [| {terminate} |> SKIP)
		
		Transitions(id__) = ((let
			Trans = share__choice(get_ActualHV?ActualHV -> get_setPoint?setPoint -> (
				((share__ -> SKIP
				 [] dbisim((true)&(internal__!NID_s1 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(get_setPoint?setPoint -> true&(share__choice(ext_setPoint.out!setPoint -> SKIP))) ; s2::enter -> SKIP)))
				 	 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((share__choice(true & (share__choice(set_errorAck!false -> SKIP))) ; s1::enter -> SKIP))))
				 	 [] dbisim((true)&(internal__!NID_s2 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(get_ActualHV?ActualHV -> true&(share__choice(int_ActualHV.out!ActualHV -> SKIP))) ; j0::enter -> SKIP)))
				 	 [] dbisim((((setPoint==0) and (ActualHV==0)))&(internal__!NID_j0 -> SKIP ;  ((share__choice(true & (share__choice(set_errorAck!true -> SKIP))) ; f0::enter -> SKIP))))
				 	 [] dbisim((((setPoint!=0) or (ActualHV!=0)))&(internal__!NID_j0 -> SKIP ;  ((SKIP ; s1::enter -> SKIP))))
				 ) ; Trans)
				 []
				 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
				 []
				 terminate -> SKIP
			)
			)
		within
			Trans
		)
		)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- Initial: i0
	module i0
	exports
	
		channel enter, interrupt
		
		D__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
		
		VS_O__(id__) = D__(id__)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- Junction: j0
	module j0
	exports
	
		channel enter, interrupt
		
		D__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__) = D__(id__)
	
	endmodule
	----------------------------------------------------------------------
	
	-- END of Nodes --
	
	-- Operation calls --
	-- Only the undefined operations are declared here.
	-- If the state machine is in isolation, all required operations will be undefined.
	-- If it is in the context of a controller, the required operations not provided by the
	-- controller will be declared here, and the defined operations will be defined in the
	-- context of the Controller module, and therefore within scope of the state machine module.
	CALL__checkLimits(id__) 	= checkLimitsCall -> SKIP
	CALL__disableHV(id__,
				param_arg) 	= disableHVCall.param_arg -> SKIP
	CALL__supplyVoltCheck(id__) 	= supplyVoltCheckCall -> SKIP
	
	-- END of Operation calls --
	
	-- STM processes
	STM(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
	( 
		(
			(
				(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
			 	[[ share__ <- x__ | x__ <- {||} ]]
			)
		[| {share__} |]
		SKIP
		)
		[| union(sharedVarSync,{terminate}) |]
		dbisim(sharedVarMemory(id__))
	)\sharedVarHide
	
	STM_VS_O(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
	( 
		(
			(
				(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
			 	[[ share__ <- x__ | x__ <- {||} ]]
			)
		[| {share__} |]
		SKIP
		)
		[| union(sharedVarSync,{terminate}) |]
		dbisim(sharedVarMemory(id__))
	)\sharedVarHide
	
	-- Transitions
	Transitions(id__) = ((let
		Trans = share__choice(get_lim?lim -> get_errorAck?errorAck -> get_res?res -> get_setPoint?setPoint -> (
			((share__ -> SKIP
			 [] dbisim((true)&(internal__!NID_Ramping -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Init::enter -> SKIP)))
			 	 [] dbisim((true)&(internal__!NID_Init -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Wait24Vpower::enter -> SKIP)))
			 	 [] dbisim(((res==true))&(internal__!NID_Wait24Vpower -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_res!false -> SKIP))) ; ErrorMode::enter -> SKIP)))
			 	 [] dbisim(((((setPoint==0) and (lim==false)) and (res==false)))&(internal__!NID_Wait24Vpower -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; ClosedLoop::enter -> SKIP)))
			 	 [] dbisim(((res==true))&(internal__!NID_ClosedLoop -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_res!false -> SKIP))) ; ErrorMode::enter -> SKIP)))
			 	 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; Ramping::enter -> SKIP))))
			 	 [] dbisim((errorAck)&(internal__!NID_ErrorMode -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Wait24Vpower::enter -> SKIP)))
			 	 [] dbisim((true)&(int_DisableHV__!NID_Wait24Vpower.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; j0::enter -> SKIP)))
			 	 [] dbisim((true)&(int_DisableHV__!NID_ClosedLoop.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; j0::enter -> SKIP)))
			 	 [] dbisim((true)&(internal__!NID_j0 -> SKIP ;  ((true&CALL__disableHV(
			 			id__,
			 			true
			 		);share__choice(true & (share__choice(set_res!false -> SKIP))) ; ErrorMode::enter -> SKIP))))
			 ) ; Trans)
			 []
			 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
			 []
			 terminate -> SKIP
		)
		)
	within
		Trans
	)
	)
	
	-- Stateful
	-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
	
	-- Named process definitions
	MachineBody(id__) = 
		dbisim((
		let
			finalNodesEntered = {||}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				Ramping::enter,
				Init::enter,
				Wait24Vpower::enter,
				ClosedLoop::enter,
				ErrorMode::enter,
				i0::enter,
				j0::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_Ramping,internal__.NID_Init,internal__.NID_Wait24Vpower,internal__.NID_Wait24Vpower,internal__.NID_ClosedLoop,internal__.NID_i0,internal__.NID_ErrorMode,int_DisableHV__.NID_Wait24Vpower.in,int_DisableHV__.NID_ClosedLoop.in,internal__.NID_j0|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   Ramping::D__(id__)
					   [| { share__, terminate } |] (
					   Init::D__(id__)
					   [| { share__, terminate } |] (
					   Wait24Vpower::D__(id__)
					   [| { share__, terminate } |] (
					   ClosedLoop::D__(id__)
					   [| { share__, terminate } |] (
					   ErrorMode::D__(id__)
					   [| { share__, terminate } |] (
					   i0::D__(id__)
					   [| { share__, terminate } |] (
					   j0::D__(id__)
					   )
					   )
					   )
					   )
					   )
					   )
					 )
					 [[Ramping::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Ramping|}]]
					 [[Init::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Init|}]]
					 [[Wait24Vpower::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Wait24Vpower,internal__.NID_Wait24Vpower,int_DisableHV__.NID_Wait24Vpower.in|}]]
					 [[ClosedLoop::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_ClosedLoop,int_DisableHV__.NID_ClosedLoop.in|}]]
					 [[ErrorMode::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_ErrorMode|}]]
					 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
					 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
					  [[set_lim <- setL_lim,set_errorAck <- setL_errorAck,set_res <- setL_res,set_setPoint <- setL_setPoint]]
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					 			,setL_lim
					 			,setL_errorAck
					 			,setL_res
					 			,setL_setPoint
					|}) |]
					 ((i0::enter -> Transitions(id__))
					  [[ share__ <- x__ | x__ <- {| share__,setL_lim,setL_errorAck,setL_res,setL_setPoint |} ]]
					 )
					)[[setL_lim <- set_lim,setL_errorAck <- set_errorAck,setL_res <- set_res,setL_setPoint <- set_setPoint]]
					)
				)
				 \ hideSet)
				[[
					currentState__.x____ <- currentState,
					ext_setPoint__.x____ <- ext_setPoint,
					ext_pow24VStatus__.x____ <- ext_pow24VStatus,
					int_overLimit__.x____ <- int_overLimit,
					int_pwmSignal__.x____ <- int_pwmSignal,
					int_underLimit__.x____ <- int_underLimit,
					int_DisableHV__.x____ <- int_DisableHV,
					int_ActualHV__.x____ <- int_ActualHV
					| x____ <- NIDS
				]]
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour(id__) = 
		dbisim((MachineBody(id__)\ enteredSS)
		)
	
	IteratedBehaviour(id__) = 
		dbisim((MachineBody(id__)\ enteredSS)
		)
	
	Stateful(id__) = 
		((
			(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful(id__) =
		(dbisim(
			sbisim(
				dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										dbisim(
											sbisim(
												dbisim(
													sbisim(
														dbisim(
															sbisim(
																dbisim(
																	sbisim(
																		dbisim(
																			sbisim(
																				dbisim(
																					sbisim(
																						Behaviour(id__)
																						[| {|get_underLimit,set_underLimit,terminate|} |]
																						Memory_underLimit(0)
																					)\{|get_underLimit,set_underLimit|}
																				)
																				[| {|get_overLimit,set_overLimit,terminate|} |]
																				Memory_overLimit(0)
																			)\{|get_overLimit,set_overLimit|}
																		)
																		[| {|get_errorAck,set_errorAck,terminate|} |]
																		Memory_errorAck(false)
																	)\{|get_errorAck,set_errorAck|}
																)
																[| {|get_ActualHV,set_ActualHV,terminate|} |]
																Memory_ActualHV(0)
															)\{|get_ActualHV,set_ActualHV|}
														)
														[| {|get_supplyLim,set_supplyLim,terminate|} |]
														Memory_supplyLim(false)
													)\{|get_supplyLim,set_supplyLim|}
												)
												[| {|get_lim,set_lim,terminate|} |]
												Memory_lim(false)
											)\{|get_lim,set_lim|}
										)
										[| {|get_errorFlag,set_errorFlag,terminate|} |]
										Memory_errorFlag(true)
									)\{|get_errorFlag,set_errorFlag|}
								)
								[| {|get_res,set_res,terminate|} |]
								Memory_res(false)
							)\{|get_res,set_res|}
						)
						[| {|get_setPoint,set_setPoint,terminate|} |]
						Memory_setPoint(0)
					)\{|get_setPoint,set_setPoint|}
				)
				[| {|get_power,set_power,terminate|} |]
				Memory_power(Power_On)
			)\{|get_power,set_power|}
		)
		)
	
	-- Visible counterparts
	MachineBody_VS_O(id__) = 
		dbisim((
		let
			finalNodesEntered = {||}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				Ramping::enter,
				Init::enter,
				Wait24Vpower::enter,
				ClosedLoop::enter,
				ErrorMode::enter,
				i0::enter,
				j0::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_Ramping,internal__.NID_Init,internal__.NID_Wait24Vpower,internal__.NID_Wait24Vpower,internal__.NID_ClosedLoop,internal__.NID_i0,internal__.NID_ErrorMode,int_DisableHV__.NID_Wait24Vpower.in,int_DisableHV__.NID_ClosedLoop.in,internal__.NID_j0|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   Ramping::VS_O__(id__)
					   [| { share__, terminate } |] (
					   Init::VS_O__(id__)
					   [| { share__, terminate } |] (
					   Wait24Vpower::VS_O__(id__)
					   [| { share__, terminate } |] (
					   ClosedLoop::VS_O__(id__)
					   [| { share__, terminate } |] (
					   ErrorMode::VS_O__(id__)
					   [| { share__, terminate } |] (
					   i0::VS_O__(id__)
					   [| { share__, terminate } |] (
					   j0::VS_O__(id__)
					   )
					   )
					   )
					   )
					   )
					   )
					 )
					 [[Ramping::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Ramping|}]]
					 [[Init::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Init|}]]
					 [[Wait24Vpower::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Wait24Vpower,internal__.NID_Wait24Vpower,int_DisableHV__.NID_Wait24Vpower.in|}]]
					 [[ClosedLoop::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_ClosedLoop,int_DisableHV__.NID_ClosedLoop.in|}]]
					 [[ErrorMode::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_ErrorMode|}]]
					 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
					 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
					  [[set_lim <- setL_lim,set_errorAck <- setL_errorAck,set_res <- setL_res,set_setPoint <- setL_setPoint]]
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					 			,setL_lim
					 			,setL_errorAck
					 			,setL_res
					 			,setL_setPoint
					|}) |]
					 ((i0::enter -> Transitions(id__))
					  [[ share__ <- x__ | x__ <- {| share__,setL_lim,setL_errorAck,setL_res,setL_setPoint |} ]]
					 )
					)[[setL_lim <- set_lim,setL_errorAck <- set_errorAck,setL_res <- set_res,setL_setPoint <- set_setPoint]]
					)
				)
				 \ hideSet)
				[[
					currentState__.x____ <- currentState,
					ext_setPoint__.x____ <- ext_setPoint,
					ext_pow24VStatus__.x____ <- ext_pow24VStatus,
					int_overLimit__.x____ <- int_overLimit,
					int_pwmSignal__.x____ <- int_pwmSignal,
					int_underLimit__.x____ <- int_underLimit,
					int_DisableHV__.x____ <- int_DisableHV,
					int_ActualHV__.x____ <- int_ActualHV
					| x____ <- NIDS
				]]
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour_VS_O(id__) = 
		dbisim((MachineBody_VS_O(id__))
		)
	
	IteratedBehaviour_VS_O(id__) = 
		dbisim((MachineBody_VS_O(id__))
		)
	
	Stateful_VS_O(id__) = 
		dbisim((
			(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful_VS_O(id__) =
		(dbisim(
			sbisim(
				dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										dbisim(
											sbisim(
												dbisim(
													sbisim(
														dbisim(
															sbisim(
																dbisim(
																	sbisim(
																		dbisim(
																			sbisim(
																				dbisim(
																					sbisim(
																						Behaviour_VS_O(id__)
																						[| {|get_underLimit,set_underLimit,terminate|} |]
																						Memory_underLimit(0)
																					)\{|get_underLimit,set_underLimit|}
																				)
																				[| {|get_overLimit,set_overLimit,terminate|} |]
																				Memory_overLimit(0)
																			)\{|get_overLimit,set_overLimit|}
																		)
																		[| {|get_errorAck,set_errorAck,terminate|} |]
																		Memory_errorAck(false)
																	)\{|get_errorAck,set_errorAck|}
																)
																[| {|get_ActualHV,set_ActualHV,terminate|} |]
																Memory_ActualHV(0)
															)\{|get_ActualHV,set_ActualHV|}
														)
														[| {|get_supplyLim,set_supplyLim,terminate|} |]
														Memory_supplyLim(false)
													)\{|get_supplyLim,set_supplyLim|}
												)
												[| {|get_lim,set_lim,terminate|} |]
												Memory_lim(false)
											)\{|get_lim,set_lim|}
										)
										[| {|get_errorFlag,set_errorFlag,terminate|} |]
										Memory_errorFlag(true)
									)\{|get_errorFlag,set_errorFlag|}
								)
								[| {|get_res,set_res,terminate|} |]
								Memory_res(false)
							)\{|get_res,set_res|}
						)
						[| {|get_setPoint,set_setPoint,terminate|} |]
						Memory_setPoint(0)
					)\{|get_setPoint,set_setPoint|}
				)
				[| {|get_power,set_power,terminate|} |]
				Memory_power(Power_On)
			)\{|get_power,set_power|}
		)
		)
	
	-- END
	
	-- Memory
	-- Memory variables
	Memory_power(power) =
		get_power!power -> Memory_power(power)
		[]
		set_power?x__ -> Memory_power(x__)
		[]
		terminate -> SKIP
	Memory_setPoint(setPoint) =
		get_setPoint!setPoint -> Memory_setPoint(setPoint)
		[]
		set_setPoint?x__ -> Memory_setPoint(x__)
		[]
		terminate -> SKIP
	Memory_res(res) =
		get_res!res -> Memory_res(res)
		[]
		set_res?x__ -> Memory_res(x__)
		[]
		terminate -> SKIP
	Memory_errorFlag(errorFlag) =
		get_errorFlag!errorFlag -> Memory_errorFlag(errorFlag)
		[]
		set_errorFlag?x__ -> Memory_errorFlag(x__)
		[]
		terminate -> SKIP
	Memory_lim(lim) =
		get_lim!lim -> Memory_lim(lim)
		[]
		set_lim?x__ -> Memory_lim(x__)
		[]
		terminate -> SKIP
	Memory_supplyLim(supplyLim) =
		get_supplyLim!supplyLim -> Memory_supplyLim(supplyLim)
		[]
		set_supplyLim?x__ -> Memory_supplyLim(x__)
		[]
		terminate -> SKIP
	Memory_ActualHV(ActualHV) =
		get_ActualHV!ActualHV -> Memory_ActualHV(ActualHV)
		[]
		set_ActualHV?x__ -> Memory_ActualHV(x__)
		[]
		terminate -> SKIP
	Memory_errorAck(errorAck) =
		get_errorAck!errorAck -> Memory_errorAck(errorAck)
		[]
		set_errorAck?x__ -> Memory_errorAck(x__)
		[]
		terminate -> SKIP
	Memory_overLimit(overLimit) =
		get_overLimit!overLimit -> Memory_overLimit(overLimit)
		[]
		set_overLimit?x__ -> Memory_overLimit(x__)
		[]
		terminate -> SKIP
	Memory_underLimit(underLimit) =
		get_underLimit!underLimit -> Memory_underLimit(underLimit)
		[]
		set_underLimit?x__ -> Memory_underLimit(x__)
		[]
		terminate -> SKIP
	
	-- varMemory process
	varMemory(id__) = Memory_power(Power_On)
	[| { terminate } |] (
	Memory_setPoint(0)
	[| { terminate } |] (
	Memory_res(false)
	[| { terminate } |] (
	Memory_errorFlag(true)
	[| { terminate } |] (
	Memory_lim(false)
	[| { terminate } |] (
	Memory_supplyLim(false)
	[| { terminate } |] (
	Memory_ActualHV(0)
	[| { terminate } |] (
	Memory_errorAck(false)
	[| { terminate } |] (
	Memory_overLimit(0)
	[| { terminate } |] (
	Memory_underLimit(0)
	)
	)
	)
	)
	)
	)
	)
	)
	)
	
	getsetLocalChannels = {|get_power,set_power,get_setPoint,set_setPoint,get_res,set_res,get_errorFlag,set_errorFlag,get_lim,set_lim,get_supplyLim,set_supplyLim,get_ActualHV,set_ActualHV,get_errorAck,set_errorAck,get_overLimit,set_overLimit,get_underLimit,set_underLimit|}
	
	-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
	FVS__(id__) = STM_VS_O(id__)
	
	D__(id__) = STM(id__) \ internal_events
	O__(id__) = sbisim(diamond(D__(id__)))
	VS__(id__) = FVS__(id__)
	VS_O__(id__) = sbisim(diamond(FVS__(id__)))
	HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
	HUP__(id__) = O__(id__) [|{share__}|] SKIP
	
	-- Shared memory
	-- Shared memory variables
	
	-- sharedVarMemory process
	sharedVarMemory(id__) = terminate -> SKIP
	
	sharedVarSync = {||}
	
	sharedVarHide = {||}
endmodule
