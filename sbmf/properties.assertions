/********************************************************************************
 * Contributors:
 *   Martin SirevÃ¥g - initial definition
 *   Pedro Ribeiro  - further changes
 ********************************************************************************/
package properties
import Declarations::*

// Types and functions used in the model.
csp Instantiations csp-begin
-- generate nat
nametype core_nat = {0..2}

-- generate string
nametype core_string = LSeq({'a'},1)

REAL_MAX = 2
REAL_MIN = 0

-- generate real
nametype core_real = { REAL_MIN..REAL_MAX}

-- BASIC FUNCTIONS

-- generate int
nametype core_int = { 0..2}

-- generate -- OPERATION BOUNDS

-- MODULE CONSTANTS

-- CONTROLLER CONSTANTS

-- STATEMACHINE CONSTANTS

-- OPERATION CONSTANTS

-- BASIC TYPES

-- generate Div
Div(e1,e2,T) = if member(e1/e2,T) then e1/e2 else e1

-- generate Neg
Neg(e1,T) = if member(-e1,T) then -e1 else e1

-- generate boolean
nametype core_boolean = Bool

-- generate Mult
Mult(e1,e2,T) = if member(e1*e2,T) then e1*e2 else e1

-- generate Modulus
Modulus(e1,e2,T) = if member(e1%e2,T) then e1%e2 else e1

-- generate Plus
Plus(e1,e2,T) = if member(e1+e2,T) then e1+e2 else e1

-- generate Minus
Minus(e1,e2,T) = if member(e1-e2,T) then e1-e2 else e1

overLimitMax(x) = if x > REAL_MAX then REAL_MAX else x
underLimitMin(x) = if x < REAL_MIN then REAL_MIN else x

overLimitF(x) = overLimitMax(x+2)
underLimitF(x) = underLimitMin(x-2)

csp-end

/***************************************************
 * Auxiliar definitions  
 ***************************************************/

untimed csp Stop csp-begin
Stop = STOP
csp-end

/***************************************************
 * Module assertions  
 ***************************************************/

untimed csp mod_cons associated to mod_sys csp-begin 
mod_cons = mod_sys::O__(0) \ {|mod_sys::int_pwmSignal|} 
csp-end

untimed csp mod_sys_power_on associated to mod_sys csp-begin
mod_sys_power_on = ((mod_sys::O__(0)\ {|mod_sys::int_pwmSignal|})\{|mod_sys::ext_pow24VStatus.in|} 
				   [| {|mod_sys::ext_pow24VStatus.in|} |]
				   RUN({|mod_sys::ext_pow24VStatus.in.Power_On|})) \{|mod_sys::ext_pow24VStatus.in.Power_On|}
csp-end

/***************************************************
 * Property P1
 ***************************************************/
 
// Specification for property P1 while in the ClosedLoop state
untimed csp Spec1A csp-begin

channel int_ActualHV : core_real
channel read : core_real

BufferedOutput = (Buffer [| {|read|} |] Output) \{|read|}

-- Output simply outputs what it reads.
Output = read?x__ -> mod_sys::int_ActualHV.out!x__ -> Output

-- A buffer, whose current 'value' can be overwritten.
Buffer = int_ActualHV?x__ -> (read!x__ -> Buffer [] Buffer)

Spec1A = (Behaviour [| {| int_ActualHV |} |] BufferedOutput) \ {|int_ActualHV|}

Behaviour = CHAOS(Events) 
		[| {| mod_sys::currentState.out.State_ClosedLoop |} |> 
		(ClosedLoop_ctrl /\ (mod_sys::currentState.out.State_ErrorMode -> Behaviour))

ClosedLoop_ctrl = mod_sys::ext_setPoint.in?x__ -> int_ActualHV!x__ -> ClosedLoop_ctrl

csp-end

untimed csp mod_sys_ClosedLoop associated to mod_sys csp-begin 
mod_sys_ClosedLoop = (mod_sys::O__(0) |\ {|mod_sys::currentState.out.State_ClosedLoop|})  
csp-end

untimed csp mod_sys_no_power_pwm associated to mod_sys csp-begin
mod_sys_no_power_pwm = mod_sys::O__(0)\ {|mod_sys::int_pwmSignal,mod_sys::ext_pow24VStatus.in|} 
csp-end

untimed assertion A1 : mod_sys_no_power_pwm refines Spec1A in the traces model
untimed assertion A1_non_trivial : mod_sys_ClosedLoop does not refine Stop in the traces model

// Specification for property P1 while in the ErrorMode state
untimed csp Spec1B csp-begin

Spec1B = (Behaviour1B [| {| int_ActualHV |} |] BufferedOutput) \ {|int_ActualHV|} 
Behaviour1B = CHAOS(Events) 
			  [| {| mod_sys::currentState.out.State_ErrorMode |} |> 
			  (mod_sys::ext_setPoint.out.0 -> int_ActualHV.0 -> Behaviour1B)

csp-end

untimed assertion A1B : mod_sys_no_power_pwm refines Spec1B in the traces model

// Further sanity checks
untimed csp mod_sys_ErrorMode associated to mod_sys csp-begin 
mod_sys_ErrorMode = (mod_sys::O__(0) |\ {|mod_sys::currentState.out.State_ErrorMode|})  
csp-end

untimed assertion A1_reachable : State_machine::ClosedLoop is reachable in mod_sys
untimed assertion A1B_non_trivial : mod_sys_ErrorMode does not refine Stop in the traces model

untimed csp mod_sys_power associated to mod_sys csp-begin
mod_sys_power = (mod_sys::O__(0)\ {|mod_sys::int_pwmSignal|}) \{|mod_sys::ext_pow24VStatus.in|}
csp-end

/***************************************************
 * Property P2
 ***************************************************/

untimed csp PWM csp-begin

PWM = mod_sys::int_pwmSignal.out.Power_On -> PWM_on
	  [] 
	  mod_sys::ext_pow24VStatus.in.Power_Off -> PWM
	  []
	  mod_sys::int_pwmSignal.out.Power_Off -> PWM
	  	  
PWM_on = mod_sys::ext_pow24VStatus.in.Power_Off -> (RUN({|mod_sys::ext_pow24VStatus.in.Power_Off|}) /\ mod_sys::int_pwmSignal.out.Power_Off -> PWM)
		[]
		mod_sys::int_pwmSignal.out.Power_Off -> PWM
		[]
		mod_sys::int_pwmSignal.out.Power_On -> PWM_on
		
csp-end

// The constrained version of mod_sys
untimed csp mod_sys_pwm associated to mod_sys csp-begin 
mod_sys_pwm = mod_sys::O__(0) |\ {|mod_sys::ext_pow24VStatus.in.Power_Off,mod_sys::int_pwmSignal.out|}					
csp-end

untimed assertion A2 : mod_sys_pwm refines PWM in the traces model

/***************************************************
 * Property P3
 ***************************************************/
 
//Specification for property P3		
untimed csp Spec3 csp-begin
Spec3 = CHAOS(Events) [| {|mod_sys::ext_pow24VStatus.in.Power_Off|} |> (RUN({|mod_sys::ext_pow24VStatus.in.Power_Off|}) /\ mod_sys::ext_setPoint.out.0 -> Spec3)
csp-end

// Constrained form of mod_sys for P3
untimed csp mod_sys_setpoint associated to mod_sys csp-begin 
mod_sys_setpoint = (mod_sys::O__(0) |\ {|mod_sys::ext_pow24VStatus.in.Power_Off,mod_sys::ext_setPoint.out|})				
csp-end

untimed assertion A3 : mod_sys_setpoint refines Spec3 in the traces model

//P4: Checks if the model is deadlock free
assertion A4 : mod_sys is deadlock-free 

//P5: Checks for reachability of states
assertion A5 : State_machine::Ramping is reachable in State_machine
assertion A6 : State_machine::Init is reachable in State_machine
assertion A7 : State_machine::Wait24Vpower is reachable in State_machine
assertion A8 : State_machine::ClosedLoop is reachable in State_machine
assertion A9 : State_machine::ErrorMode is reachable in State_machine

