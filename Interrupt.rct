diagram Interrupt import Declarations::* stm Watchdog {
	event int_overLimit : real
	event int_underLimit : real

	event int_DisableHV
	event int_ActualHV : real 
	initial i0
	state s0 {
		initial i0
		final f0

		state Waiting {
		}
		transition t0 {
			from i0
			to Waiting
		}
		transition t1 {
			from ActualHVRead
			to f0
			condition ActualHV > overLimit
			action int_DisableHV
		}
		transition t3 {
			from ActualHVRead
			to f0
			condition ActualHV < underLimit
			action int_DisableHV
		}
	transition t2 {
			from PowerStatusRead
			to f0
			condition power == Power :: Off
			action int_DisableHV
		}
	state PowerStatusRead {
		}
		state ActualHVRead {
		}
		state PowerAndActualHVRead {
		}
		transition t4 {
			from Waiting
			to PowerStatusRead
			trigger ext_pow24VStatus ? power
		}
		transition t5 {
			from Waiting
			to ActualHVRead
			trigger int_ActualHV ? ActualHV
		}
		transition t6 {
			from PowerStatusRead
			to PowerAndActualHVRead
			trigger int_ActualHV ? ActualHV
		}
		transition t7 {
			from ActualHVRead
			to PowerAndActualHVRead
			trigger ext_pow24VStatus ? power
		}
		transition t8 {
			from PowerAndActualHVRead
			to f0
			condition ActualHV < underLimit
			action int_DisableHV
		}
		transition t9 {
			from PowerAndActualHVRead
			to f0
			condition ActualHV > overLimit
			action int_DisableHV
		}
		transition t10 {
			from PowerAndActualHVRead
			to f0
			condition power == Power :: Off
			action int_DisableHV
		}
	}
	transition t0 {
		from i0
		to s0
		action int_overLimit ? overLimit ; int_underLimit ? underLimit
	}
	transition t1 {
		from s0
		to s0
		condition sinceEntry ( s0 ) >= 10
	}
var overLimit : real
	var underLimit : real
	var ActualHV : real

	var power : Power
	event ext_pow24VStatus : Power
}

