module OP_disableHV
	-- Only the undefined operations are declared here.
	-- If the state machine is in isolation, all required operations will be undefined.
	-- If it is in the context of a controller, the required operations not provided by the
	-- controller will be declared here, and the defined operations will be defined in the
	-- context of the Controller module, and therefore within scope of the state machien module.
	
	
	-- definition of functions used to expose flow channels
	ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
					   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
					   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
					   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
						 
	ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
				[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
				[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	
	-- declaring identifiers of state and final states
	datatype SIDS = SID_disableHV
	              | SID_disableHV_f0
	
	-- declaring identifiers of transitions
	datatype TIDS = NULLTRANSITION__
	              | TID_disableHV_t0
	              | TID_disableHV_t1
	              | TID_disableHV_t2
	
	-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
	
	ITIDS = {
	}
	
	int_int = {|
	|}
		
	
	internal_events = {|enter,entered,exit,exited|}
	shared_variable_events = {|
		set_EXT_HVEnabled,
		set_EXT_currentState,
		set_EXT_dutyCyclePWM1,
		set_EXT_mSetPoint
	|}
			
	
	-- declaring all states
	CS_disableHV_f0_sync = {|
		enter.y____.x____, 
		entered.y____.x____, 
		exit.y____.x____, 
		exited.y____.x____,
		enter.x____.y____, 
		entered.x____.y____, 
		exit.x____.y____, 
		exited.x____.y____ |
		x____ <- {SID_disableHV_f0},
		y____ <- {SID_disableHV_f0}
	|}
	
	
	disableHV_f0_triggers = {|
	|}
	
	State_disableHV_f0(id__) = let
		State_disableHV_f0_execute(id__,o____) = SKIP; 
			entered!o____!SID_disableHV_f0 ->
			terminate -> SKIP
	within
		enter?x____:diff(SIDS,{SID_disableHV_f0})!SID_disableHV_f0 -> (State_disableHV_f0_execute(id__,x____))
	
	
	I_disableHV_i0(id__) = let
		J_disableHV_j0(id__) = (
					(internal__!TID_disableHV_t0 -> enter!SID_disableHV!SID_disableHV_f0 -> entered!SID_disableHV!SID_disableHV_f0 ->
					SKIP
					)[]
					(internal__!TID_disableHV_t1 -> true & (set_currentState!State_ErrorMode -> SKIP);enter!SID_disableHV!SID_disableHV_f0 -> entered!SID_disableHV!SID_disableHV_f0 ->
					SKIP
					)
					)
		T_disableHV_t2(id__) = internal__!TID_disableHV_t2 -> true&(int_enablePWM.out!false -> SKIP);true & (set_dutyCyclePWM1!real2duty(0) -> SKIP);get_dutyCyclePWM1?dutyCyclePWM1 -> true&(int_dutyCyclePWM1.out!dutyCyclePWM1 -> SKIP);true & (set_HVEnabled!false -> SKIP);true & (set_mSetPoint!0 -> SKIP);J_disableHV_j0(id__)
	within
		T_disableHV_t2(id__)
	
	
	State_disableHV_f0_R(id__) = 
		State_disableHV_f0(id__)
			[|diff(int_int,disableHV_f0_triggers)|]
		SKIP
			 		
		
	STM(id__) = (
		I_disableHV_i0(id__)
			[|
				{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
					x____ <- diff(SIDS,{SID_disableHV_f0}),
					y____ <- {SID_disableHV_f0}
			|}|]
		State_disableHV_f0_R(id__)
	)
	
	-- optimized memory process
	channel getV_arg: core_boolean
	channel getV_HVEnabled: core_boolean
	channel getV_currentState: State
	channel getV_dutyCyclePWM1: duty
	channel getV_mSetPoint: core_real
	
	-- individual memory processes
	Memory_arg(arg) = (
		get_arg!arg -> Memory_arg(arg)
		[]
		getV_arg!arg -> Memory_arg(arg)
		[]
		set_arg?x__ -> Memory_arg(x__)
	)
	Memory_HVEnabled(HVEnabled) = (
		get_HVEnabled!HVEnabled -> Memory_HVEnabled(HVEnabled)
		[]
		getV_HVEnabled!HVEnabled -> Memory_HVEnabled(HVEnabled)
		[]
		set_HVEnabled?x__ -> Memory_HVEnabled(x__)
		[]
		set_EXT_HVEnabled?x__ -> Memory_HVEnabled(x__)
	)
	Memory_currentState(currentState) = (
		get_currentState!currentState -> Memory_currentState(currentState)
		[]
		getV_currentState!currentState -> Memory_currentState(currentState)
		[]
		set_currentState?x__ -> Memory_currentState(x__)
		[]
		set_EXT_currentState?x__ -> Memory_currentState(x__)
	)
	Memory_dutyCyclePWM1(dutyCyclePWM1) = (
		get_dutyCyclePWM1!dutyCyclePWM1 -> Memory_dutyCyclePWM1(dutyCyclePWM1)
		[]
		getV_dutyCyclePWM1!dutyCyclePWM1 -> Memory_dutyCyclePWM1(dutyCyclePWM1)
		[]
		set_dutyCyclePWM1?x__ -> Memory_dutyCyclePWM1(x__)
		[]
		set_EXT_dutyCyclePWM1?x__ -> Memory_dutyCyclePWM1(x__)
	)
	Memory_mSetPoint(mSetPoint) = (
		get_mSetPoint!mSetPoint -> Memory_mSetPoint(mSetPoint)
		[]
		getV_mSetPoint!mSetPoint -> Memory_mSetPoint(mSetPoint)
		[]
		set_mSetPoint?x__ -> Memory_mSetPoint(x__)
		[]
		set_EXT_mSetPoint?x__ -> Memory_mSetPoint(x__)
	)
	
	-- processes that read variables and offer transitions
	MemoryTransitions(id__, arg, HVEnabled, currentState, dutyCyclePWM1, mSetPoint) = 		
	(((arg==false))&(internal__!TID_disableHV_t0 -> SKIP)
	[]
	((arg==true))&(internal__!TID_disableHV_t1 -> SKIP)
	[]
	internal__!TID_disableHV_t2 -> SKIP[]
	set_arg?x__ -> SKIP[]
	set_HVEnabled?x__ -> SKIP[]
	set_EXT_HVEnabled?x__ -> SKIP[]
	set_currentState?x__ -> SKIP[]
	set_EXT_currentState?x__ -> SKIP[]
	set_dutyCyclePWM1?x__ -> SKIP[]
	set_EXT_dutyCyclePWM1?x__ -> SKIP[]
	set_mSetPoint?x__ -> SKIP[]
	set_EXT_mSetPoint?x__ -> SKIP)
	
	MemoryTransitions_disableHV(id__) = (getV_arg?arg ->
	getV_HVEnabled?HVEnabled ->
	getV_currentState?currentState ->
	getV_dutyCyclePWM1?dutyCyclePWM1 ->
	getV_mSetPoint?mSetPoint ->
	MemoryTransitions(id__, arg, HVEnabled, currentState, dutyCyclePWM1, mSetPoint)			
	); MemoryTransitions_disableHV(id__)
			
	
	-- synchronisation, hiding and process sets 
	MemoryVariablesProcesses_disableHV = Union(
		{
			{
				(Memory_arg(true),{|get_arg,set_arg,getV_arg|}),
				(Memory_HVEnabled(true),{|get_HVEnabled,set_HVEnabled,set_EXT_HVEnabled,getV_HVEnabled|}),
				(Memory_currentState(State_Wait24Vpower),{|getV_currentState,set_EXT_currentState,get_currentState,set_currentState|}),
				(Memory_dutyCyclePWM1(0),{|set_dutyCyclePWM1,getV_dutyCyclePWM1,get_dutyCyclePWM1,set_EXT_dutyCyclePWM1|}),
				(Memory_mSetPoint(0),{|get_mSetPoint,set_mSetPoint,getV_mSetPoint,set_EXT_mSetPoint|})
			}
		}
	)
	
	MemoryVariablesSyncSet = Union({
		{|
			getV_currentState,
			set_EXT_currentState,
			set_mSetPoint,
			set_EXT_mSetPoint,
			set_arg,
			set_currentState,
			set_dutyCyclePWM1,
			getV_dutyCyclePWM1,
			getV_mSetPoint,
			set_HVEnabled,
			set_EXT_HVEnabled,
			set_EXT_dutyCyclePWM1,
			getV_HVEnabled,
			getV_arg
		|}	
	})
	
	MemoryVariablesHideSet = Union({
		{|
			getV_currentState,
			getV_dutyCyclePWM1,
			getV_mSetPoint,
			getV_HVEnabled,
			getV_arg
		|}
	})
	
	-- combined individual memory processes
	MemoryVariables = ||| (P, alpha) : MemoryVariablesProcesses_disableHV @ P
	
	-- complete memory process	
	MemoryN(id__) = sbisim(diamond((sbisim(diamond(MemoryVariables)) [| MemoryVariablesSyncSet |] sbisim(diamond(MemoryTransitions_disableHV(id__)))) \ MemoryVariablesHideSet))
	
	-- optimised memory
	-- Sets of named elements identified according to transition conditions:
	-- {}
	-- {OP_disableHV::arg}
	-- Summary of all identified named elements:
	-- {
	-- OP_disableHV::currentState
	-- OP_disableHV::HVEnabled
	-- OP_disableHV::arg
	-- OP_disableHV::dutyCyclePWM1
	-- OP_disableHV::mSetPoint
	-- }
	
	-- Allocation plan:
	-- 0:{}
	--	=> {
	--		TID_disableHV_t2}
	-- 1:{OP_disableHV::arg}
	--	=> {
	--		TID_disableHV_t0,
	--		TID_disableHV_t1}
	
	-- Memory transition processes
	MemoryTransitions_opt_0(id__) =
	(
		let
			Update = Current(id__)
			Current(id__)
			 	   = 
			 	   internal__!TID_disableHV_t2 -> Update
		within
			Update
	)
	MemoryTransitions_opt_1(id__) =
	(
		let
			Update = 
			get_arg?arg ->
			Current(id__,
				 arg)
			Current(id__,
				 arg)
			 	   = 
			 	   ((arg==false))&(internal__!TID_disableHV_t0 -> Update)
			 	   []
			 	   ((arg==true))&(internal__!TID_disableHV_t1 -> Update)
			 	   	 
			 	   	 []
			 	   	 set_arg?x__ -> Update
		within
			Update
	)
	
	-- Memory cell processes
	Memory_opt_currentState(x__) = ( 
		get_currentState!x__ -> Memory_opt_currentState(x__)
		[]
		set_currentState?x__ -> Memory_opt_currentState(x__)
		[]
		set_EXT_currentState?x__ -> Memory_opt_currentState(x__)
	)
	Memory_opt_HVEnabled(x__) = ( 
		get_HVEnabled!x__ -> Memory_opt_HVEnabled(x__)
		[]
		set_HVEnabled?x__ -> Memory_opt_HVEnabled(x__)
		[]
		set_EXT_HVEnabled?x__ -> Memory_opt_HVEnabled(x__)
	)
	Memory_opt_arg(x__) = ( 
		get_arg!x__ -> Memory_opt_arg(x__)
		[]
		set_arg?x__ -> Memory_opt_arg(x__)
	)
	Memory_opt_dutyCyclePWM1(x__) = ( 
		get_dutyCyclePWM1!x__ -> Memory_opt_dutyCyclePWM1(x__)
		[]
		set_dutyCyclePWM1?x__ -> Memory_opt_dutyCyclePWM1(x__)
		[]
		set_EXT_dutyCyclePWM1?x__ -> Memory_opt_dutyCyclePWM1(x__)
	)
	Memory_opt_mSetPoint(x__) = ( 
		get_mSetPoint!x__ -> Memory_opt_mSetPoint(x__)
		[]
		set_mSetPoint?x__ -> Memory_opt_mSetPoint(x__)
		[]
		set_EXT_mSetPoint?x__ -> Memory_opt_mSetPoint(x__)
	)
	
	-- Composition of memory, StateMachine and Memory transition processes
	
	MemorySTM_opt(id__, arg) =
		dbisim(
		  sbisim(Memory_opt_arg(true)
		      	[| {|get_arg,set_arg|} |] 
		      	sbisim(	
		      	  dbisim(
		      	    sbisim(sbisim(	
		      	      dbisim(
		      	        sbisim(dbisim(sbisim(Memory_opt_currentState(State_Wait24Vpower)
		      	              	[| {|get_currentState,set_currentState|} |] 
		      	              	dbisim(sbisim(Memory_opt_HVEnabled(true)
		      	              	      	[| {|set_HVEnabled,get_HVEnabled|} |] 
		      	              	      	dbisim(sbisim(Memory_opt_dutyCyclePWM1(0)
		      	              	      	      	[| {|set_dutyCyclePWM1,get_dutyCyclePWM1|} |] 
		      	              	      	      	dbisim(sbisim(Memory_opt_mSetPoint(0)
		      	              	      	      	      	[| {|set_mSetPoint,get_mSetPoint|} |] 
		      	              	      	      	      	STM_core(id__, arg)
		      	              	      	      	      	)\ {|get_mSetPoint|}
		      	              	      	      	      )
		      	              	      	      	)\ {|get_dutyCyclePWM1|}
		      	              	      	      )
		      	              	      	)\ {|get_HVEnabled|}
		      	              	      )
		      	              	)\ {|get_currentState|}
		      	              )
		      	          	  [| {|internal__.TID_disableHV_t2|} |]
		      	          	  MemoryTransitions_opt_0(id__)
		      	          	  )\{|internal__.TID_disableHV_t2|})
		      	          )
		      	      	  [| {|internal__.TID_disableHV_t0,internal__.TID_disableHV_t1,set_arg|} |]
		      	      	  MemoryTransitions_opt_1(id__)
		      	      	  )\{|internal__.TID_disableHV_t0,internal__.TID_disableHV_t1|})
		      	      )
		      	) \ {|get_arg,set_arg|}
		      )
	
	-- main process
	
	MachineMemorySyncSet = Union({
		union(
			union(
				{|get_arg,set_arg|},
				{||}
			)
				
			,
			{|internal__.TID_disableHV_t0,
			internal__.TID_disableHV_t1,
			internal__.TID_disableHV_t2|}
		)
	})
	
	MachineMemoryHidingSet = Union({
		union(
			{|get_arg,set_arg|},
			{||}
		)
	})
	
	MachineInternalEvents = {|
		internal__
	|}
	AUX(id__, arg) = (
		(
			set_arg!arg -> STM(id__)
				[|MachineMemorySyncSet|]
			sbisim(diamond(MemoryN(id__)))
		)[[
			int_enablePWM__.x____ <- int_enablePWM,
			int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
			| x____ <- TIDS
		]]
		\MachineMemoryHidingSet
	)
	[|{|terminate|}|>SKIP\MachineInternalEvents	
	
	STM_core(id__, arg) = 
		(set_arg!arg -> STM(id__)
		)
		
	AUX_opt(id__, arg) = 
		(MemorySTM_opt(id__, arg)
		)[[
			int_enablePWM__.x____ <- int_enablePWM,
			int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
			| x____ <- TIDS
		]]
		[|{|terminate|}|>SKIP\MachineInternalEvents	
	
exports
	-- flow channels
	channel internal__ : TIDS
	channel enteredV, enterV, exitV, exitedV : SIDS
	channel enter, entered: SIDS.SIDS
	channel exit,exited: SIDS.SIDS
	channel terminate
	
	-- variable channels
	channel get_arg, set_arg: core_boolean
	channel get_HVEnabled, set_HVEnabled: core_boolean
	channel get_currentState, set_currentState: State
	channel get_dutyCyclePWM1, set_dutyCyclePWM1: duty
	channel get_mSetPoint, set_mSetPoint: core_real
			
	-- shared variable channels
	channel set_EXT_HVEnabled: core_boolean
	channel set_EXT_currentState: State
	channel set_EXT_dutyCyclePWM1: duty
	channel set_EXT_mSetPoint: core_real
	
	-- local variable channels for defined operations that are required by the state machine
	
	-- declaring state machine events
	channel int_enablePWM__: TIDS.InOut.core_boolean
	channel int_enablePWM: InOut.core_boolean
	channel int_dutyCyclePWM1__: TIDS.InOut.duty
	channel int_dutyCyclePWM1: InOut.duty
	
	-- declaring call and ret events for undefined operations
	
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
	FVS__(id__, arg) = AUX_opt(id__, arg) \ {|terminate|}
	
	-- original process using the unoptimised memory model
	Dunopt__(id__, arg) = (AUX(id__, arg) \ internal_events) \ {|terminate|}
	
	D__(id__, arg) = (AUX_opt(id__, arg) \ internal_events) \ {|terminate|}
	
	O__(id__, arg) = sbisim(diamond(D__(id__, arg)))
	VS__(id__, arg) = ShowV(FVS__(id__, arg))
	VS_O__(id__, arg) = sbisim(diamond(VS__(id__, arg)))
endmodule
