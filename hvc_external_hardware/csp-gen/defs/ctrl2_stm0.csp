module ctrl2_stm0
exports
	-- flow channels
	channel internal__ : TIDS
	channel enteredV, enterV, exitV, exitedV : SIDS
	channel enter, entered: SIDS.SIDS
	channel exit,exited: SIDS.SIDS
	channel terminate
	
	-- variable channels
	channel get_power, set_power: Power
	channel get_fresh, set_fresh: core_boolean
			
	-- shared variable channels
	
	-- local variable channels for defined operations that are required by the state machine
	
	-- declaring state machine events
	channel ext_pow24VStatus__: TIDS.InOut.Power
	channel ext_pow24VStatus: InOut.Power
	channel ext_pow24_1__: TIDS.InOut.Power
	channel ext_pow24_1: InOut.Power
	channel ext_pow24_2__: TIDS.InOut.Power
	channel ext_pow24_2: InOut.Power
	
	-- declaring call and ret events for undefined operations
	
	-- Only the undefined operations are declared here.
	-- If the state machine is in isolation, all required operations will be undefined.
	-- If it is in the context of a controller, the required operations not provided by the
	-- controller will be declared here, and the defined operations will be defined in the
	-- context of the Controller module, and therefore within scope of the state machien module.
	
	
	-- definition of functions used to expose flow channels
	ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
					   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
					   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
					   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
						 
	ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
				[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
				[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	
	-- declaring identifiers of state and final states
	datatype SIDS = SID_stm0
	              | SID_stm0_s0
	              | SID_stm0_s0_s0
	
	-- declaring identifiers of transitions
	datatype TIDS = NULLTRANSITION__
	              | TID_stm0_s0_t0
	              | TID_stm0_t0
	              | TID_stm0_t1
	
	-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
	
	ITIDS = {
		TID_stm0_t1
	}
	
	int_int = {|
		ext_pow24VStatus__.TID_stm0_t1,
		ext_pow24_1__.TID_stm0_t1,
		ext_pow24_2__.TID_stm0_t1,
		internal__.TID_stm0_t1
	|}
		
	
	internal_events = {|enter,entered,exit,exited|}
	shared_variable_events = {|
	|}
			
	
	-- declaring all states
	CS_stm0_s0_sync = {|
		enter.y____.x____, 
		entered.y____.x____, 
		exit.y____.x____, 
		exited.y____.x____,
		enter.x____.y____, 
		entered.x____.y____, 
		exit.x____.y____, 
		exited.x____.y____ |
		x____ <- {SID_stm0_s0},
		y____ <- {SID_stm0_s0}
	|}
	
	stm0_s0_int_int = {|
	|}
		
	
	stm0_s0_int_triggers = {|
		internal__.TID_stm0_s0_t0
	|}
	
	State_stm0_s0_s0_R(id__) = 
		State_stm0_s0_s0(id__)
	 		[|diff(stm0_s0_int_int,stm0_s0_s0_triggers)|]
	 	SKIP
	 		
	State_stm0_s0(id__) = (
		State_stm0_s0_aux(id__)
			[|
				union(
					diff(int_int, stm0_s0_int_triggers),
					{|enter.x____.y____,
					  entered.x____.y____,
					  exit.x____.y____,
					  exited.x____.y____ |
					  x____ <- diff(SIDS,{SID_stm0_s0_s0}),
					  y____ <- {SID_stm0_s0_s0}
				    |}
				)
			|]
		State_stm0_s0_s0_R(id__)
	)
	
	stm0_s0_triggers = {|
		internal__.TID_stm0_s0_t0,
		internal__.TID_stm0_t1
	|}
	
	State_stm0_s0_aux(id__) = let
		T_stm0_t1(id__) = internal__!TID_stm0_t1 ->  exit.SID_stm0_s0.SID_stm0_s0 -> SKIP;
							exit!SID_stm0_s0?z____:{SID_stm0_s0_s0} -> exited!SID_stm0_s0!z____ -> 
									SKIP;
							SKIP;exited.SID_stm0_s0.SID_stm0_s0 -> SKIP;
							enter!SID_stm0_s0!SID_stm0_s0 -> State_stm0_s0_aux_execute(id__,SID_stm0_s0)
		State_stm0_s0_aux_execute(id__,o____) = true&(ext_pow24VStatus.in?power -> set_power!power -> SKIP);true & (set_fresh!true -> SKIP); 
		I_stm0_s0_i0(id__);
			entered!o____!SID_stm0_s0 ->
			(get_power?power -> true&(ext_pow24_1.out!power -> SKIP);true & (set_fresh!false -> SKIP); STOP /\ (
				T_stm0_t1(id__)
				[]
				internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_stm0_s0_t0,TID_stm0_t1}) -> exit?y____:diff(SIDS,{SID_stm0_s0})!SID_stm0_s0 -> (
						exit!SID_stm0_s0?z____:{SID_stm0_s0_s0} -> exited!SID_stm0_s0!z____ -> 
								SKIP;
						SKIP;
						exited!y____!SID_stm0_s0 -> SKIP);
						State_stm0_s0_aux(id__)
				[] ext_pow24VStatus__?x____:diff(ITIDS,{NULLTRANSITION__,TID_stm0_s0_t0,TID_stm0_t1})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_stm0_s0})!SID_stm0_s0 -> (
						exit!SID_stm0_s0?z____:{SID_stm0_s0_s0} -> exited!SID_stm0_s0!z____ -> 
								SKIP;
						SKIP;
						exited!y____!SID_stm0_s0 -> SKIP);
						State_stm0_s0_aux(id__)
				[] ext_pow24_1__?x____:diff(ITIDS,{NULLTRANSITION__,TID_stm0_s0_t0,TID_stm0_t1})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_stm0_s0})!SID_stm0_s0 -> (
						exit!SID_stm0_s0?z____:{SID_stm0_s0_s0} -> exited!SID_stm0_s0!z____ -> 
								SKIP;
						SKIP;
						exited!y____!SID_stm0_s0 -> SKIP);
						State_stm0_s0_aux(id__)
				[] ext_pow24_2__?x____:diff(ITIDS,{NULLTRANSITION__,TID_stm0_s0_t0,TID_stm0_t1})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_stm0_s0})!SID_stm0_s0 -> (
						exit!SID_stm0_s0?z____:{SID_stm0_s0_s0} -> exited!SID_stm0_s0!z____ -> 
								SKIP;
						SKIP;
						exited!y____!SID_stm0_s0 -> SKIP);
						State_stm0_s0_aux(id__)
			))
	within
		enter?x____:diff(SIDS,{SID_stm0_s0})!SID_stm0_s0 -> (State_stm0_s0_aux_execute(id__,x____))
	
	CS_stm0_s0_s0_sync = {|
		enter.y____.x____, 
		entered.y____.x____, 
		exit.y____.x____, 
		exited.y____.x____,
		enter.x____.y____, 
		entered.x____.y____, 
		exit.x____.y____, 
		exited.x____.y____ |
		x____ <- {SID_stm0_s0_s0},
		y____ <- {SID_stm0_s0_s0}
	|}
	
	
	stm0_s0_s0_triggers = {|
	|}
	
	State_stm0_s0_s0(id__) = let
		State_stm0_s0_s0_execute(id__,o____) = SKIP; 
			entered!o____!SID_stm0_s0_s0 ->
			(get_power?power -> true&(ext_pow24_2.out!power -> SKIP);true & (set_fresh!false -> SKIP); STOP /\ (
				internal__?x____:diff(ITIDS,{NULLTRANSITION__}) -> exit?y____:diff(SIDS,{SID_stm0_s0_s0})!SID_stm0_s0_s0 -> (
						SKIP;
						exited!y____!SID_stm0_s0_s0 -> SKIP);
						State_stm0_s0_s0(id__)
				[] ext_pow24VStatus__?x____:diff(ITIDS,{NULLTRANSITION__})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_stm0_s0_s0})!SID_stm0_s0_s0 -> (
						SKIP;
						exited!y____!SID_stm0_s0_s0 -> SKIP);
						State_stm0_s0_s0(id__)
				[] ext_pow24_1__?x____:diff(ITIDS,{NULLTRANSITION__})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_stm0_s0_s0})!SID_stm0_s0_s0 -> (
						SKIP;
						exited!y____!SID_stm0_s0_s0 -> SKIP);
						State_stm0_s0_s0(id__)
				[] ext_pow24_2__?x____:diff(ITIDS,{NULLTRANSITION__})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_stm0_s0_s0})!SID_stm0_s0_s0 -> (
						SKIP;
						exited!y____!SID_stm0_s0_s0 -> SKIP);
						State_stm0_s0_s0(id__)
			))
	within
		enter?x____:diff(SIDS,{SID_stm0_s0_s0})!SID_stm0_s0_s0 -> (State_stm0_s0_s0_execute(id__,x____))
	
	
	I_stm0_i0(id__) = let
		T_stm0_t0(id__) = internal__!TID_stm0_t0 -> enter!SID_stm0!SID_stm0_s0 -> entered!SID_stm0!SID_stm0_s0 ->
		SKIP
	within
		T_stm0_t0(id__)
	
	I_stm0_s0_i0(id__) = let
		T_stm0_s0_t0(id__) = internal__!TID_stm0_s0_t0 -> enter!SID_stm0_s0!SID_stm0_s0_s0 -> entered!SID_stm0_s0!SID_stm0_s0_s0 ->
		SKIP
	within
		T_stm0_s0_t0(id__)
	
	
	State_stm0_s0_R(id__) = 
		State_stm0_s0(id__)
			[|diff(int_int,stm0_s0_triggers)|]
		SKIP
			 		
		
	STM(id__) = (
		I_stm0_i0(id__)
			[|
				{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
					x____ <- diff(SIDS,{SID_stm0_s0}),
					y____ <- {SID_stm0_s0}
			|}|]
		State_stm0_s0_R(id__)
	)
	
	-- optimized memory process
	channel getV_power: Power
	channel getV_fresh: core_boolean
	
	-- individual memory processes
	Memory_power(power) = (
		get_power!power -> Memory_power(power)
		[]
		getV_power!power -> Memory_power(power)
		[]
		set_power?x__ -> Memory_power(x__)
	)
	Memory_fresh(fresh) = (
		get_fresh!fresh -> Memory_fresh(fresh)
		[]
		getV_fresh!fresh -> Memory_fresh(fresh)
		[]
		set_fresh?x__ -> Memory_fresh(x__)
	)
	
	-- processes that read variables and offer transitions
	MemoryTransitions(id__, power, fresh) = 		
	(internal__!TID_stm0_s0_t0 -> SKIP
	[]
	internal__!TID_stm0_t0 -> SKIP
	[]
	((fresh==false))&(internal__!TID_stm0_t1 -> SKIP)[]
	set_power?x__ -> SKIP[]
	set_fresh?x__ -> SKIP)
	
	MemoryTransitions_stm0(id__) = (getV_power?power ->
	getV_fresh?fresh ->
	MemoryTransitions(id__, power, fresh)			
	); MemoryTransitions_stm0(id__)
			
	
	-- synchronisation, hiding and process sets 
	MemoryVariablesProcesses_stm0 = Union(
		{
			{
				(Memory_power(Power_On),{|get_power,getV_power,set_power|}),
				(Memory_fresh(true),{|get_fresh,getV_fresh,set_fresh|})
			}
		}
	)
	
	MemoryVariablesSyncSet = Union({
		{|
			getV_power,
			getV_fresh,
			set_fresh,
			set_power
		|}	
	})
	
	MemoryVariablesHideSet = Union({
		{|
			getV_power,
			getV_fresh
		|}
	})
	
	-- combined individual memory processes
	MemoryVariables = ||| (P, alpha) : MemoryVariablesProcesses_stm0 @ P
	
	-- complete memory process	
	MemoryN(id__) = sbisim(diamond((sbisim(diamond(MemoryVariables)) [| MemoryVariablesSyncSet |] sbisim(diamond(MemoryTransitions_stm0(id__)))) \ MemoryVariablesHideSet))
	
	-- optimised memory
	-- Sets of named elements identified according to transition conditions:
	-- {}
	-- {fresh}
	-- Summary of all identified named elements:
	-- {
	-- fresh
	-- power
	-- }
	
	-- Allocation plan:
	-- 0:{}
	--	=> {
	--		TID_stm0_s0_t0,
	--		TID_stm0_t0}
	-- 1:{fresh}
	--	=> {
	--		TID_stm0_t1}
	
	-- Memory transition processes
	MemoryTransitions_opt_0(id__) =
	(
		let
			Update = Current(id__)
			Current(id__)
			 	   = 
			 	   internal__!TID_stm0_s0_t0 -> Update
			 	   []
			 	   internal__!TID_stm0_t0 -> Update
		within
			Update
	)
	MemoryTransitions_opt_1(id__) =
	(
		let
			Update = 
			get_fresh?fresh ->
			Current(id__,
				 fresh)
			Current(id__,
				 fresh)
			 	   = 
			 	   ((fresh==false))&(internal__!TID_stm0_t1 -> Update)
			 	   	 
			 	   	 []
			 	   	 set_fresh?x__ -> Update
		within
			Update
	)
	
	-- Memory cell processes
	Memory_opt_fresh(x__) = ( 
		get_fresh!x__ -> Memory_opt_fresh(x__)
		[]
		set_fresh?x__ -> Memory_opt_fresh(x__)
	)
	Memory_opt_power(x__) = ( 
		get_power!x__ -> Memory_opt_power(x__)
		[]
		set_power?x__ -> Memory_opt_power(x__)
	)
	
	-- Composition of memory, StateMachine and Memory transition processes
	
	MemorySTM_opt(id__) =
		dbisim(
		  sbisim(Memory_opt_fresh(true)
		      	[| {|get_fresh,set_fresh|} |] 
		      	sbisim(	
		      	  dbisim(
		      	    sbisim(sbisim(	
		      	      dbisim(
		      	        sbisim(dbisim(sbisim(Memory_opt_power(Power_On)
		      	              	[| {|get_power,set_power|} |] 
		      	              	STM_core(id__)
		      	              	)\ {|get_power,set_power|}
		      	              )
		      	          	  [| {|internal__.TID_stm0_s0_t0,internal__.TID_stm0_t0|} |]
		      	          	  MemoryTransitions_opt_0(id__)
		      	          	  )\{|internal__.TID_stm0_s0_t0,internal__.TID_stm0_t0|})
		      	          )
		      	      	  [| {|internal__.TID_stm0_t1,set_fresh|} |]
		      	      	  MemoryTransitions_opt_1(id__)
		      	      	  )\{|internal__.TID_stm0_t1|})
		      	      )
		      	) \ {|get_fresh,set_fresh|}
		      )
	
	-- main process
	
	MachineMemorySyncSet = Union({
		union(
			union(
				{|get_power,set_power,
				get_fresh,set_fresh|},
				{||}
			)
				
			,
			{|internal__.TID_stm0_s0_t0,
			internal__.TID_stm0_t0,
			internal__.TID_stm0_t1|}
		)
	})
	
	MachineMemoryHidingSet = Union({
		union(
			{|get_power,set_power,
			get_fresh,set_fresh|},
			{||}
		)
	})
	
	MachineInternalEvents = {|
		internal__
	|}
	
	AUX(id__) = (
		(
			STM(id__)
				[|MachineMemorySyncSet|]
			sbisim(diamond(MemoryN(id__)))
		)[[
			ext_pow24VStatus__.x____ <- ext_pow24VStatus,
			ext_pow24_1__.x____ <- ext_pow24_1,
			ext_pow24_2__.x____ <- ext_pow24_2
			| x____ <- TIDS
		]]
		\MachineMemoryHidingSet
	)
	[|{|terminate|}|>SKIP\MachineInternalEvents
	
	
	STM_core(id__) = 
		sbisim(diamond(STM(id__)))
		
	AUX_opt(id__) = 
		(MemorySTM_opt(id__)
		)[[
			ext_pow24VStatus__.x____ <- ext_pow24VStatus,
			ext_pow24_1__.x____ <- ext_pow24_1,
			ext_pow24_2__.x____ <- ext_pow24_2
			| x____ <- TIDS
		]]
		[|{|terminate|}|>SKIP\MachineInternalEvents

	-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase
			
	FVS__(id__) = AUX_opt(id__)
	Dunopt__(id__) = AUX(id__) \ internal_events
	D__(id__) = AUX_opt(id__) \ internal_events
	O__(id__) = sbisim(diamond(D__(id__)))
	VS__(id__) = ShowV(FVS__(id__))
	VS_O__(id__) = sbisim(diamond(VS__(id__)))
	HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP	
endmodule
