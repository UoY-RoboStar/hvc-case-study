module Watchdog
exports
	-- flow channels
	channel internal__ : TIDS
	channel enteredV, enterV, exitV, exitedV : SIDS
	channel enter, entered: SIDS.SIDS
	channel exit,exited: SIDS.SIDS
	channel terminate
	
	-- variable channels
	channel get_HVEnabled, set_HVEnabled: core_boolean
	channel get_pow24VStatus, set_pow24VStatus: Power
	channel get_currentState, set_currentState: State
	channel get_overLimit, set_overLimit: core_real
	channel get_underLimit, set_underLimit: core_real
	channel get_mSetPoint, set_mSetPoint: core_real
	channel get_dutyCyclePWM1, set_dutyCyclePWM1: duty
			
	-- shared variable channels
	channel set_EXT_HVEnabled: core_boolean
	channel set_EXT_pow24VStatus: Power
	channel set_EXT_currentState: State
	channel set_EXT_overLimit: core_real
	channel set_EXT_underLimit: core_real
	channel set_EXT_mSetPoint: core_real
	channel set_EXT_dutyCyclePWM1: duty
	
	-- local variable channels for defined operations that are required by the state machine
	
	-- declaring state machine events
	channel ext_pow24VStatus__: TIDS.InOut.Power
	channel ext_pow24VStatus: InOut.Power
	channel int_dutyCyclePWM1__: TIDS.InOut.duty
	channel int_dutyCyclePWM1: InOut.duty
	channel int_enablePWM__: TIDS.InOut.core_boolean
	channel int_enablePWM: InOut.core_boolean
	
	-- declaring call and ret events for undefined operations
	channel supplyVoltCheckCall
	channel AdjustLimitsCall
	
	-- Only the undefined operations are declared here.
	-- If the state machine is in isolation, all required operations will be undefined.
	-- If it is in the context of a controller, the required operations not provided by the
	-- controller will be declared here, and the defined operations will be defined in the
	-- context of the Controller module, and therefore within scope of the state machien module.
	CALL__supplyVoltCheck(id__) =  supplyVoltCheckCall -> SKIP
	
	CALL__AdjustLimits(id__) =  AdjustLimitsCall -> SKIP
	
	
	
	-- definition of functions used to expose flow channels
	ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
					   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
					   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
					   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
						 
	ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
				[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
				[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	
	-- declaring identifiers of state and final states
	datatype SIDS = SID_Watchdog
	              | SID_Watchdog_s1
	              | SID_Watchdog_s0
	
	-- declaring identifiers of transitions
	datatype TIDS = NULLTRANSITION__
	              | TID_Watchdog_t2
	              | TID_Watchdog_t1
	              | TID_Watchdog_t0
	
	-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
	
	ITIDS = {
		TID_Watchdog_t1,	TID_Watchdog_t0
	}
	
	int_int = {|
		ext_pow24VStatus__.TID_Watchdog_t1,
		int_dutyCyclePWM1__.TID_Watchdog_t1,
		int_enablePWM__.TID_Watchdog_t1,
		internal__.TID_Watchdog_t1,
		ext_pow24VStatus__.TID_Watchdog_t0,
		int_dutyCyclePWM1__.TID_Watchdog_t0,
		int_enablePWM__.TID_Watchdog_t0,
		internal__.TID_Watchdog_t0
	|}
		
	
	internal_events = {|enter,entered,exit,exited|}
	shared_variable_events = {|
		set_EXT_HVEnabled,
		set_EXT_pow24VStatus,
		set_EXT_currentState,
		set_EXT_overLimit,
		set_EXT_underLimit,
		set_EXT_mSetPoint,
		set_EXT_dutyCyclePWM1
	|}
			
	
	-- declaring all states
	CS_Watchdog_s1_sync = {|
		enter.y____.x____, 
		entered.y____.x____, 
		exit.y____.x____, 
		exited.y____.x____,
		enter.x____.y____, 
		entered.x____.y____, 
		exit.x____.y____, 
		exited.x____.y____ |
		x____ <- {SID_Watchdog_s1,SID_Watchdog_s0},
		y____ <- {SID_Watchdog_s1}
	|}
	
	
	Watchdog_s1_triggers = {|
		internal__.TID_Watchdog_t1,
		internal__.TID_Watchdog_t0
	|}
	
	State_Watchdog_s1(id__) = let
		T_Watchdog_t1(id__) = internal__!TID_Watchdog_t1 ->  exit.SID_Watchdog_s1.SID_Watchdog_s1 -> SKIP;
							SKIP;exited.SID_Watchdog_s1.SID_Watchdog_s1 -> SKIP;
							SKIP;enter!SID_Watchdog_s1!SID_Watchdog_s0 -> entered!SID_Watchdog_s1!SID_Watchdog_s0 ->
							State_Watchdog_s1(id__)
		State_Watchdog_s1_execute(id__,o____) = true&CALL__supplyVoltCheck(
					id__
				); 
			entered!o____!SID_Watchdog_s1 ->
			(SKIP; STOP /\ (
				T_Watchdog_t1(id__)
				[]
				internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Watchdog_t1,TID_Watchdog_t0}) -> exit?y____:diff(SIDS,{SID_Watchdog_s1})!SID_Watchdog_s1 -> (
						SKIP;
						exited!y____!SID_Watchdog_s1 -> SKIP);
						State_Watchdog_s1(id__)
				[] ext_pow24VStatus__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Watchdog_t1,TID_Watchdog_t0})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_Watchdog_s1})!SID_Watchdog_s1 -> (
						SKIP;
						exited!y____!SID_Watchdog_s1 -> SKIP);
						State_Watchdog_s1(id__)
				[] int_dutyCyclePWM1__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Watchdog_t1,TID_Watchdog_t0})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_Watchdog_s1})!SID_Watchdog_s1 -> (
						SKIP;
						exited!y____!SID_Watchdog_s1 -> SKIP);
						State_Watchdog_s1(id__)
				[] int_enablePWM__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Watchdog_t1,TID_Watchdog_t0})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_Watchdog_s1})!SID_Watchdog_s1 -> (
						SKIP;
						exited!y____!SID_Watchdog_s1 -> SKIP);
						State_Watchdog_s1(id__)
			))
	within
		enter?x____:diff(SIDS,{SID_Watchdog_s1})!SID_Watchdog_s1 -> (State_Watchdog_s1_execute(id__,x____))
	
	CS_Watchdog_s0_sync = {|
		enter.y____.x____, 
		entered.y____.x____, 
		exit.y____.x____, 
		exited.y____.x____,
		enter.x____.y____, 
		entered.x____.y____, 
		exit.x____.y____, 
		exited.x____.y____ |
		x____ <- {SID_Watchdog_s1,SID_Watchdog_s0},
		y____ <- {SID_Watchdog_s0}
	|}
	
	
	Watchdog_s0_triggers = {|
		internal__.TID_Watchdog_t1,
		internal__.TID_Watchdog_t0
	|}
	
	State_Watchdog_s0(id__) = let
		T_Watchdog_t0(id__) = internal__!TID_Watchdog_t0 ->  exit.SID_Watchdog_s0.SID_Watchdog_s0 -> SKIP;
							SKIP;exited.SID_Watchdog_s0.SID_Watchdog_s0 -> SKIP;
							SKIP;enter!SID_Watchdog_s0!SID_Watchdog_s1 -> entered!SID_Watchdog_s0!SID_Watchdog_s1 ->
							State_Watchdog_s0(id__)
		State_Watchdog_s0_execute(id__,o____) = true&CALL__AdjustLimits(
					id__
				); 
			entered!o____!SID_Watchdog_s0 ->
			(SKIP; STOP /\ (
				T_Watchdog_t0(id__)
				[]
				internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Watchdog_t1,TID_Watchdog_t0}) -> exit?y____:diff(SIDS,{SID_Watchdog_s0})!SID_Watchdog_s0 -> (
						SKIP;
						exited!y____!SID_Watchdog_s0 -> SKIP);
						State_Watchdog_s0(id__)
				[] ext_pow24VStatus__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Watchdog_t1,TID_Watchdog_t0})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_Watchdog_s0})!SID_Watchdog_s0 -> (
						SKIP;
						exited!y____!SID_Watchdog_s0 -> SKIP);
						State_Watchdog_s0(id__)
				[] int_dutyCyclePWM1__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Watchdog_t1,TID_Watchdog_t0})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_Watchdog_s0})!SID_Watchdog_s0 -> (
						SKIP;
						exited!y____!SID_Watchdog_s0 -> SKIP);
						State_Watchdog_s0(id__)
				[] int_enablePWM__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Watchdog_t1,TID_Watchdog_t0})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_Watchdog_s0})!SID_Watchdog_s0 -> (
						SKIP;
						exited!y____!SID_Watchdog_s0 -> SKIP);
						State_Watchdog_s0(id__)
			))
	within
		enter?x____:diff(SIDS,{SID_Watchdog_s0})!SID_Watchdog_s0 -> (State_Watchdog_s0_execute(id__,x____))
	
	
	I_Watchdog_i1(id__) = let
		T_Watchdog_t2(id__) = internal__!TID_Watchdog_t2 -> SKIP;enter!SID_Watchdog!SID_Watchdog_s0 -> entered!SID_Watchdog!SID_Watchdog_s0 ->
		SKIP
	within
		T_Watchdog_t2(id__)
	
	
	State_Watchdog_s1_R(id__) = 
		State_Watchdog_s1(id__)
			[|diff(int_int,Watchdog_s1_triggers)|]
		SKIP
			 		
	State_Watchdog_s0_R(id__) = 
		State_Watchdog_s0(id__)
			[|diff(int_int,Watchdog_s0_triggers)|]
		SKIP
			 		
		
	STM(id__) = (
		I_Watchdog_i1(id__)
			[|
				{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
					x____ <- diff(SIDS,{SID_Watchdog_s1,SID_Watchdog_s0}),
					y____ <- {SID_Watchdog_s1,SID_Watchdog_s0}
			|}|]
		(
			State_Watchdog_s1_R(id__)
				[|inter(CS_Watchdog_s1_sync,CS_Watchdog_s0_sync)|]
			State_Watchdog_s0_R(id__)
		)
	)
	
	-- optimized memory process
	channel getV_HVEnabled: core_boolean
	channel getV_pow24VStatus: Power
	channel getV_currentState: State
	channel getV_overLimit: core_real
	channel getV_underLimit: core_real
	channel getV_mSetPoint: core_real
	channel getV_dutyCyclePWM1: duty
	
	-- individual memory processes
	Memory_HVEnabled(HVEnabled) = (
		get_HVEnabled!HVEnabled -> Memory_HVEnabled(HVEnabled)
		[]
		getV_HVEnabled!HVEnabled -> Memory_HVEnabled(HVEnabled)
		[]
		set_HVEnabled?x__ -> Memory_HVEnabled(x__)
		[]
		set_EXT_HVEnabled?x__ -> Memory_HVEnabled(x__)
	)
	Memory_pow24VStatus(pow24VStatus) = (
		get_pow24VStatus!pow24VStatus -> Memory_pow24VStatus(pow24VStatus)
		[]
		getV_pow24VStatus!pow24VStatus -> Memory_pow24VStatus(pow24VStatus)
		[]
		set_pow24VStatus?x__ -> Memory_pow24VStatus(x__)
		[]
		set_EXT_pow24VStatus?x__ -> Memory_pow24VStatus(x__)
	)
	Memory_currentState(currentState) = (
		get_currentState!currentState -> Memory_currentState(currentState)
		[]
		getV_currentState!currentState -> Memory_currentState(currentState)
		[]
		set_currentState?x__ -> Memory_currentState(x__)
		[]
		set_EXT_currentState?x__ -> Memory_currentState(x__)
	)
	Memory_overLimit(overLimit) = (
		get_overLimit!overLimit -> Memory_overLimit(overLimit)
		[]
		getV_overLimit!overLimit -> Memory_overLimit(overLimit)
		[]
		set_overLimit?x__ -> Memory_overLimit(x__)
		[]
		set_EXT_overLimit?x__ -> Memory_overLimit(x__)
	)
	Memory_underLimit(underLimit) = (
		get_underLimit!underLimit -> Memory_underLimit(underLimit)
		[]
		getV_underLimit!underLimit -> Memory_underLimit(underLimit)
		[]
		set_underLimit?x__ -> Memory_underLimit(x__)
		[]
		set_EXT_underLimit?x__ -> Memory_underLimit(x__)
	)
	Memory_mSetPoint(mSetPoint) = (
		get_mSetPoint!mSetPoint -> Memory_mSetPoint(mSetPoint)
		[]
		getV_mSetPoint!mSetPoint -> Memory_mSetPoint(mSetPoint)
		[]
		set_mSetPoint?x__ -> Memory_mSetPoint(x__)
		[]
		set_EXT_mSetPoint?x__ -> Memory_mSetPoint(x__)
	)
	Memory_dutyCyclePWM1(dutyCyclePWM1) = (
		get_dutyCyclePWM1!dutyCyclePWM1 -> Memory_dutyCyclePWM1(dutyCyclePWM1)
		[]
		getV_dutyCyclePWM1!dutyCyclePWM1 -> Memory_dutyCyclePWM1(dutyCyclePWM1)
		[]
		set_dutyCyclePWM1?x__ -> Memory_dutyCyclePWM1(x__)
		[]
		set_EXT_dutyCyclePWM1?x__ -> Memory_dutyCyclePWM1(x__)
	)
	
	-- processes that read variables and offer transitions
	MemoryTransitions(id__, HVEnabled, pow24VStatus, currentState, overLimit, underLimit, mSetPoint, dutyCyclePWM1) = 		
	(internal__!TID_Watchdog_t2 -> SKIP
	[]
	internal__!TID_Watchdog_t1 -> SKIP
	[]
	internal__!TID_Watchdog_t0 -> SKIP[]
	set_HVEnabled?x__ -> SKIP[]
	set_EXT_HVEnabled?x__ -> SKIP[]
	set_pow24VStatus?x__ -> SKIP[]
	set_EXT_pow24VStatus?x__ -> SKIP[]
	set_currentState?x__ -> SKIP[]
	set_EXT_currentState?x__ -> SKIP[]
	set_overLimit?x__ -> SKIP[]
	set_EXT_overLimit?x__ -> SKIP[]
	set_underLimit?x__ -> SKIP[]
	set_EXT_underLimit?x__ -> SKIP[]
	set_mSetPoint?x__ -> SKIP[]
	set_EXT_mSetPoint?x__ -> SKIP[]
	set_dutyCyclePWM1?x__ -> SKIP[]
	set_EXT_dutyCyclePWM1?x__ -> SKIP)
	
	MemoryTransitions_Watchdog(id__) = (getV_HVEnabled?HVEnabled ->
	getV_pow24VStatus?pow24VStatus ->
	getV_currentState?currentState ->
	getV_overLimit?overLimit ->
	getV_underLimit?underLimit ->
	getV_mSetPoint?mSetPoint ->
	getV_dutyCyclePWM1?dutyCyclePWM1 ->
	MemoryTransitions(id__, HVEnabled, pow24VStatus, currentState, overLimit, underLimit, mSetPoint, dutyCyclePWM1)			
	); MemoryTransitions_Watchdog(id__)
			
	
	-- synchronisation, hiding and process sets 
	MemoryVariablesProcesses_Watchdog = Union(
		{
			{
				(Memory_HVEnabled(true),{|get_HVEnabled,set_HVEnabled,set_EXT_HVEnabled,getV_HVEnabled|}),
				(Memory_pow24VStatus(Power_On),{|getV_pow24VStatus,set_EXT_pow24VStatus,set_pow24VStatus,get_pow24VStatus|}),
				(Memory_currentState(State_Wait24Vpower),{|getV_currentState,set_EXT_currentState,get_currentState,set_currentState|}),
				(Memory_overLimit(0),{|set_overLimit,get_overLimit,set_EXT_overLimit,getV_overLimit|}),
				(Memory_underLimit(0),{|set_EXT_underLimit,get_underLimit,set_underLimit,getV_underLimit|}),
				(Memory_mSetPoint(0),{|get_mSetPoint,set_mSetPoint,getV_mSetPoint,set_EXT_mSetPoint|}),
				(Memory_dutyCyclePWM1(0),{|set_dutyCyclePWM1,getV_dutyCyclePWM1,get_dutyCyclePWM1,set_EXT_dutyCyclePWM1|})
			}
		}
	)
	
	MemoryVariablesSyncSet = Union({
		{|
			getV_currentState,
			set_overLimit,
			set_EXT_currentState,
			set_mSetPoint,
			set_EXT_underLimit,
			set_pow24VStatus,
			set_EXT_mSetPoint,
			set_currentState,
			getV_pow24VStatus,
			set_dutyCyclePWM1,
			set_EXT_pow24VStatus,
			getV_mSetPoint,
			getV_dutyCyclePWM1,
			set_HVEnabled,
			set_EXT_HVEnabled,
			set_EXT_dutyCyclePWM1,
			getV_HVEnabled,
			set_EXT_overLimit,
			set_underLimit,
			getV_underLimit,
			getV_overLimit
		|}	
	})
	
	MemoryVariablesHideSet = Union({
		{|
			getV_pow24VStatus,
			getV_currentState,
			getV_mSetPoint,
			getV_dutyCyclePWM1,
			getV_HVEnabled,
			getV_underLimit,
			getV_overLimit
		|}
	})
	
	-- combined individual memory processes
	MemoryVariables = ||| (P, alpha) : MemoryVariablesProcesses_Watchdog @ P
	
	-- complete memory process	
	MemoryN(id__) = sbisim(diamond((sbisim(diamond(MemoryVariables)) [| MemoryVariablesSyncSet |] sbisim(diamond(MemoryTransitions_Watchdog(id__)))) \ MemoryVariablesHideSet))
	
	-- optimised memory
	-- Sets of named elements identified according to transition conditions:
	-- {}
	-- Summary of all identified named elements:
	-- {
	-- pow24VStatus
	-- HVEnabled
	-- currentState
	-- overLimit
	-- underLimit
	-- dutyCyclePWM1
	-- mSetPoint
	-- }
	
	-- Allocation plan:
	-- 0:{}
	--	=> {
	--		TID_Watchdog_t1,
	--		TID_Watchdog_t2,
	--		TID_Watchdog_t0}
	
	-- Memory transition processes
	MemoryTransitions_opt_0(id__) =
	(
		let
			Update = Current(id__)
			Current(id__)
			 	   = 
			 	   internal__!TID_Watchdog_t1 -> Update
			 	   []
			 	   internal__!TID_Watchdog_t2 -> Update
			 	   []
			 	   internal__!TID_Watchdog_t0 -> Update
		within
			Update
	)
	
	-- Memory cell processes
	Memory_opt_pow24VStatus(x__) = ( 
		get_pow24VStatus!x__ -> Memory_opt_pow24VStatus(x__)
		[]
		set_pow24VStatus?x__ -> Memory_opt_pow24VStatus(x__)
		[]
		set_EXT_pow24VStatus?x__ -> Memory_opt_pow24VStatus(x__)
	)
	Memory_opt_HVEnabled(x__) = ( 
		get_HVEnabled!x__ -> Memory_opt_HVEnabled(x__)
		[]
		set_HVEnabled?x__ -> Memory_opt_HVEnabled(x__)
		[]
		set_EXT_HVEnabled?x__ -> Memory_opt_HVEnabled(x__)
	)
	Memory_opt_currentState(x__) = ( 
		get_currentState!x__ -> Memory_opt_currentState(x__)
		[]
		set_currentState?x__ -> Memory_opt_currentState(x__)
		[]
		set_EXT_currentState?x__ -> Memory_opt_currentState(x__)
	)
	Memory_opt_overLimit(x__) = ( 
		get_overLimit!x__ -> Memory_opt_overLimit(x__)
		[]
		set_overLimit?x__ -> Memory_opt_overLimit(x__)
		[]
		set_EXT_overLimit?x__ -> Memory_opt_overLimit(x__)
	)
	Memory_opt_underLimit(x__) = ( 
		get_underLimit!x__ -> Memory_opt_underLimit(x__)
		[]
		set_underLimit?x__ -> Memory_opt_underLimit(x__)
		[]
		set_EXT_underLimit?x__ -> Memory_opt_underLimit(x__)
	)
	Memory_opt_dutyCyclePWM1(x__) = ( 
		get_dutyCyclePWM1!x__ -> Memory_opt_dutyCyclePWM1(x__)
		[]
		set_dutyCyclePWM1?x__ -> Memory_opt_dutyCyclePWM1(x__)
		[]
		set_EXT_dutyCyclePWM1?x__ -> Memory_opt_dutyCyclePWM1(x__)
	)
	Memory_opt_mSetPoint(x__) = ( 
		get_mSetPoint!x__ -> Memory_opt_mSetPoint(x__)
		[]
		set_mSetPoint?x__ -> Memory_opt_mSetPoint(x__)
		[]
		set_EXT_mSetPoint?x__ -> Memory_opt_mSetPoint(x__)
	)
	
	-- Composition of memory, StateMachine and Memory transition processes
	
	MemorySTM_opt(id__) =
		sbisim(	
		  dbisim(
		    sbisim(dbisim(sbisim(Memory_opt_pow24VStatus(Power_On)
		          	[| {|set_pow24VStatus,get_pow24VStatus|} |] 
		          	dbisim(sbisim(Memory_opt_HVEnabled(true)
		          	      	[| {|set_HVEnabled,get_HVEnabled|} |] 
		          	      	dbisim(sbisim(Memory_opt_currentState(State_Wait24Vpower)
		          	      	      	[| {|get_currentState,set_currentState|} |] 
		          	      	      	dbisim(sbisim(Memory_opt_overLimit(0)
		          	      	      	      	[| {|set_overLimit,get_overLimit|} |] 
		          	      	      	      	dbisim(sbisim(Memory_opt_underLimit(0)
		          	      	      	      	      	[| {|get_underLimit,set_underLimit|} |] 
		          	      	      	      	      	dbisim(sbisim(Memory_opt_dutyCyclePWM1(0)
		          	      	      	      	      	      	[| {|set_dutyCyclePWM1,get_dutyCyclePWM1|} |] 
		          	      	      	      	      	      	dbisim(sbisim(Memory_opt_mSetPoint(0)
		          	      	      	      	      	      	      	[| {|set_mSetPoint,get_mSetPoint|} |] 
		          	      	      	      	      	      	      	STM_core(id__)
		          	      	      	      	      	      	      	)\ {|get_mSetPoint|}
		          	      	      	      	      	      	      )
		          	      	      	      	      	      	)\ {|get_dutyCyclePWM1|}
		          	      	      	      	      	      )
		          	      	      	      	      	)\ {|get_underLimit|}
		          	      	      	      	      )
		          	      	      	      	)\ {|get_overLimit|}
		          	      	      	      )
		          	      	      	)\ {|get_currentState|}
		          	      	      )
		          	      	)\ {|get_HVEnabled|}
		          	      )
		          	)\ {|get_pow24VStatus|}
		          )
		      	  [| {|internal__.TID_Watchdog_t1,internal__.TID_Watchdog_t2,internal__.TID_Watchdog_t0|} |]
		      	  MemoryTransitions_opt_0(id__)
		      	  )\{|internal__.TID_Watchdog_t1,internal__.TID_Watchdog_t2,internal__.TID_Watchdog_t0|})
		      )
	
	-- main process
	
	MachineMemorySyncSet = Union({
		union(
			union(
				{||},
				{|get_HVEnabled,set_HVEnabled,
				get_pow24VStatus,set_pow24VStatus,
				get_currentState,set_currentState,
				get_overLimit,set_overLimit,
				get_underLimit,set_underLimit,
				get_mSetPoint,set_mSetPoint,
				get_dutyCyclePWM1,set_dutyCyclePWM1|}
			)
				
			,
			{|internal__.TID_Watchdog_t2,
			internal__.TID_Watchdog_t1,
			internal__.TID_Watchdog_t0|}
		)
	})
	
	MachineMemoryHidingSet = Union({
		union(
			{||},
			{|get_HVEnabled,
			get_pow24VStatus,
			get_currentState,
			get_overLimit,
			get_underLimit,
			get_mSetPoint,
			get_dutyCyclePWM1|}
		)
	})
	
	MachineInternalEvents = {|
		internal__
	|}
	
	AUX(id__) = (
		(
			STM(id__)
				[|MachineMemorySyncSet|]
			sbisim(diamond(MemoryN(id__)))
		)[[
			ext_pow24VStatus__.x____ <- ext_pow24VStatus,
			int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1,
			int_enablePWM__.x____ <- int_enablePWM
			| x____ <- TIDS
		]]
		\MachineMemoryHidingSet
	)
	[|{|terminate|}|>SKIP\MachineInternalEvents
	
	
	STM_core(id__) = 
		sbisim(diamond(STM(id__)))
		
	AUX_opt(id__) = 
		(MemorySTM_opt(id__)
		)[[
			ext_pow24VStatus__.x____ <- ext_pow24VStatus,
			int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1,
			int_enablePWM__.x____ <- int_enablePWM
			| x____ <- TIDS
		]]
		[|{|terminate|}|>SKIP\MachineInternalEvents

	-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase
			
	FVS__(id__) = AUX_opt(id__)
	Dunopt__(id__) = AUX(id__) \ internal_events
	D__(id__) = AUX_opt(id__) \ internal_events
	O__(id__) = sbisim(diamond(D__(id__)))
	VS__(id__) = ShowV(FVS__(id__))
	VS_O__(id__) = sbisim(diamond(VS__(id__)))
	HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP	
endmodule
