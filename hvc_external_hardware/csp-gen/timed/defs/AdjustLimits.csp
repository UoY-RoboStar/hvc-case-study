module OP_AdjustLimits
exports
	-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
	external prioritise
	transparent wbisim
	transparent dbisim
	transparent sbisim
	
	Timed(OneStep) {
		-- flow channels
		channel internal__ : TIDS
		channel enteredV, enterV, exitV, exitedV : SIDS
		channel enter, entered: SIDS.SIDS
		channel exit,exited: SIDS.SIDS
		channel terminate
		
		-- variable channels
		channel get_overLimit, set_overLimit: core_real
		channel get_underLimit, set_underLimit: core_real
		channel get_mSetPoint, set_mSetPoint: core_real
				
		-- shared variable channels
		channel set_EXT_overLimit: core_real
		channel set_EXT_underLimit: core_real
		channel set_EXT_mSetPoint: core_real
		
		-- local variable channels for defined operations that are required by the state machine
		
		-- declaring state machine events
		
		-- declaring call and ret events for undefined operations
		
		-- Only the undefined operations are declared here.
		-- If the state machine is in isolation, all required operations will be undefined.
		-- If it is in the context of a controller, the required operations not provided by the
		-- controller will be declared here, and the defined operations will be defined in the
		-- context of the Controller module, and therefore within scope of the state machien module.
		
		
		-- definition of functions used to expose flow channels
		ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
						   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
						   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
						   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
							 
		ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
		ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
		ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
		ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
		ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
					[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
					[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
					[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
		
		-- declaring identifiers of state and final states
		datatype SIDS = SID_AdjustLimits
		              | SID_AdjustLimits_f0
		
		-- declaring identifiers of transitions
		datatype TIDS = NULLTRANSITION__
		              | TID_AdjustLimits_t1
		
		-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
		
		ITIDS = {
		}
		
		int_int = {|
		|}
			
		
		internal_events = {|enter,entered,exit,exited|}
		shared_variable_events = {|
			set_EXT_overLimit,
			set_EXT_underLimit,
			set_EXT_mSetPoint
		|}
				
		
		-- declaring all states
		CS_AdjustLimits_f0_sync = {|
			enter.y____.x____, 
			entered.y____.x____, 
			exit.y____.x____, 
			exited.y____.x____,
			enter.x____.y____, 
			entered.x____.y____, 
			exit.x____.y____, 
			exited.x____.y____ |
			x____ <- {SID_AdjustLimits_f0},
			y____ <- {SID_AdjustLimits_f0}
		|}
		
		
		AdjustLimits_f0_triggers = {|
		|}
		
		State_AdjustLimits_f0(id__) = let
			State_AdjustLimits_f0_execute(id__,o____) = SKIP; 
				entered!o____!SID_AdjustLimits_f0 ->
				terminate -> SKIP
		within
			enter?x____:diff(SIDS,{SID_AdjustLimits_f0})!SID_AdjustLimits_f0 -> (State_AdjustLimits_f0_execute(id__,x____))
		
		
		I_AdjustLimits_i0(id__) = let
			T_AdjustLimits_t1(id__) = internal__!TID_AdjustLimits_t1 -> get_mSetPoint?mSetPoint -> true & (set_overLimit!overLimitF(Plus(mSetPoint, 2, core_real)) -> SKIP);get_mSetPoint?mSetPoint -> true & (set_underLimit!underLimitF(Minus(mSetPoint, 2, core_real)) -> SKIP);enter!SID_AdjustLimits!SID_AdjustLimits_f0 -> entered!SID_AdjustLimits!SID_AdjustLimits_f0 ->
			SKIP
		within
			T_AdjustLimits_t1(id__)
		
		
		State_AdjustLimits_f0_R(id__) = 
			State_AdjustLimits_f0(id__)
				[|diff(int_int,AdjustLimits_f0_triggers)|]
			SKIP
				 		
			
		STM(id__) = (
			I_AdjustLimits_i0(id__)
				[|
					{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
						x____ <- diff(SIDS,{SID_AdjustLimits_f0}),
						y____ <- {SID_AdjustLimits_f0}
				|}|]
			State_AdjustLimits_f0_R(id__)
		)
		
		-- optimized memory process
		channel getV_overLimit: core_real
		channel getV_underLimit: core_real
		channel getV_mSetPoint: core_real
		
		-- individual memory processes
		Memory_overLimit(x__) = ( 
			get_overLimit!x__ -> Memory_overLimit(x__)
			[]
			getV_overLimit!x__ -> Memory_overLimit(x__)
			[]
			set_overLimit?x__ -> Memory_overLimit(x__)
			[]
			set_EXT_overLimit?x__ -> Memory_overLimit(x__)
		)
		Memory_underLimit(x__) = ( 
			get_underLimit!x__ -> Memory_underLimit(x__)
			[]
			getV_underLimit!x__ -> Memory_underLimit(x__)
			[]
			set_underLimit?x__ -> Memory_underLimit(x__)
			[]
			set_EXT_underLimit?x__ -> Memory_underLimit(x__)
		)
		Memory_mSetPoint(x__) = ( 
			get_mSetPoint!x__ -> Memory_mSetPoint(x__)
			[]
			getV_mSetPoint!x__ -> Memory_mSetPoint(x__)
			[]
			set_mSetPoint?x__ -> Memory_mSetPoint(x__)
			[]
			set_EXT_mSetPoint?x__ -> Memory_mSetPoint(x__)
		)
		
		-- processes that read variables and offer transitions
		MemoryTransitions(id__,
			 overLimit,
			 underLimit,
			 mSetPoint) = (
			internal__!TID_AdjustLimits_t1 -> SKIP
		 	)
		MemoryTransitions_AdjustLimits(id__) =
			(
			OP_AdjustLimits::getV_overLimit?overLimit ->	
			OP_AdjustLimits::getV_underLimit?underLimit ->	
			OP_AdjustLimits::getV_mSetPoint?mSetPoint ->
			 MemoryTransitions(id__,
			 	 overLimit,
			 	 underLimit,
			 	 mSetPoint);
			 MemoryTransitions_AdjustLimits(id__)
			)
		
		-- synchronisation, hiding and process sets 
		MemoryVariablesProcesses_AdjustLimits = Union(
			{
				{
					Memory_overLimit(0),
					Memory_underLimit(0),
					Memory_mSetPoint(0)
				}
			}
		)
		
		MemoryVariablesSyncSet = Union({
			{|
				set_overLimit,
				set_mSetPoint,
				getV_mSetPoint,
				set_EXT_underLimit,
				set_EXT_mSetPoint,
				setWC,
				set_EXT_overLimit,
				set_underLimit,
				getV_underLimit,
				getV_overLimit
			|}	
		})
		
		MemoryVariablesHideSet = Union({
			{|
				getV_mSetPoint,
				getWC,
				getV_underLimit,
				getV_overLimit
			|}
		})
		
		-- combined individual memory processes
		MemoryVariables = ||| P : MemoryVariablesProcesses_AdjustLimits @ P
		
		-- complete memory process
		MemoryN(id__) = (MemoryVariables [| MemoryVariablesSyncSet |] MemoryTransitions_AdjustLimits(id__)) \ MemoryVariablesHideSet
		
		-- optimised memory
		-- Sets of named elements identified according to transition conditions:
		-- {}
		-- Summary of all identified named elements:
		-- {
		-- OP_AdjustLimits::overLimit
		-- OP_AdjustLimits::underLimit
		-- OP_AdjustLimits::mSetPoint
		-- }
		
		-- Allocation plan:
		-- 0:{}
		--	=> {
		--		TID_AdjustLimits_t1}
		
		-- Memory transition processes
		MemoryTransitions_opt_0(id__) =
		(
			let
				Update = Current(id__)
				Current(id__)
				 	   = 
				 	   internal__!TID_AdjustLimits_t1 -> Update
			within
				Update
		)
		
		-- Memory cell processes
		Memory_opt_overLimit(x__) = ( 
			get_overLimit!x__ -> Memory_opt_overLimit(x__)
			[]
			set_overLimit?x__ -> Memory_opt_overLimit(x__)
			[]
			set_EXT_overLimit?x__ -> Memory_opt_overLimit(x__)
		)
		Memory_opt_underLimit(x__) = ( 
			get_underLimit!x__ -> Memory_opt_underLimit(x__)
			[]
			set_underLimit?x__ -> Memory_opt_underLimit(x__)
			[]
			set_EXT_underLimit?x__ -> Memory_opt_underLimit(x__)
		)
		Memory_opt_mSetPoint(x__) = ( 
			get_mSetPoint!x__ -> Memory_opt_mSetPoint(x__)
			[]
			set_mSetPoint?x__ -> Memory_opt_mSetPoint(x__)
			[]
			set_EXT_mSetPoint?x__ -> Memory_opt_mSetPoint(x__)
		)
		
		-- Composition of memory, StateMachine and Memory transition processes
		
		MemorySTM_opt(id__) =
			sbisim(	
			  dbisim(
			    sbisim(dbisim(sbisim(Memory_opt_overLimit(0)
			          	[| {|set_overLimit,get_overLimit|} |] 
			          	dbisim(sbisim(Memory_opt_underLimit(0)
			          	      	[| {|get_underLimit,set_underLimit|} |] 
			          	      	dbisim(sbisim(Memory_opt_mSetPoint(0)
			          	      	      	[| {|set_mSetPoint,get_mSetPoint|} |] 
			          	      	      	STM_core(id__)
			          	      	      	)\ {|get_mSetPoint|}
			          	      	      )
			          	      	)\ {|get_underLimit|}
			          	      )
			          	)\ {|get_overLimit|}
			          )
			      	  [| {|internal__.TID_AdjustLimits_t1|} |]
			      	  MemoryTransitions_opt_0(id__)
			      	  )\{|internal__.TID_AdjustLimits_t1|})
			      )
		
		-- main process
		
		MachineMemorySyncSet = Union({
			union(
				union(
					{||},
					{||}
				)
					
				,
				{|internal__.TID_AdjustLimits_t1|}
			),
			{|deadline|},
			WCresets
		})
		
		MachineMemoryHidingSet = Union({
			union(
				{||},
				{||}
			)
			,
			{|deadline|}
		})
		
		MachineInternalEvents = {|
			internal__
		|}
		
		-- main process
		AUX(id__) = prioritise((((
			wbisim(STM(id__))
				[|MachineMemorySyncSet|]
			(wbisim(MemoryN(id__)) [| union(WCsets,WCsync) |] Clocks(id__))\WCsets
		)
		\MachineMemoryHidingSet)
		[|{|terminate|}|>SKIP\MachineInternalEvents)
		,<Union({internal_events,ClockResets,{|terminate|}}),{tock}>)
		
		STM_core(id__) = 
			dbisim(
				sbisim((STM(id__))
			 			[| union(WCsync,WCresets) |]
			 			Clocks(id__)
			 		  )\WCresets
				  )
			
		AUX_opt(id__) = 
			(MemorySTM_opt(id__)
			)
			[|{|terminate|}|>SKIP\MachineInternalEvents
		
		internal_(id__) = prioritise((((
			wbisim(STM(id__))
				[|MachineMemorySyncSet|]
			(wbisim(MemoryN(id__)) [| union(WCsets,WCsync) |] Clocks(id__))\WCsets
		)
		\MachineMemoryHidingSet)
		[|{|terminate|}|>SKIP)
		,<Union({internal_events,ClockResets,{|internal__,terminate|}}),{tock}>)		
				
		-- declare clocks
		datatype ClockSet = dummyC
		channel clockReset 		-- no clocks declared
		
		-- declare trigger deadlines channel
		channel deadline : TIDS.deadlineSignal
		
		-- compile clocks process
		
		-- set of strings that uniquely identify the waiting conditions, each of which is 
		-- used to synchronise with the Memory process to set the correspoding variable in
		-- the memory process.
		datatype setWC_identifierSet = dummyWC
		
		-- declaring getWC and setWC channel for updating memory variables related to clocks
		channel setWC : setWC_identifierSet.Bool
		channel getWC : setWC_identifierSet.Bool
		
		-- Set of pairs capturing waiting condition processes and their alphabet.
		-- It includes the corresponding set of the defined operations.
		WCset(id__) = Union({
			{
			}
			})
		
		-- Auxiliary function to rename the channel set for required clocks.
		
		-- Set of transition events for which synchronisation is required between Clocks and the Memory process.
		-- It includes the corresponding set of the defined operations.
		WCsync = Union({
			{||}
			})
		-- Set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
		-- from the set of all state machine state identifiers. It includes the corresponding set of the defined operations.
		WCresets = Union({
			{| | x <- SIDS |}
			})
		-- Set of all waiting condition set events. It includes the corresponding set of the defined operations.
		WCsets = Union({
			{|setWC|}
			})
		
		
		
		-- Clocks process
		Clocks(id__) = || (alpha, P) : WCset(id__) @ [alpha] wbisim(P)
		-- collects all clockResets
		ClockResets = {|clockReset|}
		
		-- With no internal events visible
		
		-- Original D__ process using the unoptimised memory process
		Dunopt__(id__) = timed_priority(AUX(id__) \ Union({internal_events,ClockResets,{|terminate|}}))
		
		D__(id__) = timed_priority(AUX_opt(id__) \ Union({internal_events,ClockResets,{|terminate|}}))
		
		O__(id__) = D__(id__)
		
		-- With enter/entered/exit/exited events visible
		FVS__(id__) = timed_priority(AUX_opt(id__) \ union(ClockResets,{|terminate|}))
		
		-- With enterV/enteredV/exitV/exitedV events visible
		VS__(id__) = ShowV(timed_priority(AUX_opt(id__) \ union(ClockResets,{|terminate|})))
		
		-- With clock resets visible
		FVS_C__(id__) = AUX_opt(id__)\{|terminate|}
	}
endmodule
