	module ctrl0
		Timed(OneStep) {
			shared_variable_events = {|
				set_EXT_overLimit,
				set_EXT_underLimit,
				set_EXT_currentState,
				set_EXT_HVEnabled,
				set_EXT_pow24VStatus,
				set_EXT_mSetPoint,
				set_EXT_dutyCyclePWM1
			|}		
		}	
	exports
		transparent diamond
		transparent sbisim
		transparent wbisim
		transparent chase
		
				module stm_ref0
				exports
					-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
					external prioritise
					transparent wbisim
					transparent dbisim
					transparent sbisim
				
					Timed(OneStep) {	
						-- flow channels
						channel internal__ : TIDS
						channel enteredV, enterV, exitV, exitedV : SIDS
						channel enter, entered: SIDS.SIDS
						channel exit,exited: SIDS.SIDS
						channel terminate
						
						-- variable channels
						channel get_setPoint, set_setPoint: core_real
						channel get_newSetPoint, set_newSetPoint: core_real
						channel get_ActualHV, set_ActualHV: core_real
						channel get_overLimit, set_overLimit: core_real
						channel get_underLimit, set_underLimit: core_real
						channel get_currentState, set_currentState: State
						channel get_HVEnabled, set_HVEnabled: core_boolean
						channel get_pow24VStatus, set_pow24VStatus: Power
						channel get_mSetPoint, set_mSetPoint: core_real
						channel get_dutyCyclePWM1, set_dutyCyclePWM1: duty
								
						-- shared variable channels
						channel set_EXT_overLimit: core_real
						channel set_EXT_underLimit: core_real
						channel set_EXT_currentState: State
						channel set_EXT_HVEnabled: core_boolean
						channel set_EXT_pow24VStatus: Power
						channel set_EXT_mSetPoint: core_real
						channel set_EXT_dutyCyclePWM1: duty
						
						-- local variable channels for defined operations that are required by the state machine
						channel get_disableHV_arg, set_disableHV_arg: core_boolean
						channel get_setPointRamping_newSetPoint, set_setPointRamping_newSetPoint: core_real
						
						-- declaring state machine events
						channel ext_ActualHV__: TIDS.InOut.core_real
						channel ext_ActualHV: InOut.core_real
						channel ext_pow24VStatus__: TIDS.InOut.Power
						channel ext_pow24VStatus: InOut.Power
						channel ext_errorAck__: TIDS.InOut
						channel ext_errorAck: InOut
						channel ext_setPoint__: TIDS.InOut.core_real
						channel ext_setPoint: InOut.core_real
						channel int_dutyCyclePWM1__: TIDS.InOut.duty
						channel int_dutyCyclePWM1: InOut.duty
						channel int_enablePWM__: TIDS.InOut.core_boolean
						channel int_enablePWM: InOut.core_boolean
						
						-- declaring call and ret events for undefined operations
					
						-- Only the undefined operations are declared here.
						-- If the state machine is in isolation, all required operations will be undefined.
						-- If it is in the context of a controller, the required operations not provided by the
						-- controller will be declared here, and the defined operations will be defined in the
						-- context of the Controller module, and therefore within scope of the state machien module.
						
						CALL__supplyVoltCheck(id__) = (
						OP_supplyVoltCheck::D__(id__))
						[[
							OP_supplyVoltCheck::ext_pow24VStatus <- ext_pow24VStatus,
							OP_supplyVoltCheck::int_enablePWM <- int_enablePWM,
							OP_supplyVoltCheck::int_dutyCyclePWM1 <- int_dutyCyclePWM1
						]]
						[[
							OP_supplyVoltCheck::get_pow24VStatus <- get_pow24VStatus,
							OP_supplyVoltCheck::set_pow24VStatus <- set_pow24VStatus,
							OP_supplyVoltCheck::get_HVEnabled <- get_HVEnabled,
							OP_supplyVoltCheck::set_HVEnabled <- set_HVEnabled,
							OP_supplyVoltCheck::get_currentState <- get_currentState,
							OP_supplyVoltCheck::set_currentState <- set_currentState,
							OP_supplyVoltCheck::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
							OP_supplyVoltCheck::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
							OP_supplyVoltCheck::get_mSetPoint <- get_mSetPoint,
							OP_supplyVoltCheck::set_mSetPoint <- set_mSetPoint
						]]
						CALL__checkLimits(id__) = (
						OP_checkLimits::D__(id__))
						[[
							OP_checkLimits::int_enablePWM <- int_enablePWM,
							OP_checkLimits::int_dutyCyclePWM1 <- int_dutyCyclePWM1
						]]
						[[
							OP_checkLimits::get_ActualHV <- get_ActualHV,
							OP_checkLimits::set_ActualHV <- set_ActualHV,
							OP_checkLimits::get_overLimit <- get_overLimit,
							OP_checkLimits::set_overLimit <- set_overLimit,
							OP_checkLimits::get_underLimit <- get_underLimit,
							OP_checkLimits::set_underLimit <- set_underLimit,
							OP_checkLimits::get_HVEnabled <- get_HVEnabled,
							OP_checkLimits::set_HVEnabled <- set_HVEnabled,
							OP_checkLimits::get_currentState <- get_currentState,
							OP_checkLimits::set_currentState <- set_currentState,
							OP_checkLimits::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
							OP_checkLimits::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
							OP_checkLimits::get_mSetPoint <- get_mSetPoint,
							OP_checkLimits::set_mSetPoint <- set_mSetPoint
						]]
						CALL__PID_Control(id__) = (
						OP_PID_Control::D__(id__))
						[[
							OP_PID_Control::ext_ActualHV <- ext_ActualHV,
							OP_PID_Control::int_dutyCyclePWM1 <- int_dutyCyclePWM1
						]]
						[[
							OP_PID_Control::get_ActualHV <- get_ActualHV,
							OP_PID_Control::set_ActualHV <- set_ActualHV,
							OP_PID_Control::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
							OP_PID_Control::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
							OP_PID_Control::get_mSetPoint <- get_mSetPoint,
							OP_PID_Control::set_mSetPoint <- set_mSetPoint
						]]
						CALL__disableHV(id__,
									arg) = (
						OP_disableHV::set_arg!arg -> 
						OP_disableHV::D__(id__))
						[[
							OP_disableHV::int_enablePWM <- int_enablePWM,
							OP_disableHV::int_dutyCyclePWM1 <- int_dutyCyclePWM1
						]]
						[[
							OP_disableHV::get_HVEnabled <- get_HVEnabled,
							OP_disableHV::set_HVEnabled <- set_HVEnabled,
							OP_disableHV::get_currentState <- get_currentState,
							OP_disableHV::set_currentState <- set_currentState,
							OP_disableHV::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
							OP_disableHV::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
							OP_disableHV::get_mSetPoint <- get_mSetPoint,
							OP_disableHV::set_mSetPoint <- set_mSetPoint
						]]
						CALL__AdjustLimits(id__) = (
						OP_AdjustLimits::D__(id__))
						[[
							OP_AdjustLimits::get_overLimit <- get_overLimit,
							OP_AdjustLimits::set_overLimit <- set_overLimit,
							OP_AdjustLimits::get_underLimit <- get_underLimit,
							OP_AdjustLimits::set_underLimit <- set_underLimit,
							OP_AdjustLimits::get_mSetPoint <- get_mSetPoint,
							OP_AdjustLimits::set_mSetPoint <- set_mSetPoint
						]]
						CALL__setPointRamping(id__,
									newSetPoint,
								    const_setPointRamping_rampStep) = (
						OP_setPointRamping::set_newSetPoint!newSetPoint -> 
						OP_setPointRamping::D__(id__,
								    const_setPointRamping_rampStep))
						[[
							OP_setPointRamping::int_enablePWM <- int_enablePWM,
							OP_setPointRamping::int_dutyCyclePWM1 <- int_dutyCyclePWM1
						]]
						[[
							OP_setPointRamping::get_HVEnabled <- get_HVEnabled,
							OP_setPointRamping::set_HVEnabled <- set_HVEnabled,
							OP_setPointRamping::get_currentState <- get_currentState,
							OP_setPointRamping::set_currentState <- set_currentState,
							OP_setPointRamping::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
							OP_setPointRamping::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
							OP_setPointRamping::get_mSetPoint <- get_mSetPoint,
							OP_setPointRamping::set_mSetPoint <- set_mSetPoint
						]]
						CALL__enableHV(id__) = (
						OP_enableHV::D__(id__))
						[[
							OP_enableHV::int_enablePWM <- int_enablePWM,
							OP_enableHV::int_dutyCyclePWM1 <- int_dutyCyclePWM1
						]]
						[[
							OP_enableHV::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
							OP_enableHV::set_dutyCyclePWM1 <- set_dutyCyclePWM1
						]]
						
						-- definition of functions used to expose flow channels
						ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
										   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
										   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
										   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
											 
						ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
						ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
						ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
						ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
						ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
									[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
									[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
									[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
						
						-- declaring identifiers of state and final states
						datatype SIDS = SID_State_machine
						              | SID_State_machine_Init
						              | SID_State_machine_ClosedLoop
						              | SID_State_machine_ClosedLoop_s0
						              | SID_State_machine_Wait24Vpower
						              | SID_State_machine_Wait24Vpower_f0
						              | SID_State_machine_ErrorMode
						              | SID_State_machine_ErrorMode_s0
						              | SID_State_machine_ErrorMode_f0
						
						-- declaring identifiers of transitions
						datatype TIDS = NULLTRANSITION__
						              | TID_State_machine_ClosedLoop_t0
						              | TID_State_machine_ClosedLoop_t1
						              | TID_State_machine_ClosedLoop_t2
						              | TID_State_machine_ClosedLoop_t3
						              | TID_State_machine_ClosedLoop_t4
						              | TID_State_machine_ClosedLoop_t5
						              | TID_State_machine_ClosedLoop_t7
						              | TID_State_machine_ClosedLoop_t14
						              | TID_State_machine_ClosedLoop_t8
						              | TID_State_machine_ClosedLoop_t9
						              | TID_State_machine_ClosedLoop_t12
						              | TID_State_machine_ClosedLoop_t13
						              | TID_State_machine_Wait24Vpower_t0
						              | TID_State_machine_Wait24Vpower_t1
						              | TID_State_machine_Wait24Vpower_t2
						              | TID_State_machine_Wait24Vpower_t3
						              | TID_State_machine_Wait24Vpower_t4
						              | TID_State_machine_ErrorMode_t0
						              | TID_State_machine_ErrorMode_t1
						              | TID_State_machine_ErrorMode_t2
						              | TID_State_machine_t1
						              | TID_State_machine_t2
						              | TID_State_machine_t3
						              | TID_State_machine_t4
						              | TID_State_machine_t5
						              | TID_State_machine_t7
						
						-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
						
						ITIDS = {
							TID_State_machine_ClosedLoop_t14,	TID_State_machine_ErrorMode_t1,	TID_State_machine_ErrorMode_t2,	TID_State_machine_t1,	TID_State_machine_t2,	TID_State_machine_t3,	TID_State_machine_t4,	TID_State_machine_t7
						}
						
						int_int = {|
							ext_ActualHV__.TID_State_machine_ClosedLoop_t14,
							ext_pow24VStatus__.TID_State_machine_ClosedLoop_t14,
							ext_errorAck__.TID_State_machine_ClosedLoop_t14,
							ext_setPoint__.TID_State_machine_ClosedLoop_t14,
							int_dutyCyclePWM1__.TID_State_machine_ClosedLoop_t14,
							int_enablePWM__.TID_State_machine_ClosedLoop_t14,
							internal__.TID_State_machine_ClosedLoop_t14,
							ext_ActualHV__.TID_State_machine_ErrorMode_t1,
							ext_pow24VStatus__.TID_State_machine_ErrorMode_t1,
							ext_errorAck__.TID_State_machine_ErrorMode_t1,
							ext_setPoint__.TID_State_machine_ErrorMode_t1,
							int_dutyCyclePWM1__.TID_State_machine_ErrorMode_t1,
							int_enablePWM__.TID_State_machine_ErrorMode_t1,
							internal__.TID_State_machine_ErrorMode_t1,
							ext_ActualHV__.TID_State_machine_ErrorMode_t2,
							ext_pow24VStatus__.TID_State_machine_ErrorMode_t2,
							ext_errorAck__.TID_State_machine_ErrorMode_t2,
							ext_setPoint__.TID_State_machine_ErrorMode_t2,
							int_dutyCyclePWM1__.TID_State_machine_ErrorMode_t2,
							int_enablePWM__.TID_State_machine_ErrorMode_t2,
							internal__.TID_State_machine_ErrorMode_t2,
							ext_ActualHV__.TID_State_machine_t1,
							ext_pow24VStatus__.TID_State_machine_t1,
							ext_errorAck__.TID_State_machine_t1,
							ext_setPoint__.TID_State_machine_t1,
							int_dutyCyclePWM1__.TID_State_machine_t1,
							int_enablePWM__.TID_State_machine_t1,
							internal__.TID_State_machine_t1,
							ext_ActualHV__.TID_State_machine_t2,
							ext_pow24VStatus__.TID_State_machine_t2,
							ext_errorAck__.TID_State_machine_t2,
							ext_setPoint__.TID_State_machine_t2,
							int_dutyCyclePWM1__.TID_State_machine_t2,
							int_enablePWM__.TID_State_machine_t2,
							internal__.TID_State_machine_t2,
							ext_ActualHV__.TID_State_machine_t3,
							ext_pow24VStatus__.TID_State_machine_t3,
							ext_errorAck__.TID_State_machine_t3,
							ext_setPoint__.TID_State_machine_t3,
							int_dutyCyclePWM1__.TID_State_machine_t3,
							int_enablePWM__.TID_State_machine_t3,
							internal__.TID_State_machine_t3,
							ext_ActualHV__.TID_State_machine_t4,
							ext_pow24VStatus__.TID_State_machine_t4,
							ext_errorAck__.TID_State_machine_t4,
							ext_setPoint__.TID_State_machine_t4,
							int_dutyCyclePWM1__.TID_State_machine_t4,
							int_enablePWM__.TID_State_machine_t4,
							internal__.TID_State_machine_t4,
							ext_ActualHV__.TID_State_machine_t7,
							ext_pow24VStatus__.TID_State_machine_t7,
							ext_errorAck__.TID_State_machine_t7,
							ext_setPoint__.TID_State_machine_t7,
							int_dutyCyclePWM1__.TID_State_machine_t7,
							int_enablePWM__.TID_State_machine_t7,
							internal__.TID_State_machine_t7
						|}
							
						
						internal_events = {|enter,entered,exit,exited|}
						shared_variable_events = {|
							set_EXT_overLimit,
							set_EXT_underLimit,
							set_EXT_currentState,
							set_EXT_HVEnabled,
							set_EXT_pow24VStatus,
							set_EXT_mSetPoint,
							set_EXT_dutyCyclePWM1
						|}
								
						
						-- declaring all states
						CS_State_machine_Init_sync = {|
							enter.y____.x____, 
							entered.y____.x____, 
							exit.y____.x____, 
							exited.y____.x____,
							enter.x____.y____, 
							entered.x____.y____, 
							exit.x____.y____, 
							exited.x____.y____ |
							x____ <- {SID_State_machine_Init,SID_State_machine_ClosedLoop,SID_State_machine_Wait24Vpower,SID_State_machine_ErrorMode},
							y____ <- {SID_State_machine_Init}
						|}
						
						
						State_machine_Init_triggers = {|
							internal__.TID_State_machine_t3,
							internal__.TID_State_machine_t2,
							internal__.TID_State_machine_t7,
							internal__.TID_State_machine_t4,
							internal__.TID_State_machine_t1
						|}
						
						State_State_machine_Init(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = let
							T_State_machine_t1(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = internal__!TID_State_machine_t1 ->  exit.SID_State_machine_Init.SID_State_machine_Init -> SKIP;
												SKIP;exited.SID_State_machine_Init.SID_State_machine_Init -> SKIP;
												WAIT(const_State_machine_cycleTime);enter!SID_State_machine_Init!SID_State_machine_Wait24Vpower -> entered!SID_State_machine_Init!SID_State_machine_Wait24Vpower ->
												State_State_machine_Init(id__,
														    const_State_machine_cycleTime,
														    const_setPointRamping_rampStep)
							State_State_machine_Init_execute(id__,o____,
									          const_setPointRamping_rampStep) = true&CALL__AdjustLimits(
										id__
									); 
								entered!o____!SID_State_machine_Init ->
								(SKIP; STOP /\ (
									T_State_machine_t1(id__,
											    const_State_machine_cycleTime,
											    const_setPointRamping_rampStep)
									[]
									internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_t3,TID_State_machine_t2,TID_State_machine_t7,TID_State_machine_t4,TID_State_machine_t1}) -> exit?y____:diff(SIDS,{SID_State_machine_Init})!SID_State_machine_Init -> (
											SKIP;
											exited!y____!SID_State_machine_Init -> SKIP);
											State_State_machine_Init(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] ext_ActualHV__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_t3,TID_State_machine_t2,TID_State_machine_t7,TID_State_machine_t4,TID_State_machine_t1})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_State_machine_Init})!SID_State_machine_Init -> (
											SKIP;
											exited!y____!SID_State_machine_Init -> SKIP);
											State_State_machine_Init(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] ext_pow24VStatus__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_t3,TID_State_machine_t2,TID_State_machine_t7,TID_State_machine_t4,TID_State_machine_t1})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_State_machine_Init})!SID_State_machine_Init -> (
											SKIP;
											exited!y____!SID_State_machine_Init -> SKIP);
											State_State_machine_Init(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] ext_errorAck__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_t3,TID_State_machine_t2,TID_State_machine_t7,TID_State_machine_t4,TID_State_machine_t1})?d____ ->	exit?y____:diff(SIDS,{SID_State_machine_Init})!SID_State_machine_Init -> (
											SKIP;
											exited!y____!SID_State_machine_Init -> SKIP);
											State_State_machine_Init(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] ext_setPoint__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_t3,TID_State_machine_t2,TID_State_machine_t7,TID_State_machine_t4,TID_State_machine_t1})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_State_machine_Init})!SID_State_machine_Init -> (
											SKIP;
											exited!y____!SID_State_machine_Init -> SKIP);
											State_State_machine_Init(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] int_dutyCyclePWM1__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_t3,TID_State_machine_t2,TID_State_machine_t7,TID_State_machine_t4,TID_State_machine_t1})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_State_machine_Init})!SID_State_machine_Init -> (
											SKIP;
											exited!y____!SID_State_machine_Init -> SKIP);
											State_State_machine_Init(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] int_enablePWM__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_t3,TID_State_machine_t2,TID_State_machine_t7,TID_State_machine_t4,TID_State_machine_t1})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_State_machine_Init})!SID_State_machine_Init -> (
											SKIP;
											exited!y____!SID_State_machine_Init -> SKIP);
											State_State_machine_Init(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
								))
						within
							enter?x____:diff(SIDS,{SID_State_machine_Init})!SID_State_machine_Init -> (State_State_machine_Init_execute(id__,x____,
									          const_setPointRamping_rampStep))
						
						CS_State_machine_ClosedLoop_sync = {|
							enter.y____.x____, 
							entered.y____.x____, 
							exit.y____.x____, 
							exited.y____.x____,
							enter.x____.y____, 
							entered.x____.y____, 
							exit.x____.y____, 
							exited.x____.y____ |
							x____ <- {SID_State_machine_Init,SID_State_machine_ClosedLoop,SID_State_machine_Wait24Vpower,SID_State_machine_ErrorMode},
							y____ <- {SID_State_machine_ClosedLoop}
						|}
						
						State_machine_ClosedLoop_int_int = {|
							ext_ActualHV__.TID_State_machine_ClosedLoop_t14,
							ext_pow24VStatus__.TID_State_machine_ClosedLoop_t14,
							ext_errorAck__.TID_State_machine_ClosedLoop_t14,
							ext_setPoint__.TID_State_machine_ClosedLoop_t14,
							int_dutyCyclePWM1__.TID_State_machine_ClosedLoop_t14,
							int_enablePWM__.TID_State_machine_ClosedLoop_t14,
							internal__.TID_State_machine_ClosedLoop_t14
						|}
							
						
						State_machine_ClosedLoop_int_triggers = {|
							internal__.TID_State_machine_ClosedLoop_t0,
							internal__.TID_State_machine_ClosedLoop_t1,
							internal__.TID_State_machine_ClosedLoop_t2,
							internal__.TID_State_machine_ClosedLoop_t3,
							internal__.TID_State_machine_ClosedLoop_t4,
							internal__.TID_State_machine_ClosedLoop_t5,
							internal__.TID_State_machine_ClosedLoop_t7,
							internal__.TID_State_machine_ClosedLoop_t14,
							internal__.TID_State_machine_ClosedLoop_t8,
							internal__.TID_State_machine_ClosedLoop_t9,
							internal__.TID_State_machine_ClosedLoop_t12,
							internal__.TID_State_machine_ClosedLoop_t13
						|}
						
						State_State_machine_ClosedLoop_s0_R(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = 
							State_State_machine_ClosedLoop_s0(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)
						 		[|diff(State_machine_ClosedLoop_int_int,State_machine_ClosedLoop_s0_triggers)|]
						 	SKIP
						 		
						State_State_machine_ClosedLoop(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = (
							State_State_machine_ClosedLoop_aux(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)
								[|
									union(
										diff(int_int, State_machine_ClosedLoop_int_triggers),
										{|enter.x____.y____,
										  entered.x____.y____,
										  exit.x____.y____,
										  exited.x____.y____ |
										  x____ <- diff(SIDS,{SID_State_machine_ClosedLoop_s0}),
										  y____ <- {SID_State_machine_ClosedLoop_s0}
									    |}
									)
								|]
							State_State_machine_ClosedLoop_s0_R(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)
						)
						
						State_machine_ClosedLoop_triggers = {|
							internal__.TID_State_machine_ClosedLoop_t1,
							internal__.TID_State_machine_ClosedLoop_t12,
							internal__.TID_State_machine_ClosedLoop_t4,
							internal__.TID_State_machine_t2,
							internal__.TID_State_machine_ClosedLoop_t3,
							internal__.TID_State_machine_ClosedLoop_t9,
							internal__.TID_State_machine_ClosedLoop_t0,
							internal__.TID_State_machine_ClosedLoop_t5,
							internal__.TID_State_machine_ClosedLoop_t8,
							internal__.TID_State_machine_ClosedLoop_t13,
							internal__.TID_State_machine_t3,
							internal__.TID_State_machine_t4,
							internal__.TID_State_machine_t7,
							internal__.TID_State_machine_ClosedLoop_t2,
							internal__.TID_State_machine_ClosedLoop_t14,
							internal__.TID_State_machine_ClosedLoop_t7
						|}
						
						State_State_machine_ClosedLoop_aux(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = let
							T_State_machine_t4(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = internal__!TID_State_machine_t4 ->  exit.SID_State_machine_ClosedLoop.SID_State_machine_ClosedLoop -> SKIP;
												exit!SID_State_machine_ClosedLoop?z____:{SID_State_machine_ClosedLoop_s0} -> exited!SID_State_machine_ClosedLoop!z____ -> 
														SKIP;
												SKIP;exited.SID_State_machine_ClosedLoop.SID_State_machine_ClosedLoop -> SKIP;
												WAIT(const_State_machine_cycleTime);enter!SID_State_machine_ClosedLoop!SID_State_machine_ErrorMode -> entered!SID_State_machine_ClosedLoop!SID_State_machine_ErrorMode ->
												State_State_machine_ClosedLoop_aux(id__,
														    const_State_machine_cycleTime,
														    const_setPointRamping_rampStep)
							State_State_machine_ClosedLoop_aux_execute(id__,o____,
									          const_setPointRamping_rampStep) = true & (set_currentState!State_ClosedLoop -> SKIP); 
							I_State_machine_ClosedLoop_i0(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep);
								entered!o____!SID_State_machine_ClosedLoop ->
								(SKIP; STOP /\ (
									T_State_machine_t4(id__,
											    const_State_machine_cycleTime,
											    const_setPointRamping_rampStep)
									[]
									internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_ClosedLoop_t1,TID_State_machine_ClosedLoop_t12,TID_State_machine_ClosedLoop_t4,TID_State_machine_t2,TID_State_machine_ClosedLoop_t3,TID_State_machine_ClosedLoop_t9,TID_State_machine_ClosedLoop_t0,TID_State_machine_ClosedLoop_t5,TID_State_machine_ClosedLoop_t8,TID_State_machine_ClosedLoop_t13,TID_State_machine_t3,TID_State_machine_t4,TID_State_machine_t7,TID_State_machine_ClosedLoop_t2,TID_State_machine_ClosedLoop_t14,TID_State_machine_ClosedLoop_t7}) -> exit?y____:diff(SIDS,{SID_State_machine_ClosedLoop})!SID_State_machine_ClosedLoop -> (
											exit!SID_State_machine_ClosedLoop?z____:{SID_State_machine_ClosedLoop_s0} -> exited!SID_State_machine_ClosedLoop!z____ -> 
													SKIP;
											SKIP;
											exited!y____!SID_State_machine_ClosedLoop -> SKIP);
											State_State_machine_ClosedLoop_aux(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] ext_ActualHV__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_ClosedLoop_t1,TID_State_machine_ClosedLoop_t12,TID_State_machine_ClosedLoop_t4,TID_State_machine_t2,TID_State_machine_ClosedLoop_t3,TID_State_machine_ClosedLoop_t9,TID_State_machine_ClosedLoop_t0,TID_State_machine_ClosedLoop_t5,TID_State_machine_ClosedLoop_t8,TID_State_machine_ClosedLoop_t13,TID_State_machine_t3,TID_State_machine_t4,TID_State_machine_t7,TID_State_machine_ClosedLoop_t2,TID_State_machine_ClosedLoop_t14,TID_State_machine_ClosedLoop_t7})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_State_machine_ClosedLoop})!SID_State_machine_ClosedLoop -> (
											exit!SID_State_machine_ClosedLoop?z____:{SID_State_machine_ClosedLoop_s0} -> exited!SID_State_machine_ClosedLoop!z____ -> 
													SKIP;
											SKIP;
											exited!y____!SID_State_machine_ClosedLoop -> SKIP);
											State_State_machine_ClosedLoop_aux(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] ext_pow24VStatus__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_ClosedLoop_t1,TID_State_machine_ClosedLoop_t12,TID_State_machine_ClosedLoop_t4,TID_State_machine_t2,TID_State_machine_ClosedLoop_t3,TID_State_machine_ClosedLoop_t9,TID_State_machine_ClosedLoop_t0,TID_State_machine_ClosedLoop_t5,TID_State_machine_ClosedLoop_t8,TID_State_machine_ClosedLoop_t13,TID_State_machine_t3,TID_State_machine_t4,TID_State_machine_t7,TID_State_machine_ClosedLoop_t2,TID_State_machine_ClosedLoop_t14,TID_State_machine_ClosedLoop_t7})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_State_machine_ClosedLoop})!SID_State_machine_ClosedLoop -> (
											exit!SID_State_machine_ClosedLoop?z____:{SID_State_machine_ClosedLoop_s0} -> exited!SID_State_machine_ClosedLoop!z____ -> 
													SKIP;
											SKIP;
											exited!y____!SID_State_machine_ClosedLoop -> SKIP);
											State_State_machine_ClosedLoop_aux(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] ext_errorAck__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_ClosedLoop_t1,TID_State_machine_ClosedLoop_t12,TID_State_machine_ClosedLoop_t4,TID_State_machine_t2,TID_State_machine_ClosedLoop_t3,TID_State_machine_ClosedLoop_t9,TID_State_machine_ClosedLoop_t0,TID_State_machine_ClosedLoop_t5,TID_State_machine_ClosedLoop_t8,TID_State_machine_ClosedLoop_t13,TID_State_machine_t3,TID_State_machine_t4,TID_State_machine_t7,TID_State_machine_ClosedLoop_t2,TID_State_machine_ClosedLoop_t14,TID_State_machine_ClosedLoop_t7})?d____ ->	exit?y____:diff(SIDS,{SID_State_machine_ClosedLoop})!SID_State_machine_ClosedLoop -> (
											exit!SID_State_machine_ClosedLoop?z____:{SID_State_machine_ClosedLoop_s0} -> exited!SID_State_machine_ClosedLoop!z____ -> 
													SKIP;
											SKIP;
											exited!y____!SID_State_machine_ClosedLoop -> SKIP);
											State_State_machine_ClosedLoop_aux(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] ext_setPoint__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_ClosedLoop_t1,TID_State_machine_ClosedLoop_t12,TID_State_machine_ClosedLoop_t4,TID_State_machine_t2,TID_State_machine_ClosedLoop_t3,TID_State_machine_ClosedLoop_t9,TID_State_machine_ClosedLoop_t0,TID_State_machine_ClosedLoop_t5,TID_State_machine_ClosedLoop_t8,TID_State_machine_ClosedLoop_t13,TID_State_machine_t3,TID_State_machine_t4,TID_State_machine_t7,TID_State_machine_ClosedLoop_t2,TID_State_machine_ClosedLoop_t14,TID_State_machine_ClosedLoop_t7})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_State_machine_ClosedLoop})!SID_State_machine_ClosedLoop -> (
											exit!SID_State_machine_ClosedLoop?z____:{SID_State_machine_ClosedLoop_s0} -> exited!SID_State_machine_ClosedLoop!z____ -> 
													SKIP;
											SKIP;
											exited!y____!SID_State_machine_ClosedLoop -> SKIP);
											State_State_machine_ClosedLoop_aux(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] int_dutyCyclePWM1__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_ClosedLoop_t1,TID_State_machine_ClosedLoop_t12,TID_State_machine_ClosedLoop_t4,TID_State_machine_t2,TID_State_machine_ClosedLoop_t3,TID_State_machine_ClosedLoop_t9,TID_State_machine_ClosedLoop_t0,TID_State_machine_ClosedLoop_t5,TID_State_machine_ClosedLoop_t8,TID_State_machine_ClosedLoop_t13,TID_State_machine_t3,TID_State_machine_t4,TID_State_machine_t7,TID_State_machine_ClosedLoop_t2,TID_State_machine_ClosedLoop_t14,TID_State_machine_ClosedLoop_t7})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_State_machine_ClosedLoop})!SID_State_machine_ClosedLoop -> (
											exit!SID_State_machine_ClosedLoop?z____:{SID_State_machine_ClosedLoop_s0} -> exited!SID_State_machine_ClosedLoop!z____ -> 
													SKIP;
											SKIP;
											exited!y____!SID_State_machine_ClosedLoop -> SKIP);
											State_State_machine_ClosedLoop_aux(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] int_enablePWM__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_ClosedLoop_t1,TID_State_machine_ClosedLoop_t12,TID_State_machine_ClosedLoop_t4,TID_State_machine_t2,TID_State_machine_ClosedLoop_t3,TID_State_machine_ClosedLoop_t9,TID_State_machine_ClosedLoop_t0,TID_State_machine_ClosedLoop_t5,TID_State_machine_ClosedLoop_t8,TID_State_machine_ClosedLoop_t13,TID_State_machine_t3,TID_State_machine_t4,TID_State_machine_t7,TID_State_machine_ClosedLoop_t2,TID_State_machine_ClosedLoop_t14,TID_State_machine_ClosedLoop_t7})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_State_machine_ClosedLoop})!SID_State_machine_ClosedLoop -> (
											exit!SID_State_machine_ClosedLoop?z____:{SID_State_machine_ClosedLoop_s0} -> exited!SID_State_machine_ClosedLoop!z____ -> 
													SKIP;
											SKIP;
											exited!y____!SID_State_machine_ClosedLoop -> SKIP);
											State_State_machine_ClosedLoop_aux(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
								))
						within
							enter?x____:diff(SIDS,{SID_State_machine_ClosedLoop})!SID_State_machine_ClosedLoop -> (State_State_machine_ClosedLoop_aux_execute(id__,x____,
									          const_setPointRamping_rampStep))
						
						CS_State_machine_ClosedLoop_s0_sync = {|
							enter.y____.x____, 
							entered.y____.x____, 
							exit.y____.x____, 
							exited.y____.x____,
							enter.x____.y____, 
							entered.x____.y____, 
							exit.x____.y____, 
							exited.x____.y____ |
							x____ <- {SID_State_machine_ClosedLoop_s0},
							y____ <- {SID_State_machine_ClosedLoop_s0}
						|}
						
						
						State_machine_ClosedLoop_s0_triggers = {|
							internal__.TID_State_machine_ClosedLoop_t1,
							internal__.TID_State_machine_ClosedLoop_t12,
							internal__.TID_State_machine_ClosedLoop_t4,
							internal__.TID_State_machine_ClosedLoop_t3,
							internal__.TID_State_machine_ClosedLoop_t9,
							internal__.TID_State_machine_ClosedLoop_t2,
							internal__.TID_State_machine_ClosedLoop_t5,
							internal__.TID_State_machine_ClosedLoop_t8,
							internal__.TID_State_machine_ClosedLoop_t14,
							internal__.TID_State_machine_ClosedLoop_t13,
							internal__.TID_State_machine_ClosedLoop_t7
						|}
						
						State_State_machine_ClosedLoop_s0(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = let
							T_State_machine_ClosedLoop_t14(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = internal__!TID_State_machine_ClosedLoop_t14 ->  exit.SID_State_machine_ClosedLoop_s0.SID_State_machine_ClosedLoop_s0 -> SKIP;
												SKIP;exited.SID_State_machine_ClosedLoop_s0.SID_State_machine_ClosedLoop_s0 -> SKIP;
												WAIT(const_State_machine_cycleTime);J_State_machine_ClosedLoop_j7(id__,
														    const_State_machine_cycleTime,
														    const_setPointRamping_rampStep)
							J_State_machine_ClosedLoop_j7(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = (
										(internal__!TID_State_machine_ClosedLoop_t13 -> Deadline(true&(ext_setPoint.in?setPoint -> set_setPoint!setPoint -> SKIP),0);get_setPoint?setPoint -> true&(if ((setPoint==0)) then (true&CALL__disableHV(
													id__,
													false
												)) else (SKIP));J_State_machine_ClosedLoop_j0(id__,
												    const_State_machine_cycleTime,
												    const_setPointRamping_rampStep))
										)
							J_State_machine_ClosedLoop_j0(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = (
										(internal__!TID_State_machine_ClosedLoop_t1 -> true & (set_HVEnabled!true -> SKIP);J_State_machine_ClosedLoop_j1(id__,
												    const_State_machine_cycleTime,
												    const_setPointRamping_rampStep))[]
										(internal__!TID_State_machine_ClosedLoop_t3 -> J_State_machine_ClosedLoop_j3(id__,
												    const_State_machine_cycleTime,
												    const_setPointRamping_rampStep))
										)
							J_State_machine_ClosedLoop_j1(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = (
										(internal__!TID_State_machine_ClosedLoop_t2 -> true&CALL__supplyVoltCheck(
													id__
												);J_State_machine_ClosedLoop_j2(id__,
												    const_State_machine_cycleTime,
												    const_setPointRamping_rampStep))
										)
							J_State_machine_ClosedLoop_j4(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = (
										(internal__!TID_State_machine_ClosedLoop_t9 -> Deadline(true&(ext_setPoint.in?setPoint -> set_setPoint!setPoint -> SKIP),0);get_setPoint?setPoint -> true&CALL__setPointRamping(
													id__,
													setPoint,
													const_setPointRamping_rampStep
												);J_State_machine_ClosedLoop_j6(id__,
												    const_State_machine_cycleTime,
												    const_setPointRamping_rampStep))[]
										(internal__!TID_State_machine_ClosedLoop_t12 -> J_State_machine_ClosedLoop_j6(id__,
												    const_State_machine_cycleTime,
												    const_setPointRamping_rampStep))
										)
							J_State_machine_ClosedLoop_j6(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = (
										(internal__!TID_State_machine_ClosedLoop_t8 -> true&CALL__PID_Control(
													id__
												);enter!SID_State_machine_ClosedLoop_s0!SID_State_machine_ClosedLoop_s0 -> State_State_machine_ClosedLoop_s0_execute(id__,SID_State_machine_ClosedLoop_s0,
												          const_setPointRamping_rampStep)
										)
										)
							J_State_machine_ClosedLoop_j2(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = (
										(internal__!TID_State_machine_ClosedLoop_t4 -> true&CALL__enableHV(
													id__
												);J_State_machine_ClosedLoop_j3(id__,
												    const_State_machine_cycleTime,
												    const_setPointRamping_rampStep))[]
										(internal__!TID_State_machine_ClosedLoop_t5 -> J_State_machine_ClosedLoop_j3(id__,
												    const_State_machine_cycleTime,
												    const_setPointRamping_rampStep))
										)
							J_State_machine_ClosedLoop_j3(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = (
										(internal__!TID_State_machine_ClosedLoop_t7 -> true&CALL__checkLimits(
													id__
												);J_State_machine_ClosedLoop_j4(id__,
												    const_State_machine_cycleTime,
												    const_setPointRamping_rampStep))
										)
							State_State_machine_ClosedLoop_s0_execute(id__,o____,
									          const_setPointRamping_rampStep) = SKIP; 
								entered!o____!SID_State_machine_ClosedLoop_s0 ->
								(SKIP; STOP /\ (
									T_State_machine_ClosedLoop_t14(id__,
											    const_State_machine_cycleTime,
											    const_setPointRamping_rampStep)
									[]
									internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_ClosedLoop_t1,TID_State_machine_ClosedLoop_t12,TID_State_machine_ClosedLoop_t4,TID_State_machine_ClosedLoop_t3,TID_State_machine_ClosedLoop_t9,TID_State_machine_ClosedLoop_t2,TID_State_machine_ClosedLoop_t5,TID_State_machine_ClosedLoop_t8,TID_State_machine_ClosedLoop_t14,TID_State_machine_ClosedLoop_t13,TID_State_machine_ClosedLoop_t7}) -> exit?y____:diff(SIDS,{SID_State_machine_ClosedLoop_s0})!SID_State_machine_ClosedLoop_s0 -> (
											SKIP;
											exited!y____!SID_State_machine_ClosedLoop_s0 -> SKIP);
											State_State_machine_ClosedLoop_s0(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] ext_ActualHV__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_ClosedLoop_t1,TID_State_machine_ClosedLoop_t12,TID_State_machine_ClosedLoop_t4,TID_State_machine_ClosedLoop_t3,TID_State_machine_ClosedLoop_t9,TID_State_machine_ClosedLoop_t2,TID_State_machine_ClosedLoop_t5,TID_State_machine_ClosedLoop_t8,TID_State_machine_ClosedLoop_t14,TID_State_machine_ClosedLoop_t13,TID_State_machine_ClosedLoop_t7})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_State_machine_ClosedLoop_s0})!SID_State_machine_ClosedLoop_s0 -> (
											SKIP;
											exited!y____!SID_State_machine_ClosedLoop_s0 -> SKIP);
											State_State_machine_ClosedLoop_s0(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] ext_pow24VStatus__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_ClosedLoop_t1,TID_State_machine_ClosedLoop_t12,TID_State_machine_ClosedLoop_t4,TID_State_machine_ClosedLoop_t3,TID_State_machine_ClosedLoop_t9,TID_State_machine_ClosedLoop_t2,TID_State_machine_ClosedLoop_t5,TID_State_machine_ClosedLoop_t8,TID_State_machine_ClosedLoop_t14,TID_State_machine_ClosedLoop_t13,TID_State_machine_ClosedLoop_t7})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_State_machine_ClosedLoop_s0})!SID_State_machine_ClosedLoop_s0 -> (
											SKIP;
											exited!y____!SID_State_machine_ClosedLoop_s0 -> SKIP);
											State_State_machine_ClosedLoop_s0(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] ext_errorAck__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_ClosedLoop_t1,TID_State_machine_ClosedLoop_t12,TID_State_machine_ClosedLoop_t4,TID_State_machine_ClosedLoop_t3,TID_State_machine_ClosedLoop_t9,TID_State_machine_ClosedLoop_t2,TID_State_machine_ClosedLoop_t5,TID_State_machine_ClosedLoop_t8,TID_State_machine_ClosedLoop_t14,TID_State_machine_ClosedLoop_t13,TID_State_machine_ClosedLoop_t7})?d____ ->	exit?y____:diff(SIDS,{SID_State_machine_ClosedLoop_s0})!SID_State_machine_ClosedLoop_s0 -> (
											SKIP;
											exited!y____!SID_State_machine_ClosedLoop_s0 -> SKIP);
											State_State_machine_ClosedLoop_s0(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] ext_setPoint__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_ClosedLoop_t1,TID_State_machine_ClosedLoop_t12,TID_State_machine_ClosedLoop_t4,TID_State_machine_ClosedLoop_t3,TID_State_machine_ClosedLoop_t9,TID_State_machine_ClosedLoop_t2,TID_State_machine_ClosedLoop_t5,TID_State_machine_ClosedLoop_t8,TID_State_machine_ClosedLoop_t14,TID_State_machine_ClosedLoop_t13,TID_State_machine_ClosedLoop_t7})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_State_machine_ClosedLoop_s0})!SID_State_machine_ClosedLoop_s0 -> (
											SKIP;
											exited!y____!SID_State_machine_ClosedLoop_s0 -> SKIP);
											State_State_machine_ClosedLoop_s0(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] int_dutyCyclePWM1__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_ClosedLoop_t1,TID_State_machine_ClosedLoop_t12,TID_State_machine_ClosedLoop_t4,TID_State_machine_ClosedLoop_t3,TID_State_machine_ClosedLoop_t9,TID_State_machine_ClosedLoop_t2,TID_State_machine_ClosedLoop_t5,TID_State_machine_ClosedLoop_t8,TID_State_machine_ClosedLoop_t14,TID_State_machine_ClosedLoop_t13,TID_State_machine_ClosedLoop_t7})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_State_machine_ClosedLoop_s0})!SID_State_machine_ClosedLoop_s0 -> (
											SKIP;
											exited!y____!SID_State_machine_ClosedLoop_s0 -> SKIP);
											State_State_machine_ClosedLoop_s0(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] int_enablePWM__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_ClosedLoop_t1,TID_State_machine_ClosedLoop_t12,TID_State_machine_ClosedLoop_t4,TID_State_machine_ClosedLoop_t3,TID_State_machine_ClosedLoop_t9,TID_State_machine_ClosedLoop_t2,TID_State_machine_ClosedLoop_t5,TID_State_machine_ClosedLoop_t8,TID_State_machine_ClosedLoop_t14,TID_State_machine_ClosedLoop_t13,TID_State_machine_ClosedLoop_t7})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_State_machine_ClosedLoop_s0})!SID_State_machine_ClosedLoop_s0 -> (
											SKIP;
											exited!y____!SID_State_machine_ClosedLoop_s0 -> SKIP);
											State_State_machine_ClosedLoop_s0(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
								))
						within
							enter?x____:diff(SIDS,{SID_State_machine_ClosedLoop_s0})!SID_State_machine_ClosedLoop_s0 -> (State_State_machine_ClosedLoop_s0_execute(id__,x____,
									          const_setPointRamping_rampStep))
						
						CS_State_machine_Wait24Vpower_sync = {|
							enter.y____.x____, 
							entered.y____.x____, 
							exit.y____.x____, 
							exited.y____.x____,
							enter.x____.y____, 
							entered.x____.y____, 
							exit.x____.y____, 
							exited.x____.y____ |
							x____ <- {SID_State_machine_Init,SID_State_machine_ClosedLoop,SID_State_machine_Wait24Vpower,SID_State_machine_ErrorMode},
							y____ <- {SID_State_machine_Wait24Vpower}
						|}
						
						State_machine_Wait24Vpower_int_int = {|
						|}
							
						
						State_machine_Wait24Vpower_int_triggers = {|
							internal__.TID_State_machine_Wait24Vpower_t0,
							internal__.TID_State_machine_Wait24Vpower_t1,
							internal__.TID_State_machine_Wait24Vpower_t2,
							internal__.TID_State_machine_Wait24Vpower_t3,
							internal__.TID_State_machine_Wait24Vpower_t4
						|}
						
						State_State_machine_Wait24Vpower_f0_R(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = 
							State_State_machine_Wait24Vpower_f0(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)
						 		[|diff(State_machine_Wait24Vpower_int_int,State_machine_Wait24Vpower_f0_triggers)|]
						 	SKIP
						 		
						State_State_machine_Wait24Vpower(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = (
							State_State_machine_Wait24Vpower_aux(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)
								[|
									union(
										diff(int_int, State_machine_Wait24Vpower_int_triggers),
										{|enter.x____.y____,
										  entered.x____.y____,
										  exit.x____.y____,
										  exited.x____.y____ |
										  x____ <- diff(SIDS,{SID_State_machine_Wait24Vpower_f0}),
										  y____ <- {SID_State_machine_Wait24Vpower_f0}
									    |}
									)
								|]
							State_State_machine_Wait24Vpower_f0_R(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)
						)
						
						State_machine_Wait24Vpower_triggers = {|
							internal__.TID_State_machine_Wait24Vpower_t2,
							internal__.TID_State_machine_t3,
							internal__.TID_State_machine_Wait24Vpower_t0,
							internal__.TID_State_machine_Wait24Vpower_t3,
							internal__.TID_State_machine_t2,
							internal__.TID_State_machine_t7,
							internal__.TID_State_machine_t4,
							internal__.TID_State_machine_Wait24Vpower_t1,
							internal__.TID_State_machine_Wait24Vpower_t4
						|}
						
						State_State_machine_Wait24Vpower_aux(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = let
							T_State_machine_t2(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = internal__!TID_State_machine_t2 ->  exit.SID_State_machine_Wait24Vpower.SID_State_machine_Wait24Vpower -> SKIP;
												exit!SID_State_machine_Wait24Vpower?z____:{SID_State_machine_Wait24Vpower_f0} -> exited!SID_State_machine_Wait24Vpower!z____ -> 
														SKIP;
												SKIP;exited.SID_State_machine_Wait24Vpower.SID_State_machine_Wait24Vpower -> SKIP;
												enter!SID_State_machine_Wait24Vpower!SID_State_machine_ErrorMode -> entered!SID_State_machine_Wait24Vpower!SID_State_machine_ErrorMode ->
												State_State_machine_Wait24Vpower_aux(id__,
														    const_State_machine_cycleTime,
														    const_setPointRamping_rampStep)
							T_State_machine_t3(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = internal__!TID_State_machine_t3 ->  exit.SID_State_machine_Wait24Vpower.SID_State_machine_Wait24Vpower -> SKIP;
												exit!SID_State_machine_Wait24Vpower?z____:{SID_State_machine_Wait24Vpower_f0} -> exited!SID_State_machine_Wait24Vpower!z____ -> 
														SKIP;
												SKIP;exited.SID_State_machine_Wait24Vpower.SID_State_machine_Wait24Vpower -> SKIP;
												enter!SID_State_machine_Wait24Vpower!SID_State_machine_ClosedLoop -> entered!SID_State_machine_Wait24Vpower!SID_State_machine_ClosedLoop ->
												State_State_machine_Wait24Vpower_aux(id__,
														    const_State_machine_cycleTime,
														    const_setPointRamping_rampStep)
							State_State_machine_Wait24Vpower_aux_execute(id__,o____,
									          const_setPointRamping_rampStep) = true & (set_currentState!State_Wait24Vpower -> SKIP); 
							I_State_machine_Wait24Vpower_i0(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep);
								entered!o____!SID_State_machine_Wait24Vpower ->
								(SKIP; STOP /\ (
									T_State_machine_t2(id__,
											    const_State_machine_cycleTime,
											    const_setPointRamping_rampStep)[]
									T_State_machine_t3(id__,
											    const_State_machine_cycleTime,
											    const_setPointRamping_rampStep)
									[]
									internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_Wait24Vpower_t2,TID_State_machine_t3,TID_State_machine_Wait24Vpower_t0,TID_State_machine_Wait24Vpower_t3,TID_State_machine_t2,TID_State_machine_t7,TID_State_machine_t4,TID_State_machine_Wait24Vpower_t1,TID_State_machine_Wait24Vpower_t4}) -> exit?y____:diff(SIDS,{SID_State_machine_Wait24Vpower})!SID_State_machine_Wait24Vpower -> (
											exit!SID_State_machine_Wait24Vpower?z____:{SID_State_machine_Wait24Vpower_f0} -> exited!SID_State_machine_Wait24Vpower!z____ -> 
													SKIP;
											SKIP;
											exited!y____!SID_State_machine_Wait24Vpower -> SKIP);
											State_State_machine_Wait24Vpower_aux(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] ext_ActualHV__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_Wait24Vpower_t2,TID_State_machine_t3,TID_State_machine_Wait24Vpower_t0,TID_State_machine_Wait24Vpower_t3,TID_State_machine_t2,TID_State_machine_t7,TID_State_machine_t4,TID_State_machine_Wait24Vpower_t1,TID_State_machine_Wait24Vpower_t4})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_State_machine_Wait24Vpower})!SID_State_machine_Wait24Vpower -> (
											exit!SID_State_machine_Wait24Vpower?z____:{SID_State_machine_Wait24Vpower_f0} -> exited!SID_State_machine_Wait24Vpower!z____ -> 
													SKIP;
											SKIP;
											exited!y____!SID_State_machine_Wait24Vpower -> SKIP);
											State_State_machine_Wait24Vpower_aux(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] ext_pow24VStatus__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_Wait24Vpower_t2,TID_State_machine_t3,TID_State_machine_Wait24Vpower_t0,TID_State_machine_Wait24Vpower_t3,TID_State_machine_t2,TID_State_machine_t7,TID_State_machine_t4,TID_State_machine_Wait24Vpower_t1,TID_State_machine_Wait24Vpower_t4})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_State_machine_Wait24Vpower})!SID_State_machine_Wait24Vpower -> (
											exit!SID_State_machine_Wait24Vpower?z____:{SID_State_machine_Wait24Vpower_f0} -> exited!SID_State_machine_Wait24Vpower!z____ -> 
													SKIP;
											SKIP;
											exited!y____!SID_State_machine_Wait24Vpower -> SKIP);
											State_State_machine_Wait24Vpower_aux(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] ext_errorAck__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_Wait24Vpower_t2,TID_State_machine_t3,TID_State_machine_Wait24Vpower_t0,TID_State_machine_Wait24Vpower_t3,TID_State_machine_t2,TID_State_machine_t7,TID_State_machine_t4,TID_State_machine_Wait24Vpower_t1,TID_State_machine_Wait24Vpower_t4})?d____ ->	exit?y____:diff(SIDS,{SID_State_machine_Wait24Vpower})!SID_State_machine_Wait24Vpower -> (
											exit!SID_State_machine_Wait24Vpower?z____:{SID_State_machine_Wait24Vpower_f0} -> exited!SID_State_machine_Wait24Vpower!z____ -> 
													SKIP;
											SKIP;
											exited!y____!SID_State_machine_Wait24Vpower -> SKIP);
											State_State_machine_Wait24Vpower_aux(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] ext_setPoint__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_Wait24Vpower_t2,TID_State_machine_t3,TID_State_machine_Wait24Vpower_t0,TID_State_machine_Wait24Vpower_t3,TID_State_machine_t2,TID_State_machine_t7,TID_State_machine_t4,TID_State_machine_Wait24Vpower_t1,TID_State_machine_Wait24Vpower_t4})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_State_machine_Wait24Vpower})!SID_State_machine_Wait24Vpower -> (
											exit!SID_State_machine_Wait24Vpower?z____:{SID_State_machine_Wait24Vpower_f0} -> exited!SID_State_machine_Wait24Vpower!z____ -> 
													SKIP;
											SKIP;
											exited!y____!SID_State_machine_Wait24Vpower -> SKIP);
											State_State_machine_Wait24Vpower_aux(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] int_dutyCyclePWM1__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_Wait24Vpower_t2,TID_State_machine_t3,TID_State_machine_Wait24Vpower_t0,TID_State_machine_Wait24Vpower_t3,TID_State_machine_t2,TID_State_machine_t7,TID_State_machine_t4,TID_State_machine_Wait24Vpower_t1,TID_State_machine_Wait24Vpower_t4})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_State_machine_Wait24Vpower})!SID_State_machine_Wait24Vpower -> (
											exit!SID_State_machine_Wait24Vpower?z____:{SID_State_machine_Wait24Vpower_f0} -> exited!SID_State_machine_Wait24Vpower!z____ -> 
													SKIP;
											SKIP;
											exited!y____!SID_State_machine_Wait24Vpower -> SKIP);
											State_State_machine_Wait24Vpower_aux(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] int_enablePWM__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_Wait24Vpower_t2,TID_State_machine_t3,TID_State_machine_Wait24Vpower_t0,TID_State_machine_Wait24Vpower_t3,TID_State_machine_t2,TID_State_machine_t7,TID_State_machine_t4,TID_State_machine_Wait24Vpower_t1,TID_State_machine_Wait24Vpower_t4})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_State_machine_Wait24Vpower})!SID_State_machine_Wait24Vpower -> (
											exit!SID_State_machine_Wait24Vpower?z____:{SID_State_machine_Wait24Vpower_f0} -> exited!SID_State_machine_Wait24Vpower!z____ -> 
													SKIP;
											SKIP;
											exited!y____!SID_State_machine_Wait24Vpower -> SKIP);
											State_State_machine_Wait24Vpower_aux(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
								))
						within
							enter?x____:diff(SIDS,{SID_State_machine_Wait24Vpower})!SID_State_machine_Wait24Vpower -> (State_State_machine_Wait24Vpower_aux_execute(id__,x____,
									          const_setPointRamping_rampStep))
						
						CS_State_machine_Wait24Vpower_f0_sync = {|
							enter.y____.x____, 
							entered.y____.x____, 
							exit.y____.x____, 
							exited.y____.x____,
							enter.x____.y____, 
							entered.x____.y____, 
							exit.x____.y____, 
							exited.x____.y____ |
							x____ <- {SID_State_machine_Wait24Vpower_f0},
							y____ <- {SID_State_machine_Wait24Vpower_f0}
						|}
						
						
						State_machine_Wait24Vpower_f0_triggers = {|
						|}
						
						State_State_machine_Wait24Vpower_f0(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = let
							State_State_machine_Wait24Vpower_f0_execute(id__,o____,
									          const_setPointRamping_rampStep) = SKIP; 
								entered!o____!SID_State_machine_Wait24Vpower_f0 ->
								(SKIP; STOP /\ (
									internal__?x____:diff(ITIDS,{NULLTRANSITION__}) -> exit?y____:diff(SIDS,{SID_State_machine_Wait24Vpower_f0})!SID_State_machine_Wait24Vpower_f0 -> (
											SKIP;
											exited!y____!SID_State_machine_Wait24Vpower_f0 -> SKIP);
											State_State_machine_Wait24Vpower_f0(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] ext_ActualHV__?x____:diff(ITIDS,{NULLTRANSITION__})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_State_machine_Wait24Vpower_f0})!SID_State_machine_Wait24Vpower_f0 -> (
											SKIP;
											exited!y____!SID_State_machine_Wait24Vpower_f0 -> SKIP);
											State_State_machine_Wait24Vpower_f0(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] ext_pow24VStatus__?x____:diff(ITIDS,{NULLTRANSITION__})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_State_machine_Wait24Vpower_f0})!SID_State_machine_Wait24Vpower_f0 -> (
											SKIP;
											exited!y____!SID_State_machine_Wait24Vpower_f0 -> SKIP);
											State_State_machine_Wait24Vpower_f0(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] ext_errorAck__?x____:diff(ITIDS,{NULLTRANSITION__})?d____ ->	exit?y____:diff(SIDS,{SID_State_machine_Wait24Vpower_f0})!SID_State_machine_Wait24Vpower_f0 -> (
											SKIP;
											exited!y____!SID_State_machine_Wait24Vpower_f0 -> SKIP);
											State_State_machine_Wait24Vpower_f0(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] ext_setPoint__?x____:diff(ITIDS,{NULLTRANSITION__})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_State_machine_Wait24Vpower_f0})!SID_State_machine_Wait24Vpower_f0 -> (
											SKIP;
											exited!y____!SID_State_machine_Wait24Vpower_f0 -> SKIP);
											State_State_machine_Wait24Vpower_f0(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] int_dutyCyclePWM1__?x____:diff(ITIDS,{NULLTRANSITION__})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_State_machine_Wait24Vpower_f0})!SID_State_machine_Wait24Vpower_f0 -> (
											SKIP;
											exited!y____!SID_State_machine_Wait24Vpower_f0 -> SKIP);
											State_State_machine_Wait24Vpower_f0(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] int_enablePWM__?x____:diff(ITIDS,{NULLTRANSITION__})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_State_machine_Wait24Vpower_f0})!SID_State_machine_Wait24Vpower_f0 -> (
											SKIP;
											exited!y____!SID_State_machine_Wait24Vpower_f0 -> SKIP);
											State_State_machine_Wait24Vpower_f0(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
								))
						within
							enter?x____:diff(SIDS,{SID_State_machine_Wait24Vpower_f0})!SID_State_machine_Wait24Vpower_f0 -> (State_State_machine_Wait24Vpower_f0_execute(id__,x____,
									          const_setPointRamping_rampStep))
						
						CS_State_machine_ErrorMode_sync = {|
							enter.y____.x____, 
							entered.y____.x____, 
							exit.y____.x____, 
							exited.y____.x____,
							enter.x____.y____, 
							entered.x____.y____, 
							exit.x____.y____, 
							exited.x____.y____ |
							x____ <- {SID_State_machine_Init,SID_State_machine_ClosedLoop,SID_State_machine_Wait24Vpower,SID_State_machine_ErrorMode},
							y____ <- {SID_State_machine_ErrorMode}
						|}
						
						State_machine_ErrorMode_int_int = {|
							ext_ActualHV__.TID_State_machine_ErrorMode_t1,
							ext_pow24VStatus__.TID_State_machine_ErrorMode_t1,
							ext_errorAck__.TID_State_machine_ErrorMode_t1,
							ext_setPoint__.TID_State_machine_ErrorMode_t1,
							int_dutyCyclePWM1__.TID_State_machine_ErrorMode_t1,
							int_enablePWM__.TID_State_machine_ErrorMode_t1,
							internal__.TID_State_machine_ErrorMode_t1,
							ext_ActualHV__.TID_State_machine_ErrorMode_t2,
							ext_pow24VStatus__.TID_State_machine_ErrorMode_t2,
							ext_errorAck__.TID_State_machine_ErrorMode_t2,
							ext_setPoint__.TID_State_machine_ErrorMode_t2,
							int_dutyCyclePWM1__.TID_State_machine_ErrorMode_t2,
							int_enablePWM__.TID_State_machine_ErrorMode_t2,
							internal__.TID_State_machine_ErrorMode_t2
						|}
							
						
						State_machine_ErrorMode_int_triggers = {|
							internal__.TID_State_machine_ErrorMode_t0,
							internal__.TID_State_machine_ErrorMode_t1,
							ext_errorAck__.TID_State_machine_ErrorMode_t2
						|}
						
						State_State_machine_ErrorMode_s0_R(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = 
							State_State_machine_ErrorMode_s0(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)
						 		[|diff(State_machine_ErrorMode_int_int,State_machine_ErrorMode_s0_triggers)|]
						 	SKIP
						 		
						State_State_machine_ErrorMode_f0_R(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = 
							State_State_machine_ErrorMode_f0(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)
						 		[|diff(State_machine_ErrorMode_int_int,State_machine_ErrorMode_f0_triggers)|]
						 	SKIP
						 		
						State_State_machine_ErrorMode(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = (
							State_State_machine_ErrorMode_aux(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)
								[|
									union(
										diff(int_int, State_machine_ErrorMode_int_triggers),
										{|enter.x____.y____,
										  entered.x____.y____,
										  exit.x____.y____,
										  exited.x____.y____ |
										  x____ <- diff(SIDS,{SID_State_machine_ErrorMode_s0,SID_State_machine_ErrorMode_f0}),
										  y____ <- {SID_State_machine_ErrorMode_s0,SID_State_machine_ErrorMode_f0}
									    |}
									)
								|]
							(
								State_State_machine_ErrorMode_s0_R(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep)
									[|inter(CS_State_machine_ErrorMode_s0_sync,CS_State_machine_ErrorMode_f0_sync)|]
								State_State_machine_ErrorMode_f0_R(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep)
							)
						)
						
						State_machine_ErrorMode_triggers = {|
							ext_errorAck__.TID_State_machine_ErrorMode_t2,
							internal__.TID_State_machine_t3,
							internal__.TID_State_machine_t7,
							internal__.TID_State_machine_t2,
							internal__.TID_State_machine_t4,
							internal__.TID_State_machine_ErrorMode_t0,
							internal__.TID_State_machine_ErrorMode_t1
						|}
						
						State_State_machine_ErrorMode_aux(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = let
							T_State_machine_t7(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = internal__!TID_State_machine_t7 ->  exit.SID_State_machine_ErrorMode.SID_State_machine_ErrorMode -> SKIP;
												exit!SID_State_machine_ErrorMode?z____:{SID_State_machine_ErrorMode_s0,SID_State_machine_ErrorMode_f0} -> exited!SID_State_machine_ErrorMode!z____ -> 
														SKIP;
												SKIP;exited.SID_State_machine_ErrorMode.SID_State_machine_ErrorMode -> SKIP;
												enter!SID_State_machine_ErrorMode!SID_State_machine_Wait24Vpower -> entered!SID_State_machine_ErrorMode!SID_State_machine_Wait24Vpower ->
												State_State_machine_ErrorMode_aux(id__,
														    const_State_machine_cycleTime,
														    const_setPointRamping_rampStep)
							State_State_machine_ErrorMode_aux_execute(id__,o____,
									          const_setPointRamping_rampStep) = true & (set_currentState!State_ErrorMode -> SKIP); 
							I_State_machine_ErrorMode_i0(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep);
								entered!o____!SID_State_machine_ErrorMode ->
								(SKIP; STOP /\ (
									T_State_machine_t7(id__,
											    const_State_machine_cycleTime,
											    const_setPointRamping_rampStep)
									[]
									internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_ErrorMode_t2,TID_State_machine_t3,TID_State_machine_t7,TID_State_machine_t2,TID_State_machine_t4,TID_State_machine_ErrorMode_t0,TID_State_machine_ErrorMode_t1}) -> exit?y____:diff(SIDS,{SID_State_machine_ErrorMode})!SID_State_machine_ErrorMode -> (
											exit!SID_State_machine_ErrorMode?z____:{SID_State_machine_ErrorMode_s0,SID_State_machine_ErrorMode_f0} -> exited!SID_State_machine_ErrorMode!z____ -> 
													SKIP;
											SKIP;
											exited!y____!SID_State_machine_ErrorMode -> SKIP);
											State_State_machine_ErrorMode_aux(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] ext_ActualHV__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_ErrorMode_t2,TID_State_machine_t3,TID_State_machine_t7,TID_State_machine_t2,TID_State_machine_t4,TID_State_machine_ErrorMode_t0,TID_State_machine_ErrorMode_t1})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_State_machine_ErrorMode})!SID_State_machine_ErrorMode -> (
											exit!SID_State_machine_ErrorMode?z____:{SID_State_machine_ErrorMode_s0,SID_State_machine_ErrorMode_f0} -> exited!SID_State_machine_ErrorMode!z____ -> 
													SKIP;
											SKIP;
											exited!y____!SID_State_machine_ErrorMode -> SKIP);
											State_State_machine_ErrorMode_aux(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] ext_pow24VStatus__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_ErrorMode_t2,TID_State_machine_t3,TID_State_machine_t7,TID_State_machine_t2,TID_State_machine_t4,TID_State_machine_ErrorMode_t0,TID_State_machine_ErrorMode_t1})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_State_machine_ErrorMode})!SID_State_machine_ErrorMode -> (
											exit!SID_State_machine_ErrorMode?z____:{SID_State_machine_ErrorMode_s0,SID_State_machine_ErrorMode_f0} -> exited!SID_State_machine_ErrorMode!z____ -> 
													SKIP;
											SKIP;
											exited!y____!SID_State_machine_ErrorMode -> SKIP);
											State_State_machine_ErrorMode_aux(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] ext_errorAck__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_ErrorMode_t2,TID_State_machine_t3,TID_State_machine_t7,TID_State_machine_t2,TID_State_machine_t4,TID_State_machine_ErrorMode_t0,TID_State_machine_ErrorMode_t1})?d____ ->	exit?y____:diff(SIDS,{SID_State_machine_ErrorMode})!SID_State_machine_ErrorMode -> (
											exit!SID_State_machine_ErrorMode?z____:{SID_State_machine_ErrorMode_s0,SID_State_machine_ErrorMode_f0} -> exited!SID_State_machine_ErrorMode!z____ -> 
													SKIP;
											SKIP;
											exited!y____!SID_State_machine_ErrorMode -> SKIP);
											State_State_machine_ErrorMode_aux(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] ext_setPoint__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_ErrorMode_t2,TID_State_machine_t3,TID_State_machine_t7,TID_State_machine_t2,TID_State_machine_t4,TID_State_machine_ErrorMode_t0,TID_State_machine_ErrorMode_t1})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_State_machine_ErrorMode})!SID_State_machine_ErrorMode -> (
											exit!SID_State_machine_ErrorMode?z____:{SID_State_machine_ErrorMode_s0,SID_State_machine_ErrorMode_f0} -> exited!SID_State_machine_ErrorMode!z____ -> 
													SKIP;
											SKIP;
											exited!y____!SID_State_machine_ErrorMode -> SKIP);
											State_State_machine_ErrorMode_aux(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] int_dutyCyclePWM1__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_ErrorMode_t2,TID_State_machine_t3,TID_State_machine_t7,TID_State_machine_t2,TID_State_machine_t4,TID_State_machine_ErrorMode_t0,TID_State_machine_ErrorMode_t1})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_State_machine_ErrorMode})!SID_State_machine_ErrorMode -> (
											exit!SID_State_machine_ErrorMode?z____:{SID_State_machine_ErrorMode_s0,SID_State_machine_ErrorMode_f0} -> exited!SID_State_machine_ErrorMode!z____ -> 
													SKIP;
											SKIP;
											exited!y____!SID_State_machine_ErrorMode -> SKIP);
											State_State_machine_ErrorMode_aux(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] int_enablePWM__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_ErrorMode_t2,TID_State_machine_t3,TID_State_machine_t7,TID_State_machine_t2,TID_State_machine_t4,TID_State_machine_ErrorMode_t0,TID_State_machine_ErrorMode_t1})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_State_machine_ErrorMode})!SID_State_machine_ErrorMode -> (
											exit!SID_State_machine_ErrorMode?z____:{SID_State_machine_ErrorMode_s0,SID_State_machine_ErrorMode_f0} -> exited!SID_State_machine_ErrorMode!z____ -> 
													SKIP;
											SKIP;
											exited!y____!SID_State_machine_ErrorMode -> SKIP);
											State_State_machine_ErrorMode_aux(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
								))
						within
							enter?x____:diff(SIDS,{SID_State_machine_ErrorMode})!SID_State_machine_ErrorMode -> (State_State_machine_ErrorMode_aux_execute(id__,x____,
									          const_setPointRamping_rampStep))
						
						CS_State_machine_ErrorMode_s0_sync = {|
							enter.y____.x____, 
							entered.y____.x____, 
							exit.y____.x____, 
							exited.y____.x____,
							enter.x____.y____, 
							entered.x____.y____, 
							exit.x____.y____, 
							exited.x____.y____ |
							x____ <- {SID_State_machine_ErrorMode_s0,SID_State_machine_ErrorMode_f0},
							y____ <- {SID_State_machine_ErrorMode_s0}
						|}
						
						
						State_machine_ErrorMode_s0_triggers = {|
							ext_errorAck__.TID_State_machine_ErrorMode_t2,
							internal__.TID_State_machine_ErrorMode_t1
						|}
						
						State_State_machine_ErrorMode_s0(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = let
							T_State_machine_ErrorMode_t1(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = internal__!TID_State_machine_ErrorMode_t1 ->  exit.SID_State_machine_ErrorMode_s0.SID_State_machine_ErrorMode_s0 -> SKIP;
												SKIP;exited.SID_State_machine_ErrorMode_s0.SID_State_machine_ErrorMode_s0 -> SKIP;
												enter!SID_State_machine_ErrorMode_s0!SID_State_machine_ErrorMode_s0 -> State_State_machine_ErrorMode_s0_execute(id__,SID_State_machine_ErrorMode_s0,
														          const_setPointRamping_rampStep)
							T_State_machine_ErrorMode_t2(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = ext_errorAck__!TID_State_machine_ErrorMode_t2.in ->  (exit.SID_State_machine_ErrorMode_s0.SID_State_machine_ErrorMode_s0 -> SKIP;
												SKIP;exited.SID_State_machine_ErrorMode_s0.SID_State_machine_ErrorMode_s0 -> SKIP;
												true & (set_currentState!State_Wait24Vpower -> SKIP);enter!SID_State_machine_ErrorMode_s0!SID_State_machine_ErrorMode_f0 -> entered!SID_State_machine_ErrorMode_s0!SID_State_machine_ErrorMode_f0 ->
												State_State_machine_ErrorMode_s0(id__,
														    const_State_machine_cycleTime,
														    const_setPointRamping_rampStep)
							)
							State_State_machine_ErrorMode_s0_execute(id__,o____,
									          const_setPointRamping_rampStep) = true&CALL__disableHV(
										id__,
										false
									);DoClockReset({clockReset.CLID_Cl1}); 
								entered!o____!SID_State_machine_ErrorMode_s0 ->
								(SKIP; STOP /\ (
									T_State_machine_ErrorMode_t1(id__,
											    const_State_machine_cycleTime,
											    const_setPointRamping_rampStep)[]
									T_State_machine_ErrorMode_t2(id__,
											    const_State_machine_cycleTime,
											    const_setPointRamping_rampStep)
									[]
									internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_ErrorMode_t2,TID_State_machine_ErrorMode_t1}) -> exit?y____:diff(SIDS,{SID_State_machine_ErrorMode_s0})!SID_State_machine_ErrorMode_s0 -> (
											SKIP;
											exited!y____!SID_State_machine_ErrorMode_s0 -> SKIP);
											State_State_machine_ErrorMode_s0(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] ext_ActualHV__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_ErrorMode_t2,TID_State_machine_ErrorMode_t1})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_State_machine_ErrorMode_s0})!SID_State_machine_ErrorMode_s0 -> (
											SKIP;
											exited!y____!SID_State_machine_ErrorMode_s0 -> SKIP);
											State_State_machine_ErrorMode_s0(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] ext_pow24VStatus__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_ErrorMode_t2,TID_State_machine_ErrorMode_t1})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_State_machine_ErrorMode_s0})!SID_State_machine_ErrorMode_s0 -> (
											SKIP;
											exited!y____!SID_State_machine_ErrorMode_s0 -> SKIP);
											State_State_machine_ErrorMode_s0(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] ext_errorAck__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_ErrorMode_t2,TID_State_machine_ErrorMode_t1})?d____ ->	exit?y____:diff(SIDS,{SID_State_machine_ErrorMode_s0})!SID_State_machine_ErrorMode_s0 -> (
											SKIP;
											exited!y____!SID_State_machine_ErrorMode_s0 -> SKIP);
											State_State_machine_ErrorMode_s0(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] ext_setPoint__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_ErrorMode_t2,TID_State_machine_ErrorMode_t1})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_State_machine_ErrorMode_s0})!SID_State_machine_ErrorMode_s0 -> (
											SKIP;
											exited!y____!SID_State_machine_ErrorMode_s0 -> SKIP);
											State_State_machine_ErrorMode_s0(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] int_dutyCyclePWM1__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_ErrorMode_t2,TID_State_machine_ErrorMode_t1})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_State_machine_ErrorMode_s0})!SID_State_machine_ErrorMode_s0 -> (
											SKIP;
											exited!y____!SID_State_machine_ErrorMode_s0 -> SKIP);
											State_State_machine_ErrorMode_s0(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] int_enablePWM__?x____:diff(ITIDS,{NULLTRANSITION__,TID_State_machine_ErrorMode_t2,TID_State_machine_ErrorMode_t1})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_State_machine_ErrorMode_s0})!SID_State_machine_ErrorMode_s0 -> (
											SKIP;
											exited!y____!SID_State_machine_ErrorMode_s0 -> SKIP);
											State_State_machine_ErrorMode_s0(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
								))
						within
							enter?x____:diff(SIDS,{SID_State_machine_ErrorMode_s0})!SID_State_machine_ErrorMode_s0 -> (State_State_machine_ErrorMode_s0_execute(id__,x____,
									          const_setPointRamping_rampStep))
						
						CS_State_machine_ErrorMode_f0_sync = {|
							enter.y____.x____, 
							entered.y____.x____, 
							exit.y____.x____, 
							exited.y____.x____,
							enter.x____.y____, 
							entered.x____.y____, 
							exit.x____.y____, 
							exited.x____.y____ |
							x____ <- {SID_State_machine_ErrorMode_s0,SID_State_machine_ErrorMode_f0},
							y____ <- {SID_State_machine_ErrorMode_f0}
						|}
						
						
						State_machine_ErrorMode_f0_triggers = {|
						|}
						
						State_State_machine_ErrorMode_f0(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = let
							State_State_machine_ErrorMode_f0_execute(id__,o____,
									          const_setPointRamping_rampStep) = SKIP; 
								entered!o____!SID_State_machine_ErrorMode_f0 ->
								(SKIP; STOP /\ (
									internal__?x____:diff(ITIDS,{NULLTRANSITION__}) -> exit?y____:diff(SIDS,{SID_State_machine_ErrorMode_f0})!SID_State_machine_ErrorMode_f0 -> (
											SKIP;
											exited!y____!SID_State_machine_ErrorMode_f0 -> SKIP);
											State_State_machine_ErrorMode_f0(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] ext_ActualHV__?x____:diff(ITIDS,{NULLTRANSITION__})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_State_machine_ErrorMode_f0})!SID_State_machine_ErrorMode_f0 -> (
											SKIP;
											exited!y____!SID_State_machine_ErrorMode_f0 -> SKIP);
											State_State_machine_ErrorMode_f0(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] ext_pow24VStatus__?x____:diff(ITIDS,{NULLTRANSITION__})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_State_machine_ErrorMode_f0})!SID_State_machine_ErrorMode_f0 -> (
											SKIP;
											exited!y____!SID_State_machine_ErrorMode_f0 -> SKIP);
											State_State_machine_ErrorMode_f0(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] ext_errorAck__?x____:diff(ITIDS,{NULLTRANSITION__})?d____ ->	exit?y____:diff(SIDS,{SID_State_machine_ErrorMode_f0})!SID_State_machine_ErrorMode_f0 -> (
											SKIP;
											exited!y____!SID_State_machine_ErrorMode_f0 -> SKIP);
											State_State_machine_ErrorMode_f0(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] ext_setPoint__?x____:diff(ITIDS,{NULLTRANSITION__})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_State_machine_ErrorMode_f0})!SID_State_machine_ErrorMode_f0 -> (
											SKIP;
											exited!y____!SID_State_machine_ErrorMode_f0 -> SKIP);
											State_State_machine_ErrorMode_f0(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] int_dutyCyclePWM1__?x____:diff(ITIDS,{NULLTRANSITION__})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_State_machine_ErrorMode_f0})!SID_State_machine_ErrorMode_f0 -> (
											SKIP;
											exited!y____!SID_State_machine_ErrorMode_f0 -> SKIP);
											State_State_machine_ErrorMode_f0(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
									[] int_enablePWM__?x____:diff(ITIDS,{NULLTRANSITION__})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_State_machine_ErrorMode_f0})!SID_State_machine_ErrorMode_f0 -> (
											SKIP;
											exited!y____!SID_State_machine_ErrorMode_f0 -> SKIP);
											State_State_machine_ErrorMode_f0(id__,
													    const_State_machine_cycleTime,
													    const_setPointRamping_rampStep)
								))
						within
							enter?x____:diff(SIDS,{SID_State_machine_ErrorMode_f0})!SID_State_machine_ErrorMode_f0 -> (State_State_machine_ErrorMode_f0_execute(id__,x____,
									          const_setPointRamping_rampStep))
						
						
						I_State_machine_ClosedLoop_i0(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = let
							J_State_machine_ClosedLoop_j7(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = (
										(internal__!TID_State_machine_ClosedLoop_t13 -> Deadline(true&(ext_setPoint.in?setPoint -> set_setPoint!setPoint -> SKIP),0);get_setPoint?setPoint -> true&(if ((setPoint==0)) then (true&CALL__disableHV(
													id__,
													false
												)) else (SKIP));J_State_machine_ClosedLoop_j0(id__,
												    const_State_machine_cycleTime,
												    const_setPointRamping_rampStep))
										)
							J_State_machine_ClosedLoop_j0(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = (
										(internal__!TID_State_machine_ClosedLoop_t1 -> true & (set_HVEnabled!true -> SKIP);J_State_machine_ClosedLoop_j1(id__,
												    const_State_machine_cycleTime,
												    const_setPointRamping_rampStep))[]
										(internal__!TID_State_machine_ClosedLoop_t3 -> J_State_machine_ClosedLoop_j3(id__,
												    const_State_machine_cycleTime,
												    const_setPointRamping_rampStep))
										)
							J_State_machine_ClosedLoop_j1(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = (
										(internal__!TID_State_machine_ClosedLoop_t2 -> true&CALL__supplyVoltCheck(
													id__
												);J_State_machine_ClosedLoop_j2(id__,
												    const_State_machine_cycleTime,
												    const_setPointRamping_rampStep))
										)
							J_State_machine_ClosedLoop_j4(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = (
										(internal__!TID_State_machine_ClosedLoop_t9 -> Deadline(true&(ext_setPoint.in?setPoint -> set_setPoint!setPoint -> SKIP),0);get_setPoint?setPoint -> true&CALL__setPointRamping(
													id__,
													setPoint,
													const_setPointRamping_rampStep
												);J_State_machine_ClosedLoop_j6(id__,
												    const_State_machine_cycleTime,
												    const_setPointRamping_rampStep))[]
										(internal__!TID_State_machine_ClosedLoop_t12 -> J_State_machine_ClosedLoop_j6(id__,
												    const_State_machine_cycleTime,
												    const_setPointRamping_rampStep))
										)
							J_State_machine_ClosedLoop_j6(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = (
										(internal__!TID_State_machine_ClosedLoop_t8 -> true&CALL__PID_Control(
													id__
												);enter!SID_State_machine_ClosedLoop!SID_State_machine_ClosedLoop_s0 -> entered!SID_State_machine_ClosedLoop!SID_State_machine_ClosedLoop_s0 ->
										SKIP
										)
										)
							J_State_machine_ClosedLoop_j2(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = (
										(internal__!TID_State_machine_ClosedLoop_t4 -> true&CALL__enableHV(
													id__
												);J_State_machine_ClosedLoop_j3(id__,
												    const_State_machine_cycleTime,
												    const_setPointRamping_rampStep))[]
										(internal__!TID_State_machine_ClosedLoop_t5 -> J_State_machine_ClosedLoop_j3(id__,
												    const_State_machine_cycleTime,
												    const_setPointRamping_rampStep))
										)
							J_State_machine_ClosedLoop_j3(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = (
										(internal__!TID_State_machine_ClosedLoop_t7 -> true&CALL__checkLimits(
													id__
												);J_State_machine_ClosedLoop_j4(id__,
												    const_State_machine_cycleTime,
												    const_setPointRamping_rampStep))
										)
							T_State_machine_ClosedLoop_t0(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = internal__!TID_State_machine_ClosedLoop_t0 -> J_State_machine_ClosedLoop_j7(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)
						within
							T_State_machine_ClosedLoop_t0(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)
						
						I_State_machine_i0(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = let
							T_State_machine_t5(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = internal__!TID_State_machine_t5 -> true & (set_mSetPoint!0 -> SKIP);true & (set_HVEnabled!false -> SKIP);WAIT(const_State_machine_cycleTime);enter!SID_State_machine!SID_State_machine_Init -> entered!SID_State_machine!SID_State_machine_Init ->
							SKIP
						within
							T_State_machine_t5(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)
						
						I_State_machine_Wait24Vpower_i0(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = let
							J_State_machine_Wait24Vpower_j1(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = (
										(internal__!TID_State_machine_Wait24Vpower_t2 -> true&CALL__disableHV(
													id__,
													true
												);WAIT(const_State_machine_cycleTime);enter!SID_State_machine_Wait24Vpower!SID_State_machine_Wait24Vpower_f0 -> entered!SID_State_machine_Wait24Vpower!SID_State_machine_Wait24Vpower_f0 ->
										SKIP
										)[]
										(internal__!TID_State_machine_Wait24Vpower_t3 -> WAIT(const_State_machine_cycleTime);enter!SID_State_machine_Wait24Vpower!SID_State_machine_Wait24Vpower_f0 -> entered!SID_State_machine_Wait24Vpower!SID_State_machine_Wait24Vpower_f0 ->
										SKIP
										)[]
										(internal__!TID_State_machine_Wait24Vpower_t4 -> WAIT(const_State_machine_cycleTime);J_State_machine_Wait24Vpower_j0(id__,
												    const_State_machine_cycleTime,
												    const_setPointRamping_rampStep))
										)
							J_State_machine_Wait24Vpower_j0(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = (
										(internal__!TID_State_machine_Wait24Vpower_t1 -> true&CALL__disableHV(
													id__,
													false
												);true&CALL__supplyVoltCheck(
													id__
												);Deadline(true&(ext_setPoint.in?setPoint -> set_setPoint!setPoint -> SKIP),0);J_State_machine_Wait24Vpower_j1(id__,
												    const_State_machine_cycleTime,
												    const_setPointRamping_rampStep))
										)
							T_State_machine_Wait24Vpower_t0(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = internal__!TID_State_machine_Wait24Vpower_t0 -> J_State_machine_Wait24Vpower_j0(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)
						within
							T_State_machine_Wait24Vpower_t0(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)
						
						I_State_machine_ErrorMode_i0(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = let
							T_State_machine_ErrorMode_t0(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = internal__!TID_State_machine_ErrorMode_t0 -> enter!SID_State_machine_ErrorMode!SID_State_machine_ErrorMode_s0 -> entered!SID_State_machine_ErrorMode!SID_State_machine_ErrorMode_s0 ->
							SKIP
						within
							T_State_machine_ErrorMode_t0(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)
						
						
						State_State_machine_Init_R(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = 
							State_State_machine_Init(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)
								[|diff(int_int,State_machine_Init_triggers)|]
							SKIP
								 		
						State_State_machine_ClosedLoop_R(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = 
							State_State_machine_ClosedLoop(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)
								[|diff(int_int,State_machine_ClosedLoop_triggers)|]
							SKIP
								 		
						State_State_machine_Wait24Vpower_R(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = 
							State_State_machine_Wait24Vpower(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)
								[|diff(int_int,State_machine_Wait24Vpower_triggers)|]
							SKIP
								 		
						State_State_machine_ErrorMode_R(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = 
							State_State_machine_ErrorMode(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)
								[|diff(int_int,State_machine_ErrorMode_triggers)|]
							SKIP
								 		
							
						STM(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = (
							I_State_machine_i0(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)
								[|
									{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
										x____ <- diff(SIDS,{SID_State_machine_Init,SID_State_machine_ClosedLoop,SID_State_machine_Wait24Vpower,SID_State_machine_ErrorMode}),
										y____ <- {SID_State_machine_Init,SID_State_machine_ClosedLoop,SID_State_machine_Wait24Vpower,SID_State_machine_ErrorMode}
								|}|]
							(
								State_State_machine_Init_R(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep)
									[|inter(CS_State_machine_Init_sync,union(union(CS_State_machine_ClosedLoop_sync,CS_State_machine_Wait24Vpower_sync),CS_State_machine_ErrorMode_sync))|]
								(
									State_State_machine_ClosedLoop_R(id__,
											    const_State_machine_cycleTime,
											    const_setPointRamping_rampStep)
										[|inter(CS_State_machine_ClosedLoop_sync,union(CS_State_machine_Wait24Vpower_sync,CS_State_machine_ErrorMode_sync))|]
									(
										State_State_machine_Wait24Vpower_R(id__,
												    const_State_machine_cycleTime,
												    const_setPointRamping_rampStep)
											[|inter(CS_State_machine_Wait24Vpower_sync,CS_State_machine_ErrorMode_sync)|]
										State_State_machine_ErrorMode_R(id__,
												    const_State_machine_cycleTime,
												    const_setPointRamping_rampStep)
									)
								)
							)
						)
						
						-- optimized memory process
						channel getV_setPoint: core_real
						channel getV_newSetPoint: core_real
						channel getV_ActualHV: core_real
						channel getV_overLimit: core_real
						channel getV_underLimit: core_real
						channel getV_currentState: State
						channel getV_HVEnabled: core_boolean
						channel getV_pow24VStatus: Power
						channel getV_mSetPoint: core_real
						channel getV_dutyCyclePWM1: duty
						
						-- individual memory processes
						Memory_setPoint(x__) = ( 
							get_setPoint!x__ -> Memory_setPoint(x__)
							[]
							getV_setPoint!x__ -> Memory_setPoint(x__)
							[]
							set_setPoint?x__ -> Memory_setPoint(x__)
						)
						Memory_newSetPoint(x__) = ( 
							get_newSetPoint!x__ -> Memory_newSetPoint(x__)
							[]
							getV_newSetPoint!x__ -> Memory_newSetPoint(x__)
							[]
							set_newSetPoint?x__ -> Memory_newSetPoint(x__)
						)
						Memory_ActualHV(x__) = ( 
							get_ActualHV!x__ -> Memory_ActualHV(x__)
							[]
							getV_ActualHV!x__ -> Memory_ActualHV(x__)
							[]
							set_ActualHV?x__ -> Memory_ActualHV(x__)
						)
						Memory_overLimit(x__) = ( 
							get_overLimit!x__ -> Memory_overLimit(x__)
							[]
							getV_overLimit!x__ -> Memory_overLimit(x__)
							[]
							set_overLimit?x__ -> Memory_overLimit(x__)
							[]
							set_EXT_overLimit?x__ -> Memory_overLimit(x__)
						)
						Memory_underLimit(x__) = ( 
							get_underLimit!x__ -> Memory_underLimit(x__)
							[]
							getV_underLimit!x__ -> Memory_underLimit(x__)
							[]
							set_underLimit?x__ -> Memory_underLimit(x__)
							[]
							set_EXT_underLimit?x__ -> Memory_underLimit(x__)
						)
						Memory_currentState(x__) = ( 
							get_currentState!x__ -> Memory_currentState(x__)
							[]
							getV_currentState!x__ -> Memory_currentState(x__)
							[]
							set_currentState?x__ -> Memory_currentState(x__)
							[]
							set_EXT_currentState?x__ -> Memory_currentState(x__)
						)
						Memory_HVEnabled(x__) = ( 
							get_HVEnabled!x__ -> Memory_HVEnabled(x__)
							[]
							getV_HVEnabled!x__ -> Memory_HVEnabled(x__)
							[]
							set_HVEnabled?x__ -> Memory_HVEnabled(x__)
							[]
							set_EXT_HVEnabled?x__ -> Memory_HVEnabled(x__)
						)
						Memory_pow24VStatus(x__) = ( 
							get_pow24VStatus!x__ -> Memory_pow24VStatus(x__)
							[]
							getV_pow24VStatus!x__ -> Memory_pow24VStatus(x__)
							[]
							set_pow24VStatus?x__ -> Memory_pow24VStatus(x__)
							[]
							set_EXT_pow24VStatus?x__ -> Memory_pow24VStatus(x__)
						)
						Memory_mSetPoint(x__) = ( 
							get_mSetPoint!x__ -> Memory_mSetPoint(x__)
							[]
							getV_mSetPoint!x__ -> Memory_mSetPoint(x__)
							[]
							set_mSetPoint?x__ -> Memory_mSetPoint(x__)
							[]
							set_EXT_mSetPoint?x__ -> Memory_mSetPoint(x__)
						)
						Memory_dutyCyclePWM1(x__) = ( 
							get_dutyCyclePWM1!x__ -> Memory_dutyCyclePWM1(x__)
							[]
							getV_dutyCyclePWM1!x__ -> Memory_dutyCyclePWM1(x__)
							[]
							set_dutyCyclePWM1?x__ -> Memory_dutyCyclePWM1(x__)
							[]
							set_EXT_dutyCyclePWM1?x__ -> Memory_dutyCyclePWM1(x__)
						)
						Memory_WC_TID_State_machine_ErrorMode_t1_0(x__) = (
							getWC.WC_TID_State_machine_ErrorMode_t1_0_ID!x__ -> Memory_WC_TID_State_machine_ErrorMode_t1_0(x__)
							[]
							setWC.WC_TID_State_machine_ErrorMode_t1_0_ID?x__ -> Memory_WC_TID_State_machine_ErrorMode_t1_0(x__)
						)
						Memory_WC_TID_State_machine_ErrorMode_t2_0(x__) = (
							getWC.WC_TID_State_machine_ErrorMode_t2_0_ID!x__ -> Memory_WC_TID_State_machine_ErrorMode_t2_0(x__)
							[]
							setWC.WC_TID_State_machine_ErrorMode_t2_0_ID?x__ -> Memory_WC_TID_State_machine_ErrorMode_t2_0(x__)
						)
						Memory_WC_TID_State_machine_t7_0(x__) = (
							getWC.WC_TID_State_machine_t7_0_ID!x__ -> Memory_WC_TID_State_machine_t7_0(x__)
							[]
							setWC.WC_TID_State_machine_t7_0_ID?x__ -> Memory_WC_TID_State_machine_t7_0(x__)
						)
						
						-- processes that read variables and offer transitions
						MemoryTransitions(id__,
							 setPoint,
							 newSetPoint,
							 ActualHV,
							 overLimit,
							 underLimit,
							 currentState,
							 HVEnabled,
							 pow24VStatus,
							 mSetPoint,
							 dutyCyclePWM1,
							 WC_TID_State_machine_ErrorMode_t1_0,
							 WC_TID_State_machine_ErrorMode_t2_0,
							 WC_TID_State_machine_t7_0,
							 const_State_machine_cycleTime,
							 disableHV_arg,
							 setPointRamping_newSetPoint,
							 const_setPointRamping_rampStep) = (
							internal__!TID_State_machine_ClosedLoop_t0 -> SKIP
							[]
							(((setPoint!=0) and (HVEnabled==false)))&internal__!TID_State_machine_ClosedLoop_t1 -> SKIP
							[]
							internal__!TID_State_machine_ClosedLoop_t2 -> SKIP
							[]
							(((setPoint==0) or (HVEnabled==true)))&internal__!TID_State_machine_ClosedLoop_t3 -> SKIP
							[]
							((HVEnabled==true))&internal__!TID_State_machine_ClosedLoop_t4 -> SKIP
							[]
							((HVEnabled==false))&internal__!TID_State_machine_ClosedLoop_t5 -> SKIP
							[]
							internal__!TID_State_machine_ClosedLoop_t7 -> SKIP
							[]
							((currentState==State_ClosedLoop))&internal__!TID_State_machine_ClosedLoop_t14 -> SKIP
							[]
							internal__!TID_State_machine_ClosedLoop_t8 -> SKIP
							[]
							((HVEnabled==true))&internal__!TID_State_machine_ClosedLoop_t9 -> SKIP
							[]
							((HVEnabled==false))&internal__!TID_State_machine_ClosedLoop_t12 -> SKIP
							[]
							internal__!TID_State_machine_ClosedLoop_t13 -> SKIP
							[]
							internal__!TID_State_machine_Wait24Vpower_t0 -> SKIP
							[]
							internal__!TID_State_machine_Wait24Vpower_t1 -> SKIP
							[]
							((setPoint!=0))&internal__!TID_State_machine_Wait24Vpower_t2 -> SKIP
							[]
							(((pow24VStatus==Power_On) and (setPoint==0)))&internal__!TID_State_machine_Wait24Vpower_t3 -> SKIP
							[]
							((not (((((setPoint!=0)) or ((pow24VStatus==Power_On)))))))&internal__!TID_State_machine_Wait24Vpower_t4 -> SKIP
							[]
							internal__!TID_State_machine_ErrorMode_t0 -> SKIP
							[]
							(WC_TID_State_machine_ErrorMode_t1_0)&internal__!TID_State_machine_ErrorMode_t1 -> SKIP
							[]
							(WC_TID_State_machine_ErrorMode_t2_0)&ext_errorAck__!TID_State_machine_ErrorMode_t2.in -> SKIP
							[]
							internal__!TID_State_machine_t1 -> SKIP
							[]
							((currentState==State_ErrorMode))&internal__!TID_State_machine_t2 -> SKIP
							[]
							((((setPoint==0) and (currentState!=State_ErrorMode)) and (pow24VStatus==Power_On)))&internal__!TID_State_machine_t3 -> SKIP
							[]
							((currentState==State_ErrorMode))&internal__!TID_State_machine_t4 -> SKIP
							[]
							internal__!TID_State_machine_t5 -> SKIP
							[]
							((WC_TID_State_machine_t7_0 and (currentState==State_Wait24Vpower)))&internal__!TID_State_machine_t7 -> SKIP
						
							[]
								OP_supplyVoltCheck::MemoryTransitions(id__,
								 pow24VStatus,
								 HVEnabled,
								 currentState,
								 dutyCyclePWM1,
								 mSetPoint)
							[]		 		OP_checkLimits::MemoryTransitions(id__,
								 ActualHV,
								 overLimit,
								 underLimit,
								 HVEnabled,
								 currentState,
								 dutyCyclePWM1,
								 mSetPoint)
							[]		 		OP_PID_Control::MemoryTransitions(id__,
								 ActualHV,
								 dutyCyclePWM1,
								 mSetPoint)
							[]		 		OP_disableHV::MemoryTransitions(id__,
								 disableHV_arg,
								 HVEnabled,
								 currentState,
								 dutyCyclePWM1,
								 mSetPoint)
							[]		 		OP_AdjustLimits::MemoryTransitions(id__,
								 overLimit,
								 underLimit,
								 mSetPoint)
							[]		 		OP_setPointRamping::MemoryTransitions(id__,
								 setPointRamping_newSetPoint,
								 HVEnabled,
								 currentState,
								 dutyCyclePWM1,
								 mSetPoint,
								 const_setPointRamping_rampStep)
							[]		 		OP_enableHV::MemoryTransitions(id__,
								 dutyCyclePWM1)		 	
						
							[]
								set_setPoint?x__ -> SKIP
							[]
							set_newSetPoint?x__ -> SKIP
							[]
							set_ActualHV?x__ -> SKIP
						
							[]
								set_overLimit?x__ -> SKIP
								[]
							set_EXT_overLimit?x__ -> SKIP
							[]
							set_underLimit?x__ -> SKIP
								[]
							set_EXT_underLimit?x__ -> SKIP
							[]
							set_currentState?x__ -> SKIP
								[]
							set_EXT_currentState?x__ -> SKIP
							[]
							set_HVEnabled?x__ -> SKIP
								[]
							set_EXT_HVEnabled?x__ -> SKIP
							[]
							set_pow24VStatus?x__ -> SKIP
								[]
							set_EXT_pow24VStatus?x__ -> SKIP
							[]
							set_mSetPoint?x__ -> SKIP
								[]
							set_EXT_mSetPoint?x__ -> SKIP
							[]
							set_dutyCyclePWM1?x__ -> SKIP
								[]
							set_EXT_dutyCyclePWM1?x__ -> SKIP
						
							[]
								setWC.WC_TID_State_machine_ErrorMode_t1_0_ID?x__ -> SKIP
							[]
							setWC.WC_TID_State_machine_ErrorMode_t2_0_ID?x__ -> SKIP
							[]
							setWC.WC_TID_State_machine_t7_0_ID?x__ -> SKIP
						 	)
						MemoryTransitions_State_machine(id__,
							 const_State_machine_cycleTime,
							 const_setPointRamping_rampStep) =
							(
							getV_setPoint?setPoint ->	
							getV_newSetPoint?newSetPoint ->	
							getV_ActualHV?ActualHV ->	
							getV_overLimit?overLimit ->	
							getV_underLimit?underLimit ->	
							getV_currentState?currentState ->	
							getV_HVEnabled?HVEnabled ->	
							getV_pow24VStatus?pow24VStatus ->	
							getV_mSetPoint?mSetPoint ->	
							getV_dutyCyclePWM1?dutyCyclePWM1 ->	
							getWC.WC_TID_State_machine_ErrorMode_t1_0_ID?WC_TID_State_machine_ErrorMode_t1_0 ->	
							getWC.WC_TID_State_machine_ErrorMode_t2_0_ID?WC_TID_State_machine_ErrorMode_t2_0 ->	
							getWC.WC_TID_State_machine_t7_0_ID?WC_TID_State_machine_t7_0 ->	
							OP_disableHV::getV_arg?disableHV_arg ->	
							OP_setPointRamping::getV_newSetPoint?setPointRamping_newSetPoint ->
							 MemoryTransitions(id__,
							 	 setPoint,
							 	 newSetPoint,
							 	 ActualHV,
							 	 overLimit,
							 	 underLimit,
							 	 currentState,
							 	 HVEnabled,
							 	 pow24VStatus,
							 	 mSetPoint,
							 	 dutyCyclePWM1,
							 	 WC_TID_State_machine_ErrorMode_t1_0,
							 	 WC_TID_State_machine_ErrorMode_t2_0,
							 	 WC_TID_State_machine_t7_0,
							 	 const_State_machine_cycleTime,
							 	 disableHV_arg,
							 	 setPointRamping_newSetPoint,
							 	 const_setPointRamping_rampStep);
							 MemoryTransitions_State_machine(id__,
							 	 const_State_machine_cycleTime,
							 	 const_setPointRamping_rampStep)
							)
						
						-- synchronisation, hiding and process sets 
						MemoryVariablesProcesses_State_machine = Union(
							{
								OP_supplyVoltCheck::MemoryVariablesProcesses_supplyVoltCheck,
								OP_checkLimits::MemoryVariablesProcesses_checkLimits,
								OP_PID_Control::MemoryVariablesProcesses_PID_Control,
								OP_disableHV::MemoryVariablesProcesses_disableHV,
								OP_AdjustLimits::MemoryVariablesProcesses_AdjustLimits,
								OP_setPointRamping::MemoryVariablesProcesses_setPointRamping,
								OP_enableHV::MemoryVariablesProcesses_enableHV,
								{
									Memory_setPoint(0),
									Memory_newSetPoint(0),
									Memory_ActualHV(0),
									Memory_overLimit(0),
									Memory_underLimit(0),
									Memory_currentState(State_Wait24Vpower),
									Memory_HVEnabled(true),
									Memory_pow24VStatus(Power_On),
									Memory_mSetPoint(0),
									Memory_dutyCyclePWM1(0),
									Memory_WC_TID_State_machine_ErrorMode_t1_0(false),
									Memory_WC_TID_State_machine_ErrorMode_t2_0(false),
									Memory_WC_TID_State_machine_t7_0(false)
								}
							}
						)
						
						MemoryVariablesSyncSet = Union({
							OP_supplyVoltCheck::MemoryVariablesSyncSet,
							OP_checkLimits::MemoryVariablesSyncSet,
							OP_PID_Control::MemoryVariablesSyncSet,
							OP_disableHV::MemoryVariablesSyncSet,
							OP_AdjustLimits::MemoryVariablesSyncSet,
							OP_setPointRamping::MemoryVariablesSyncSet,
							OP_enableHV::MemoryVariablesSyncSet,
							{|
								set_ActualHV,
								set_EXT_currentState,
								set_EXT_underLimit,
								set_EXT_mSetPoint,
								set_currentState,
								getWC.WC_TID_State_machine_t7_0_ID,
								set_EXT_pow24VStatus,
								getV_mSetPoint,
								getV_dutyCyclePWM1,
								set_EXT_HVEnabled,
								set_EXT_dutyCyclePWM1,
								set_EXT_overLimit,
								set_underLimit,
								getV_ActualHV,
								setWC.WC_TID_State_machine_ErrorMode_t2_0_ID,
								getV_currentState,
								getWC.WC_TID_State_machine_ErrorMode_t2_0_ID,
								set_overLimit,
								setWC.WC_TID_State_machine_t7_0_ID,
								set_mSetPoint,
								getV_setPoint,
								set_pow24VStatus,
								setWC,
								getV_newSetPoint,
								getV_pow24VStatus,
								set_dutyCyclePWM1,
								setWC.WC_TID_State_machine_ErrorMode_t1_0_ID,
								set_setPoint,
								set_HVEnabled,
								getV_HVEnabled,
								getWC.WC_TID_State_machine_ErrorMode_t1_0_ID,
								getV_underLimit,
								set_newSetPoint,
								getV_overLimit
							|}	
						})
						
						MemoryVariablesHideSet = Union({
							OP_supplyVoltCheck::MemoryVariablesHideSet,
							OP_checkLimits::MemoryVariablesHideSet,
							OP_PID_Control::MemoryVariablesHideSet,
							OP_disableHV::MemoryVariablesHideSet,
							OP_AdjustLimits::MemoryVariablesHideSet,
							OP_setPointRamping::MemoryVariablesHideSet,
							OP_enableHV::MemoryVariablesHideSet,
							{|
								getV_pow24VStatus,
								getV_currentState,
								getV_mSetPoint,
								getV_dutyCyclePWM1,
								getV_setPoint,
								getWC,
								getV_HVEnabled,
								getV_newSetPoint,
								getV_underLimit,
								getV_ActualHV,
								getV_overLimit
							|}
						})
						
						-- combined individual memory processes
						MemoryVariables = ||| P : MemoryVariablesProcesses_State_machine @ P
						
						-- complete memory process
						MemoryN(id__,
							 const_State_machine_cycleTime,
							 const_setPointRamping_rampStep) = (MemoryVariables [| MemoryVariablesSyncSet |] MemoryTransitions_State_machine(id__,
							 const_State_machine_cycleTime,
							 const_setPointRamping_rampStep)) \ MemoryVariablesHideSet
						
						-- optimised memory
						-- Sets of named elements identified according to transition conditions:
						-- {}
						-- {WC_TID_State_machine_ErrorMode_t1_0}
						-- {WC_TID_State_machine_t7_0,currentState}
						-- {ActualHV,underLimit,overLimit}
						-- {mSetPoint,ActualHV}
						-- {mSetPoint,OP_setPointRamping::newSetPoint}
						-- {setPoint,pow24VStatus,currentState}
						-- {OP_disableHV::arg}
						-- {setPoint,HVEnabled}
						-- {WC_TID_State_machine_ErrorMode_t2_0}
						-- Summary of all identified named elements:
						-- {
						-- WC_TID_State_machine_ErrorMode_t1_0
						-- WC_TID_State_machine_t7_0
						-- mSetPoint
						-- OP_setPointRamping::newSetPoint
						-- ActualHV
						-- HVEnabled
						-- setPoint
						-- pow24VStatus
						-- dutyCyclePWM1
						-- newSetPoint
						-- OP_disableHV::arg
						-- overLimit
						-- underLimit
						-- currentState
						-- WC_TID_State_machine_ErrorMode_t2_0
						-- }
						
						-- Allocation plan:
						-- 0:{}
						--	=> {
						--		TID_enableHV_t1,
						--		TID_State_machine_ClosedLoop_t13,
						--		TID_setPointRamping_t6,
						--		TID_State_machine_ClosedLoop_t8,
						--		TID_checkLimits_t0,
						--		TID_PID_Control_t5,
						--		TID_PID_Control_t2,
						--		TID_State_machine_ClosedLoop_t2,
						--		TID_State_machine_ClosedLoop_t0,
						--		TID_setPointRamping_t0,
						--		TID_State_machine_Wait24Vpower_t0,
						--		TID_disableHV_t2,
						--		TID_setPointRamping_t8,
						--		TID_State_machine_ErrorMode_t0,
						--		TID_State_machine_t1,
						--		TID_State_machine_ClosedLoop_t7,
						--		TID_State_machine_Wait24Vpower_t1,
						--		TID_supplyVoltCheck_t0,
						--		TID_State_machine_t5,
						--		TID_AdjustLimits_t1}
						-- 1:{WC_TID_State_machine_ErrorMode_t1_0}
						--	=> {
						--		TID_State_machine_ErrorMode_t1}
						-- 4:{WC_TID_State_machine_t7_0,currentState}
						--	=> {
						--		TID_State_machine_t7}
						-- 8:{ActualHV,underLimit,overLimit}
						--	=> {
						--		TID_checkLimits_t1,
						--		TID_checkLimits_t2}
						-- 5:{mSetPoint,ActualHV}
						--	=> {
						--		TID_PID_Control_t6,
						--		TID_PID_Control_t4,
						--		TID_PID_Control_t3}
						-- 6:{mSetPoint,OP_setPointRamping::newSetPoint}
						--	=> {
						--		TID_setPointRamping_t2,
						--		TID_setPointRamping_t11,
						--		TID_setPointRamping_t3,
						--		TID_setPointRamping_t4,
						--		TID_setPointRamping_t1,
						--		TID_setPointRamping_t7,
						--		TID_setPointRamping_t9,
						--		TID_setPointRamping_t10,
						--		TID_setPointRamping_t5}
						-- 9:{setPoint,pow24VStatus,currentState}
						--	=> {
						--		TID_State_machine_t4,
						--		TID_supplyVoltCheck_t2,
						--		TID_State_machine_t2,
						--		TID_State_machine_Wait24Vpower_t2,
						--		TID_State_machine_t3,
						--		TID_supplyVoltCheck_t5,
						--		TID_State_machine_Wait24Vpower_t4,
						--		TID_State_machine_ClosedLoop_t14,
						--		TID_State_machine_Wait24Vpower_t3}
						-- 2:{OP_disableHV::arg}
						--	=> {
						--		TID_disableHV_t1,
						--		TID_disableHV_t0}
						-- 7:{setPoint,HVEnabled}
						--	=> {
						--		TID_State_machine_ClosedLoop_t5,
						--		TID_State_machine_ClosedLoop_t4,
						--		TID_State_machine_ClosedLoop_t3,
						--		TID_State_machine_ClosedLoop_t12,
						--		TID_State_machine_ClosedLoop_t9,
						--		TID_State_machine_ClosedLoop_t1}
						-- 3:{WC_TID_State_machine_ErrorMode_t2_0}
						--	=> {
						--		TID_State_machine_ErrorMode_t2}
						
						-- Memory transition processes
						MemoryTransitions_opt_0(id__) =
						(
							let
								Update = Current(id__)
								Current(id__)
								 	   = 
								 	   OP_enableHV::internal__!OP_enableHV::TID_enableHV_t1 -> Update
								 	   []
								 	   internal__!TID_State_machine_ClosedLoop_t13 -> Update
								 	   []
								 	   OP_setPointRamping::internal__!OP_setPointRamping::TID_setPointRamping_t6 -> Update
								 	   []
								 	   internal__!TID_State_machine_ClosedLoop_t8 -> Update
								 	   []
								 	   OP_checkLimits::internal__!OP_checkLimits::TID_checkLimits_t0 -> Update
								 	   []
								 	   OP_PID_Control::internal__!OP_PID_Control::TID_PID_Control_t5 -> Update
								 	   []
								 	   OP_PID_Control::internal__!OP_PID_Control::TID_PID_Control_t2 -> Update
								 	   []
								 	   internal__!TID_State_machine_ClosedLoop_t2 -> Update
								 	   []
								 	   internal__!TID_State_machine_ClosedLoop_t0 -> Update
								 	   []
								 	   OP_setPointRamping::internal__!OP_setPointRamping::TID_setPointRamping_t0 -> Update
								 	   []
								 	   internal__!TID_State_machine_Wait24Vpower_t0 -> Update
								 	   []
								 	   OP_disableHV::internal__!OP_disableHV::TID_disableHV_t2 -> Update
								 	   []
								 	   OP_setPointRamping::internal__!OP_setPointRamping::TID_setPointRamping_t8 -> Update
								 	   []
								 	   internal__!TID_State_machine_ErrorMode_t0 -> Update
								 	   []
								 	   internal__!TID_State_machine_t1 -> Update
								 	   []
								 	   internal__!TID_State_machine_ClosedLoop_t7 -> Update
								 	   []
								 	   internal__!TID_State_machine_Wait24Vpower_t1 -> Update
								 	   []
								 	   OP_supplyVoltCheck::internal__!OP_supplyVoltCheck::TID_supplyVoltCheck_t0 -> Update
								 	   []
								 	   internal__!TID_State_machine_t5 -> Update
								 	   []
								 	   OP_AdjustLimits::internal__!OP_AdjustLimits::TID_AdjustLimits_t1 -> Update
							within
								Update
						)
						MemoryTransitions_opt_1(id__) =
						(
							let
								Update = 
								getWC.WC_TID_State_machine_ErrorMode_t1_0_ID?WC_TID_State_machine_ErrorMode_t1_0 ->
								Current(id__,
									 WC_TID_State_machine_ErrorMode_t1_0)
								Current(id__,
									 WC_TID_State_machine_ErrorMode_t1_0)
								 	   = 
								 	   (WC_TID_State_machine_ErrorMode_t1_0)&(internal__!TID_State_machine_ErrorMode_t1 -> Update)
								 	   	 
								 	   	 []
								 	   	 setWC.WC_TID_State_machine_ErrorMode_t1_0_ID?x__ -> Update
							within
								Update
						)
						MemoryTransitions_opt_4(id__) =
						(
							let
								Update = 
								getWC.WC_TID_State_machine_t7_0_ID?WC_TID_State_machine_t7_0 ->
								get_currentState?currentState ->
								Current(id__,
									 WC_TID_State_machine_t7_0,
									 currentState)
								Current(id__,
									 WC_TID_State_machine_t7_0,
									 currentState)
								 	   = 
								 	   ((WC_TID_State_machine_t7_0 and (currentState==State_Wait24Vpower)))&(internal__!TID_State_machine_t7 -> Update)
								 	   	 
								 	   	 []
								 	   	 setWC.WC_TID_State_machine_t7_0_ID?x__ -> Update
								 	   	 []
								 	   	 
								 	   	 set_currentState?x__ -> Update
								 	   	 []
								 	   	 set_EXT_currentState?x__ -> Update
							within
								Update
						)
						MemoryTransitions_opt_8(id__) =
						(
							let
								Update = 
								get_ActualHV?ActualHV ->
								get_underLimit?underLimit ->
								get_overLimit?overLimit ->
								Current(id__,
									 ActualHV,
									 underLimit,
									 overLimit)
								Current(id__,
									 ActualHV,
									 underLimit,
									 overLimit)
								 	   = 
								 	   (((ActualHV<=overLimit) and (ActualHV>=underLimit)))&(OP_checkLimits::internal__!OP_checkLimits::TID_checkLimits_t1 -> Update)
								 	   []
								 	   (((ActualHV<underLimit) or (ActualHV>overLimit)))&(OP_checkLimits::internal__!OP_checkLimits::TID_checkLimits_t2 -> Update)
								 	   	 
								 	   	 []
								 	   	 set_ActualHV?x__ -> Update
								 	   	 []
								 	   	 
								 	   	 set_underLimit?x__ -> Update
								 	   	 []
								 	   	 set_EXT_underLimit?x__ -> Update
								 	   	 []
								 	   	 
								 	   	 set_overLimit?x__ -> Update
								 	   	 []
								 	   	 set_EXT_overLimit?x__ -> Update
							within
								Update
						)
						MemoryTransitions_opt_5(id__) =
						(
							let
								Update = 
								get_mSetPoint?mSetPoint ->
								get_ActualHV?ActualHV ->
								Current(id__,
									 mSetPoint,
									 ActualHV)
								Current(id__,
									 mSetPoint,
									 ActualHV)
								 	   = 
								 	   ((ActualHV==mSetPoint))&(OP_PID_Control::internal__!OP_PID_Control::TID_PID_Control_t6 -> Update)
								 	   []
								 	   ((ActualHV>mSetPoint))&(OP_PID_Control::internal__!OP_PID_Control::TID_PID_Control_t4 -> Update)
								 	   []
								 	   ((ActualHV<mSetPoint))&(OP_PID_Control::internal__!OP_PID_Control::TID_PID_Control_t3 -> Update)
								 	   	 
								 	   	 []
								 	   	 set_mSetPoint?x__ -> Update
								 	   	 []
								 	   	 set_EXT_mSetPoint?x__ -> Update
								 	   	 []
								 	   	 
								 	   	 set_ActualHV?x__ -> Update
							within
								Update
						)
						MemoryTransitions_opt_6(id__) =
						(
							let
								Update = 
								get_mSetPoint?mSetPoint ->
								OP_setPointRamping::get_newSetPoint?newSetPoint ->
								Current(id__,
									 mSetPoint,
									 newSetPoint)
								Current(id__,
									 mSetPoint,
									 newSetPoint)
								 	   = 
								 	   ((newSetPoint>0))&(OP_setPointRamping::internal__!OP_setPointRamping::TID_setPointRamping_t2 -> Update)
								 	   []
								 	   ((mSetPoint==newSetPoint))&(OP_setPointRamping::internal__!OP_setPointRamping::TID_setPointRamping_t11 -> Update)
								 	   []
								 	   ((mSetPoint>newSetPoint))&(OP_setPointRamping::internal__!OP_setPointRamping::TID_setPointRamping_t3 -> Update)
								 	   []
								 	   ((mSetPoint<newSetPoint))&(OP_setPointRamping::internal__!OP_setPointRamping::TID_setPointRamping_t4 -> Update)
								 	   []
								 	   ((newSetPoint<=0))&(OP_setPointRamping::internal__!OP_setPointRamping::TID_setPointRamping_t1 -> Update)
								 	   []
								 	   ((mSetPoint<newSetPoint))&(OP_setPointRamping::internal__!OP_setPointRamping::TID_setPointRamping_t7 -> Update)
								 	   []
								 	   ((mSetPoint>newSetPoint))&(OP_setPointRamping::internal__!OP_setPointRamping::TID_setPointRamping_t9 -> Update)
								 	   []
								 	   ((mSetPoint<=newSetPoint))&(OP_setPointRamping::internal__!OP_setPointRamping::TID_setPointRamping_t10 -> Update)
								 	   []
								 	   ((mSetPoint>=newSetPoint))&(OP_setPointRamping::internal__!OP_setPointRamping::TID_setPointRamping_t5 -> Update)
								 	   	 
								 	   	 []
								 	   	 set_mSetPoint?x__ -> Update
								 	   	 []
								 	   	 set_EXT_mSetPoint?x__ -> Update
								 	   	 []
								 	   	 
								 	   	 OP_setPointRamping::set_newSetPoint?x__ -> Update
							within
								Update
						)
						MemoryTransitions_opt_9(id__) =
						(
							let
								Update = 
								get_setPoint?setPoint ->
								get_pow24VStatus?pow24VStatus ->
								get_currentState?currentState ->
								Current(id__,
									 setPoint,
									 pow24VStatus,
									 currentState)
								Current(id__,
									 setPoint,
									 pow24VStatus,
									 currentState)
								 	   = 
								 	   ((currentState==State_ErrorMode))&(internal__!TID_State_machine_t4 -> Update)
								 	   []
								 	   ((pow24VStatus==Power_On))&(OP_supplyVoltCheck::internal__!OP_supplyVoltCheck::TID_supplyVoltCheck_t2 -> Update)
								 	   []
								 	   ((currentState==State_ErrorMode))&(internal__!TID_State_machine_t2 -> Update)
								 	   []
								 	   ((setPoint!=0))&(internal__!TID_State_machine_Wait24Vpower_t2 -> Update)
								 	   []
								 	   ((((setPoint==0) and (currentState!=State_ErrorMode)) and (pow24VStatus==Power_On)))&(internal__!TID_State_machine_t3 -> Update)
								 	   []
								 	   ((pow24VStatus==Power_Off))&(OP_supplyVoltCheck::internal__!OP_supplyVoltCheck::TID_supplyVoltCheck_t5 -> Update)
								 	   []
								 	   ((not (((((setPoint!=0)) or ((pow24VStatus==Power_On)))))))&(internal__!TID_State_machine_Wait24Vpower_t4 -> Update)
								 	   []
								 	   ((currentState==State_ClosedLoop))&(internal__!TID_State_machine_ClosedLoop_t14 -> Update)
								 	   []
								 	   (((pow24VStatus==Power_On) and (setPoint==0)))&(internal__!TID_State_machine_Wait24Vpower_t3 -> Update)
								 	   	 
								 	   	 []
								 	   	 set_setPoint?x__ -> Update
								 	   	 []
								 	   	 
								 	   	 set_pow24VStatus?x__ -> Update
								 	   	 []
								 	   	 set_EXT_pow24VStatus?x__ -> Update
								 	   	 []
								 	   	 
								 	   	 set_currentState?x__ -> Update
								 	   	 []
								 	   	 set_EXT_currentState?x__ -> Update
							within
								Update
						)
						MemoryTransitions_opt_2(id__) =
						(
							let
								Update = 
								OP_disableHV::get_arg?arg ->
								Current(id__,
									 arg)
								Current(id__,
									 arg)
								 	   = 
								 	   ((arg==true))&(OP_disableHV::internal__!OP_disableHV::TID_disableHV_t1 -> Update)
								 	   []
								 	   ((arg==false))&(OP_disableHV::internal__!OP_disableHV::TID_disableHV_t0 -> Update)
								 	   	 
								 	   	 []
								 	   	 OP_disableHV::set_arg?x__ -> Update
							within
								Update
						)
						MemoryTransitions_opt_7(id__) =
						(
							let
								Update = 
								get_setPoint?setPoint ->
								get_HVEnabled?HVEnabled ->
								Current(id__,
									 setPoint,
									 HVEnabled)
								Current(id__,
									 setPoint,
									 HVEnabled)
								 	   = 
								 	   ((HVEnabled==false))&(internal__!TID_State_machine_ClosedLoop_t5 -> Update)
								 	   []
								 	   ((HVEnabled==true))&(internal__!TID_State_machine_ClosedLoop_t4 -> Update)
								 	   []
								 	   (((setPoint==0) or (HVEnabled==true)))&(internal__!TID_State_machine_ClosedLoop_t3 -> Update)
								 	   []
								 	   ((HVEnabled==false))&(internal__!TID_State_machine_ClosedLoop_t12 -> Update)
								 	   []
								 	   ((HVEnabled==true))&(internal__!TID_State_machine_ClosedLoop_t9 -> Update)
								 	   []
								 	   (((setPoint!=0) and (HVEnabled==false)))&(internal__!TID_State_machine_ClosedLoop_t1 -> Update)
								 	   	 
								 	   	 []
								 	   	 set_setPoint?x__ -> Update
								 	   	 []
								 	   	 
								 	   	 set_HVEnabled?x__ -> Update
								 	   	 []
								 	   	 set_EXT_HVEnabled?x__ -> Update
							within
								Update
						)
						MemoryTransitions_opt_3(id__) =
						(
							let
								Update = 
								getWC.WC_TID_State_machine_ErrorMode_t2_0_ID?WC_TID_State_machine_ErrorMode_t2_0 ->
								Current(id__,
									 WC_TID_State_machine_ErrorMode_t2_0)
								Current(id__,
									 WC_TID_State_machine_ErrorMode_t2_0)
								 	   = 
								 	   (WC_TID_State_machine_ErrorMode_t2_0)&(ext_errorAck__!TID_State_machine_ErrorMode_t2.in -> Update)
								 	   	 
								 	   	 []
								 	   	 setWC.WC_TID_State_machine_ErrorMode_t2_0_ID?x__ -> Update
							within
								Update
						)
						
						-- Memory cell processes
						Memory_opt_WC_TID_State_machine_ErrorMode_t1_0(x__) = ( 
							getWC.WC_TID_State_machine_ErrorMode_t1_0_ID!x__ -> Memory_opt_WC_TID_State_machine_ErrorMode_t1_0(x__)
							[]
							setWC.WC_TID_State_machine_ErrorMode_t1_0_ID?x__ -> Memory_opt_WC_TID_State_machine_ErrorMode_t1_0(x__)
						)
						Memory_opt_WC_TID_State_machine_t7_0(x__) = ( 
							getWC.WC_TID_State_machine_t7_0_ID!x__ -> Memory_opt_WC_TID_State_machine_t7_0(x__)
							[]
							setWC.WC_TID_State_machine_t7_0_ID?x__ -> Memory_opt_WC_TID_State_machine_t7_0(x__)
						)
						Memory_opt_mSetPoint(x__) = ( 
							get_mSetPoint!x__ -> Memory_opt_mSetPoint(x__)
							[]
							set_mSetPoint?x__ -> Memory_opt_mSetPoint(x__)
							[]
							set_EXT_mSetPoint?x__ -> Memory_opt_mSetPoint(x__)
						)
						Memory_opt_ActualHV(x__) = ( 
							get_ActualHV!x__ -> Memory_opt_ActualHV(x__)
							[]
							set_ActualHV?x__ -> Memory_opt_ActualHV(x__)
						)
						Memory_opt_HVEnabled(x__) = ( 
							get_HVEnabled!x__ -> Memory_opt_HVEnabled(x__)
							[]
							set_HVEnabled?x__ -> Memory_opt_HVEnabled(x__)
							[]
							set_EXT_HVEnabled?x__ -> Memory_opt_HVEnabled(x__)
						)
						Memory_opt_setPoint(x__) = ( 
							get_setPoint!x__ -> Memory_opt_setPoint(x__)
							[]
							set_setPoint?x__ -> Memory_opt_setPoint(x__)
						)
						Memory_opt_pow24VStatus(x__) = ( 
							get_pow24VStatus!x__ -> Memory_opt_pow24VStatus(x__)
							[]
							set_pow24VStatus?x__ -> Memory_opt_pow24VStatus(x__)
							[]
							set_EXT_pow24VStatus?x__ -> Memory_opt_pow24VStatus(x__)
						)
						Memory_opt_dutyCyclePWM1(x__) = ( 
							get_dutyCyclePWM1!x__ -> Memory_opt_dutyCyclePWM1(x__)
							[]
							set_dutyCyclePWM1?x__ -> Memory_opt_dutyCyclePWM1(x__)
							[]
							set_EXT_dutyCyclePWM1?x__ -> Memory_opt_dutyCyclePWM1(x__)
						)
						Memory_opt_newSetPoint(x__) = ( 
							get_newSetPoint!x__ -> Memory_opt_newSetPoint(x__)
							[]
							set_newSetPoint?x__ -> Memory_opt_newSetPoint(x__)
						)
						Memory_opt_overLimit(x__) = ( 
							get_overLimit!x__ -> Memory_opt_overLimit(x__)
							[]
							set_overLimit?x__ -> Memory_opt_overLimit(x__)
							[]
							set_EXT_overLimit?x__ -> Memory_opt_overLimit(x__)
						)
						Memory_opt_underLimit(x__) = ( 
							get_underLimit!x__ -> Memory_opt_underLimit(x__)
							[]
							set_underLimit?x__ -> Memory_opt_underLimit(x__)
							[]
							set_EXT_underLimit?x__ -> Memory_opt_underLimit(x__)
						)
						Memory_opt_currentState(x__) = ( 
							get_currentState!x__ -> Memory_opt_currentState(x__)
							[]
							set_currentState?x__ -> Memory_opt_currentState(x__)
							[]
							set_EXT_currentState?x__ -> Memory_opt_currentState(x__)
						)
						Memory_opt_WC_TID_State_machine_ErrorMode_t2_0(x__) = ( 
							getWC.WC_TID_State_machine_ErrorMode_t2_0_ID!x__ -> Memory_opt_WC_TID_State_machine_ErrorMode_t2_0(x__)
							[]
							setWC.WC_TID_State_machine_ErrorMode_t2_0_ID?x__ -> Memory_opt_WC_TID_State_machine_ErrorMode_t2_0(x__)
						)
						
						-- Composition of memory, StateMachine and Memory transition processes
						
						MemorySTM_opt(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) =
							dbisim(
							  sbisim(Memory_opt_WC_TID_State_machine_ErrorMode_t1_0(false)
							      	[| {|setWC.WC_TID_State_machine_ErrorMode_t1_0_ID,getWC.WC_TID_State_machine_ErrorMode_t1_0_ID|} |] 
							      	sbisim(	
							      	  dbisim(
							      	    sbisim(dbisim(
							      	      sbisim(Memory_opt_WC_TID_State_machine_t7_0(false)
							      	          	[| {|getWC.WC_TID_State_machine_t7_0_ID,setWC.WC_TID_State_machine_t7_0_ID|} |] 
							      	          	dbisim(
							      	          	  sbisim(Memory_opt_currentState(State_Wait24Vpower)
							      	          	      	[| {|set_EXT_currentState,get_currentState,set_currentState|} |] 
							      	          	      	sbisim(	
							      	          	      	  dbisim(
							      	          	      	    sbisim(dbisim(
							      	          	      	      sbisim(Memory_opt_ActualHV(0)
							      	          	      	          	[| {|set_ActualHV,get_ActualHV|} |] 
							      	          	      	          	dbisim(
							      	          	      	          	  sbisim(Memory_opt_underLimit(0)
							      	          	      	          	      	[| {|set_EXT_underLimit,get_underLimit,set_underLimit|} |] 
							      	          	      	          	      	dbisim(
							      	          	      	          	      	  sbisim(Memory_opt_overLimit(0)
							      	          	      	          	      	      	[| {|set_overLimit,get_overLimit,set_EXT_overLimit|} |] 
							      	          	      	          	      	      	sbisim(	
							      	          	      	          	      	      	  dbisim(
							      	          	      	          	      	      	    sbisim(dbisim(
							      	          	      	          	      	      	      sbisim(Memory_opt_mSetPoint(0)
							      	          	      	          	      	      	          	[| {|set_mSetPoint,get_mSetPoint,set_EXT_mSetPoint|} |] 
							      	          	      	          	      	      	          	sbisim(	
							      	          	      	          	      	      	          	  dbisim(
							      	          	      	          	      	      	          	    sbisim(dbisim(
							      	          	      	          	      	      	          	      sbisim(OP_setPointRamping::Memory_opt_newSetPoint(0)
							      	          	      	          	      	      	          	          	[| {|OP_setPointRamping::set_newSetPoint,OP_setPointRamping::get_newSetPoint|} |] 
							      	          	      	          	      	      	          	          	sbisim(	
							      	          	      	          	      	      	          	          	  dbisim(
							      	          	      	          	      	      	          	          	    sbisim(dbisim(
							      	          	      	          	      	      	          	          	      sbisim(Memory_opt_setPoint(0)
							      	          	      	          	      	      	          	          	          	[| {|set_setPoint,get_setPoint|} |] 
							      	          	      	          	      	      	          	          	          	dbisim(
							      	          	      	          	      	      	          	          	          	  sbisim(Memory_opt_pow24VStatus(Power_On)
							      	          	      	          	      	      	          	          	          	      	[| {|set_EXT_pow24VStatus,set_pow24VStatus,get_pow24VStatus|} |] 
							      	          	      	          	      	      	          	          	          	      	sbisim(	
							      	          	      	          	      	      	          	          	          	      	  dbisim(
							      	          	      	          	      	      	          	          	          	      	    sbisim(dbisim(
							      	          	      	          	      	      	          	          	          	      	      sbisim(OP_disableHV::Memory_opt_arg(true)
							      	          	      	          	      	      	          	          	          	      	          	[| {|OP_disableHV::get_arg,OP_disableHV::set_arg|} |] 
							      	          	      	          	      	      	          	          	          	      	          	sbisim(	
							      	          	      	          	      	      	          	          	          	      	          	  dbisim(
							      	          	      	          	      	      	          	          	          	      	          	    sbisim(dbisim(
							      	          	      	          	      	      	          	          	          	      	          	      sbisim(Memory_opt_HVEnabled(true)
							      	          	      	          	      	      	          	          	          	      	          	          	[| {|set_EXT_HVEnabled,set_HVEnabled,get_HVEnabled|} |] 
							      	          	      	          	      	      	          	          	          	      	          	          	sbisim(	
							      	          	      	          	      	      	          	          	          	      	          	          	  dbisim(
							      	          	      	          	      	      	          	          	          	      	          	          	    sbisim(dbisim(
							      	          	      	          	      	      	          	          	          	      	          	          	      sbisim(Memory_opt_WC_TID_State_machine_ErrorMode_t2_0(false)
							      	          	      	          	      	      	          	          	          	      	          	          	          	[| {|getWC.WC_TID_State_machine_ErrorMode_t2_0_ID,setWC.WC_TID_State_machine_ErrorMode_t2_0_ID|} |] 
							      	          	      	          	      	      	          	          	          	      	          	          	          	sbisim(	
							      	          	      	          	      	      	          	          	          	      	          	          	          	  dbisim(
							      	          	      	          	      	      	          	          	          	      	          	          	          	    sbisim(sbisim(	
							      	          	      	          	      	      	          	          	          	      	          	          	          	      dbisim(
							      	          	      	          	      	      	          	          	          	      	          	          	          	        sbisim(dbisim(sbisim(Memory_opt_dutyCyclePWM1(0)
							      	          	      	          	      	      	          	          	          	      	          	          	          	              	[| {|set_dutyCyclePWM1,get_dutyCyclePWM1|} |] 
							      	          	      	          	      	      	          	          	          	      	          	          	          	              	dbisim(sbisim(Memory_opt_newSetPoint(0)
							      	          	      	          	      	      	          	          	          	      	          	          	          	              	      	[| {|get_newSetPoint,set_newSetPoint|} |] 
							      	          	      	          	      	      	          	          	          	      	          	          	          	              	      	STM_core(id__,
							      	          	      	          	      	      	          	          	          	      	          	          	          	              	      			    const_State_machine_cycleTime,
							      	          	      	          	      	      	          	          	          	      	          	          	          	              	      			    const_setPointRamping_rampStep)
							      	          	      	          	      	      	          	          	          	      	          	          	          	              	      	)\ {|get_newSetPoint,set_newSetPoint|}
							      	          	      	          	      	      	          	          	          	      	          	          	          	              	      )
							      	          	      	          	      	      	          	          	          	      	          	          	          	              	)\ {|get_dutyCyclePWM1|}
							      	          	      	          	      	      	          	          	          	      	          	          	          	              )
							      	          	      	          	      	      	          	          	          	      	          	          	          	          	  [| {|OP_setPointRamping::internal__.OP_setPointRamping::TID_setPointRamping_t8,OP_setPointRamping::internal__.OP_setPointRamping::TID_setPointRamping_t6,OP_PID_Control::internal__.OP_PID_Control::TID_PID_Control_t2,OP_PID_Control::internal__.OP_PID_Control::TID_PID_Control_t5,OP_checkLimits::internal__.OP_checkLimits::TID_checkLimits_t0,OP_supplyVoltCheck::internal__.OP_supplyVoltCheck::TID_supplyVoltCheck_t0,internal__.TID_State_machine_ClosedLoop_t2,internal__.TID_State_machine_ClosedLoop_t0,internal__.TID_State_machine_Wait24Vpower_t0,internal__.TID_State_machine_ErrorMode_t0,OP_enableHV::internal__.OP_enableHV::TID_enableHV_t1,internal__.TID_State_machine_Wait24Vpower_t1,internal__.TID_State_machine_t1,OP_AdjustLimits::internal__.OP_AdjustLimits::TID_AdjustLimits_t1,internal__.TID_State_machine_ClosedLoop_t13,OP_setPointRamping::internal__.OP_setPointRamping::TID_setPointRamping_t0,internal__.TID_State_machine_ClosedLoop_t8,internal__.TID_State_machine_t5,internal__.TID_State_machine_ClosedLoop_t7,OP_disableHV::internal__.OP_disableHV::TID_disableHV_t2|} |]
							      	          	      	          	      	      	          	          	          	      	          	          	          	          	  MemoryTransitions_opt_0(id__)
							      	          	      	          	      	      	          	          	          	      	          	          	          	          	  )\{|OP_setPointRamping::internal__.OP_setPointRamping::TID_setPointRamping_t8,OP_setPointRamping::internal__.OP_setPointRamping::TID_setPointRamping_t6,OP_PID_Control::internal__.OP_PID_Control::TID_PID_Control_t2,OP_PID_Control::internal__.OP_PID_Control::TID_PID_Control_t5,OP_checkLimits::internal__.OP_checkLimits::TID_checkLimits_t0,OP_supplyVoltCheck::internal__.OP_supplyVoltCheck::TID_supplyVoltCheck_t0,internal__.TID_State_machine_ClosedLoop_t2,internal__.TID_State_machine_ClosedLoop_t0,internal__.TID_State_machine_Wait24Vpower_t0,internal__.TID_State_machine_ErrorMode_t0,OP_enableHV::internal__.OP_enableHV::TID_enableHV_t1,internal__.TID_State_machine_Wait24Vpower_t1,internal__.TID_State_machine_t1,OP_AdjustLimits::internal__.OP_AdjustLimits::TID_AdjustLimits_t1,internal__.TID_State_machine_ClosedLoop_t13,OP_setPointRamping::internal__.OP_setPointRamping::TID_setPointRamping_t0,internal__.TID_State_machine_ClosedLoop_t8,internal__.TID_State_machine_t5,internal__.TID_State_machine_ClosedLoop_t7,OP_disableHV::internal__.OP_disableHV::TID_disableHV_t2|})
							      	          	      	          	      	      	          	          	          	      	          	          	          	          )
							      	          	      	          	      	      	          	          	          	      	          	          	          	      	  [| {|ext_errorAck__.TID_State_machine_ErrorMode_t2,setWC.WC_TID_State_machine_ErrorMode_t2_0_ID|} |]
							      	          	      	          	      	      	          	          	          	      	          	          	          	      	  MemoryTransitions_opt_3(id__)
							      	          	      	          	      	      	          	          	          	      	          	          	          	      	  )\{||})
							      	          	      	          	      	      	          	          	          	      	          	          	          	      )
							      	          	      	          	      	      	          	          	          	      	          	          	          	) \ {|getWC.WC_TID_State_machine_ErrorMode_t2_0_ID,setWC.WC_TID_State_machine_ErrorMode_t2_0_ID|}
							      	          	      	          	      	      	          	          	          	      	          	          	          )
							      	          	      	          	      	      	          	          	          	      	          	          	      	  [| {|internal__.TID_State_machine_ClosedLoop_t3,internal__.TID_State_machine_ClosedLoop_t1,set_setPoint,set_HVEnabled,internal__.TID_State_machine_ClosedLoop_t12,internal__.TID_State_machine_ClosedLoop_t9,internal__.TID_State_machine_ClosedLoop_t4,internal__.TID_State_machine_ClosedLoop_t5|} |]
							      	          	      	          	      	      	          	          	          	      	          	          	      	  MemoryTransitions_opt_7(id__)
							      	          	      	          	      	      	          	          	          	      	          	          	      	  )\{|internal__.TID_State_machine_ClosedLoop_t3,internal__.TID_State_machine_ClosedLoop_t1,internal__.TID_State_machine_ClosedLoop_t12,internal__.TID_State_machine_ClosedLoop_t9,internal__.TID_State_machine_ClosedLoop_t4,internal__.TID_State_machine_ClosedLoop_t5|})
							      	          	      	          	      	      	          	          	          	      	          	          	      )
							      	          	      	          	      	      	          	          	          	      	          	          	) \ {|get_HVEnabled|}
							      	          	      	          	      	      	          	          	          	      	          	          )
							      	          	      	          	      	      	          	          	          	      	          	      	  [| {|OP_disableHV::internal__.OP_disableHV::TID_disableHV_t1,OP_disableHV::set_arg,OP_disableHV::internal__.OP_disableHV::TID_disableHV_t0|} |]
							      	          	      	          	      	      	          	          	          	      	          	      	  MemoryTransitions_opt_2(id__)
							      	          	      	          	      	      	          	          	          	      	          	      	  )\{|OP_disableHV::internal__.OP_disableHV::TID_disableHV_t1,OP_disableHV::internal__.OP_disableHV::TID_disableHV_t0|})
							      	          	      	          	      	      	          	          	          	      	          	      )
							      	          	      	          	      	      	          	          	          	      	          	) \ {|OP_disableHV::get_arg,OP_disableHV::set_arg|}
							      	          	      	          	      	      	          	          	          	      	          )
							      	          	      	          	      	      	          	          	          	      	      	  [| {|OP_supplyVoltCheck::internal__.OP_supplyVoltCheck::TID_supplyVoltCheck_t5,internal__.TID_State_machine_t4,set_setPoint,internal__.TID_State_machine_t3,internal__.TID_State_machine_t2,internal__.TID_State_machine_Wait24Vpower_t4,internal__.TID_State_machine_ClosedLoop_t14,set_pow24VStatus,internal__.TID_State_machine_Wait24Vpower_t2,internal__.TID_State_machine_Wait24Vpower_t3,set_currentState,OP_supplyVoltCheck::internal__.OP_supplyVoltCheck::TID_supplyVoltCheck_t2|} |]
							      	          	      	          	      	      	          	          	          	      	      	  MemoryTransitions_opt_9(id__)
							      	          	      	          	      	      	          	          	          	      	      	  )\{|OP_supplyVoltCheck::internal__.OP_supplyVoltCheck::TID_supplyVoltCheck_t5,internal__.TID_State_machine_t4,internal__.TID_State_machine_t3,internal__.TID_State_machine_t2,internal__.TID_State_machine_Wait24Vpower_t4,internal__.TID_State_machine_ClosedLoop_t14,internal__.TID_State_machine_Wait24Vpower_t2,internal__.TID_State_machine_Wait24Vpower_t3,OP_supplyVoltCheck::internal__.OP_supplyVoltCheck::TID_supplyVoltCheck_t2|})
							      	          	      	          	      	      	          	          	          	      	      )
							      	          	      	          	      	      	          	          	          	      	) \ {|get_pow24VStatus|}
							      	          	      	          	      	      	          	          	          	      )
							      	          	      	          	      	      	          	          	          	) \ {|set_setPoint,get_setPoint|}
							      	          	      	          	      	      	          	          	          )
							      	          	      	          	      	      	          	          	      	  [| {|OP_setPointRamping::internal__.OP_setPointRamping::TID_setPointRamping_t9,OP_setPointRamping::internal__.OP_setPointRamping::TID_setPointRamping_t7,set_mSetPoint,OP_setPointRamping::internal__.OP_setPointRamping::TID_setPointRamping_t10,OP_setPointRamping::internal__.OP_setPointRamping::TID_setPointRamping_t11,OP_setPointRamping::internal__.OP_setPointRamping::TID_setPointRamping_t1,OP_setPointRamping::set_newSetPoint,OP_setPointRamping::internal__.OP_setPointRamping::TID_setPointRamping_t4,OP_setPointRamping::internal__.OP_setPointRamping::TID_setPointRamping_t5,OP_setPointRamping::internal__.OP_setPointRamping::TID_setPointRamping_t2,OP_setPointRamping::internal__.OP_setPointRamping::TID_setPointRamping_t3|} |]
							      	          	      	          	      	      	          	          	      	  MemoryTransitions_opt_6(id__)
							      	          	      	          	      	      	          	          	      	  )\{|OP_setPointRamping::internal__.OP_setPointRamping::TID_setPointRamping_t9,OP_setPointRamping::internal__.OP_setPointRamping::TID_setPointRamping_t7,OP_setPointRamping::internal__.OP_setPointRamping::TID_setPointRamping_t10,OP_setPointRamping::internal__.OP_setPointRamping::TID_setPointRamping_t11,OP_setPointRamping::internal__.OP_setPointRamping::TID_setPointRamping_t1,OP_setPointRamping::internal__.OP_setPointRamping::TID_setPointRamping_t4,OP_setPointRamping::internal__.OP_setPointRamping::TID_setPointRamping_t5,OP_setPointRamping::internal__.OP_setPointRamping::TID_setPointRamping_t2,OP_setPointRamping::internal__.OP_setPointRamping::TID_setPointRamping_t3|})
							      	          	      	          	      	      	          	          	      )
							      	          	      	          	      	      	          	          	) \ {|OP_setPointRamping::set_newSetPoint,OP_setPointRamping::get_newSetPoint|}
							      	          	      	          	      	      	          	          )
							      	          	      	          	      	      	          	      	  [| {|set_ActualHV,OP_PID_Control::internal__.OP_PID_Control::TID_PID_Control_t3,set_mSetPoint,OP_PID_Control::internal__.OP_PID_Control::TID_PID_Control_t4,OP_PID_Control::internal__.OP_PID_Control::TID_PID_Control_t6|} |]
							      	          	      	          	      	      	          	      	  MemoryTransitions_opt_5(id__)
							      	          	      	          	      	      	          	      	  )\{|OP_PID_Control::internal__.OP_PID_Control::TID_PID_Control_t3,OP_PID_Control::internal__.OP_PID_Control::TID_PID_Control_t4,OP_PID_Control::internal__.OP_PID_Control::TID_PID_Control_t6|})
							      	          	      	          	      	      	          	      )
							      	          	      	          	      	      	          	) \ {|get_mSetPoint|}
							      	          	      	          	      	      	          )
							      	          	      	          	      	      	      	  [| {|set_ActualHV,set_overLimit,OP_checkLimits::internal__.OP_checkLimits::TID_checkLimits_t2,OP_checkLimits::internal__.OP_checkLimits::TID_checkLimits_t1,set_underLimit|} |]
							      	          	      	          	      	      	      	  MemoryTransitions_opt_8(id__)
							      	          	      	          	      	      	      	  )\{|OP_checkLimits::internal__.OP_checkLimits::TID_checkLimits_t2,OP_checkLimits::internal__.OP_checkLimits::TID_checkLimits_t1|})
							      	          	      	          	      	      	      )
							      	          	      	          	      	      	) \ {|get_overLimit|}
							      	          	      	          	      	      )
							      	          	      	          	      	) \ {|get_underLimit|}
							      	          	      	          	      )
							      	          	      	          	) \ {|set_ActualHV,get_ActualHV|}
							      	          	      	          )
							      	          	      	      	  [| {|setWC.WC_TID_State_machine_t7_0_ID,internal__.TID_State_machine_t7,set_currentState|} |]
							      	          	      	      	  MemoryTransitions_opt_4(id__)
							      	          	      	      	  )\{|internal__.TID_State_machine_t7|})
							      	          	      	      )
							      	          	      	) \ {|get_currentState|}
							      	          	      )
							      	          	) \ {|getWC.WC_TID_State_machine_t7_0_ID,setWC.WC_TID_State_machine_t7_0_ID|}
							      	          )
							      	      	  [| {|setWC.WC_TID_State_machine_ErrorMode_t1_0_ID,internal__.TID_State_machine_ErrorMode_t1|} |]
							      	      	  MemoryTransitions_opt_1(id__)
							      	      	  )\{|internal__.TID_State_machine_ErrorMode_t1|})
							      	      )
							      	) \ {|setWC.WC_TID_State_machine_ErrorMode_t1_0_ID,getWC.WC_TID_State_machine_ErrorMode_t1_0_ID|}
							      )
						
						-- main process
						
						MachineMemorySyncSet = Union({
							union(
								union(
									{|get_setPoint,set_setPoint,
									get_newSetPoint,set_newSetPoint,
									get_ActualHV,set_ActualHV|},
									{|get_overLimit,set_overLimit,
									get_underLimit,set_underLimit,
									get_currentState,set_currentState,
									get_HVEnabled,set_HVEnabled,
									get_pow24VStatus,set_pow24VStatus,
									get_mSetPoint,set_mSetPoint,
									get_dutyCyclePWM1,set_dutyCyclePWM1|}
								)
									
								,
								{|internal__.TID_State_machine_ClosedLoop_t0,
								internal__.TID_State_machine_ClosedLoop_t1,
								internal__.TID_State_machine_ClosedLoop_t2,
								internal__.TID_State_machine_ClosedLoop_t3,
								internal__.TID_State_machine_ClosedLoop_t4,
								internal__.TID_State_machine_ClosedLoop_t5,
								internal__.TID_State_machine_ClosedLoop_t7,
								internal__.TID_State_machine_ClosedLoop_t14,
								internal__.TID_State_machine_ClosedLoop_t8,
								internal__.TID_State_machine_ClosedLoop_t9,
								internal__.TID_State_machine_ClosedLoop_t12,
								internal__.TID_State_machine_ClosedLoop_t13,
								internal__.TID_State_machine_Wait24Vpower_t0,
								internal__.TID_State_machine_Wait24Vpower_t1,
								internal__.TID_State_machine_Wait24Vpower_t2,
								internal__.TID_State_machine_Wait24Vpower_t3,
								internal__.TID_State_machine_Wait24Vpower_t4,
								internal__.TID_State_machine_ErrorMode_t0,
								internal__.TID_State_machine_ErrorMode_t1,
								ext_errorAck__.TID_State_machine_ErrorMode_t2,
								internal__.TID_State_machine_t1,
								internal__.TID_State_machine_t2,
								internal__.TID_State_machine_t3,
								internal__.TID_State_machine_t4,
								internal__.TID_State_machine_t5,
								internal__.TID_State_machine_t7|}
							),
							{|deadline|},
							WCresets
							, OP_supplyVoltCheck::MachineMemorySyncSet
							, OP_checkLimits::MachineMemorySyncSet
							, OP_PID_Control::MachineMemorySyncSet
							, OP_disableHV::MachineMemorySyncSet
							, OP_AdjustLimits::MachineMemorySyncSet
							, OP_setPointRamping::MachineMemorySyncSet
							, OP_enableHV::MachineMemorySyncSet
						})
						
						MachineMemoryHidingSet = Union({
							union(
								{|get_setPoint,set_setPoint,
								get_newSetPoint,set_newSetPoint,
								get_ActualHV,set_ActualHV|},
								{|get_overLimit,
								get_underLimit,
								get_currentState,
								get_HVEnabled,
								get_pow24VStatus,
								get_mSetPoint,
								get_dutyCyclePWM1|}
							)
							,
							{|deadline|}
							, OP_supplyVoltCheck::MachineMemoryHidingSet
							, OP_checkLimits::MachineMemoryHidingSet
							, OP_PID_Control::MachineMemoryHidingSet
							, OP_disableHV::MachineMemoryHidingSet
							, OP_AdjustLimits::MachineMemoryHidingSet
							, OP_setPointRamping::MachineMemoryHidingSet
							, OP_enableHV::MachineMemoryHidingSet
						})
						
						MachineInternalEvents = {|
							internal__
							, OP_supplyVoltCheck::internal__
							, OP_checkLimits::internal__
							, OP_PID_Control::internal__
							, OP_disableHV::internal__
							, OP_AdjustLimits::internal__
							, OP_setPointRamping::internal__
							, OP_enableHV::internal__
						|}
					
						-- main process
						AUX(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = prioritise((((
							wbisim(STM(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep))
								[|MachineMemorySyncSet|]
							(
								(MemoryN(id__,
									 const_State_machine_cycleTime,
									 const_setPointRamping_rampStep))
									[| union(WCsets,WCsync) |]
								Clocks(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep)
							)\WCsets
						)
						[[
							ext_ActualHV__.x____ <- ext_ActualHV,
							ext_pow24VStatus__.x____ <- ext_pow24VStatus,
							ext_errorAck__.x____ <- ext_errorAck,
							ext_setPoint__.x____ <- ext_setPoint,
							int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1,
							int_enablePWM__.x____ <- int_enablePWM
							| x____ <- TIDS
						]]
						[[
							OP_supplyVoltCheck::ext_pow24VStatus__.x____ <- ext_pow24VStatus,
							OP_supplyVoltCheck::int_enablePWM__.x____ <- int_enablePWM,
							OP_supplyVoltCheck::int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
							| x____ <- OP_supplyVoltCheck::TIDS
						]]
						[[
							OP_checkLimits::int_enablePWM__.x____ <- int_enablePWM,
							OP_checkLimits::int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
							| x____ <- OP_checkLimits::TIDS
						]]
						[[
							OP_PID_Control::ext_ActualHV__.x____ <- ext_ActualHV,
							OP_PID_Control::int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
							| x____ <- OP_PID_Control::TIDS
						]]
						[[
							OP_disableHV::int_enablePWM__.x____ <- int_enablePWM,
							OP_disableHV::int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
							| x____ <- OP_disableHV::TIDS
						]]
						[[
							OP_setPointRamping::int_enablePWM__.x____ <- int_enablePWM,
							OP_setPointRamping::int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
							| x____ <- OP_setPointRamping::TIDS
						]]
						[[
							OP_enableHV::int_enablePWM__.x____ <- int_enablePWM,
							OP_enableHV::int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
							| x____ <- OP_enableHV::TIDS
						]]
						\MachineMemoryHidingSet)
						[|{|terminate|}|>SKIP\MachineInternalEvents)
						,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
						
						STM_core(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = 
							dbisim(
								sbisim(
										(STM(id__,
												    const_State_machine_cycleTime,
												    const_setPointRamping_rampStep)
										[| union(WCsync,WCresets) |]
										Clocks(id__,
												    const_State_machine_cycleTime,
												    const_setPointRamping_rampStep))\WCresets
									  )
								  )
						
						AUX_opt(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = 
							prioritise(
								(MemorySTM_opt(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep)
								)[[
									ext_ActualHV__.x____ <- ext_ActualHV,
									ext_pow24VStatus__.x____ <- ext_pow24VStatus,
									ext_errorAck__.x____ <- ext_errorAck,
									ext_setPoint__.x____ <- ext_setPoint,
									int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1,
									int_enablePWM__.x____ <- int_enablePWM
									| x____ <- TIDS
								]]
								[[
									OP_supplyVoltCheck::ext_pow24VStatus__.x____ <- ext_pow24VStatus,
									OP_supplyVoltCheck::int_enablePWM__.x____ <- int_enablePWM,
									OP_supplyVoltCheck::int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
									| x____ <- OP_supplyVoltCheck::TIDS
								]]
								[[
									OP_checkLimits::int_enablePWM__.x____ <- int_enablePWM,
									OP_checkLimits::int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
									| x____ <- OP_checkLimits::TIDS
								]]
								[[
									OP_PID_Control::ext_ActualHV__.x____ <- ext_ActualHV,
									OP_PID_Control::int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
									| x____ <- OP_PID_Control::TIDS
								]]
								[[
									OP_disableHV::int_enablePWM__.x____ <- int_enablePWM,
									OP_disableHV::int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
									| x____ <- OP_disableHV::TIDS
								]]
								[[
									OP_setPointRamping::int_enablePWM__.x____ <- int_enablePWM,
									OP_setPointRamping::int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
									| x____ <- OP_setPointRamping::TIDS
								]]
								[[
									OP_enableHV::int_enablePWM__.x____ <- int_enablePWM,
									OP_enableHV::int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
									| x____ <- OP_enableHV::TIDS
								]]
							[|{|terminate|}|>SKIP\MachineInternalEvents
							,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
						
						internal_(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = prioritise((((
							wbisim(STM(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep))
								[|MachineMemorySyncSet|]
							((MemoryN(id__,
								 const_State_machine_cycleTime,
								 const_setPointRamping_rampStep)) [| union(WCsets,WCsync) |] Clocks(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep))\WCsets
						)
						\MachineMemoryHidingSet)
						[|{|terminate|}|>SKIP)
						,<Union({internal_events, ClockResets, {|internal__,terminate|}}),{tock}>)		
						-- declare clocks
						datatype ClockSet = dummyC | CLID_Cl1
						channel clockReset : ClockSet
									
						
						-- declare trigger deadlines channel
						channel deadline : TIDS.deadlineSignal
						
						-- compile clocks process
						
						-- set of strings that uniquely identify the waiting conditions, each of which is 
						-- used to synchronise with the Memory process to set the correspoding variable in
						-- the memory process.
						datatype setWC_identifierSet = dummyWC
						                             | WC_TID_State_machine_ErrorMode_t2_0_ID
						                             | WC_TID_State_machine_ErrorMode_t1_0_ID
						                             | WC_TID_State_machine_t7_0_ID
						
						-- declaring getWC and setWC channel for updating memory variables related to clocks
						channel setWC : setWC_identifierSet.Bool
						channel getWC : setWC_identifierSet.Bool
						
						-- Set of pairs capturing waiting condition processes and their alphabet.
						-- It includes the corresponding set of the defined operations.
						WCset(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = Union({
							{
							({|setWC.WC_TID_State_machine_ErrorMode_t1_0_ID,clockReset.CLID_Cl1,internal__.TID_State_machine_ErrorMode_t1 | x <- SIDS|},P_WC_TID_State_machine_ErrorMode_t1_0(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)),
							
							({|clockReset.CLID_Cl1,ext_errorAck__.TID_State_machine_ErrorMode_t2,setWC.WC_TID_State_machine_ErrorMode_t2_0_ID | x <- SIDS|},P_WC_TID_State_machine_ErrorMode_t2_0(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)),
							
							({|setWC.WC_TID_State_machine_t7_0_ID,internal__.TID_State_machine_t7,clockReset.CLID_Cl1 | x <- SIDS|},P_WC_TID_State_machine_t7_0(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep))
							}
							,
							{({|wc_alpha_rename_supplyVoltCheck(x__)|x__ <- alpha__origin|},clock__) | (alpha__origin,clock__) <- OP_supplyVoltCheck::WCset(id__)}
						,
							{({|wc_alpha_rename_checkLimits(x__)|x__ <- alpha__origin|},clock__) | (alpha__origin,clock__) <- OP_checkLimits::WCset(id__)}
						,
							{({|wc_alpha_rename_PID_Control(x__)|x__ <- alpha__origin|},clock__) | (alpha__origin,clock__) <- OP_PID_Control::WCset(id__)}
						,
							{({|wc_alpha_rename_disableHV(x__)|x__ <- alpha__origin|},clock__) | (alpha__origin,clock__) <- OP_disableHV::WCset(id__)}
						,
							{({|wc_alpha_rename_AdjustLimits(x__)|x__ <- alpha__origin|},clock__) | (alpha__origin,clock__) <- OP_AdjustLimits::WCset(id__)}
						,
							{({|wc_alpha_rename_setPointRamping(x__)|x__ <- alpha__origin|},clock__) | (alpha__origin,clock__) <- OP_setPointRamping::WCset(id__,
									    const_setPointRamping_rampStep)}
						,
							{({|wc_alpha_rename_enableHV(x__)|x__ <- alpha__origin|},clock__) | (alpha__origin,clock__) <- OP_enableHV::WCset(id__)}
						})
						
						-- Auxiliary function to rename the channel set for required clocks.
						wc_alpha_rename_supplyVoltCheck(x) = x
						wc_alpha_rename_checkLimits(x) = x
						wc_alpha_rename_PID_Control(x) = x
						wc_alpha_rename_disableHV(x) = x
						wc_alpha_rename_AdjustLimits(x) = x
						wc_alpha_rename_setPointRamping(x) = x
						wc_alpha_rename_enableHV(x) = x
						
						-- Set of transition events for which synchronisation is required between Clocks and the Memory process.
						-- It includes the corresponding set of the defined operations.
						WCsync = Union({
							{|internal__.TID_State_machine_t7,
							internal__.TID_State_machine_ErrorMode_t1,
							ext_errorAck__.TID_State_machine_ErrorMode_t2|}
							,
							OP_supplyVoltCheck::WCsync
						,
							OP_checkLimits::WCsync
						,
							OP_PID_Control::WCsync
						,
							OP_disableHV::WCsync
						,
							OP_AdjustLimits::WCsync
						,
							OP_setPointRamping::WCsync
						,
							OP_enableHV::WCsync
						})
						-- Set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
						-- from the set of all state machine state identifiers. It includes the corresponding set of the defined operations.
						WCresets = Union({
							{|clockReset.CLID_Cl1 | x <- SIDS |}
							,
							OP_supplyVoltCheck::WCresets
						,
							OP_checkLimits::WCresets
						,
							OP_PID_Control::WCresets
						,
							OP_disableHV::WCresets
						,
							OP_AdjustLimits::WCresets
						,
							OP_setPointRamping::WCresets
						,
							OP_enableHV::WCresets
						})
						-- Set of all waiting condition set events. It includes the corresponding set of the defined operations.
						WCsets = Union({
							{|setWC|}
							,
							OP_supplyVoltCheck::WCsets
						,
							OP_checkLimits::WCsets
						,
							OP_PID_Control::WCsets
						,
							OP_disableHV::WCsets
						,
							OP_AdjustLimits::WCsets
						,
							OP_setPointRamping::WCsets
						,
							OP_enableHV::WCsets
						})
						
						P_WC_TID_State_machine_ErrorMode_t1_0_reset(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = clockReset.CLID_Cl1 -> setWC.WC_TID_State_machine_ErrorMode_t1_0_ID.false -> P_WC_TID_State_machine_ErrorMode_t1_0_monitor(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep)
						
						P_WC_TID_State_machine_ErrorMode_t1_0_monitor(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = (TimedInterrupt(RUN({|tock,internal__.TID_State_machine_ErrorMode_t1|}),const_State_machine_cycleTime) ; setWC.WC_TID_State_machine_ErrorMode_t1_0_ID.true -> TimedInterrupt(RUN({|tock,internal__.TID_State_machine_ErrorMode_t1|}),1) ; setWC.WC_TID_State_machine_ErrorMode_t1_0_ID.false -> RUN({|tock,internal__.TID_State_machine_ErrorMode_t1|})) /\ P_WC_TID_State_machine_ErrorMode_t1_0_reset(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep)
						
						P_WC_TID_State_machine_ErrorMode_t2_0_reset(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = clockReset.CLID_Cl1 -> setWC.WC_TID_State_machine_ErrorMode_t2_0_ID.true -> P_WC_TID_State_machine_ErrorMode_t2_0_monitor(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep)
						
						P_WC_TID_State_machine_ErrorMode_t2_0_monitor(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = (TimedInterrupt(RUN({|tock,ext_errorAck__.TID_State_machine_ErrorMode_t2|}),const_State_machine_cycleTime) ; setWC.WC_TID_State_machine_ErrorMode_t2_0_ID.false -> RUN({|tock,ext_errorAck__.TID_State_machine_ErrorMode_t2|})) /\ P_WC_TID_State_machine_ErrorMode_t2_0_reset(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep)
						
						P_WC_TID_State_machine_t7_0_reset(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = clockReset.CLID_Cl1 -> setWC.WC_TID_State_machine_t7_0_ID.false -> P_WC_TID_State_machine_t7_0_monitor(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep)
						
						P_WC_TID_State_machine_t7_0_monitor(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = (TimedInterrupt(RUN({|tock,internal__.TID_State_machine_t7|}),const_State_machine_cycleTime) ; setWC.WC_TID_State_machine_t7_0_ID.true -> RUN({|tock,internal__.TID_State_machine_t7|})) /\ P_WC_TID_State_machine_t7_0_reset(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep)
						
						P_WC_TID_State_machine_ErrorMode_t1_0(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = setWC.WC_TID_State_machine_ErrorMode_t1_0_ID.false -> P_WC_TID_State_machine_ErrorMode_t1_0_monitor(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep)
						
						P_WC_TID_State_machine_ErrorMode_t2_0(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = setWC.WC_TID_State_machine_ErrorMode_t2_0_ID.true -> P_WC_TID_State_machine_ErrorMode_t2_0_monitor(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep)
						
						P_WC_TID_State_machine_t7_0(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = setWC.WC_TID_State_machine_t7_0_ID.false -> P_WC_TID_State_machine_t7_0_monitor(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep)
						
						-- Clocks process
						Clocks(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = || (alpha, P) : WCset(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) @ [alpha] wbisim(P)
		
						-- collects all clockResets including those of operations
						ClockResets = Union({
							{|clockReset|}
							,
							OP_supplyVoltCheck::ClockResets
		,
							OP_checkLimits::ClockResets
		,
							OP_PID_Control::ClockResets
		,
							OP_disableHV::ClockResets
		,
							OP_AdjustLimits::ClockResets
		,
							OP_setPointRamping::ClockResets
		,
							OP_enableHV::ClockResets
						})
						
						-- With no internal events visible
						Dunopt__(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = timed_priority(AUX(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) \ union(internal_events,ClockResets))
						
						D__(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = timed_priority(AUX_opt(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) \ union(internal_events,ClockResets))
						
						O__(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = D__(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep)
						
						-- With enter/entered/exit/exited events visible
						FVS__(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = timed_priority(AUX(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) \ ClockResets)
						
						-- With enterV/enteredV/exitV/exitedV events visible
						VS__(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = ShowV(timed_priority(AUX(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) \ ClockResets))
						
						-- With clock resets visible
						FVS_C__(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = AUX(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep)
					}
				endmodule
	
		module OP_disableHV
			Timed(OneStep) {
				
				
				-- declaring identifiers of state and final states
				datatype SIDS = SID_disableHV
				              | SID_disableHV_f0
				
				int_int = {|
				|}
					
				
				internal_events = {|enter,entered,exit,exited,terminate|}
				
				-- declaring all states
				CS_disableHV_f0_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_disableHV_f0},
					y____ <- {SID_disableHV_f0}
				|}
				
				
				disableHV_f0_triggers = {|
				|}
				
				State_disableHV_f0(id__) = let
					State_disableHV_f0_execute(id__,o____) = SKIP; 
						entered!o____!SID_disableHV_f0 ->
						terminate -> SKIP
				within
					enter?x____:diff(SIDS,{SID_disableHV_f0})!SID_disableHV_f0 -> (State_disableHV_f0_execute(id__,x____))
				
				
				I_disableHV_i0(id__) = let
					J_disableHV_j0(id__) = (
								(internal__!TID_disableHV_t0 -> enter!SID_disableHV!SID_disableHV_f0 -> entered!SID_disableHV!SID_disableHV_f0 ->
								SKIP
								)[]
								(internal__!TID_disableHV_t1 -> true & (set_currentState!State_ErrorMode -> SKIP);enter!SID_disableHV!SID_disableHV_f0 -> entered!SID_disableHV!SID_disableHV_f0 ->
								SKIP
								)
								)
					T_disableHV_t2(id__) = internal__!TID_disableHV_t2 -> Deadline(true&(int_enablePWM.out!false -> SKIP),0);true & (set_dutyCyclePWM1!real2duty(0) -> SKIP);Deadline(get_dutyCyclePWM1?dutyCyclePWM1 -> true&(int_dutyCyclePWM1.out!dutyCyclePWM1 -> SKIP),0);true & (set_HVEnabled!false -> SKIP);true & (set_mSetPoint!0 -> SKIP);J_disableHV_j0(id__)
				within
					T_disableHV_t2(id__)
				
				
				State_disableHV_f0_R(id__) = 
					State_disableHV_f0(id__)
						[|diff(int_int,disableHV_f0_triggers)|]
					SKIP
						 		
					
				STM(id__) = (
					I_disableHV_i0(id__)
						[|
							{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
								x____ <- diff(SIDS,{SID_disableHV_f0}),
								y____ <- {SID_disableHV_f0}
						|}|]
					State_disableHV_f0_R(id__)
				)
				
				-- main process
				AUX(id__) = STM(id__)[|{|terminate|}|>SKIP	
			}
		exports
			Timed(OneStep) {
				-- the transition identifiers and memory transitions of an operation definition
				-- are exported here to allow for the renaming of the state machine to include
				-- the renaming of the events of the operation
				external prioritise
				transparent wbisim
				
				-- declaring identifiers of transitions
				datatype TIDS = NULLTRANSITION__
				              | TID_disableHV_t0
				              | TID_disableHV_t1
				              | TID_disableHV_t2
				
				-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
				
				ITIDS = {
				}
				
				-- flow channels
				channel internal__ : TIDS
				channel enteredV, enterV, exitV, exitedV : SIDS
				channel enter, entered: SIDS.SIDS
				channel exit,exited: SIDS.SIDS
				channel terminate
				
				-- variable channels
				channel get_arg, set_arg, getV_arg: core_boolean
				channel get_HVEnabled, set_HVEnabled, getV_HVEnabled: core_boolean
				channel get_currentState, set_currentState, getV_currentState: State
				channel get_dutyCyclePWM1, set_dutyCyclePWM1, getV_dutyCyclePWM1: duty
				channel get_mSetPoint, set_mSetPoint, getV_mSetPoint: core_real
						
				-- shared variable channels
				channel set_EXT_HVEnabled: core_boolean
				channel set_EXT_currentState: State
				channel set_EXT_dutyCyclePWM1: duty
				channel set_EXT_mSetPoint: core_real
				
				-- local variable channels for defined operations that are required by the state machine
				
				-- declaring state machine events
				channel int_enablePWM__: TIDS.InOut.core_boolean
				channel int_enablePWM: InOut.core_boolean
				channel int_dutyCyclePWM1__: TIDS.InOut.duty
				channel int_dutyCyclePWM1: InOut.duty
				
				-- declare clocks
				datatype ClockSet = dummyC
				channel clockReset 		-- no clocks declared
					
				-- declare trigger deadlines channel
				channel deadline : TIDS.deadlineSignal
					
				-- compile clocks process
				
				-- set of strings that uniquely identify the waiting conditions, each of which is 
				-- used to synchronise with the Memory process to set the correspoding variable in
				-- the memory process.
				datatype setWC_identifierSet = dummyWC
				
				-- declaring getWC and setWC channel for updating memory variables related to clocks
				channel setWC : setWC_identifierSet.Bool
				channel getWC : setWC_identifierSet.Bool
				
				-- Set of pairs capturing waiting condition processes and their alphabet.
				-- It includes the corresponding set of the defined operations.
				WCset(id__) = Union({
					{
					}
					})
				
				-- Auxiliary function to rename the channel set for required clocks.
				
				-- Set of transition events for which synchronisation is required between Clocks and the Memory process.
				-- It includes the corresponding set of the defined operations.
				WCsync = Union({
					{||}
					})
				-- Set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
				-- from the set of all state machine state identifiers. It includes the corresponding set of the defined operations.
				WCresets = Union({
					{| | x <- SIDS |}
					})
				-- Set of all waiting condition set events. It includes the corresponding set of the defined operations.
				WCsets = Union({
					{|setWC|}
					})
				
				
				
				-- Clocks process
				Clocks(id__) = || (alpha, P) : WCset(id__) @ [alpha] wbisim(P)
				
				-- collects all clockResets
				ClockResets = {|clockReset|}
				
				-- processes that read variables and offer transitions
				MemoryTransitions(id__,
					 arg,
					 HVEnabled,
					 currentState,
					 dutyCyclePWM1,
					 mSetPoint) = (
					((arg==false))&internal__!TID_disableHV_t0 -> SKIP
					[]
					((arg==true))&internal__!TID_disableHV_t1 -> SKIP
					[]
					internal__!TID_disableHV_t2 -> SKIP
				
					[]
						set_arg?x__ -> SKIP
				 	)
				MemoryTransitions_disableHV(id__) =
					(
					OP_disableHV::getV_arg?arg ->	
					OP_disableHV::getV_HVEnabled?HVEnabled ->	
					OP_disableHV::getV_currentState?currentState ->	
					OP_disableHV::getV_dutyCyclePWM1?dutyCyclePWM1 ->	
					OP_disableHV::getV_mSetPoint?mSetPoint ->
					 MemoryTransitions(id__,
					 	 arg,
					 	 HVEnabled,
					 	 currentState,
					 	 dutyCyclePWM1,
					 	 mSetPoint);
					 MemoryTransitions_disableHV(id__)
					)
				
				-- synchronisation, hiding and process sets 
		
				
				MemoryVariablesProcesses_disableHV = Union(
					{
						{
							Memory_arg(true)
						}
					}
				)
				
				MemoryVariablesSyncSet = Union({
					{|
						setWC,
						set_arg,
						getV_arg
					|}	
				})
				
				MemoryVariablesHideSet = Union({
					{|
						getWC,
						getV_arg
					|}
				})
				MachineMemorySyncSet = Union({
					union(
						union(
							{|get_arg,set_arg|},
							{||}
						)
							
						,
						{|internal__.TID_disableHV_t0,
						internal__.TID_disableHV_t1,
						internal__.TID_disableHV_t2|}
					),
					{|deadline|},
					WCresets
				})
				
				MachineMemoryHidingSet = Union({
					union(
						{|get_arg,set_arg|},
						{||}
					)
					,
					{|deadline|}
				})
				
				MachineInternalEvents = {|
					internal__
				|}
		
				-- individual memory processes
				Memory_arg(x__) = ( 
					get_arg!x__ -> Memory_arg(x__)
					[]
					getV_arg!x__ -> Memory_arg(x__)
					[]
					set_arg?x__ -> Memory_arg(x__)
				)
				
				-- Memory cell processes
				Memory_opt_currentState(x__) = ( 
					get_currentState!x__ -> Memory_opt_currentState(x__)
					[]
					set_currentState?x__ -> Memory_opt_currentState(x__)
					[]
					set_EXT_currentState?x__ -> Memory_opt_currentState(x__)
				)
				Memory_opt_HVEnabled(x__) = ( 
					get_HVEnabled!x__ -> Memory_opt_HVEnabled(x__)
					[]
					set_HVEnabled?x__ -> Memory_opt_HVEnabled(x__)
					[]
					set_EXT_HVEnabled?x__ -> Memory_opt_HVEnabled(x__)
				)
				Memory_opt_arg(x__) = ( 
					get_arg!x__ -> Memory_opt_arg(x__)
					[]
					set_arg?x__ -> Memory_opt_arg(x__)
				)
				Memory_opt_dutyCyclePWM1(x__) = ( 
					get_dutyCyclePWM1!x__ -> Memory_opt_dutyCyclePWM1(x__)
					[]
					set_dutyCyclePWM1?x__ -> Memory_opt_dutyCyclePWM1(x__)
					[]
					set_EXT_dutyCyclePWM1?x__ -> Memory_opt_dutyCyclePWM1(x__)
				)
				Memory_opt_mSetPoint(x__) = ( 
					get_mSetPoint!x__ -> Memory_opt_mSetPoint(x__)
					[]
					set_mSetPoint?x__ -> Memory_opt_mSetPoint(x__)
					[]
					set_EXT_mSetPoint?x__ -> Memory_opt_mSetPoint(x__)
				)
		
				-- combined individual memory processes
				MemoryVariables = ||| P : MemoryVariablesProcesses_disableHV @ P
			
				-- definition of the behaviour of state machines (default and optimised)
				D__(id__) = AUX(id__) \ internal_events
				O__(id__) = D__(id__)
			}
		endmodule
		module OP_supplyVoltCheck
			Timed(OneStep) {
				
				CALL__disableHV(id__,
							arg) = (
				OP_disableHV::set_arg!arg -> 
				OP_disableHV::D__(id__))
				[[
					OP_disableHV::int_enablePWM <- int_enablePWM,
					OP_disableHV::int_dutyCyclePWM1 <- int_dutyCyclePWM1
				]]
				[[
					OP_disableHV::get_HVEnabled <- get_HVEnabled,
					OP_disableHV::set_HVEnabled <- set_HVEnabled,
					OP_disableHV::get_currentState <- get_currentState,
					OP_disableHV::set_currentState <- set_currentState,
					OP_disableHV::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
					OP_disableHV::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
					OP_disableHV::get_mSetPoint <- get_mSetPoint,
					OP_disableHV::set_mSetPoint <- set_mSetPoint
				]]
				
				-- declaring identifiers of state and final states
				datatype SIDS = SID_supplyVoltCheck
				              | SID_supplyVoltCheck_f0
				
				int_int = {|
				|}
					
				
				internal_events = {|enter,entered,exit,exited,terminate|}
				
				-- declaring all states
				CS_supplyVoltCheck_f0_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_supplyVoltCheck_f0},
					y____ <- {SID_supplyVoltCheck_f0}
				|}
				
				
				supplyVoltCheck_f0_triggers = {|
				|}
				
				State_supplyVoltCheck_f0(id__) = let
					State_supplyVoltCheck_f0_execute(id__,o____) = SKIP; 
						entered!o____!SID_supplyVoltCheck_f0 ->
						terminate -> SKIP
				within
					enter?x____:diff(SIDS,{SID_supplyVoltCheck_f0})!SID_supplyVoltCheck_f0 -> (State_supplyVoltCheck_f0_execute(id__,x____))
				
				
				I_supplyVoltCheck_i0(id__) = let
					J_supplyVoltCheck_j0(id__) = (
								(internal__!TID_supplyVoltCheck_t5 -> true&CALL__disableHV(
											id__,
											true
										);enter!SID_supplyVoltCheck!SID_supplyVoltCheck_f0 -> entered!SID_supplyVoltCheck!SID_supplyVoltCheck_f0 ->
								SKIP
								)[]
								(internal__!TID_supplyVoltCheck_t2 -> enter!SID_supplyVoltCheck!SID_supplyVoltCheck_f0 -> entered!SID_supplyVoltCheck!SID_supplyVoltCheck_f0 ->
								SKIP
								)
								)
					T_supplyVoltCheck_t0(id__) = internal__!TID_supplyVoltCheck_t0 -> Deadline(true&(ext_pow24VStatus.in?pow24VStatus -> set_pow24VStatus!pow24VStatus -> SKIP),0);J_supplyVoltCheck_j0(id__)
				within
					T_supplyVoltCheck_t0(id__)
				
				
				State_supplyVoltCheck_f0_R(id__) = 
					State_supplyVoltCheck_f0(id__)
						[|diff(int_int,supplyVoltCheck_f0_triggers)|]
					SKIP
						 		
					
				STM(id__) = (
					I_supplyVoltCheck_i0(id__)
						[|
							{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
								x____ <- diff(SIDS,{SID_supplyVoltCheck_f0}),
								y____ <- {SID_supplyVoltCheck_f0}
						|}|]
					State_supplyVoltCheck_f0_R(id__)
				)
				
				-- main process
				AUX(id__) = STM(id__)[|{|terminate|}|>SKIP	
			}
		exports
			Timed(OneStep) {
				-- the transition identifiers and memory transitions of an operation definition
				-- are exported here to allow for the renaming of the state machine to include
				-- the renaming of the events of the operation
				external prioritise
				transparent wbisim
				
				-- declaring identifiers of transitions
				datatype TIDS = NULLTRANSITION__
				              | TID_supplyVoltCheck_t0
				              | TID_supplyVoltCheck_t5
				              | TID_supplyVoltCheck_t2
				
				-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
				
				ITIDS = {
				}
				
				-- flow channels
				channel internal__ : TIDS
				channel enteredV, enterV, exitV, exitedV : SIDS
				channel enter, entered: SIDS.SIDS
				channel exit,exited: SIDS.SIDS
				channel terminate
				
				-- variable channels
				channel get_pow24VStatus, set_pow24VStatus, getV_pow24VStatus: Power
				channel get_HVEnabled, set_HVEnabled, getV_HVEnabled: core_boolean
				channel get_currentState, set_currentState, getV_currentState: State
				channel get_dutyCyclePWM1, set_dutyCyclePWM1, getV_dutyCyclePWM1: duty
				channel get_mSetPoint, set_mSetPoint, getV_mSetPoint: core_real
						
				-- shared variable channels
				channel set_EXT_pow24VStatus: Power
				channel set_EXT_HVEnabled: core_boolean
				channel set_EXT_currentState: State
				channel set_EXT_dutyCyclePWM1: duty
				channel set_EXT_mSetPoint: core_real
				
				-- local variable channels for defined operations that are required by the state machine
				channel get_disableHV_arg, set_disableHV_arg: core_boolean
				
				-- declaring state machine events
				channel ext_pow24VStatus__: TIDS.InOut.Power
				channel ext_pow24VStatus: InOut.Power
				channel int_enablePWM__: TIDS.InOut.core_boolean
				channel int_enablePWM: InOut.core_boolean
				channel int_dutyCyclePWM1__: TIDS.InOut.duty
				channel int_dutyCyclePWM1: InOut.duty
				
				-- declare clocks
				datatype ClockSet = dummyC
				channel clockReset 		-- no clocks declared
					
				-- declare trigger deadlines channel
				channel deadline : TIDS.deadlineSignal
					
				-- compile clocks process
				
				-- set of strings that uniquely identify the waiting conditions, each of which is 
				-- used to synchronise with the Memory process to set the correspoding variable in
				-- the memory process.
				datatype setWC_identifierSet = dummyWC
				
				-- declaring getWC and setWC channel for updating memory variables related to clocks
				channel setWC : setWC_identifierSet.Bool
				channel getWC : setWC_identifierSet.Bool
				
				-- Set of pairs capturing waiting condition processes and their alphabet.
				-- It includes the corresponding set of the defined operations.
				WCset(id__) = Union({
					{
					}
					})
				
				-- Auxiliary function to rename the channel set for required clocks.
				
				-- Set of transition events for which synchronisation is required between Clocks and the Memory process.
				-- It includes the corresponding set of the defined operations.
				WCsync = Union({
					{||}
					})
				-- Set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
				-- from the set of all state machine state identifiers. It includes the corresponding set of the defined operations.
				WCresets = Union({
					{| | x <- SIDS |}
					})
				-- Set of all waiting condition set events. It includes the corresponding set of the defined operations.
				WCsets = Union({
					{|setWC|}
					})
				
				
				
				-- Clocks process
				Clocks(id__) = || (alpha, P) : WCset(id__) @ [alpha] wbisim(P)
				
				-- collects all clockResets
				ClockResets = {|clockReset|}
				
				-- processes that read variables and offer transitions
				MemoryTransitions(id__,
					 pow24VStatus,
					 HVEnabled,
					 currentState,
					 dutyCyclePWM1,
					 mSetPoint) = (
					internal__!TID_supplyVoltCheck_t0 -> SKIP
					[]
					((pow24VStatus==Power_Off))&internal__!TID_supplyVoltCheck_t5 -> SKIP
					[]
					((pow24VStatus==Power_On))&internal__!TID_supplyVoltCheck_t2 -> SKIP
				 	)
				MemoryTransitions_supplyVoltCheck(id__) =
					(
					OP_supplyVoltCheck::getV_pow24VStatus?pow24VStatus ->	
					OP_supplyVoltCheck::getV_HVEnabled?HVEnabled ->	
					OP_supplyVoltCheck::getV_currentState?currentState ->	
					OP_supplyVoltCheck::getV_dutyCyclePWM1?dutyCyclePWM1 ->	
					OP_supplyVoltCheck::getV_mSetPoint?mSetPoint ->
					 MemoryTransitions(id__,
					 	 pow24VStatus,
					 	 HVEnabled,
					 	 currentState,
					 	 dutyCyclePWM1,
					 	 mSetPoint);
					 MemoryTransitions_supplyVoltCheck(id__)
					)
				
				-- synchronisation, hiding and process sets 
		
				
				MemoryVariablesProcesses_supplyVoltCheck = Union(
					{
						{
						}
					}
				)
				
				MemoryVariablesSyncSet = Union({
					{|
						setWC
					|}	
				})
				
				MemoryVariablesHideSet = Union({
					{|
						getWC
					|}
				})
				MachineMemorySyncSet = Union({
					union(
						union(
							{||},
							{||}
						)
							
						,
						{|internal__.TID_supplyVoltCheck_t0,
						internal__.TID_supplyVoltCheck_t5,
						internal__.TID_supplyVoltCheck_t2|}
					),
					{|deadline|},
					WCresets
				})
				
				MachineMemoryHidingSet = Union({
					union(
						{||},
						{||}
					)
					,
					{|deadline|}
				})
				
				MachineInternalEvents = {|
					internal__
				|}
		
				-- individual memory processes
				
				-- Memory cell processes
				Memory_opt_mSetPoint(x__) = ( 
					get_mSetPoint!x__ -> Memory_opt_mSetPoint(x__)
					[]
					set_mSetPoint?x__ -> Memory_opt_mSetPoint(x__)
					[]
					set_EXT_mSetPoint?x__ -> Memory_opt_mSetPoint(x__)
				)
				Memory_opt_HVEnabled(x__) = ( 
					get_HVEnabled!x__ -> Memory_opt_HVEnabled(x__)
					[]
					set_HVEnabled?x__ -> Memory_opt_HVEnabled(x__)
					[]
					set_EXT_HVEnabled?x__ -> Memory_opt_HVEnabled(x__)
				)
				Memory_opt_currentState(x__) = ( 
					get_currentState!x__ -> Memory_opt_currentState(x__)
					[]
					set_currentState?x__ -> Memory_opt_currentState(x__)
					[]
					set_EXT_currentState?x__ -> Memory_opt_currentState(x__)
				)
				Memory_opt_dutyCyclePWM1(x__) = ( 
					get_dutyCyclePWM1!x__ -> Memory_opt_dutyCyclePWM1(x__)
					[]
					set_dutyCyclePWM1?x__ -> Memory_opt_dutyCyclePWM1(x__)
					[]
					set_EXT_dutyCyclePWM1?x__ -> Memory_opt_dutyCyclePWM1(x__)
				)
				Memory_opt_pow24VStatus(x__) = ( 
					get_pow24VStatus!x__ -> Memory_opt_pow24VStatus(x__)
					[]
					set_pow24VStatus?x__ -> Memory_opt_pow24VStatus(x__)
					[]
					set_EXT_pow24VStatus?x__ -> Memory_opt_pow24VStatus(x__)
				)
		
				-- combined individual memory processes
				MemoryVariables = ||| P : MemoryVariablesProcesses_supplyVoltCheck @ P
			
				-- definition of the behaviour of state machines (default and optimised)
				D__(id__) = AUX(id__) \ internal_events
				O__(id__) = D__(id__)
			}
		endmodule
		module OP_checkLimits
			Timed(OneStep) {
				
				CALL__disableHV(id__,
							arg) = (
				OP_disableHV::set_arg!arg -> 
				OP_disableHV::D__(id__))
				[[
					OP_disableHV::int_enablePWM <- int_enablePWM,
					OP_disableHV::int_dutyCyclePWM1 <- int_dutyCyclePWM1
				]]
				[[
					OP_disableHV::get_HVEnabled <- get_HVEnabled,
					OP_disableHV::set_HVEnabled <- set_HVEnabled,
					OP_disableHV::get_currentState <- get_currentState,
					OP_disableHV::set_currentState <- set_currentState,
					OP_disableHV::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
					OP_disableHV::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
					OP_disableHV::get_mSetPoint <- get_mSetPoint,
					OP_disableHV::set_mSetPoint <- set_mSetPoint
				]]
				
				-- declaring identifiers of state and final states
				datatype SIDS = SID_checkLimits
				              | SID_checkLimits_f0
				
				int_int = {|
				|}
					
				
				internal_events = {|enter,entered,exit,exited,terminate|}
				
				-- declaring all states
				CS_checkLimits_f0_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_checkLimits_f0},
					y____ <- {SID_checkLimits_f0}
				|}
				
				
				checkLimits_f0_triggers = {|
				|}
				
				State_checkLimits_f0(id__) = let
					State_checkLimits_f0_execute(id__,o____) = SKIP; 
						entered!o____!SID_checkLimits_f0 ->
						terminate -> SKIP
				within
					enter?x____:diff(SIDS,{SID_checkLimits_f0})!SID_checkLimits_f0 -> (State_checkLimits_f0_execute(id__,x____))
				
				
				I_checkLimits_i0(id__) = let
					J_checkLimits_j0(id__) = (
								(internal__!TID_checkLimits_t1 -> enter!SID_checkLimits!SID_checkLimits_f0 -> entered!SID_checkLimits!SID_checkLimits_f0 ->
								SKIP
								)[]
								(internal__!TID_checkLimits_t2 -> true&CALL__disableHV(
											id__,
											true
										);enter!SID_checkLimits!SID_checkLimits_f0 -> entered!SID_checkLimits!SID_checkLimits_f0 ->
								SKIP
								)
								)
					T_checkLimits_t0(id__) = internal__!TID_checkLimits_t0 -> J_checkLimits_j0(id__)
				within
					T_checkLimits_t0(id__)
				
				
				State_checkLimits_f0_R(id__) = 
					State_checkLimits_f0(id__)
						[|diff(int_int,checkLimits_f0_triggers)|]
					SKIP
						 		
					
				STM(id__) = (
					I_checkLimits_i0(id__)
						[|
							{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
								x____ <- diff(SIDS,{SID_checkLimits_f0}),
								y____ <- {SID_checkLimits_f0}
						|}|]
					State_checkLimits_f0_R(id__)
				)
				
				-- main process
				AUX(id__) = STM(id__)[|{|terminate|}|>SKIP	
			}
		exports
			Timed(OneStep) {
				-- the transition identifiers and memory transitions of an operation definition
				-- are exported here to allow for the renaming of the state machine to include
				-- the renaming of the events of the operation
				external prioritise
				transparent wbisim
				
				-- declaring identifiers of transitions
				datatype TIDS = NULLTRANSITION__
				              | TID_checkLimits_t0
				              | TID_checkLimits_t1
				              | TID_checkLimits_t2
				
				-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
				
				ITIDS = {
				}
				
				-- flow channels
				channel internal__ : TIDS
				channel enteredV, enterV, exitV, exitedV : SIDS
				channel enter, entered: SIDS.SIDS
				channel exit,exited: SIDS.SIDS
				channel terminate
				
				-- variable channels
				channel get_ActualHV, set_ActualHV, getV_ActualHV: core_real
				channel get_overLimit, set_overLimit, getV_overLimit: core_real
				channel get_underLimit, set_underLimit, getV_underLimit: core_real
				channel get_HVEnabled, set_HVEnabled, getV_HVEnabled: core_boolean
				channel get_currentState, set_currentState, getV_currentState: State
				channel get_dutyCyclePWM1, set_dutyCyclePWM1, getV_dutyCyclePWM1: duty
				channel get_mSetPoint, set_mSetPoint, getV_mSetPoint: core_real
						
				-- shared variable channels
				channel set_EXT_ActualHV: core_real
				channel set_EXT_overLimit: core_real
				channel set_EXT_underLimit: core_real
				channel set_EXT_HVEnabled: core_boolean
				channel set_EXT_currentState: State
				channel set_EXT_dutyCyclePWM1: duty
				channel set_EXT_mSetPoint: core_real
				
				-- local variable channels for defined operations that are required by the state machine
				channel get_disableHV_arg, set_disableHV_arg: core_boolean
				
				-- declaring state machine events
				channel int_enablePWM__: TIDS.InOut.core_boolean
				channel int_enablePWM: InOut.core_boolean
				channel int_dutyCyclePWM1__: TIDS.InOut.duty
				channel int_dutyCyclePWM1: InOut.duty
				
				-- declare clocks
				datatype ClockSet = dummyC
				channel clockReset 		-- no clocks declared
					
				-- declare trigger deadlines channel
				channel deadline : TIDS.deadlineSignal
					
				-- compile clocks process
				
				-- set of strings that uniquely identify the waiting conditions, each of which is 
				-- used to synchronise with the Memory process to set the correspoding variable in
				-- the memory process.
				datatype setWC_identifierSet = dummyWC
				
				-- declaring getWC and setWC channel for updating memory variables related to clocks
				channel setWC : setWC_identifierSet.Bool
				channel getWC : setWC_identifierSet.Bool
				
				-- Set of pairs capturing waiting condition processes and their alphabet.
				-- It includes the corresponding set of the defined operations.
				WCset(id__) = Union({
					{
					}
					})
				
				-- Auxiliary function to rename the channel set for required clocks.
				
				-- Set of transition events for which synchronisation is required between Clocks and the Memory process.
				-- It includes the corresponding set of the defined operations.
				WCsync = Union({
					{||}
					})
				-- Set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
				-- from the set of all state machine state identifiers. It includes the corresponding set of the defined operations.
				WCresets = Union({
					{| | x <- SIDS |}
					})
				-- Set of all waiting condition set events. It includes the corresponding set of the defined operations.
				WCsets = Union({
					{|setWC|}
					})
				
				
				
				-- Clocks process
				Clocks(id__) = || (alpha, P) : WCset(id__) @ [alpha] wbisim(P)
				
				-- collects all clockResets
				ClockResets = {|clockReset|}
				
				-- processes that read variables and offer transitions
				MemoryTransitions(id__,
					 ActualHV,
					 overLimit,
					 underLimit,
					 HVEnabled,
					 currentState,
					 dutyCyclePWM1,
					 mSetPoint) = (
					internal__!TID_checkLimits_t0 -> SKIP
					[]
					(((ActualHV<=overLimit) and (ActualHV>=underLimit)))&internal__!TID_checkLimits_t1 -> SKIP
					[]
					(((ActualHV<underLimit) or (ActualHV>overLimit)))&internal__!TID_checkLimits_t2 -> SKIP
				 	)
				MemoryTransitions_checkLimits(id__) =
					(
					OP_checkLimits::getV_ActualHV?ActualHV ->	
					OP_checkLimits::getV_overLimit?overLimit ->	
					OP_checkLimits::getV_underLimit?underLimit ->	
					OP_checkLimits::getV_HVEnabled?HVEnabled ->	
					OP_checkLimits::getV_currentState?currentState ->	
					OP_checkLimits::getV_dutyCyclePWM1?dutyCyclePWM1 ->	
					OP_checkLimits::getV_mSetPoint?mSetPoint ->
					 MemoryTransitions(id__,
					 	 ActualHV,
					 	 overLimit,
					 	 underLimit,
					 	 HVEnabled,
					 	 currentState,
					 	 dutyCyclePWM1,
					 	 mSetPoint);
					 MemoryTransitions_checkLimits(id__)
					)
				
				-- synchronisation, hiding and process sets 
		
				
				MemoryVariablesProcesses_checkLimits = Union(
					{
						{
						}
					}
				)
				
				MemoryVariablesSyncSet = Union({
					{|
						setWC
					|}	
				})
				
				MemoryVariablesHideSet = Union({
					{|
						getWC
					|}
				})
				MachineMemorySyncSet = Union({
					union(
						union(
							{||},
							{||}
						)
							
						,
						{|internal__.TID_checkLimits_t0,
						internal__.TID_checkLimits_t1,
						internal__.TID_checkLimits_t2|}
					),
					{|deadline|},
					WCresets
				})
				
				MachineMemoryHidingSet = Union({
					union(
						{||},
						{||}
					)
					,
					{|deadline|}
				})
				
				MachineInternalEvents = {|
					internal__
				|}
		
				-- individual memory processes
				
				-- Memory cell processes
				Memory_opt_mSetPoint(x__) = ( 
					get_mSetPoint!x__ -> Memory_opt_mSetPoint(x__)
					[]
					set_mSetPoint?x__ -> Memory_opt_mSetPoint(x__)
					[]
					set_EXT_mSetPoint?x__ -> Memory_opt_mSetPoint(x__)
				)
				Memory_opt_HVEnabled(x__) = ( 
					get_HVEnabled!x__ -> Memory_opt_HVEnabled(x__)
					[]
					set_HVEnabled?x__ -> Memory_opt_HVEnabled(x__)
					[]
					set_EXT_HVEnabled?x__ -> Memory_opt_HVEnabled(x__)
				)
				Memory_opt_currentState(x__) = ( 
					get_currentState!x__ -> Memory_opt_currentState(x__)
					[]
					set_currentState?x__ -> Memory_opt_currentState(x__)
					[]
					set_EXT_currentState?x__ -> Memory_opt_currentState(x__)
				)
				Memory_opt_dutyCyclePWM1(x__) = ( 
					get_dutyCyclePWM1!x__ -> Memory_opt_dutyCyclePWM1(x__)
					[]
					set_dutyCyclePWM1?x__ -> Memory_opt_dutyCyclePWM1(x__)
					[]
					set_EXT_dutyCyclePWM1?x__ -> Memory_opt_dutyCyclePWM1(x__)
				)
				Memory_opt_overLimit(x__) = ( 
					get_overLimit!x__ -> Memory_opt_overLimit(x__)
					[]
					set_overLimit?x__ -> Memory_opt_overLimit(x__)
					[]
					set_EXT_overLimit?x__ -> Memory_opt_overLimit(x__)
				)
				Memory_opt_underLimit(x__) = ( 
					get_underLimit!x__ -> Memory_opt_underLimit(x__)
					[]
					set_underLimit?x__ -> Memory_opt_underLimit(x__)
					[]
					set_EXT_underLimit?x__ -> Memory_opt_underLimit(x__)
				)
				Memory_opt_ActualHV(x__) = ( 
					get_ActualHV!x__ -> Memory_opt_ActualHV(x__)
					[]
					set_ActualHV?x__ -> Memory_opt_ActualHV(x__)
					[]
					set_EXT_ActualHV?x__ -> Memory_opt_ActualHV(x__)
				)
		
				-- combined individual memory processes
				MemoryVariables = ||| P : MemoryVariablesProcesses_checkLimits @ P
			
				-- definition of the behaviour of state machines (default and optimised)
				D__(id__) = AUX(id__) \ internal_events
				O__(id__) = D__(id__)
			}
		endmodule
		module OP_PID_Control
			Timed(OneStep) {
				
				
				-- declaring identifiers of state and final states
				datatype SIDS = SID_PID_Control
				              | SID_PID_Control_f0
				
				int_int = {|
				|}
					
				
				internal_events = {|enter,entered,exit,exited,terminate|}
				
				-- declaring all states
				CS_PID_Control_f0_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_PID_Control_f0},
					y____ <- {SID_PID_Control_f0}
				|}
				
				
				PID_Control_f0_triggers = {|
				|}
				
				State_PID_Control_f0(id__) = let
					State_PID_Control_f0_execute(id__,o____) = SKIP; 
						entered!o____!SID_PID_Control_f0 ->
						terminate -> SKIP
				within
					enter?x____:diff(SIDS,{SID_PID_Control_f0})!SID_PID_Control_f0 -> (State_PID_Control_f0_execute(id__,x____))
				
				
				I_PID_Control_i0(id__) = let
					J_PID_Control_j3(id__) = (
								(internal__!TID_PID_Control_t5 -> Deadline(get_dutyCyclePWM1?dutyCyclePWM1 -> true&(int_dutyCyclePWM1.out!dutyCyclePWM1 -> SKIP),0);enter!SID_PID_Control!SID_PID_Control_f0 -> entered!SID_PID_Control!SID_PID_Control_f0 ->
								SKIP
								)
								)
					J_PID_Control_j1(id__) = (
								(internal__!TID_PID_Control_t3 -> get_dutyCyclePWM1?dutyCyclePWM1 -> true & (set_dutyCyclePWM1!increaseduty(dutyCyclePWM1) -> SKIP);J_PID_Control_j3(id__))[]
								(internal__!TID_PID_Control_t4 -> get_dutyCyclePWM1?dutyCyclePWM1 -> true & (set_dutyCyclePWM1!decreaseduty(dutyCyclePWM1) -> SKIP);J_PID_Control_j3(id__))[]
								(internal__!TID_PID_Control_t6 -> J_PID_Control_j3(id__))
								)
					T_PID_Control_t2(id__) = internal__!TID_PID_Control_t2 -> Deadline(true&(ext_ActualHV.in?ActualHV -> set_ActualHV!ActualHV -> SKIP),0);J_PID_Control_j1(id__)
				within
					T_PID_Control_t2(id__)
				
				
				State_PID_Control_f0_R(id__) = 
					State_PID_Control_f0(id__)
						[|diff(int_int,PID_Control_f0_triggers)|]
					SKIP
						 		
					
				STM(id__) = (
					I_PID_Control_i0(id__)
						[|
							{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
								x____ <- diff(SIDS,{SID_PID_Control_f0}),
								y____ <- {SID_PID_Control_f0}
						|}|]
					State_PID_Control_f0_R(id__)
				)
				
				-- main process
				AUX(id__) = STM(id__)[|{|terminate|}|>SKIP	
			}
		exports
			Timed(OneStep) {
				-- the transition identifiers and memory transitions of an operation definition
				-- are exported here to allow for the renaming of the state machine to include
				-- the renaming of the events of the operation
				external prioritise
				transparent wbisim
				
				-- declaring identifiers of transitions
				datatype TIDS = NULLTRANSITION__
				              | TID_PID_Control_t2
				              | TID_PID_Control_t3
				              | TID_PID_Control_t4
				              | TID_PID_Control_t5
				              | TID_PID_Control_t6
				
				-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
				
				ITIDS = {
				}
				
				-- flow channels
				channel internal__ : TIDS
				channel enteredV, enterV, exitV, exitedV : SIDS
				channel enter, entered: SIDS.SIDS
				channel exit,exited: SIDS.SIDS
				channel terminate
				
				-- variable channels
				channel get_ActualHV, set_ActualHV, getV_ActualHV: core_real
				channel get_dutyCyclePWM1, set_dutyCyclePWM1, getV_dutyCyclePWM1: duty
				channel get_mSetPoint, set_mSetPoint, getV_mSetPoint: core_real
						
				-- shared variable channels
				channel set_EXT_ActualHV: core_real
				channel set_EXT_dutyCyclePWM1: duty
				channel set_EXT_mSetPoint: core_real
				
				-- local variable channels for defined operations that are required by the state machine
				
				-- declaring state machine events
				channel ext_ActualHV__: TIDS.InOut.core_real
				channel ext_ActualHV: InOut.core_real
				channel int_dutyCyclePWM1__: TIDS.InOut.duty
				channel int_dutyCyclePWM1: InOut.duty
				
				-- declare clocks
				datatype ClockSet = dummyC
				channel clockReset 		-- no clocks declared
					
				-- declare trigger deadlines channel
				channel deadline : TIDS.deadlineSignal
					
				-- compile clocks process
				
				-- set of strings that uniquely identify the waiting conditions, each of which is 
				-- used to synchronise with the Memory process to set the correspoding variable in
				-- the memory process.
				datatype setWC_identifierSet = dummyWC
				
				-- declaring getWC and setWC channel for updating memory variables related to clocks
				channel setWC : setWC_identifierSet.Bool
				channel getWC : setWC_identifierSet.Bool
				
				-- Set of pairs capturing waiting condition processes and their alphabet.
				-- It includes the corresponding set of the defined operations.
				WCset(id__) = Union({
					{
					}
					})
				
				-- Auxiliary function to rename the channel set for required clocks.
				
				-- Set of transition events for which synchronisation is required between Clocks and the Memory process.
				-- It includes the corresponding set of the defined operations.
				WCsync = Union({
					{||}
					})
				-- Set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
				-- from the set of all state machine state identifiers. It includes the corresponding set of the defined operations.
				WCresets = Union({
					{| | x <- SIDS |}
					})
				-- Set of all waiting condition set events. It includes the corresponding set of the defined operations.
				WCsets = Union({
					{|setWC|}
					})
				
				
				
				-- Clocks process
				Clocks(id__) = || (alpha, P) : WCset(id__) @ [alpha] wbisim(P)
				
				-- collects all clockResets
				ClockResets = {|clockReset|}
				
				-- processes that read variables and offer transitions
				MemoryTransitions(id__,
					 ActualHV,
					 dutyCyclePWM1,
					 mSetPoint) = (
					internal__!TID_PID_Control_t2 -> SKIP
					[]
					((ActualHV<mSetPoint))&internal__!TID_PID_Control_t3 -> SKIP
					[]
					((ActualHV>mSetPoint))&internal__!TID_PID_Control_t4 -> SKIP
					[]
					internal__!TID_PID_Control_t5 -> SKIP
					[]
					((ActualHV==mSetPoint))&internal__!TID_PID_Control_t6 -> SKIP
				 	)
				MemoryTransitions_PID_Control(id__) =
					(
					OP_PID_Control::getV_ActualHV?ActualHV ->	
					OP_PID_Control::getV_dutyCyclePWM1?dutyCyclePWM1 ->	
					OP_PID_Control::getV_mSetPoint?mSetPoint ->
					 MemoryTransitions(id__,
					 	 ActualHV,
					 	 dutyCyclePWM1,
					 	 mSetPoint);
					 MemoryTransitions_PID_Control(id__)
					)
				
				-- synchronisation, hiding and process sets 
		
				
				MemoryVariablesProcesses_PID_Control = Union(
					{
						{
						}
					}
				)
				
				MemoryVariablesSyncSet = Union({
					{|
						setWC
					|}	
				})
				
				MemoryVariablesHideSet = Union({
					{|
						getWC
					|}
				})
				MachineMemorySyncSet = Union({
					union(
						union(
							{||},
							{||}
						)
							
						,
						{|internal__.TID_PID_Control_t2,
						internal__.TID_PID_Control_t3,
						internal__.TID_PID_Control_t4,
						internal__.TID_PID_Control_t5,
						internal__.TID_PID_Control_t6|}
					),
					{|deadline|},
					WCresets
				})
				
				MachineMemoryHidingSet = Union({
					union(
						{||},
						{||}
					)
					,
					{|deadline|}
				})
				
				MachineInternalEvents = {|
					internal__
				|}
		
				-- individual memory processes
				
				-- Memory cell processes
				Memory_opt_dutyCyclePWM1(x__) = ( 
					get_dutyCyclePWM1!x__ -> Memory_opt_dutyCyclePWM1(x__)
					[]
					set_dutyCyclePWM1?x__ -> Memory_opt_dutyCyclePWM1(x__)
					[]
					set_EXT_dutyCyclePWM1?x__ -> Memory_opt_dutyCyclePWM1(x__)
				)
				Memory_opt_mSetPoint(x__) = ( 
					get_mSetPoint!x__ -> Memory_opt_mSetPoint(x__)
					[]
					set_mSetPoint?x__ -> Memory_opt_mSetPoint(x__)
					[]
					set_EXT_mSetPoint?x__ -> Memory_opt_mSetPoint(x__)
				)
				Memory_opt_ActualHV(x__) = ( 
					get_ActualHV!x__ -> Memory_opt_ActualHV(x__)
					[]
					set_ActualHV?x__ -> Memory_opt_ActualHV(x__)
					[]
					set_EXT_ActualHV?x__ -> Memory_opt_ActualHV(x__)
				)
		
				-- combined individual memory processes
				MemoryVariables = ||| P : MemoryVariablesProcesses_PID_Control @ P
			
				-- definition of the behaviour of state machines (default and optimised)
				D__(id__) = AUX(id__) \ internal_events
				O__(id__) = D__(id__)
			}
		endmodule
		module OP_setPointRamping
			Timed(OneStep) {
				
				CALL__disableHV(id__,
							arg) = (
				OP_disableHV::set_arg!arg -> 
				OP_disableHV::D__(id__))
				[[
					OP_disableHV::int_enablePWM <- int_enablePWM,
					OP_disableHV::int_dutyCyclePWM1 <- int_dutyCyclePWM1
				]]
				[[
					OP_disableHV::get_HVEnabled <- get_HVEnabled,
					OP_disableHV::set_HVEnabled <- set_HVEnabled,
					OP_disableHV::get_currentState <- get_currentState,
					OP_disableHV::set_currentState <- set_currentState,
					OP_disableHV::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
					OP_disableHV::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
					OP_disableHV::get_mSetPoint <- get_mSetPoint,
					OP_disableHV::set_mSetPoint <- set_mSetPoint
				]]
				
				-- declaring identifiers of state and final states
				datatype SIDS = SID_setPointRamping
				              | SID_setPointRamping_f0
				
				int_int = {|
				|}
					
				
				internal_events = {|enter,entered,exit,exited,terminate|}
				
				-- declaring all states
				CS_setPointRamping_f0_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_setPointRamping_f0},
					y____ <- {SID_setPointRamping_f0}
				|}
				
				
				setPointRamping_f0_triggers = {|
				|}
				
				State_setPointRamping_f0(id__,
						    const_setPointRamping_rampStep) = let
					State_setPointRamping_f0_execute(id__,o____) = SKIP; 
						entered!o____!SID_setPointRamping_f0 ->
						terminate -> SKIP
				within
					enter?x____:diff(SIDS,{SID_setPointRamping_f0})!SID_setPointRamping_f0 -> (State_setPointRamping_f0_execute(id__,x____))
				
				
				I_setPointRamping_i0(id__,
						    const_setPointRamping_rampStep) = let
					J_setPointRamping_j5(id__,
							    const_setPointRamping_rampStep) = (
								(internal__!TID_setPointRamping_t1 -> true & (set_mSetPoint!0 -> SKIP);true&CALL__disableHV(
											id__,
											false
										);enter!SID_setPointRamping!SID_setPointRamping_f0 -> entered!SID_setPointRamping!SID_setPointRamping_f0 ->
								SKIP
								)[]
								(internal__!TID_setPointRamping_t2 -> J_setPointRamping_j0(id__,
										    const_setPointRamping_rampStep))
								)
					J_setPointRamping_j3(id__,
							    const_setPointRamping_rampStep) = (
								(internal__!TID_setPointRamping_t9 -> get_newSetPoint?newSetPoint -> true & (set_mSetPoint!newSetPoint -> SKIP);J_setPointRamping_j4(id__,
										    const_setPointRamping_rampStep))[]
								(internal__!TID_setPointRamping_t10 -> J_setPointRamping_j4(id__,
										    const_setPointRamping_rampStep))
								)
					J_setPointRamping_j4(id__,
							    const_setPointRamping_rampStep) = (
								(internal__!TID_setPointRamping_t8 -> enter!SID_setPointRamping!SID_setPointRamping_f0 -> entered!SID_setPointRamping!SID_setPointRamping_f0 ->
								SKIP
								)
								)
					J_setPointRamping_j0(id__,
							    const_setPointRamping_rampStep) = (
								(internal__!TID_setPointRamping_t3 -> get_mSetPoint?mSetPoint -> true & (set_mSetPoint!Minus(mSetPoint, const_setPointRamping_rampStep, core_real) -> SKIP);J_setPointRamping_j1(id__,
										    const_setPointRamping_rampStep))[]
								(internal__!TID_setPointRamping_t7 -> get_mSetPoint?mSetPoint -> true & (set_mSetPoint!Plus(mSetPoint, const_setPointRamping_rampStep, core_real) -> SKIP);J_setPointRamping_j3(id__,
										    const_setPointRamping_rampStep))[]
								(internal__!TID_setPointRamping_t11 -> enter!SID_setPointRamping!SID_setPointRamping_f0 -> entered!SID_setPointRamping!SID_setPointRamping_f0 ->
								SKIP
								)
								)
					J_setPointRamping_j2(id__,
							    const_setPointRamping_rampStep) = (
								(internal__!TID_setPointRamping_t6 -> enter!SID_setPointRamping!SID_setPointRamping_f0 -> entered!SID_setPointRamping!SID_setPointRamping_f0 ->
								SKIP
								)
								)
					J_setPointRamping_j1(id__,
							    const_setPointRamping_rampStep) = (
								(internal__!TID_setPointRamping_t4 -> get_newSetPoint?newSetPoint -> true & (set_mSetPoint!newSetPoint -> SKIP);J_setPointRamping_j2(id__,
										    const_setPointRamping_rampStep))[]
								(internal__!TID_setPointRamping_t5 -> J_setPointRamping_j2(id__,
										    const_setPointRamping_rampStep))
								)
					T_setPointRamping_t0(id__,
							    const_setPointRamping_rampStep) = internal__!TID_setPointRamping_t0 -> J_setPointRamping_j5(id__,
							    const_setPointRamping_rampStep)
				within
					T_setPointRamping_t0(id__,
							    const_setPointRamping_rampStep)
				
				
				State_setPointRamping_f0_R(id__,
						    const_setPointRamping_rampStep) = 
					State_setPointRamping_f0(id__,
							    const_setPointRamping_rampStep)
						[|diff(int_int,setPointRamping_f0_triggers)|]
					SKIP
						 		
					
				STM(id__,
						    const_setPointRamping_rampStep) = (
					I_setPointRamping_i0(id__,
							    const_setPointRamping_rampStep)
						[|
							{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
								x____ <- diff(SIDS,{SID_setPointRamping_f0}),
								y____ <- {SID_setPointRamping_f0}
						|}|]
					State_setPointRamping_f0_R(id__,
							    const_setPointRamping_rampStep)
				)
				
				-- main process
				AUX(id__,
						    const_setPointRamping_rampStep) = STM(id__,
						    const_setPointRamping_rampStep)[|{|terminate|}|>SKIP	
			}
		exports
			Timed(OneStep) {
				-- the transition identifiers and memory transitions of an operation definition
				-- are exported here to allow for the renaming of the state machine to include
				-- the renaming of the events of the operation
				external prioritise
				transparent wbisim
				
				-- declaring identifiers of transitions
				datatype TIDS = NULLTRANSITION__
				              | TID_setPointRamping_t0
				              | TID_setPointRamping_t1
				              | TID_setPointRamping_t2
				              | TID_setPointRamping_t3
				              | TID_setPointRamping_t4
				              | TID_setPointRamping_t5
				              | TID_setPointRamping_t6
				              | TID_setPointRamping_t7
				              | TID_setPointRamping_t8
				              | TID_setPointRamping_t9
				              | TID_setPointRamping_t10
				              | TID_setPointRamping_t11
				
				-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
				
				ITIDS = {
				}
				
				-- flow channels
				channel internal__ : TIDS
				channel enteredV, enterV, exitV, exitedV : SIDS
				channel enter, entered: SIDS.SIDS
				channel exit,exited: SIDS.SIDS
				channel terminate
				
				-- variable channels
				channel get_newSetPoint, set_newSetPoint, getV_newSetPoint: core_real
				channel get_HVEnabled, set_HVEnabled, getV_HVEnabled: core_boolean
				channel get_currentState, set_currentState, getV_currentState: State
				channel get_dutyCyclePWM1, set_dutyCyclePWM1, getV_dutyCyclePWM1: duty
				channel get_mSetPoint, set_mSetPoint, getV_mSetPoint: core_real
						
				-- shared variable channels
				channel set_EXT_HVEnabled: core_boolean
				channel set_EXT_currentState: State
				channel set_EXT_dutyCyclePWM1: duty
				channel set_EXT_mSetPoint: core_real
				
				-- local variable channels for defined operations that are required by the state machine
				channel get_disableHV_arg, set_disableHV_arg: core_boolean
				
				-- declaring state machine events
				channel int_enablePWM__: TIDS.InOut.core_boolean
				channel int_enablePWM: InOut.core_boolean
				channel int_dutyCyclePWM1__: TIDS.InOut.duty
				channel int_dutyCyclePWM1: InOut.duty
				
				-- declare clocks
				datatype ClockSet = dummyC
				channel clockReset 		-- no clocks declared
					
				-- declare trigger deadlines channel
				channel deadline : TIDS.deadlineSignal
					
				-- compile clocks process
				
				-- set of strings that uniquely identify the waiting conditions, each of which is 
				-- used to synchronise with the Memory process to set the correspoding variable in
				-- the memory process.
				datatype setWC_identifierSet = dummyWC
				
				-- declaring getWC and setWC channel for updating memory variables related to clocks
				channel setWC : setWC_identifierSet.Bool
				channel getWC : setWC_identifierSet.Bool
				
				-- Set of pairs capturing waiting condition processes and their alphabet.
				-- It includes the corresponding set of the defined operations.
				WCset(id__,
						    const_setPointRamping_rampStep) = Union({
					{
					}
					})
				
				-- Auxiliary function to rename the channel set for required clocks.
				
				-- Set of transition events for which synchronisation is required between Clocks and the Memory process.
				-- It includes the corresponding set of the defined operations.
				WCsync = Union({
					{||}
					})
				-- Set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
				-- from the set of all state machine state identifiers. It includes the corresponding set of the defined operations.
				WCresets = Union({
					{| | x <- SIDS |}
					})
				-- Set of all waiting condition set events. It includes the corresponding set of the defined operations.
				WCsets = Union({
					{|setWC|}
					})
				
				
				
				-- Clocks process
				Clocks(id__,
						    const_setPointRamping_rampStep) = || (alpha, P) : WCset(id__,
						    const_setPointRamping_rampStep) @ [alpha] wbisim(P)
				
				-- collects all clockResets
				ClockResets = {|clockReset|}
				
				-- processes that read variables and offer transitions
				MemoryTransitions(id__,
					 newSetPoint,
					 HVEnabled,
					 currentState,
					 dutyCyclePWM1,
					 mSetPoint,
					 const_setPointRamping_rampStep) = (
					internal__!TID_setPointRamping_t0 -> SKIP
					[]
					((newSetPoint<=0))&internal__!TID_setPointRamping_t1 -> SKIP
					[]
					((newSetPoint>0))&internal__!TID_setPointRamping_t2 -> SKIP
					[]
					((mSetPoint>newSetPoint))&internal__!TID_setPointRamping_t3 -> SKIP
					[]
					((mSetPoint<newSetPoint))&internal__!TID_setPointRamping_t4 -> SKIP
					[]
					((mSetPoint>=newSetPoint))&internal__!TID_setPointRamping_t5 -> SKIP
					[]
					internal__!TID_setPointRamping_t6 -> SKIP
					[]
					((mSetPoint<newSetPoint))&internal__!TID_setPointRamping_t7 -> SKIP
					[]
					internal__!TID_setPointRamping_t8 -> SKIP
					[]
					((mSetPoint>newSetPoint))&internal__!TID_setPointRamping_t9 -> SKIP
					[]
					((mSetPoint<=newSetPoint))&internal__!TID_setPointRamping_t10 -> SKIP
					[]
					((mSetPoint==newSetPoint))&internal__!TID_setPointRamping_t11 -> SKIP
				
					[]
						set_newSetPoint?x__ -> SKIP
				 	)
				MemoryTransitions_setPointRamping(id__,
					 const_setPointRamping_rampStep) =
					(
					OP_setPointRamping::getV_newSetPoint?newSetPoint ->	
					OP_setPointRamping::getV_HVEnabled?HVEnabled ->	
					OP_setPointRamping::getV_currentState?currentState ->	
					OP_setPointRamping::getV_dutyCyclePWM1?dutyCyclePWM1 ->	
					OP_setPointRamping::getV_mSetPoint?mSetPoint ->
					 MemoryTransitions(id__,
					 	 newSetPoint,
					 	 HVEnabled,
					 	 currentState,
					 	 dutyCyclePWM1,
					 	 mSetPoint,
					 	 const_setPointRamping_rampStep);
					 MemoryTransitions_setPointRamping(id__,
					 	 const_setPointRamping_rampStep)
					)
				
				-- synchronisation, hiding and process sets 
		
				
				MemoryVariablesProcesses_setPointRamping = Union(
					{
						{
							Memory_newSetPoint(0)
						}
					}
				)
				
				MemoryVariablesSyncSet = Union({
					{|
						setWC,
						getV_newSetPoint,
						set_newSetPoint
					|}	
				})
				
				MemoryVariablesHideSet = Union({
					{|
						getWC,
						getV_newSetPoint
					|}
				})
				MachineMemorySyncSet = Union({
					union(
						union(
							{|get_newSetPoint,set_newSetPoint|},
							{||}
						)
							
						,
						{|internal__.TID_setPointRamping_t0,
						internal__.TID_setPointRamping_t1,
						internal__.TID_setPointRamping_t2,
						internal__.TID_setPointRamping_t3,
						internal__.TID_setPointRamping_t4,
						internal__.TID_setPointRamping_t5,
						internal__.TID_setPointRamping_t6,
						internal__.TID_setPointRamping_t7,
						internal__.TID_setPointRamping_t8,
						internal__.TID_setPointRamping_t9,
						internal__.TID_setPointRamping_t10,
						internal__.TID_setPointRamping_t11|}
					),
					{|deadline|},
					WCresets
				})
				
				MachineMemoryHidingSet = Union({
					union(
						{|get_newSetPoint,set_newSetPoint|},
						{||}
					)
					,
					{|deadline|}
				})
				
				MachineInternalEvents = {|
					internal__
				|}
		
				-- individual memory processes
				Memory_newSetPoint(x__) = ( 
					get_newSetPoint!x__ -> Memory_newSetPoint(x__)
					[]
					getV_newSetPoint!x__ -> Memory_newSetPoint(x__)
					[]
					set_newSetPoint?x__ -> Memory_newSetPoint(x__)
				)
				
				-- Memory cell processes
				Memory_opt_dutyCyclePWM1(x__) = ( 
					get_dutyCyclePWM1!x__ -> Memory_opt_dutyCyclePWM1(x__)
					[]
					set_dutyCyclePWM1?x__ -> Memory_opt_dutyCyclePWM1(x__)
					[]
					set_EXT_dutyCyclePWM1?x__ -> Memory_opt_dutyCyclePWM1(x__)
				)
				Memory_opt_mSetPoint(x__) = ( 
					get_mSetPoint!x__ -> Memory_opt_mSetPoint(x__)
					[]
					set_mSetPoint?x__ -> Memory_opt_mSetPoint(x__)
					[]
					set_EXT_mSetPoint?x__ -> Memory_opt_mSetPoint(x__)
				)
				Memory_opt_newSetPoint(x__) = ( 
					get_newSetPoint!x__ -> Memory_opt_newSetPoint(x__)
					[]
					set_newSetPoint?x__ -> Memory_opt_newSetPoint(x__)
				)
				Memory_opt_HVEnabled(x__) = ( 
					get_HVEnabled!x__ -> Memory_opt_HVEnabled(x__)
					[]
					set_HVEnabled?x__ -> Memory_opt_HVEnabled(x__)
					[]
					set_EXT_HVEnabled?x__ -> Memory_opt_HVEnabled(x__)
				)
				Memory_opt_currentState(x__) = ( 
					get_currentState!x__ -> Memory_opt_currentState(x__)
					[]
					set_currentState?x__ -> Memory_opt_currentState(x__)
					[]
					set_EXT_currentState?x__ -> Memory_opt_currentState(x__)
				)
		
				-- combined individual memory processes
				MemoryVariables = ||| P : MemoryVariablesProcesses_setPointRamping @ P
			
				-- definition of the behaviour of state machines (default and optimised)
				D__(id__,
						    const_setPointRamping_rampStep) = AUX(id__,
						    const_setPointRamping_rampStep) \ internal_events
				O__(id__,
						    const_setPointRamping_rampStep) = D__(id__,
						    const_setPointRamping_rampStep)
			}
		endmodule
		module OP_AdjustLimits
			Timed(OneStep) {
				
				
				-- declaring identifiers of state and final states
				datatype SIDS = SID_AdjustLimits
				              | SID_AdjustLimits_f0
				
				int_int = {|
				|}
					
				
				internal_events = {|enter,entered,exit,exited,terminate|}
				
				-- declaring all states
				CS_AdjustLimits_f0_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_AdjustLimits_f0},
					y____ <- {SID_AdjustLimits_f0}
				|}
				
				
				AdjustLimits_f0_triggers = {|
				|}
				
				State_AdjustLimits_f0(id__) = let
					State_AdjustLimits_f0_execute(id__,o____) = SKIP; 
						entered!o____!SID_AdjustLimits_f0 ->
						terminate -> SKIP
				within
					enter?x____:diff(SIDS,{SID_AdjustLimits_f0})!SID_AdjustLimits_f0 -> (State_AdjustLimits_f0_execute(id__,x____))
				
				
				I_AdjustLimits_i0(id__) = let
					T_AdjustLimits_t1(id__) = internal__!TID_AdjustLimits_t1 -> get_mSetPoint?mSetPoint -> true & (set_overLimit!overLimitF(Plus(mSetPoint, 2, core_real)) -> SKIP);get_mSetPoint?mSetPoint -> true & (set_underLimit!underLimitF(Minus(mSetPoint, 2, core_real)) -> SKIP);enter!SID_AdjustLimits!SID_AdjustLimits_f0 -> entered!SID_AdjustLimits!SID_AdjustLimits_f0 ->
					SKIP
				within
					T_AdjustLimits_t1(id__)
				
				
				State_AdjustLimits_f0_R(id__) = 
					State_AdjustLimits_f0(id__)
						[|diff(int_int,AdjustLimits_f0_triggers)|]
					SKIP
						 		
					
				STM(id__) = (
					I_AdjustLimits_i0(id__)
						[|
							{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
								x____ <- diff(SIDS,{SID_AdjustLimits_f0}),
								y____ <- {SID_AdjustLimits_f0}
						|}|]
					State_AdjustLimits_f0_R(id__)
				)
				
				-- main process
				AUX(id__) = STM(id__)[|{|terminate|}|>SKIP	
			}
		exports
			Timed(OneStep) {
				-- the transition identifiers and memory transitions of an operation definition
				-- are exported here to allow for the renaming of the state machine to include
				-- the renaming of the events of the operation
				external prioritise
				transparent wbisim
				
				-- declaring identifiers of transitions
				datatype TIDS = NULLTRANSITION__
				              | TID_AdjustLimits_t1
				
				-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
				
				ITIDS = {
				}
				
				-- flow channels
				channel internal__ : TIDS
				channel enteredV, enterV, exitV, exitedV : SIDS
				channel enter, entered: SIDS.SIDS
				channel exit,exited: SIDS.SIDS
				channel terminate
				
				-- variable channels
				channel get_overLimit, set_overLimit, getV_overLimit: core_real
				channel get_underLimit, set_underLimit, getV_underLimit: core_real
				channel get_mSetPoint, set_mSetPoint, getV_mSetPoint: core_real
						
				-- shared variable channels
				channel set_EXT_overLimit: core_real
				channel set_EXT_underLimit: core_real
				channel set_EXT_mSetPoint: core_real
				
				-- local variable channels for defined operations that are required by the state machine
				
				-- declaring state machine events
				
				-- declare clocks
				datatype ClockSet = dummyC
				channel clockReset 		-- no clocks declared
					
				-- declare trigger deadlines channel
				channel deadline : TIDS.deadlineSignal
					
				-- compile clocks process
				
				-- set of strings that uniquely identify the waiting conditions, each of which is 
				-- used to synchronise with the Memory process to set the correspoding variable in
				-- the memory process.
				datatype setWC_identifierSet = dummyWC
				
				-- declaring getWC and setWC channel for updating memory variables related to clocks
				channel setWC : setWC_identifierSet.Bool
				channel getWC : setWC_identifierSet.Bool
				
				-- Set of pairs capturing waiting condition processes and their alphabet.
				-- It includes the corresponding set of the defined operations.
				WCset(id__) = Union({
					{
					}
					})
				
				-- Auxiliary function to rename the channel set for required clocks.
				
				-- Set of transition events for which synchronisation is required between Clocks and the Memory process.
				-- It includes the corresponding set of the defined operations.
				WCsync = Union({
					{||}
					})
				-- Set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
				-- from the set of all state machine state identifiers. It includes the corresponding set of the defined operations.
				WCresets = Union({
					{| | x <- SIDS |}
					})
				-- Set of all waiting condition set events. It includes the corresponding set of the defined operations.
				WCsets = Union({
					{|setWC|}
					})
				
				
				
				-- Clocks process
				Clocks(id__) = || (alpha, P) : WCset(id__) @ [alpha] wbisim(P)
				
				-- collects all clockResets
				ClockResets = {|clockReset|}
				
				-- processes that read variables and offer transitions
				MemoryTransitions(id__,
					 overLimit,
					 underLimit,
					 mSetPoint) = (
					internal__!TID_AdjustLimits_t1 -> SKIP
				 	)
				MemoryTransitions_AdjustLimits(id__) =
					(
					OP_AdjustLimits::getV_overLimit?overLimit ->	
					OP_AdjustLimits::getV_underLimit?underLimit ->	
					OP_AdjustLimits::getV_mSetPoint?mSetPoint ->
					 MemoryTransitions(id__,
					 	 overLimit,
					 	 underLimit,
					 	 mSetPoint);
					 MemoryTransitions_AdjustLimits(id__)
					)
				
				-- synchronisation, hiding and process sets 
		
				
				MemoryVariablesProcesses_AdjustLimits = Union(
					{
						{
						}
					}
				)
				
				MemoryVariablesSyncSet = Union({
					{|
						setWC
					|}	
				})
				
				MemoryVariablesHideSet = Union({
					{|
						getWC
					|}
				})
				MachineMemorySyncSet = Union({
					union(
						union(
							{||},
							{||}
						)
							
						,
						{|internal__.TID_AdjustLimits_t1|}
					),
					{|deadline|},
					WCresets
				})
				
				MachineMemoryHidingSet = Union({
					union(
						{||},
						{||}
					)
					,
					{|deadline|}
				})
				
				MachineInternalEvents = {|
					internal__
				|}
		
				-- individual memory processes
				
				-- Memory cell processes
				Memory_opt_overLimit(x__) = ( 
					get_overLimit!x__ -> Memory_opt_overLimit(x__)
					[]
					set_overLimit?x__ -> Memory_opt_overLimit(x__)
					[]
					set_EXT_overLimit?x__ -> Memory_opt_overLimit(x__)
				)
				Memory_opt_underLimit(x__) = ( 
					get_underLimit!x__ -> Memory_opt_underLimit(x__)
					[]
					set_underLimit?x__ -> Memory_opt_underLimit(x__)
					[]
					set_EXT_underLimit?x__ -> Memory_opt_underLimit(x__)
				)
				Memory_opt_mSetPoint(x__) = ( 
					get_mSetPoint!x__ -> Memory_opt_mSetPoint(x__)
					[]
					set_mSetPoint?x__ -> Memory_opt_mSetPoint(x__)
					[]
					set_EXT_mSetPoint?x__ -> Memory_opt_mSetPoint(x__)
				)
		
				-- combined individual memory processes
				MemoryVariables = ||| P : MemoryVariablesProcesses_AdjustLimits @ P
			
				-- definition of the behaviour of state machines (default and optimised)
				D__(id__) = AUX(id__) \ internal_events
				O__(id__) = D__(id__)
			}
		endmodule
		module OP_enableHV
			Timed(OneStep) {
				
				
				-- declaring identifiers of state and final states
				datatype SIDS = SID_enableHV
				              | SID_enableHV_f0
				
				int_int = {|
				|}
					
				
				internal_events = {|enter,entered,exit,exited,terminate|}
				
				-- declaring all states
				CS_enableHV_f0_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_enableHV_f0},
					y____ <- {SID_enableHV_f0}
				|}
				
				
				enableHV_f0_triggers = {|
				|}
				
				State_enableHV_f0(id__) = let
					State_enableHV_f0_execute(id__,o____) = SKIP; 
						entered!o____!SID_enableHV_f0 ->
						terminate -> SKIP
				within
					enter?x____:diff(SIDS,{SID_enableHV_f0})!SID_enableHV_f0 -> (State_enableHV_f0_execute(id__,x____))
				
				
				I_enableHV_i0(id__) = let
					T_enableHV_t1(id__) = internal__!TID_enableHV_t1 -> Deadline(true&(int_enablePWM.out!true -> SKIP),0);true & (set_dutyCyclePWM1!real2duty(0) -> SKIP);Deadline(get_dutyCyclePWM1?dutyCyclePWM1 -> true&(int_dutyCyclePWM1.out!dutyCyclePWM1 -> SKIP),0);enter!SID_enableHV!SID_enableHV_f0 -> entered!SID_enableHV!SID_enableHV_f0 ->
					SKIP
				within
					T_enableHV_t1(id__)
				
				
				State_enableHV_f0_R(id__) = 
					State_enableHV_f0(id__)
						[|diff(int_int,enableHV_f0_triggers)|]
					SKIP
						 		
					
				STM(id__) = (
					I_enableHV_i0(id__)
						[|
							{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
								x____ <- diff(SIDS,{SID_enableHV_f0}),
								y____ <- {SID_enableHV_f0}
						|}|]
					State_enableHV_f0_R(id__)
				)
				
				-- main process
				AUX(id__) = STM(id__)[|{|terminate|}|>SKIP	
			}
		exports
			Timed(OneStep) {
				-- the transition identifiers and memory transitions of an operation definition
				-- are exported here to allow for the renaming of the state machine to include
				-- the renaming of the events of the operation
				external prioritise
				transparent wbisim
				
				-- declaring identifiers of transitions
				datatype TIDS = NULLTRANSITION__
				              | TID_enableHV_t1
				
				-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
				
				ITIDS = {
				}
				
				-- flow channels
				channel internal__ : TIDS
				channel enteredV, enterV, exitV, exitedV : SIDS
				channel enter, entered: SIDS.SIDS
				channel exit,exited: SIDS.SIDS
				channel terminate
				
				-- variable channels
				channel get_dutyCyclePWM1, set_dutyCyclePWM1, getV_dutyCyclePWM1: duty
						
				-- shared variable channels
				channel set_EXT_dutyCyclePWM1: duty
				
				-- local variable channels for defined operations that are required by the state machine
				
				-- declaring state machine events
				channel int_enablePWM__: TIDS.InOut.core_boolean
				channel int_enablePWM: InOut.core_boolean
				channel int_dutyCyclePWM1__: TIDS.InOut.duty
				channel int_dutyCyclePWM1: InOut.duty
				
				-- declare clocks
				datatype ClockSet = dummyC
				channel clockReset 		-- no clocks declared
					
				-- declare trigger deadlines channel
				channel deadline : TIDS.deadlineSignal
					
				-- compile clocks process
				
				-- set of strings that uniquely identify the waiting conditions, each of which is 
				-- used to synchronise with the Memory process to set the correspoding variable in
				-- the memory process.
				datatype setWC_identifierSet = dummyWC
				
				-- declaring getWC and setWC channel for updating memory variables related to clocks
				channel setWC : setWC_identifierSet.Bool
				channel getWC : setWC_identifierSet.Bool
				
				-- Set of pairs capturing waiting condition processes and their alphabet.
				-- It includes the corresponding set of the defined operations.
				WCset(id__) = Union({
					{
					}
					})
				
				-- Auxiliary function to rename the channel set for required clocks.
				
				-- Set of transition events for which synchronisation is required between Clocks and the Memory process.
				-- It includes the corresponding set of the defined operations.
				WCsync = Union({
					{||}
					})
				-- Set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
				-- from the set of all state machine state identifiers. It includes the corresponding set of the defined operations.
				WCresets = Union({
					{| | x <- SIDS |}
					})
				-- Set of all waiting condition set events. It includes the corresponding set of the defined operations.
				WCsets = Union({
					{|setWC|}
					})
				
				
				
				-- Clocks process
				Clocks(id__) = || (alpha, P) : WCset(id__) @ [alpha] wbisim(P)
				
				-- collects all clockResets
				ClockResets = {|clockReset|}
				
				-- processes that read variables and offer transitions
				MemoryTransitions(id__,
					 dutyCyclePWM1) = (
					internal__!TID_enableHV_t1 -> SKIP
				 	)
				MemoryTransitions_enableHV(id__) =
					(
					OP_enableHV::getV_dutyCyclePWM1?dutyCyclePWM1 ->
					 MemoryTransitions(id__,
					 	 dutyCyclePWM1);
					 MemoryTransitions_enableHV(id__)
					)
				
				-- synchronisation, hiding and process sets 
		
				
				MemoryVariablesProcesses_enableHV = Union(
					{
						{
						}
					}
				)
				
				MemoryVariablesSyncSet = Union({
					{|
						setWC
					|}	
				})
				
				MemoryVariablesHideSet = Union({
					{|
						getWC
					|}
				})
				MachineMemorySyncSet = Union({
					union(
						union(
							{||},
							{||}
						)
							
						,
						{|internal__.TID_enableHV_t1|}
					),
					{|deadline|},
					WCresets
				})
				
				MachineMemoryHidingSet = Union({
					union(
						{||},
						{||}
					)
					,
					{|deadline|}
				})
				
				MachineInternalEvents = {|
					internal__
				|}
		
				-- individual memory processes
				
				-- Memory cell processes
				Memory_opt_dutyCyclePWM1(x__) = ( 
					get_dutyCyclePWM1!x__ -> Memory_opt_dutyCyclePWM1(x__)
					[]
					set_dutyCyclePWM1?x__ -> Memory_opt_dutyCyclePWM1(x__)
					[]
					set_EXT_dutyCyclePWM1?x__ -> Memory_opt_dutyCyclePWM1(x__)
				)
		
				-- combined individual memory processes
				MemoryVariables = ||| P : MemoryVariablesProcesses_enableHV @ P
			
				-- definition of the behaviour of state machines (default and optimised)
				D__(id__) = AUX(id__) \ internal_events
				O__(id__) = D__(id__)
			}
		endmodule
	
		Timed(OneStep) {
			-- declaring call and ret events for undefined operations
	
						
			-- declaring controller events
			channel ext_ActualHV: InOut.core_real
			channel ext_pow24VStatus: InOut.Power
			channel ext_errorAck: InOut
			channel ext_setPoint: InOut.core_real
			channel int_dutyCyclePWM1: InOut.duty
			channel int_enablePWM: InOut.core_boolean
							
			channel set_overLimit: core_real
			channel get_overLimit: core_real
			channel set_underLimit: core_real
			channel get_underLimit: core_real
			channel set_currentState: State
			channel get_currentState: State
			channel set_HVEnabled: core_boolean
			channel get_HVEnabled: core_boolean
			channel set_pow24VStatus: Power
			channel get_pow24VStatus: Power
			channel set_mSetPoint: core_real
			channel get_mSetPoint: core_real
			channel set_dutyCyclePWM1: duty
			channel get_dutyCyclePWM1: duty

			channel set_EXT_overLimit: core_real
			channel set_EXT_underLimit: core_real
			channel set_EXT_currentState: State
			channel set_EXT_HVEnabled: core_boolean
			channel set_EXT_pow24VStatus: Power
			channel set_EXT_mSetPoint: core_real
			channel set_EXT_dutyCyclePWM1: duty
		
			-- declaring controller memory
			Memory(id__, overLimit, underLimit, currentState, HVEnabled, pow24VStatus, mSetPoint, dutyCyclePWM1) = (
			set_EXT_overLimit?x__ -> stm_ref0::set_EXT_overLimit!x__ -> 
			Memory(id__,x__,underLimit,currentState,HVEnabled,pow24VStatus,mSetPoint,dutyCyclePWM1)
			 []
			set_EXT_underLimit?x__ -> stm_ref0::set_EXT_underLimit!x__ -> 
			Memory(id__,overLimit,x__,currentState,HVEnabled,pow24VStatus,mSetPoint,dutyCyclePWM1)
			 []
			set_EXT_currentState?x__ -> stm_ref0::set_EXT_currentState!x__ -> 
			Memory(id__,overLimit,underLimit,x__,HVEnabled,pow24VStatus,mSetPoint,dutyCyclePWM1)
			 []
			set_EXT_HVEnabled?x__ -> stm_ref0::set_EXT_HVEnabled!x__ -> 
			Memory(id__,overLimit,underLimit,currentState,x__,pow24VStatus,mSetPoint,dutyCyclePWM1)
			 []
			set_EXT_pow24VStatus?x__ -> stm_ref0::set_EXT_pow24VStatus!x__ -> 
			Memory(id__,overLimit,underLimit,currentState,HVEnabled,x__,mSetPoint,dutyCyclePWM1)
			 []
			set_EXT_mSetPoint?x__ -> stm_ref0::set_EXT_mSetPoint!x__ -> 
			Memory(id__,overLimit,underLimit,currentState,HVEnabled,pow24VStatus,x__,dutyCyclePWM1)
			 []
			set_EXT_dutyCyclePWM1?x__ -> stm_ref0::set_EXT_dutyCyclePWM1!x__ -> 
			Memory(id__,overLimit,underLimit,currentState,HVEnabled,pow24VStatus,mSetPoint,x__)
			)
			-- declaring controller termination channel
			channel terminate
			
			-- set of visible memory events
			visibleMemoryEvents = {|get_overLimit,set_overLimit,get_underLimit,set_underLimit,get_currentState,set_currentState,get_HVEnabled,set_HVEnabled,get_pow24VStatus,set_pow24VStatus,get_mSetPoint,set_mSetPoint,get_dutyCyclePWM1,set_dutyCyclePWM1|}
		
			D__(id__,
					    const_ctrl0_stm_ref0_cycleTime,
					   	const_setPointRamping_rampStep) = prioritise(wbisim(
				(
					let
						const_State_machine_cycleTime = ms(10)
					within 
					stm_ref0::D__(id__,
							    const_State_machine_cycleTime,
							    const_setPointRamping_rampStep)[[
						stm_ref0::terminate <- terminate,
						stm_ref0::ext_setPoint <- ext_setPoint,
						stm_ref0::ext_pow24VStatus <- ext_pow24VStatus,
						stm_ref0::ext_ActualHV <- ext_ActualHV,
						stm_ref0::ext_errorAck <- ext_errorAck,
						stm_ref0::int_dutyCyclePWM1 <- int_dutyCyclePWM1,
						stm_ref0::int_enablePWM <- int_enablePWM,
						stm_ref0::set_overLimit <- set_overLimit,
						stm_ref0::get_overLimit <- get_overLimit,
						stm_ref0::set_underLimit <- set_underLimit,
						stm_ref0::get_underLimit <- get_underLimit,
						stm_ref0::set_currentState <- set_currentState,
						stm_ref0::get_currentState <- get_currentState,
						stm_ref0::set_HVEnabled <- set_HVEnabled,
						stm_ref0::get_HVEnabled <- get_HVEnabled,
						stm_ref0::set_pow24VStatus <- set_pow24VStatus,
						stm_ref0::get_pow24VStatus <- get_pow24VStatus,
						stm_ref0::set_mSetPoint <- set_mSetPoint,
						stm_ref0::get_mSetPoint <- get_mSetPoint,
						stm_ref0::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
						stm_ref0::get_dutyCyclePWM1 <- get_dutyCyclePWM1
					]]
				)
					[|
						union(
							{|
							|},
							{|
								stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
							|}
						)
					|]
				Memory(id__, 0, 0, State_Wait24Vpower, true, Power_On, 0, 0)
			)
			\ union(
				{|
				|},
				{|
					stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
				|}
			)
			[|{|terminate|}|>SKIP,
			<union(visibleMemoryEvents,{terminate}),{tock}>)
			
			O__(id__,
					    const_ctrl0_stm_ref0_cycleTime,
					   	const_setPointRamping_rampStep) = D__(id__,
					    const_ctrl0_stm_ref0_cycleTime,
					   	const_setPointRamping_rampStep)
			
			-- VS version
			VS__(id__,
					    const_ctrl0_stm_ref0_cycleTime,
					   	const_setPointRamping_rampStep) = prioritise(wbisim(
				(
					let
						const_State_machine_cycleTime = ms(10)
					within 
					stm_ref0::VS__(id__,
							    const_State_machine_cycleTime,
							    const_setPointRamping_rampStep)[[
						stm_ref0::terminate <- terminate,
						stm_ref0::ext_setPoint <- ext_setPoint,
						stm_ref0::ext_pow24VStatus <- ext_pow24VStatus,
						stm_ref0::ext_ActualHV <- ext_ActualHV,
						stm_ref0::ext_errorAck <- ext_errorAck,
						stm_ref0::int_dutyCyclePWM1 <- int_dutyCyclePWM1,
						stm_ref0::int_enablePWM <- int_enablePWM,
						stm_ref0::set_overLimit <- set_overLimit,
						stm_ref0::get_overLimit <- get_overLimit,
						stm_ref0::set_underLimit <- set_underLimit,
						stm_ref0::get_underLimit <- get_underLimit,
						stm_ref0::set_currentState <- set_currentState,
						stm_ref0::get_currentState <- get_currentState,
						stm_ref0::set_HVEnabled <- set_HVEnabled,
						stm_ref0::get_HVEnabled <- get_HVEnabled,
						stm_ref0::set_pow24VStatus <- set_pow24VStatus,
						stm_ref0::get_pow24VStatus <- get_pow24VStatus,
						stm_ref0::set_mSetPoint <- set_mSetPoint,
						stm_ref0::get_mSetPoint <- get_mSetPoint,
						stm_ref0::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
						stm_ref0::get_dutyCyclePWM1 <- get_dutyCyclePWM1
					]]
				)
					[|
						union(
							{|
							|},
							{|
								stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
							|}
						)
					|]
				Memory(id__, 0, 0, State_Wait24Vpower, true, Power_On, 0, 0)
			)
			\ union(
				{|
				|},
				{|
					stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
				|}
			)
			[|{|terminate|}|>SKIP,
			<union(visibleMemoryEvents,{terminate}),{tock}>)
		
			HEXT(id__,
					    const_ctrl0_stm_ref0_cycleTime,
					   	const_setPointRamping_rampStep) = D__(id__,
					    const_ctrl0_stm_ref0_cycleTime,
					   	const_setPointRamping_rampStep) [|shared_variable_events|] SKIP
		}
	endmodule
