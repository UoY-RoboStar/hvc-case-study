		module Watchdog
		exports
			-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
			external prioritise
			transparent wbisim
			transparent dbisim
			transparent sbisim
		
			Timed(OneStep) {	
				-- flow channels
				channel internal__ : TIDS
				channel enteredV, enterV, exitV, exitedV : SIDS
				channel enter, entered: SIDS.SIDS
				channel exit,exited: SIDS.SIDS
				channel terminate
				
				-- variable channels
				channel get_HVEnabled, set_HVEnabled: core_boolean
				channel get_pow24VStatus, set_pow24VStatus: Power
				channel get_currentState, set_currentState: State
				channel get_overLimit, set_overLimit: core_real
				channel get_underLimit, set_underLimit: core_real
				channel get_mSetPoint, set_mSetPoint: core_real
				channel get_dutyCyclePWM1, set_dutyCyclePWM1: duty
						
				-- shared variable channels
				channel set_EXT_HVEnabled: core_boolean
				channel set_EXT_pow24VStatus: Power
				channel set_EXT_currentState: State
				channel set_EXT_overLimit: core_real
				channel set_EXT_underLimit: core_real
				channel set_EXT_mSetPoint: core_real
				channel set_EXT_dutyCyclePWM1: duty
				
				-- local variable channels for defined operations that are required by the state machine
				
				-- declaring state machine events
				channel ext_pow24VStatus__: TIDS.InOut.Power
				channel ext_pow24VStatus: InOut.Power
				channel int_dutyCyclePWM1__: TIDS.InOut.duty
				channel int_dutyCyclePWM1: InOut.duty
				channel int_enablePWM__: TIDS.InOut.core_boolean
				channel int_enablePWM: InOut.core_boolean
				
				-- declaring call and ret events for undefined operations
				channel supplyVoltCheckCall
				channel AdjustLimitsCall
			
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machien module.
				CALL__supplyVoltCheck(id__) =  EDeadline(supplyVoltCheckCall,0)		
				CALL__AdjustLimits(id__) =  EDeadline(AdjustLimitsCall,0)		
				
				
				-- definition of functions used to expose flow channels
				ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
								   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
								   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
								   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
									 
				ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
							[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
							[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				
				-- declaring identifiers of state and final states
				datatype SIDS = SID_Watchdog
				              | SID_Watchdog_s1
				              | SID_Watchdog_s0
				
				-- declaring identifiers of transitions
				datatype TIDS = NULLTRANSITION__
				              | TID_Watchdog_t2
				              | TID_Watchdog_t1
				              | TID_Watchdog_t0
				
				-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
				
				ITIDS = {
					TID_Watchdog_t1,	TID_Watchdog_t0
				}
				
				int_int = {|
					ext_pow24VStatus__.TID_Watchdog_t1,
					int_dutyCyclePWM1__.TID_Watchdog_t1,
					int_enablePWM__.TID_Watchdog_t1,
					internal__.TID_Watchdog_t1,
					ext_pow24VStatus__.TID_Watchdog_t0,
					int_dutyCyclePWM1__.TID_Watchdog_t0,
					int_enablePWM__.TID_Watchdog_t0,
					internal__.TID_Watchdog_t0
				|}
					
				
				internal_events = {|enter,entered,exit,exited|}
				shared_variable_events = {|
					set_EXT_HVEnabled,
					set_EXT_pow24VStatus,
					set_EXT_currentState,
					set_EXT_overLimit,
					set_EXT_underLimit,
					set_EXT_mSetPoint,
					set_EXT_dutyCyclePWM1
				|}
						
				
				-- declaring all states
				CS_Watchdog_s1_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_Watchdog_s1,SID_Watchdog_s0},
					y____ <- {SID_Watchdog_s1}
				|}
				
				
				Watchdog_s1_triggers = {|
					internal__.TID_Watchdog_t1,
					internal__.TID_Watchdog_t0
				|}
				
				State_Watchdog_s1(id__) = let
					T_Watchdog_t1(id__) = internal__!TID_Watchdog_t1 ->  exit.SID_Watchdog_s1.SID_Watchdog_s1 -> SKIP;
										SKIP;exited.SID_Watchdog_s1.SID_Watchdog_s1 -> SKIP;
										WAIT(ms(8));enter!SID_Watchdog_s1!SID_Watchdog_s0 -> entered!SID_Watchdog_s1!SID_Watchdog_s0 ->
										State_Watchdog_s1(id__)
					State_Watchdog_s1_execute(id__,o____) = true&CALL__supplyVoltCheck(
								id__
							); 
						entered!o____!SID_Watchdog_s1 ->
						(SKIP; STOP /\ (
							T_Watchdog_t1(id__)
							[]
							internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Watchdog_t1,TID_Watchdog_t0}) -> exit?y____:diff(SIDS,{SID_Watchdog_s1})!SID_Watchdog_s1 -> (
									SKIP;
									exited!y____!SID_Watchdog_s1 -> SKIP);
									State_Watchdog_s1(id__)
							[] ext_pow24VStatus__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Watchdog_t1,TID_Watchdog_t0})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_Watchdog_s1})!SID_Watchdog_s1 -> (
									SKIP;
									exited!y____!SID_Watchdog_s1 -> SKIP);
									State_Watchdog_s1(id__)
							[] int_dutyCyclePWM1__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Watchdog_t1,TID_Watchdog_t0})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_Watchdog_s1})!SID_Watchdog_s1 -> (
									SKIP;
									exited!y____!SID_Watchdog_s1 -> SKIP);
									State_Watchdog_s1(id__)
							[] int_enablePWM__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Watchdog_t1,TID_Watchdog_t0})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_Watchdog_s1})!SID_Watchdog_s1 -> (
									SKIP;
									exited!y____!SID_Watchdog_s1 -> SKIP);
									State_Watchdog_s1(id__)
						))
				within
					enter?x____:diff(SIDS,{SID_Watchdog_s1})!SID_Watchdog_s1 -> (State_Watchdog_s1_execute(id__,x____))
				
				CS_Watchdog_s0_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_Watchdog_s1,SID_Watchdog_s0},
					y____ <- {SID_Watchdog_s0}
				|}
				
				
				Watchdog_s0_triggers = {|
					internal__.TID_Watchdog_t1,
					internal__.TID_Watchdog_t0
				|}
				
				State_Watchdog_s0(id__) = let
					T_Watchdog_t0(id__) = internal__!TID_Watchdog_t0 ->  exit.SID_Watchdog_s0.SID_Watchdog_s0 -> SKIP;
										SKIP;exited.SID_Watchdog_s0.SID_Watchdog_s0 -> SKIP;
										WAIT(ms(2));enter!SID_Watchdog_s0!SID_Watchdog_s1 -> entered!SID_Watchdog_s0!SID_Watchdog_s1 ->
										State_Watchdog_s0(id__)
					State_Watchdog_s0_execute(id__,o____) = true&CALL__AdjustLimits(
								id__
							); 
						entered!o____!SID_Watchdog_s0 ->
						(SKIP; STOP /\ (
							T_Watchdog_t0(id__)
							[]
							internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Watchdog_t1,TID_Watchdog_t0}) -> exit?y____:diff(SIDS,{SID_Watchdog_s0})!SID_Watchdog_s0 -> (
									SKIP;
									exited!y____!SID_Watchdog_s0 -> SKIP);
									State_Watchdog_s0(id__)
							[] ext_pow24VStatus__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Watchdog_t1,TID_Watchdog_t0})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_Watchdog_s0})!SID_Watchdog_s0 -> (
									SKIP;
									exited!y____!SID_Watchdog_s0 -> SKIP);
									State_Watchdog_s0(id__)
							[] int_dutyCyclePWM1__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Watchdog_t1,TID_Watchdog_t0})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_Watchdog_s0})!SID_Watchdog_s0 -> (
									SKIP;
									exited!y____!SID_Watchdog_s0 -> SKIP);
									State_Watchdog_s0(id__)
							[] int_enablePWM__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Watchdog_t1,TID_Watchdog_t0})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_Watchdog_s0})!SID_Watchdog_s0 -> (
									SKIP;
									exited!y____!SID_Watchdog_s0 -> SKIP);
									State_Watchdog_s0(id__)
						))
				within
					enter?x____:diff(SIDS,{SID_Watchdog_s0})!SID_Watchdog_s0 -> (State_Watchdog_s0_execute(id__,x____))
				
				
				I_Watchdog_i1(id__) = let
					T_Watchdog_t2(id__) = internal__!TID_Watchdog_t2 -> WAIT(ms(4));enter!SID_Watchdog!SID_Watchdog_s0 -> entered!SID_Watchdog!SID_Watchdog_s0 ->
					SKIP
				within
					T_Watchdog_t2(id__)
				
				
				State_Watchdog_s1_R(id__) = 
					State_Watchdog_s1(id__)
						[|diff(int_int,Watchdog_s1_triggers)|]
					SKIP
						 		
				State_Watchdog_s0_R(id__) = 
					State_Watchdog_s0(id__)
						[|diff(int_int,Watchdog_s0_triggers)|]
					SKIP
						 		
					
				STM(id__) = (
					I_Watchdog_i1(id__)
						[|
							{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
								x____ <- diff(SIDS,{SID_Watchdog_s1,SID_Watchdog_s0}),
								y____ <- {SID_Watchdog_s1,SID_Watchdog_s0}
						|}|]
					(
						State_Watchdog_s1_R(id__)
							[|inter(CS_Watchdog_s1_sync,CS_Watchdog_s0_sync)|]
						State_Watchdog_s0_R(id__)
					)
				)
				
				-- optimized memory process
				channel getV_HVEnabled: core_boolean
				channel getV_pow24VStatus: Power
				channel getV_currentState: State
				channel getV_overLimit: core_real
				channel getV_underLimit: core_real
				channel getV_mSetPoint: core_real
				channel getV_dutyCyclePWM1: duty
				
				-- individual memory processes
				Memory_HVEnabled(x__) = ( 
					get_HVEnabled!x__ -> Memory_HVEnabled(x__)
					[]
					getV_HVEnabled!x__ -> Memory_HVEnabled(x__)
					[]
					set_HVEnabled?x__ -> Memory_HVEnabled(x__)
					[]
					set_EXT_HVEnabled?x__ -> Memory_HVEnabled(x__)
				)
				Memory_pow24VStatus(x__) = ( 
					get_pow24VStatus!x__ -> Memory_pow24VStatus(x__)
					[]
					getV_pow24VStatus!x__ -> Memory_pow24VStatus(x__)
					[]
					set_pow24VStatus?x__ -> Memory_pow24VStatus(x__)
					[]
					set_EXT_pow24VStatus?x__ -> Memory_pow24VStatus(x__)
				)
				Memory_currentState(x__) = ( 
					get_currentState!x__ -> Memory_currentState(x__)
					[]
					getV_currentState!x__ -> Memory_currentState(x__)
					[]
					set_currentState?x__ -> Memory_currentState(x__)
					[]
					set_EXT_currentState?x__ -> Memory_currentState(x__)
				)
				Memory_overLimit(x__) = ( 
					get_overLimit!x__ -> Memory_overLimit(x__)
					[]
					getV_overLimit!x__ -> Memory_overLimit(x__)
					[]
					set_overLimit?x__ -> Memory_overLimit(x__)
					[]
					set_EXT_overLimit?x__ -> Memory_overLimit(x__)
				)
				Memory_underLimit(x__) = ( 
					get_underLimit!x__ -> Memory_underLimit(x__)
					[]
					getV_underLimit!x__ -> Memory_underLimit(x__)
					[]
					set_underLimit?x__ -> Memory_underLimit(x__)
					[]
					set_EXT_underLimit?x__ -> Memory_underLimit(x__)
				)
				Memory_mSetPoint(x__) = ( 
					get_mSetPoint!x__ -> Memory_mSetPoint(x__)
					[]
					getV_mSetPoint!x__ -> Memory_mSetPoint(x__)
					[]
					set_mSetPoint?x__ -> Memory_mSetPoint(x__)
					[]
					set_EXT_mSetPoint?x__ -> Memory_mSetPoint(x__)
				)
				Memory_dutyCyclePWM1(x__) = ( 
					get_dutyCyclePWM1!x__ -> Memory_dutyCyclePWM1(x__)
					[]
					getV_dutyCyclePWM1!x__ -> Memory_dutyCyclePWM1(x__)
					[]
					set_dutyCyclePWM1?x__ -> Memory_dutyCyclePWM1(x__)
					[]
					set_EXT_dutyCyclePWM1?x__ -> Memory_dutyCyclePWM1(x__)
				)
				
				-- processes that read variables and offer transitions
				MemoryTransitions(id__,
					 HVEnabled,
					 pow24VStatus,
					 currentState,
					 overLimit,
					 underLimit,
					 mSetPoint,
					 dutyCyclePWM1) = (
					internal__!TID_Watchdog_t2 -> SKIP
					[]
					internal__!TID_Watchdog_t1 -> SKIP
					[]
					internal__!TID_Watchdog_t0 -> SKIP
				
					[]
						set_HVEnabled?x__ -> SKIP
						[]
					set_EXT_HVEnabled?x__ -> SKIP
					[]
					set_pow24VStatus?x__ -> SKIP
						[]
					set_EXT_pow24VStatus?x__ -> SKIP
					[]
					set_currentState?x__ -> SKIP
						[]
					set_EXT_currentState?x__ -> SKIP
					[]
					set_overLimit?x__ -> SKIP
						[]
					set_EXT_overLimit?x__ -> SKIP
					[]
					set_underLimit?x__ -> SKIP
						[]
					set_EXT_underLimit?x__ -> SKIP
					[]
					set_mSetPoint?x__ -> SKIP
						[]
					set_EXT_mSetPoint?x__ -> SKIP
					[]
					set_dutyCyclePWM1?x__ -> SKIP
						[]
					set_EXT_dutyCyclePWM1?x__ -> SKIP
				 	)
				MemoryTransitions_Watchdog(id__) =
					(
					getV_HVEnabled?HVEnabled ->	
					getV_pow24VStatus?pow24VStatus ->	
					getV_currentState?currentState ->	
					getV_overLimit?overLimit ->	
					getV_underLimit?underLimit ->	
					getV_mSetPoint?mSetPoint ->	
					getV_dutyCyclePWM1?dutyCyclePWM1 ->
					 MemoryTransitions(id__,
					 	 HVEnabled,
					 	 pow24VStatus,
					 	 currentState,
					 	 overLimit,
					 	 underLimit,
					 	 mSetPoint,
					 	 dutyCyclePWM1);
					 MemoryTransitions_Watchdog(id__)
					)
				
				-- synchronisation, hiding and process sets 
				MemoryVariablesProcesses_Watchdog = Union(
					{
						{
							Memory_HVEnabled(true),
							Memory_pow24VStatus(Power_On),
							Memory_currentState(State_Wait24Vpower),
							Memory_overLimit(0),
							Memory_underLimit(0),
							Memory_mSetPoint(0),
							Memory_dutyCyclePWM1(0)
						}
					}
				)
				
				MemoryVariablesSyncSet = Union({
					{|
						getV_currentState,
						set_overLimit,
						set_EXT_currentState,
						set_mSetPoint,
						set_EXT_underLimit,
						set_pow24VStatus,
						set_EXT_mSetPoint,
						setWC,
						set_currentState,
						getV_pow24VStatus,
						set_dutyCyclePWM1,
						set_EXT_pow24VStatus,
						getV_mSetPoint,
						getV_dutyCyclePWM1,
						set_HVEnabled,
						set_EXT_HVEnabled,
						set_EXT_dutyCyclePWM1,
						getV_HVEnabled,
						set_EXT_overLimit,
						set_underLimit,
						getV_underLimit,
						getV_overLimit
					|}	
				})
				
				MemoryVariablesHideSet = Union({
					{|
						getV_pow24VStatus,
						getV_currentState,
						getV_mSetPoint,
						getV_dutyCyclePWM1,
						getWC,
						getV_HVEnabled,
						getV_underLimit,
						getV_overLimit
					|}
				})
				
				-- combined individual memory processes
				MemoryVariables = ||| P : MemoryVariablesProcesses_Watchdog @ P
				
				-- complete memory process
				MemoryN(id__) = (MemoryVariables [| MemoryVariablesSyncSet |] MemoryTransitions_Watchdog(id__)) \ MemoryVariablesHideSet
				
				-- optimised memory
				-- Sets of named elements identified according to transition conditions:
				-- {}
				-- Summary of all identified named elements:
				-- {
				-- pow24VStatus
				-- HVEnabled
				-- currentState
				-- overLimit
				-- underLimit
				-- dutyCyclePWM1
				-- mSetPoint
				-- }
				
				-- Allocation plan:
				-- 0:{}
				--	=> {
				--		TID_Watchdog_t2,
				--		TID_Watchdog_t1,
				--		TID_Watchdog_t0}
				
				-- Memory transition processes
				MemoryTransitions_opt_0(id__) =
				(
					let
						Update = Current(id__)
						Current(id__)
						 	   = 
						 	   internal__!TID_Watchdog_t2 -> Update
						 	   []
						 	   internal__!TID_Watchdog_t1 -> Update
						 	   []
						 	   internal__!TID_Watchdog_t0 -> Update
					within
						Update
				)
				
				-- Memory cell processes
				Memory_opt_pow24VStatus(x__) = ( 
					get_pow24VStatus!x__ -> Memory_opt_pow24VStatus(x__)
					[]
					set_pow24VStatus?x__ -> Memory_opt_pow24VStatus(x__)
					[]
					set_EXT_pow24VStatus?x__ -> Memory_opt_pow24VStatus(x__)
				)
				Memory_opt_HVEnabled(x__) = ( 
					get_HVEnabled!x__ -> Memory_opt_HVEnabled(x__)
					[]
					set_HVEnabled?x__ -> Memory_opt_HVEnabled(x__)
					[]
					set_EXT_HVEnabled?x__ -> Memory_opt_HVEnabled(x__)
				)
				Memory_opt_currentState(x__) = ( 
					get_currentState!x__ -> Memory_opt_currentState(x__)
					[]
					set_currentState?x__ -> Memory_opt_currentState(x__)
					[]
					set_EXT_currentState?x__ -> Memory_opt_currentState(x__)
				)
				Memory_opt_overLimit(x__) = ( 
					get_overLimit!x__ -> Memory_opt_overLimit(x__)
					[]
					set_overLimit?x__ -> Memory_opt_overLimit(x__)
					[]
					set_EXT_overLimit?x__ -> Memory_opt_overLimit(x__)
				)
				Memory_opt_underLimit(x__) = ( 
					get_underLimit!x__ -> Memory_opt_underLimit(x__)
					[]
					set_underLimit?x__ -> Memory_opt_underLimit(x__)
					[]
					set_EXT_underLimit?x__ -> Memory_opt_underLimit(x__)
				)
				Memory_opt_dutyCyclePWM1(x__) = ( 
					get_dutyCyclePWM1!x__ -> Memory_opt_dutyCyclePWM1(x__)
					[]
					set_dutyCyclePWM1?x__ -> Memory_opt_dutyCyclePWM1(x__)
					[]
					set_EXT_dutyCyclePWM1?x__ -> Memory_opt_dutyCyclePWM1(x__)
				)
				Memory_opt_mSetPoint(x__) = ( 
					get_mSetPoint!x__ -> Memory_opt_mSetPoint(x__)
					[]
					set_mSetPoint?x__ -> Memory_opt_mSetPoint(x__)
					[]
					set_EXT_mSetPoint?x__ -> Memory_opt_mSetPoint(x__)
				)
				
				-- Composition of memory, StateMachine and Memory transition processes
				
				MemorySTM_opt(id__) =
					sbisim(	
					  dbisim(
					    sbisim(dbisim(sbisim(Memory_opt_pow24VStatus(Power_On)
					          	[| {|set_pow24VStatus,get_pow24VStatus|} |] 
					          	dbisim(sbisim(Memory_opt_HVEnabled(true)
					          	      	[| {|set_HVEnabled,get_HVEnabled|} |] 
					          	      	dbisim(sbisim(Memory_opt_currentState(State_Wait24Vpower)
					          	      	      	[| {|get_currentState,set_currentState|} |] 
					          	      	      	dbisim(sbisim(Memory_opt_overLimit(0)
					          	      	      	      	[| {|set_overLimit,get_overLimit|} |] 
					          	      	      	      	dbisim(sbisim(Memory_opt_underLimit(0)
					          	      	      	      	      	[| {|get_underLimit,set_underLimit|} |] 
					          	      	      	      	      	dbisim(sbisim(Memory_opt_dutyCyclePWM1(0)
					          	      	      	      	      	      	[| {|set_dutyCyclePWM1,get_dutyCyclePWM1|} |] 
					          	      	      	      	      	      	dbisim(sbisim(Memory_opt_mSetPoint(0)
					          	      	      	      	      	      	      	[| {|set_mSetPoint,get_mSetPoint|} |] 
					          	      	      	      	      	      	      	STM_core(id__)
					          	      	      	      	      	      	      	)\ {|get_mSetPoint|}
					          	      	      	      	      	      	      )
					          	      	      	      	      	      	)\ {|get_dutyCyclePWM1|}
					          	      	      	      	      	      )
					          	      	      	      	      	)\ {|get_underLimit|}
					          	      	      	      	      )
					          	      	      	      	)\ {|get_overLimit|}
					          	      	      	      )
					          	      	      	)\ {|get_currentState|}
					          	      	      )
					          	      	)\ {|get_HVEnabled|}
					          	      )
					          	)\ {|get_pow24VStatus|}
					          )
					      	  [| {|internal__.TID_Watchdog_t1,internal__.TID_Watchdog_t2,internal__.TID_Watchdog_t0|} |]
					      	  MemoryTransitions_opt_0(id__)
					      	  )\{|internal__.TID_Watchdog_t1,internal__.TID_Watchdog_t2,internal__.TID_Watchdog_t0|})
					      )
				
				-- main process
				
				MachineMemorySyncSet = Union({
					union(
						union(
							{||},
							{|get_HVEnabled,set_HVEnabled,
							get_pow24VStatus,set_pow24VStatus,
							get_currentState,set_currentState,
							get_overLimit,set_overLimit,
							get_underLimit,set_underLimit,
							get_mSetPoint,set_mSetPoint,
							get_dutyCyclePWM1,set_dutyCyclePWM1|}
						)
							
						,
						{|internal__.TID_Watchdog_t2,
						internal__.TID_Watchdog_t1,
						internal__.TID_Watchdog_t0|}
					),
					{|deadline|},
					WCresets
				})
				
				MachineMemoryHidingSet = Union({
					union(
						{||},
						{|get_HVEnabled,
						get_pow24VStatus,
						get_currentState,
						get_overLimit,
						get_underLimit,
						get_mSetPoint,
						get_dutyCyclePWM1|}
					)
					,
					{|deadline|}
				})
				
				MachineInternalEvents = {|
					internal__
				|}
			
				-- main process
				AUX(id__) = prioritise((((
					wbisim(STM(id__))
						[|MachineMemorySyncSet|]
					(
						(MemoryN(id__))
							[| union(WCsets,WCsync) |]
						Clocks(id__)
					)\WCsets
				)
				[[
					ext_pow24VStatus__.x____ <- ext_pow24VStatus,
					int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1,
					int_enablePWM__.x____ <- int_enablePWM
					| x____ <- TIDS
				]]
				\MachineMemoryHidingSet)
				[|{|terminate|}|>SKIP\MachineInternalEvents)
				,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
				
				STM_core(id__) = 
					dbisim(
						sbisim(
								(STM(id__)
								[| union(WCsync,WCresets) |]
								Clocks(id__))\WCresets
							  )
						  )
				
				AUX_opt(id__) = 
					prioritise(
						(MemorySTM_opt(id__)
						)[[
							ext_pow24VStatus__.x____ <- ext_pow24VStatus,
							int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1,
							int_enablePWM__.x____ <- int_enablePWM
							| x____ <- TIDS
						]]
					[|{|terminate|}|>SKIP\MachineInternalEvents
					,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
				
				internal_(id__) = prioritise((((
					wbisim(STM(id__))
						[|MachineMemorySyncSet|]
					((MemoryN(id__)) [| union(WCsets,WCsync) |] Clocks(id__))\WCsets
				)
				\MachineMemoryHidingSet)
				[|{|terminate|}|>SKIP)
				,<Union({internal_events, ClockResets, {|internal__,terminate|}}),{tock}>)		
				-- declare clocks
				datatype ClockSet = dummyC
				channel clockReset 				-- no clocks declared
				
				-- declare trigger deadlines channel
				channel deadline : TIDS.deadlineSignal
				
				-- compile clocks process
				
				-- set of strings that uniquely identify the waiting conditions, each of which is 
				-- used to synchronise with the Memory process to set the correspoding variable in
				-- the memory process.
				datatype setWC_identifierSet = dummyWC
				
				-- declaring getWC and setWC channel for updating memory variables related to clocks
				channel setWC : setWC_identifierSet.Bool
				channel getWC : setWC_identifierSet.Bool
				
				-- Set of pairs capturing waiting condition processes and their alphabet.
				-- It includes the corresponding set of the defined operations.
				WCset(id__) = Union({
					{
					}
					})
				
				-- Auxiliary function to rename the channel set for required clocks.
				
				-- Set of transition events for which synchronisation is required between Clocks and the Memory process.
				-- It includes the corresponding set of the defined operations.
				WCsync = Union({
					{||}
					})
				-- Set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
				-- from the set of all state machine state identifiers. It includes the corresponding set of the defined operations.
				WCresets = Union({
					{| | x <- SIDS |}
					})
				-- Set of all waiting condition set events. It includes the corresponding set of the defined operations.
				WCsets = Union({
					{|setWC|}
					})
				
				
				
				-- Clocks process
				Clocks(id__) = || (alpha, P) : WCset(id__) @ [alpha] wbisim(P)

				-- collects all clockResets including those of operations
				ClockResets = Union({
					{|clockReset|}
									})
				
				-- With no internal events visible
				Dunopt__(id__) = timed_priority(AUX(id__) \ union(internal_events,ClockResets))
				
				D__(id__) = timed_priority(AUX_opt(id__) \ union(internal_events,ClockResets))
				
				O__(id__) = D__(id__)
				
				-- With enter/entered/exit/exited events visible
				FVS__(id__) = timed_priority(AUX(id__) \ ClockResets)
				
				-- With enterV/enteredV/exitV/exitedV events visible
				VS__(id__) = ShowV(timed_priority(AUX(id__) \ ClockResets))
				
				-- With clock resets visible
				FVS_C__(id__) = AUX(id__)
			}
		endmodule
