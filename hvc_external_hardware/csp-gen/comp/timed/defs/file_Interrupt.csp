


module Watchdog
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_i1|
	              NID_s1|
	              NID_s0
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	channel get_HVEnabled, set_HVEnabled, setL_HVEnabled, setR_HVEnabled: core_boolean
	channel get_pow24VStatus, set_pow24VStatus, setL_pow24VStatus, setR_pow24VStatus: Power
	channel get_currentState, set_currentState, setL_currentState, setR_currentState: State
	channel get_overLimit, set_overLimit, setL_overLimit, setR_overLimit: core_real
	channel get_underLimit, set_underLimit, setL_underLimit, setR_underLimit: core_real
	channel get_mSetPoint, set_mSetPoint, setL_mSetPoint, setR_mSetPoint: core_real
	channel get_dutyCyclePWM1, set_dutyCyclePWM1, setL_dutyCyclePWM1, setR_dutyCyclePWM1: duty
	
	-- Shared variable channels
	channel set_EXT_HVEnabled: core_boolean
	channel set_EXT_pow24VStatus: Power
	channel set_EXT_currentState: State
	channel set_EXT_overLimit: core_real
	channel set_EXT_underLimit: core_real
	channel set_EXT_mSetPoint: core_real
	channel set_EXT_dutyCyclePWM1: duty
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	channel ext_pow24VStatus__: NIDS.InOut.Power
	channel ext_pow24VStatus: InOut.Power
	channel int_dutyCyclePWM1__: NIDS.InOut.duty
	channel int_dutyCyclePWM1: InOut.duty
	channel int_enablePWM__: NIDS.InOut.core_boolean
	channel int_enablePWM: InOut.core_boolean
	
	-- Declaring call and ret events for undefined operations
	channel supplyVoltCheckCall
	channel AdjustLimitsCall
	
	enterSS = {|
	i1::enter,
	s1::enter,
	s0::enter
	|}
	
	enteredSS = 	{|
	s1::entered,
	s0::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
		set_EXT_HVEnabled,
		set_EXT_pow24VStatus,
		set_EXT_currentState,
		set_EXT_overLimit,
		set_EXT_underLimit,
		set_EXT_mSetPoint,
		set_EXT_dutyCyclePWM1
	|}
	
	channel clockReset, clockResetL, clockResetR 
	
	localClockResets = {||}
	
	
	channel get_CLID_s0 : CLID_s0_clock_type
	channel get_CLID_s1 : CLID_s1_clock_type
	
	--channel increment__
	
	CLID_s0_clock_type = {0..(clock_type_max(Union({
	}))+1)}
	CLID_s1_clock_type = {0..(clock_type_max(Union({
	}))+1)}
	

		-- Nodes --
		-- declaring all nodes
		
		----------------------------------------------------------------------
		-- Initial: i1
		module i1
		exports
		
			channel enter, interrupt
			
			Timed(OneStep) {
				D__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__) = D__(id__)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: s1
		module s1
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&CALL__supplyVoltCheck(
								id__
							) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&CALL__supplyVoltCheck(
								id__
							) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: s0
		module s0
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&CALL__AdjustLimits(
								id__
							) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&CALL__AdjustLimits(
								id__
							) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		-- END of Nodes --
		
		Timed(OneStep) {
		-- Operation calls --
		-- Only the undefined operations are declared here.
		-- If the state machine is in isolation, all required operations will be undefined.
		-- If it is in the context of a controller, the required operations not provided by the
		-- controller will be declared here, and the defined operations will be defined in the
		-- context of the Controller module, and therefore within scope of the state machine module.
		CALL__supplyVoltCheck(id__) = EDeadline(supplyVoltCheckCall,0)
		CALL__AdjustLimits(id__) = EDeadline(AdjustLimitsCall,0)
		
		-- END of Operation calls --
	
		-- STM processes
		STM(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
		( 
			(
				(
					(Stateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
				 	[[ share__ <- x__ | x__ <- {|set_EXT_HVEnabled,set_EXT_pow24VStatus,set_EXT_currentState,set_EXT_overLimit,set_EXT_underLimit,set_EXT_mSetPoint,set_EXT_dutyCyclePWM1|} ]]
				)
			[| {share__} |]
			SKIP
			)
			[| union(sharedVarSync,{terminate}) |]
			dbisim(sharedVarMemory(id__))
		)\sharedVarHide
		,<{terminate},{tock}>)
		
		STM_VS_O(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
		( 
			(
				(
					(Stateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
				 	[[ share__ <- x__ | x__ <- {|set_EXT_HVEnabled,set_EXT_pow24VStatus,set_EXT_currentState,set_EXT_overLimit,set_EXT_underLimit,set_EXT_mSetPoint,set_EXT_dutyCyclePWM1|} ]]
				)
			[| {share__} |]
			SKIP
			)
			[| union(sharedVarSync,{terminate}) |]
			dbisim(sharedVarMemory(id__))
		)\sharedVarHide
		,<{terminate},{tock}>)
		
		-- Transitions
		Transitions(id__) = ((let
			Trans = TimeOut_1(
				 (share__ -> SKIP
				 [] dbisim((true)&(internal__!NID_i1 -> SKIP ;  ((SHARE_WAIT(ms(4)) ; s0::enter -> SKIP))))
				 [] dbisim((true)&(internal__!NID_s1 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SHARE_WAIT(ms(8)) ; s0::enter -> SKIP)))
				 [] dbisim((true)&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SHARE_WAIT(ms(2)) ; s1::enter -> SKIP)))
				 []
				 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
				 []
				 terminate -> SKIP
				 )
			,SKIP);Trans
		within
			Trans [|{terminate}|> SKIP
		)
		)
		
		-- Stateful
		-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
		
		-- Named process definitions
		MachineBody(id__) = 
			dbisim((
			let
				finalNodesEntered = {||}
			within
				((let
					-- IMPLEMENTATION NOTE:
					-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					-- modules for defining the semantics of each node.
					enterSS = {|
					i1::enter,
					s1::enter,
					s0::enter
					|}
					hideSet = union(enterSS,{|exit,exited,internal__|})
				within 
					((let
						-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						-- because CSPM modules are used for the semantics of Node.
						flowevts = union(enterSS,{|exit,exited|})
						transSync = {|internal__.NID_i1,internal__.NID_s1,internal__.NID_s0|}
					within
						((
						 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
						   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						   		    i1::D__(id__)
						   		    [| { share__, terminate } |] (
						   		    s1::D__(id__)
						   		    [| { share__, terminate } |] (
						   		    s0::D__(id__)
						   		    )
						   		    )
						   		  )
						 )
						 [[s1::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s1|}]]
						 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
						 [[i1::interrupt <- x__ | x__ <- {|internal__.NID_i1|}]]
						 )
						  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
						 )
						 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						|}) |]
						 ((i1::enter -> Transitions(id__))
						  [[ share__ <- x__ | x__ <- {| share__ |} ]]
						 )
						)
						)
					)
					 \ hideSet)
					[[
						ext_pow24VStatus__.x____ <- ext_pow24VStatus,
						int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1,
						int_enablePWM__.x____ <- int_enablePWM
						| x____ <- NIDS
					]]
				)
				 [| {| interrupt |} |] SKIP)
			)
			)
		
		Behaviour(id__) = 
			dbisim((let
				stateClockSync = {|get_CLID_s0,s0::entered,get_CLID_s1,s1::entered|}
			 within
				(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ union(stateClockSync,enteredSS)
			)
			)
		
		Stateful(id__) = 
			dbisim((let
				getsetLocalChannels = {||}
				clockSync = {||}
			within
				(Behaviour(id__) 
				 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
				 (varMemory(id__) [| {terminate} |] Clocks)
			 	)\union(getsetLocalChannels,clockSync)
			)
			)
		
		-- Visible counterparts
		MachineBody_VS_O(id__) = 
			dbisim((
			let
				finalNodesEntered = {||}
			within
				((let
					-- IMPLEMENTATION NOTE:
					-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					-- modules for defining the semantics of each node.
					enterSS = {|
					i1::enter,
					s1::enter,
					s0::enter
					|}
					hideSet = union(enterSS,{|exit,exited,internal__|})
				within 
					((let
						-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						-- because CSPM modules are used for the semantics of Node.
						flowevts = union(enterSS,{|exit,exited|})
						transSync = {|internal__.NID_i1,internal__.NID_s1,internal__.NID_s0|}
					within
						((
						 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
						   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						   		    i1::VS_O__(id__)
						   		    [| { share__, terminate } |] (
						   		    s1::VS_O__(id__)
						   		    [| { share__, terminate } |] (
						   		    s0::VS_O__(id__)
						   		    )
						   		    )
						   		  )
						 )
						 [[s1::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s1|}]]
						 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
						 [[i1::interrupt <- x__ | x__ <- {|internal__.NID_i1|}]]
						 )
						  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
						 )
						 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						|}) |]
						 ((i1::enter -> Transitions(id__))
						  [[ share__ <- x__ | x__ <- {| share__ |} ]]
						 )
						)
						)
					)
					 \ hideSet)
					[[
						ext_pow24VStatus__.x____ <- ext_pow24VStatus,
						int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1,
						int_enablePWM__.x____ <- int_enablePWM
						| x____ <- NIDS
					]]
				)
				 [| {| interrupt |} |] SKIP)
			)
			)
		
		Behaviour_VS_O(id__) = 
			dbisim((let
				stateClockSync = {|get_CLID_s0,s0::entered,get_CLID_s1,s1::entered|}
			 within
				(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ diff(union(stateClockSync,enteredSS),enteredSS)
			)
			)
		
		Stateful_VS_O(id__) = 
			dbisim((let
				getsetLocalChannels = {||}
				clockSync = {||}
			within
				(Behaviour_VS_O(id__) 
				 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
				 (varMemory(id__) [| {terminate} |] Clocks)
			 	)\union(getsetLocalChannels,clockSync)
			)
			)
			
		-- END
		
		-- Memory
		-- Memory variables
		
		-- varMemory process
		varMemory(id__) = terminate -> SKIP
		
		getsetLocalChannels = {||}
		
		-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
		FVS__(id__) = STM_VS_O(id__) \ localClockResets
		D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
		O__(id__) = dbisim(D__(id__))
		VS__(id__) = FVS__(id__)
		VS_O__(id__) = dbisim(FVS__(id__))
		HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
		FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
		HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
		
		-- Clocks
		
		Clocks = terminate -> SKIP
		
		clockSync = {||}
		
		Clock_CLID_s0(x__) = 
			TimeOut_1(
				s0::entered -> Clock_CLID_s0(0)
				[]
				get_CLID_s0!x__ -> Clock_CLID_s0(x__)
				[]
				terminate -> SKIP,Clock_CLID_s0(Plus(x__,1,CLID_s0_clock_type)))
		Clock_CLID_s1(x__) = 
			TimeOut_1(
				s1::entered -> Clock_CLID_s1(0)
				[]
				get_CLID_s1!x__ -> Clock_CLID_s1(x__)
				[]
				terminate -> SKIP,Clock_CLID_s1(Plus(x__,1,CLID_s1_clock_type)))
		
		StateClocks = dbisim(Clock_CLID_s0(0))
		[| { terminate } |] (
		dbisim(Clock_CLID_s1(0))
		)
		
		stateClockSync = {|get_CLID_s0,s0::entered,get_CLID_s1,s1::entered|}
		
		-- Shared memory
		-- Shared memory variables
		Memory_HVEnabled(HVEnabled) =
			get_HVEnabled!HVEnabled -> Memory_HVEnabled(HVEnabled)
			[]
			set_HVEnabled?x__ -> Memory_HVEnabled(x__)
			[]
			set_EXT_HVEnabled?x__ -> Memory_HVEnabled(x__)
			[]
			terminate -> SKIP
		Memory_pow24VStatus(pow24VStatus) =
			get_pow24VStatus!pow24VStatus -> Memory_pow24VStatus(pow24VStatus)
			[]
			set_pow24VStatus?x__ -> Memory_pow24VStatus(x__)
			[]
			set_EXT_pow24VStatus?x__ -> Memory_pow24VStatus(x__)
			[]
			terminate -> SKIP
		Memory_currentState(currentState) =
			get_currentState!currentState -> Memory_currentState(currentState)
			[]
			set_currentState?x__ -> Memory_currentState(x__)
			[]
			set_EXT_currentState?x__ -> Memory_currentState(x__)
			[]
			terminate -> SKIP
		Memory_overLimit(overLimit) =
			get_overLimit!overLimit -> Memory_overLimit(overLimit)
			[]
			set_overLimit?x__ -> Memory_overLimit(x__)
			[]
			set_EXT_overLimit?x__ -> Memory_overLimit(x__)
			[]
			terminate -> SKIP
		Memory_underLimit(underLimit) =
			get_underLimit!underLimit -> Memory_underLimit(underLimit)
			[]
			set_underLimit?x__ -> Memory_underLimit(x__)
			[]
			set_EXT_underLimit?x__ -> Memory_underLimit(x__)
			[]
			terminate -> SKIP
		Memory_mSetPoint(mSetPoint) =
			get_mSetPoint!mSetPoint -> Memory_mSetPoint(mSetPoint)
			[]
			set_mSetPoint?x__ -> Memory_mSetPoint(x__)
			[]
			set_EXT_mSetPoint?x__ -> Memory_mSetPoint(x__)
			[]
			terminate -> SKIP
		Memory_dutyCyclePWM1(dutyCyclePWM1) =
			get_dutyCyclePWM1!dutyCyclePWM1 -> Memory_dutyCyclePWM1(dutyCyclePWM1)
			[]
			set_dutyCyclePWM1?x__ -> Memory_dutyCyclePWM1(x__)
			[]
			set_EXT_dutyCyclePWM1?x__ -> Memory_dutyCyclePWM1(x__)
			[]
			terminate -> SKIP
		
		-- sharedVarMemory process
		sharedVarMemory(id__) = Memory_HVEnabled(true)
		[| { terminate } |] (
		Memory_pow24VStatus(Power_On)
		[| { terminate } |] (
		Memory_currentState(State_Wait24Vpower)
		[| { terminate } |] (
		Memory_overLimit(0)
		[| { terminate } |] (
		Memory_underLimit(0)
		[| { terminate } |] (
		Memory_mSetPoint(0)
		[| { terminate } |] (
		Memory_dutyCyclePWM1(0)
		)
		)
		)
		)
		)
		)
		
		sharedVarSync = {|get_HVEnabled,set_HVEnabled,set_EXT_HVEnabled,get_pow24VStatus,set_pow24VStatus,set_EXT_pow24VStatus,get_currentState,set_currentState,set_EXT_currentState,get_overLimit,set_overLimit,set_EXT_overLimit,get_underLimit,set_underLimit,set_EXT_underLimit,get_mSetPoint,set_mSetPoint,set_EXT_mSetPoint,get_dutyCyclePWM1,set_dutyCyclePWM1,set_EXT_dutyCyclePWM1|}
		
		sharedVarHide = {|get_HVEnabled,get_pow24VStatus,get_currentState,get_overLimit,get_underLimit,get_mSetPoint,get_dutyCyclePWM1|}
		}
endmodule


