-- compileSelfContainedOperation
module OP_disableHV
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_i0|
	              NID_f0|
	              NID_j0
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	channel get_HVEnabled, set_HVEnabled, setL_HVEnabled, setR_HVEnabled: core_boolean
	channel get_currentState, set_currentState, setL_currentState, setR_currentState: State
	channel get_dutyCyclePWM1, set_dutyCyclePWM1, setL_dutyCyclePWM1, setR_dutyCyclePWM1: duty
	channel get_mSetPoint, set_mSetPoint, setL_mSetPoint, setR_mSetPoint: core_real
	
	-- Shared variable channels
	channel set_EXT_HVEnabled: core_boolean
	channel set_EXT_currentState: State
	channel set_EXT_dutyCyclePWM1: duty
	channel set_EXT_mSetPoint: core_real
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	channel int_enablePWM__: NIDS.InOut.core_boolean
	channel int_enablePWM: InOut.core_boolean
	channel int_dutyCyclePWM1__: NIDS.InOut.duty
	channel int_dutyCyclePWM1: InOut.duty
	
	-- Declaring call and ret events for undefined operations
	
	enterSS = {|
	i0::enter,
	f0::enter,
	j0::enter
	|}
	
	enteredSS = 	{|
	f0::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
		set_EXT_HVEnabled,
		set_EXT_currentState,
		set_EXT_dutyCyclePWM1,
		set_EXT_mSetPoint
	|}
	
	channel clockReset, clockResetL, clockResetR 
	
	localClockResets = {||}
	
	
	channel get_CLID_f0 : CLID_f0_clock_type
	
	--channel increment__
	
	CLID_f0_clock_type = {0..(clock_type_max(Union({
	{}
	}))+1)}
	
	
		-- Nodes --
		-- declaring all nodes
		
		----------------------------------------------------------------------
		-- Initial: i0
		module i0
		exports
		
			channel enter, interrupt
			
			Timed(OneStep) {
				D__(id__,
							arg) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__,
							arg) = D__(id__,
							arg)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- Final state: f0
		module f0
		
		exports
		
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				D__(id__,
							arg) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
						
						Entering 	= entered -> SKIP ; Active
						Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
						Interrupted	= share__choice(exit -> exited -> Inactive)
					within
						Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
							arg) = D__(id__,
							arg)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- Junction: j0
		module j0
		exports
		
			channel enter, interrupt
			
			Timed(OneStep) {
				D__(id__,
							arg) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
							arg) = D__(id__,
							arg)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		-- END of Nodes --
		
		Timed(OneStep) {
		-- Operation calls --
		-- Only the undefined operations are declared here.
		-- If the state machine is in isolation, all required operations will be undefined.
		-- If it is in the context of a controller, the required operations not provided by the
		-- controller will be declared here, and the defined operations will be defined in the
		-- context of the Controller module, and therefore within scope of the state machine module.
		
		-- END of Operation calls --
	
		-- STM processes
		STM(id__,
					arg) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
		Stateful(id__,
					arg) \ {terminate}
		
		STM_VS_O(id__,
					arg) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
		Stateful(id__,
					arg) \ {terminate}
		
		-- Transitions
		Transitions(id__,
					arg) = ((let
			Trans = TimeOut_1(
				 (share__ -> SKIP
				 [] dbisim(((arg==false))&(internal__!NID_j0 -> SKIP ;  ((SKIP ; f0::enter -> SKIP))))
				 [] dbisim(((arg==true))&(internal__!NID_j0 -> SKIP ;  ((share__choice(true & (share__choice(set_currentState!State_ErrorMode -> SKIP))) ; f0::enter -> SKIP))))
				 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((Deadline(true&(share__choice(int_enablePWM.out!false -> SKIP)),0);share__choice(true & (share__choice(set_dutyCyclePWM1!real2duty(0) -> SKIP)));Deadline(share__choice(get_dutyCyclePWM1?dutyCyclePWM1 -> true&(share__choice(int_dutyCyclePWM1.out!dutyCyclePWM1 -> SKIP))),0);share__choice(true & (share__choice(set_HVEnabled!false -> SKIP)));share__choice(true & (share__choice(set_mSetPoint!0 -> SKIP))) ; j0::enter -> SKIP))))
				 []
				 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
				 []
				 terminate -> SKIP
				 )
			,SKIP);Trans
		within
			Trans [|{terminate}|> SKIP
		)
		)
		
		-- Stateful
		-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
		
		-- Named process definitions
		MachineBody(id__,
					arg) = 
			dbisim((
			let
				finalNodesEntered = {|f0::entered|}
			within
				((let
					-- IMPLEMENTATION NOTE:
					-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					-- modules for defining the semantics of each node.
					enterSS = {|
					i0::enter,
					f0::enter,
					j0::enter
					|}
					hideSet = union(enterSS,{|exit,exited,internal__|})
				within 
					((let
						-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						-- because CSPM modules are used for the semantics of Node.
						flowevts = union(enterSS,{|exit,exited|})
						transSync = {|internal__.NID_j0,internal__.NID_j0,internal__.NID_i0|}
					within
						((
						 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
						   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						   		    i0::D__(id__,
						   		    			arg)
						   		    [| { share__, terminate } |] (
						   		    f0::D__(id__,
						   		    			arg)
						   		    [| { share__, terminate } |] (
						   		    j0::D__(id__,
						   		    			arg)
						   		    )
						   		    )
						   		  )
						 )
						 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
						 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
						 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
						 )
						  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
						 )
						 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						|}) |]
						 ((i0::enter -> Transitions(id__,
						 			arg))
						  [[ share__ <- x__ | x__ <- {| share__ |} ]]
						 )
						)
						)
					)
					 \ hideSet)
					[[
						int_enablePWM__.x____ <- int_enablePWM,
						int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
						| x____ <- NIDS
					]]
				)
				 [| {| interrupt |} |] SKIP)
			)
			)
		
		Behaviour(id__,
					arg) = 
			dbisim((let
				stateClockSync = {|get_CLID_f0,f0::entered|}
			 within
				(MachineBody(id__,
							arg) [| union(stateClockSync,{terminate}) |] StateClocks) \ union(stateClockSync,enteredSS)
			)
			)
		
		Stateful(id__,
					arg) = 
			dbisim((let
				getsetLocalChannels = {||}
				clockSync = {||}
			within
				(Behaviour(id__,
							arg) 
				 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
				 (varMemory(id__,
				 			arg) [| {terminate} |] Clocks)
			 	)\union(getsetLocalChannels,clockSync)
			)
			)
		
		-- Visible counterparts
		MachineBody_VS_O(id__,
					arg) = 
			dbisim((
			let
				finalNodesEntered = {|f0::entered|}
			within
				((let
					-- IMPLEMENTATION NOTE:
					-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					-- modules for defining the semantics of each node.
					enterSS = {|
					i0::enter,
					f0::enter,
					j0::enter
					|}
					hideSet = union(enterSS,{|exit,exited,internal__|})
				within 
					((let
						-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						-- because CSPM modules are used for the semantics of Node.
						flowevts = union(enterSS,{|exit,exited|})
						transSync = {|internal__.NID_j0,internal__.NID_j0,internal__.NID_i0|}
					within
						((
						 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
						   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						   		    i0::VS_O__(id__,
						   		    			arg)
						   		    [| { share__, terminate } |] (
						   		    f0::VS_O__(id__,
						   		    			arg)
						   		    [| { share__, terminate } |] (
						   		    j0::VS_O__(id__,
						   		    			arg)
						   		    )
						   		    )
						   		  )
						 )
						 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
						 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
						 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
						 )
						  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
						 )
						 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						|}) |]
						 ((i0::enter -> Transitions(id__,
						 			arg))
						  [[ share__ <- x__ | x__ <- {| share__ |} ]]
						 )
						)
						)
					)
					 \ hideSet)
					[[
						int_enablePWM__.x____ <- int_enablePWM,
						int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
						| x____ <- NIDS
					]]
				)
				 [| {| interrupt |} |] SKIP)
			)
			)
		
		Behaviour_VS_O(id__,
					arg) = 
			dbisim((let
				stateClockSync = {|get_CLID_f0,f0::entered|}
			 within
				(MachineBody_VS_O(id__,
							arg) [| union(stateClockSync,{terminate}) |] StateClocks) \ diff(union(stateClockSync,enteredSS),enteredSS)
			)
			)
		
		Stateful_VS_O(id__,
					arg) = 
			dbisim((let
				getsetLocalChannels = {||}
				clockSync = {||}
			within
				(Behaviour_VS_O(id__,
							arg) 
				 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
				 (varMemory(id__,
				 			arg) [| {terminate} |] Clocks)
			 	)\union(getsetLocalChannels,clockSync)
			)
			)
			
		-- END
		
		-- Memory
		-- Memory variables
		
		-- varMemory process
		varMemory(id__,
					arg) = terminate -> SKIP
		
		getsetLocalChannels = {||}
		
		-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
		FVS__(id__,
					arg) = STM_VS_O(id__,
					arg) \ localClockResets
		D__(id__,
					arg) = timed_priority(STM(id__,
					arg) \ union(internal_events,localClockResets))
		O__(id__,
					arg) = dbisim(D__(id__,
					arg))
		VS__(id__,
					arg) = FVS__(id__,
					arg)
		VS_O__(id__,
					arg) = dbisim(FVS__(id__,
					arg))
		HEXT__(id__,
					arg) = O__(id__,
					arg) [|shared_variable_events|] SKIP
		FVS_C__(id__,
					arg) = dbisim(timed_priority(STM(id__,
					arg) \ internal_events))
		HUP__(id__,
					arg) = timed_priority(O__(id__,
					arg) [|{share__}|] SKIP)
		
		-- Clocks
		
		Clocks = terminate -> SKIP
		
		clockSync = {||}
		
		Clock_CLID_f0(x__) = 
			TimeOut_1(
				f0::entered -> Clock_CLID_f0(0)
				[]
				get_CLID_f0!x__ -> Clock_CLID_f0(x__)
				[]
				terminate -> SKIP,Clock_CLID_f0(Plus(x__,1,CLID_f0_clock_type)))
		
		StateClocks = dbisim(Clock_CLID_f0(0))
		
		stateClockSync = {|get_CLID_f0,f0::entered|}
		}
			endmodule
