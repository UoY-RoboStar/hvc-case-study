	module ctrl2
		shared_variable_events = {|
		|}
		
	exports
		transparent diamond
		transparent sbisim
		transparent dbisim
		transparent chase

		-- declaring controller events
		channel ext_pow24VStatus: InOut.Power
		channel ext_pow24_1: InOut.Power
		channel ext_pow24_2: InOut.Power
		
		
		
		-- declaring call and ret events for undefined operations
		
		-- declaring controller termination channel		
		channel terminate
		
		-- set of visible memory events
		visibleMemoryEvents = {||}

		-- defined operations
	
		-- declaring machines
		module stm0
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
		
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i0|
			              NID_s0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_power, set_power, setL_power, setR_power: Power
			channel get_fresh, set_fresh, setL_fresh, setR_fresh: core_boolean
			
			-- Shared variable channels
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel ext_pow24VStatus__: NIDS.InOut.Power
			channel ext_pow24VStatus: InOut.Power
			channel ext_pow24_1__: NIDS.InOut.Power
			channel ext_pow24_1: InOut.Power
			channel ext_pow24_2__: NIDS.InOut.Power
			channel ext_pow24_2: InOut.Power
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i0::enter,
			s0::enter
			|}
			
			enteredSS = 	{|
			s0::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
			|}
			
			channel clockReset, clockResetL, clockResetR 
			
			localClockResets = {||}
			
			
			channel get_CLID_s0 : CLID_s0_clock_type
			
			--channel increment__
			
			CLID_s0_clock_type = {0..(clock_type_max(Union({
			{}
			}))+1)}
			
		
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: s0
				module s0
				
				enterSS = 
						{|			i0::enter,
							s0::enter
						|}
				enteredSS = 
						{|			s0::entered
						|}
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					-- declaring identifiers of transitions
					datatype NIDS = 
					              NID_i0|
					              NID_s0
					
					channel internal__ : NIDS
					channel ext_pow24VStatus__: NIDS.InOut.Power
					channel ext_pow24_1__: NIDS.InOut.Power
					channel ext_pow24_2__: NIDS.InOut.Power
					
					channel get_CLID_s0 : CLID_s0_clock_type
					
					--channel increment__
					
					CLID_s0_clock_type = {0..(clock_type_max(Union({
					}))+1)}
					
					--	Nodes
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: s0
					module s0
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((share__choice(get_power?power -> true&(share__choice(ext_pow24_2.out!power -> SKIP)));share__choice(true & (share__choice(set_fresh!false -> SKIP))) ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((share__choice(get_power?power -> true&(share__choice(ext_pow24_2.out!power -> SKIP)));share__choice(true & (share__choice(set_fresh!false -> SKIP))) ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&(share__choice(ext_pow24VStatus.in?power -> (SStop /\ set_power!power -> SKIP)));share__choice(true & (share__choice(set_fresh!true -> SKIP))) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
						
							Behaviour 	= dbisim(
								((
								 ((dbisim((dbisim((let
								 	-- IMPLEMENTATION NOTE:
								 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								 	-- modules for defining the semantics of each node.
								 	enterSS = {|
								 	i0::enter,
								 	s0::enter
								 	|}
								 	hideSet = union(enterSS,{|exit,exited,internal__|})
								 within 
								 	((let
								 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								 		-- because CSPM modules are used for the semantics of Node.
								 		flowevts = union(enterSS,{|exit,exited|})
								 		transSync = {|internal__.NID_i0|}
								 	within
								 		((
								 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								 		   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								 		   		    i0::D__(id__)
								 		   		    [| { share__, terminate } |] (
								 		   		    s0::D__(id__)
								 		   		    )
								 		   		  )
								 		 )
								 		 [[s0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 		 )
								 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 		 )
								 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 		|}) |]
								 		 ((i0::enter -> Transitions(id__))
								 		  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 		 )
								 		)
								 		)
								 	)
								 	 \ hideSet)
								 	[[
								 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								 		ext_pow24_1__.x____ <- ext_pow24_1,
								 		ext_pow24_2__.x____ <- ext_pow24_2
								 		| x____ <- NIDS
								 	]]
								 )
								 )
								  [| union(stateClockSync,{terminate}) |]
								  StateClocks
								 )\diff(stateClockSync,enteredSS)))
								  [[ share__ <- x__ | x__ <- {| share__,setR_fresh,setR_power |} ]] 
								  [[set_fresh <- setL_fresh,set_power <- setL_power]]
								 )
								 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
								 			,setL_fresh
								 			,setL_power
								 			,setR_fresh
								 			 			,setR_power
								 			|}) |]
								 ((During)
								  [[ share__ <- x__ | x__ <- {| share__,setL_fresh,setL_power |} ]]
								  [[set_fresh <- setR_fresh,set_power <- setR_power]]
								 )
								)[[setL_fresh <- set_fresh,setL_power <- set_power]]
								 [[setR_fresh <- set_fresh,setR_power <- set_power]]
								)\union(enteredSS,{terminate}) 
							)
							During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
									 	  ; entered -> ((CRUN(enteredSS) ||| share__choice(get_power?power -> true&(share__choice(ext_pow24_1.out!power -> SKIP)));share__choice(true & (share__choice(set_fresh!false -> SKIP))) ; SStop) /\ interrupt -> terminate -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&(share__choice(ext_pow24VStatus.in?power -> (SStop /\ set_power!power -> SKIP)));share__choice(true & (share__choice(set_fresh!true -> SKIP))) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
						
							Behaviour 	= dbisim(
								((
								 ((dbisim((dbisim((let
								 	-- IMPLEMENTATION NOTE:
								 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								 	-- modules for defining the semantics of each node.
								 	enterSS = {|
								 	i0::enter,
								 	s0::enter
								 	|}
								 	hideSet = union(enterSS,{|exit,exited,internal__|})
								 within 
								 	((let
								 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								 		-- because CSPM modules are used for the semantics of Node.
								 		flowevts = union(enterSS,{|exit,exited|})
								 		transSync = {|internal__.NID_i0|}
								 	within
								 		((
								 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								 		   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								 		   		    i0::VS_O__(id__)
								 		   		    [| { share__, terminate } |] (
								 		   		    s0::VS_O__(id__)
								 		   		    )
								 		   		  )
								 		 )
								 		 [[s0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 		 )
								 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 		 )
								 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 		|}) |]
								 		 ((i0::enter -> Transitions(id__))
								 		  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 		 )
								 		)
								 		)
								 	)
								 	 \ hideSet)
								 	[[
								 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								 		ext_pow24_1__.x____ <- ext_pow24_1,
								 		ext_pow24_2__.x____ <- ext_pow24_2
								 		| x____ <- NIDS
								 	]]
								 )
								 )
								  [| union(stateClockSync,{terminate}) |]
								  StateClocks
								 )\diff(stateClockSync,enteredSS)))
								  [[ share__ <- x__ | x__ <- {| share__,setR_fresh,setR_power |} ]] 
								  [[set_fresh <- setL_fresh,set_power <- setL_power]]
								 )
								 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
								 			,setL_fresh
								 			,setL_power
								 			,setR_fresh
								 			 			,setR_power
								 			|}) |]
								 ((During)
								  [[ share__ <- x__ | x__ <- {| share__,setL_fresh,setL_power |} ]]
								  [[set_fresh <- setR_fresh,set_power <- setR_power]]
								 )
								)[[setL_fresh <- set_fresh,setL_power <- set_power]]
								 [[setR_fresh <- set_fresh,setR_power <- set_power]]
								)\{terminate} 
							)
							During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
									 	  ; entered -> ((CRUN(enteredSS) ||| share__choice(get_power?power -> true&(share__choice(ext_pow24_1.out!power -> SKIP)));share__choice(true & (share__choice(set_fresh!false -> SKIP))) ; SStop) /\ interrupt -> terminate -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
						Transitions(id__) = ((let
							Trans = TimeOut_1(
								 (share__ -> SKIP
								 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s0::enter -> SKIP))))
								 []
								 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
								 []
								 terminate -> SKIP
								 )
							,SKIP);Trans
						within
							Trans [|{terminate}|> SKIP
						)
						)
						
						
						-- Clocks
						Clock_CLID_s0(x__) = 
							TimeOut_1(
								s0::entered -> Clock_CLID_s0(0)
								[]
								get_CLID_s0!x__ -> Clock_CLID_s0(x__)
								[]
								terminate -> SKIP,Clock_CLID_s0(Plus(x__,1,CLID_s0_clock_type)))
						
						StateClocks = dbisim(Clock_CLID_s0(0))
						
						stateClockSync = {|get_CLID_s0,s0::entered|}
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
			
				-- STM processes
				STM(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(Stateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				,<{terminate},{tock}>)
				
				STM_VS_O(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(Stateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				,<{terminate},{tock}>)
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = get_fresh?fresh -> TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s0::enter -> SKIP))))
						 [] dbisim(((fresh==false))&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s0::enter -> SKIP)))
						 []
						 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							s0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_i0,internal__.NID_s0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i0::D__(id__)
								   		    [| { share__, terminate } |] (
								   		    s0::D__(id__)
								   		    )
								   		  )
								 )
								 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[set_fresh <- setL_fresh]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_fresh
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_fresh |} ]]
								 )
								)[[setL_fresh <- set_fresh]]
								)
							)
							 \ hideSet)
							[[
								ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								ext_pow24_1__.x____ <- ext_pow24_1,
								ext_pow24_2__.x____ <- ext_pow24_2
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_s0,s0::entered|}
					 within
						(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ union(stateClockSync,enteredSS)
					)
					)
				
				Stateful(id__) = 
					dbisim((let
						getsetLocalChannels = {|get_power,set_power,
						get_fresh,set_fresh|}
						clockSync = {||}
					within
						(Behaviour(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							s0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_i0,internal__.NID_s0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i0::VS_O__(id__)
								   		    [| { share__, terminate } |] (
								   		    s0::VS_O__(id__)
								   		    )
								   		  )
								 )
								 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[set_fresh <- setL_fresh]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_fresh
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_fresh |} ]]
								 )
								)[[setL_fresh <- set_fresh]]
								)
							)
							 \ hideSet)
							[[
								ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								ext_pow24_1__.x____ <- ext_pow24_1,
								ext_pow24_2__.x____ <- ext_pow24_2
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_s0,s0::entered|}
					 within
						(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				Stateful_VS_O(id__) = 
					dbisim((let
						getsetLocalChannels = {|get_power,set_power,
						get_fresh,set_fresh|}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
					
				-- END
				
				-- Memory
				-- Memory variables
				Memory_power(power) =
					get_power!power -> Memory_power(power)
					[]
					set_power?x__ -> Memory_power(x__)
					[]
					terminate -> SKIP
				Memory_fresh(fresh) =
					get_fresh!fresh -> Memory_fresh(fresh)
					[]
					set_fresh?x__ -> Memory_fresh(x__)
					[]
					terminate -> SKIP
				
				-- varMemory process
				varMemory(id__) = Memory_power(Power_On)
				[| { terminate } |] (
				Memory_fresh(true)
				)
				
				getsetLocalChannels = {|get_power,set_power,get_fresh,set_fresh|}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__) \ localClockResets
				D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
				O__(id__) = dbisim(D__(id__))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = dbisim(FVS__(id__))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
				HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks = terminate -> SKIP
				
				clockSync = {||}
				
				Clock_CLID_s0(x__) = 
					TimeOut_1(
						s0::entered -> Clock_CLID_s0(0)
						[]
						get_CLID_s0!x__ -> Clock_CLID_s0(x__)
						[]
						terminate -> SKIP,Clock_CLID_s0(Plus(x__,1,CLID_s0_clock_type)))
				
				StateClocks = dbisim(Clock_CLID_s0(0))
				
				stateClockSync = {|get_CLID_s0,s0::entered|}
				
				-- Shared memory
				-- Shared memory variables
				
				-- sharedVarMemory process
				sharedVarMemory(id__) = terminate -> SKIP
				
				sharedVarSync = {||}
				
				sharedVarHide = {||}
				}
		endmodule
		
		Timed(OneStep) {
				-- undefined operations
				
				-- declaring controller memory
				Memory(id__) = SKIP
				
				D__(id__) = prioritise(	((
						stm0::D__(id__)[[
							stm0::terminate <- terminate,
							stm0::ext_pow24VStatus <- ext_pow24VStatus,
							stm0::ext_pow24_1 <- ext_pow24_1,
							stm0::ext_pow24_2 <- ext_pow24_2
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>)
				
				-- VS version
				VS__(id__) = prioritise(	((
						stm0::VS__(id__)[[
							stm0::terminate <- terminate,
							stm0::ext_pow24VStatus <- ext_pow24VStatus,
							stm0::ext_pow24_1 <- ext_pow24_1,
							stm0::ext_pow24_2 <- ext_pow24_2
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>)
			
				-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
				O__(id__) = dbisim(prioritise(	((
						stm0::O__(id__)[[
							stm0::terminate <- terminate,
							stm0::ext_pow24VStatus <- ext_pow24VStatus,
							stm0::ext_pow24_1 <- ext_pow24_1,
							stm0::ext_pow24_2 <- ext_pow24_2
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>))
								
				-- VS_O version
				VS_O__(id__) = dbisim(prioritise(	((
						stm0::VS_O__(id__)[[
							stm0::terminate <- terminate,
							stm0::ext_pow24VStatus <- ext_pow24VStatus,
							stm0::ext_pow24_1 <- ext_pow24_1,
							stm0::ext_pow24_2 <- ext_pow24_2
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>))
			
				HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP			
		}

	endmodule
