
module mod_sys
	exports
	
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase
	
	-- declaring channels
	-- declaring robotic platform events
	channel ext_ActualHV: InOut.core_real
	channel ext_pow24VStatus: InOut.Power
	channel ext_errorAck: InOut
	channel ext_setPoint: InOut.core_real
	channel int_dutyCyclePWM1: InOut.duty
	channel int_enablePWM: InOut.core_boolean
	
	
	-- declaring module termination channel
	channel terminate
	
	-- declaring robotic platform variables
	channel get_overLimit, set_overLimit: core_real
	channel get_underLimit, set_underLimit: core_real
	channel get_currentState, set_currentState: State
	channel get_HVEnabled, set_HVEnabled: core_boolean
	channel get_pow24VStatus, set_pow24VStatus: Power
	channel get_dutyCyclePWM1, set_dutyCyclePWM1: duty
	channel get_mSetPoint, set_mSetPoint: core_real
	
	-- declaring controller
		module ctrl_ref0
			shared_variable_events = {|
				set_EXT_overLimit,
				set_EXT_underLimit,
				set_EXT_currentState,
				set_EXT_HVEnabled,
				set_EXT_pow24VStatus,
				set_EXT_mSetPoint,
				set_EXT_dutyCyclePWM1
			|}
			
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
	
			-- declaring controller events
			channel ext_ActualHV: InOut.core_real
			channel ext_pow24VStatus: InOut.Power
			channel ext_errorAck: InOut
			channel ext_setPoint: InOut.core_real
			channel int_dutyCyclePWM1: InOut.duty
			channel int_enablePWM: InOut.core_boolean
			
			channel set_overLimit: core_real
			channel get_overLimit: core_real
			channel set_underLimit: core_real
			channel get_underLimit: core_real
			channel set_currentState: State
			channel get_currentState: State
			channel set_HVEnabled: core_boolean
			channel get_HVEnabled: core_boolean
			channel set_pow24VStatus: Power
			channel get_pow24VStatus: Power
			channel set_mSetPoint: core_real
			channel get_mSetPoint: core_real
			channel set_dutyCyclePWM1: duty
			channel get_dutyCyclePWM1: duty
			
			channel set_EXT_overLimit: core_real
			channel set_EXT_underLimit: core_real
			channel set_EXT_currentState: State
			channel set_EXT_HVEnabled: core_boolean
			channel set_EXT_pow24VStatus: Power
			channel set_EXT_mSetPoint: core_real
			channel set_EXT_dutyCyclePWM1: duty
			
			-- declaring call and ret events for undefined operations
			
			-- declaring controller termination channel		
			channel terminate
			
			-- set of visible memory events
			visibleMemoryEvents = {|get_overLimit,set_overLimit,get_underLimit,set_underLimit,get_currentState,set_currentState,get_HVEnabled,set_HVEnabled,get_pow24VStatus,set_pow24VStatus,get_mSetPoint,set_mSetPoint,get_dutyCyclePWM1,set_dutyCyclePWM1|}
	
			-- defined operations
			-- compileOperationDef
			module OP_disableHV
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
				
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_f0|
				              NID_j0
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_HVEnabled, set_HVEnabled, setL_HVEnabled, setR_HVEnabled: core_boolean
				channel get_currentState, set_currentState, setL_currentState, setR_currentState: State
				channel get_dutyCyclePWM1, set_dutyCyclePWM1, setL_dutyCyclePWM1, setR_dutyCyclePWM1: duty
				channel get_mSetPoint, set_mSetPoint, setL_mSetPoint, setR_mSetPoint: core_real
				
				-- Shared variable channels
				channel set_EXT_HVEnabled: core_boolean
				channel set_EXT_currentState: State
				channel set_EXT_dutyCyclePWM1: duty
				channel set_EXT_mSetPoint: core_real
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel int_enablePWM__: NIDS.InOut.core_boolean
				channel int_enablePWM: InOut.core_boolean
				channel int_dutyCyclePWM1__: NIDS.InOut.duty
				channel int_dutyCyclePWM1: InOut.duty
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i0::enter,
				f0::enter,
				j0::enter
				|}
				
				enteredSS = 	{|
				f0::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
					set_EXT_HVEnabled,
					set_EXT_currentState,
					set_EXT_dutyCyclePWM1,
					set_EXT_mSetPoint
				|}
				
				channel clockReset, clockResetL, clockResetR 
				
				localClockResets = {||}
				
				
				channel get_CLID_f0 : CLID_f0_clock_type
				
				--channel increment__
				
				CLID_f0_clock_type = {0..(clock_type_max(Union({
				{}
				}))+1)}
				
				
					-- Nodes --
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
										arg) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__,
										arg) = D__(id__,
										arg)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Final state: f0
					module f0
					
					exports
					
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							D__(id__,
										arg) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
									
									Entering 	= entered -> SKIP ; Active
									Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
									Interrupted	= share__choice(exit -> exited -> Inactive)
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
										arg) = D__(id__,
										arg)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Junction: j0
					module j0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
										arg) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
										arg) = D__(id__,
										arg)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					-- END of Nodes --
					
					Timed(OneStep) {
					-- Operation calls --
					-- Only the undefined operations are declared here.
					-- If the state machine is in isolation, all required operations will be undefined.
					-- If it is in the context of a controller, the required operations not provided by the
					-- controller will be declared here, and the defined operations will be defined in the
					-- context of the Controller module, and therefore within scope of the state machine module.
					
					-- END of Operation calls --
				
					-- STM processes
					STM(id__,
								arg) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
					Stateful(id__,
								arg) \ {terminate}
					
					STM_VS_O(id__,
								arg) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
					Stateful(id__,
								arg) \ {terminate}
					
					-- Transitions
					Transitions(id__,
								arg) = ((let
						Trans = TimeOut_1(
							 (share__ -> SKIP
							 [] dbisim(((arg==false))&(internal__!NID_j0 -> SKIP ;  ((SKIP ; f0::enter -> SKIP))))
							 [] dbisim(((arg==true))&(internal__!NID_j0 -> SKIP ;  ((share__choice(true & (share__choice(set_currentState!State_ErrorMode -> SKIP))) ; f0::enter -> SKIP))))
							 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((Deadline(true&(share__choice(int_enablePWM.out!false -> SKIP)),0);share__choice(true & (share__choice(set_dutyCyclePWM1!real2duty(0) -> SKIP)));Deadline(share__choice(get_dutyCyclePWM1?dutyCyclePWM1 -> true&(share__choice(int_dutyCyclePWM1.out!dutyCyclePWM1 -> SKIP))),0);share__choice(true & (share__choice(set_HVEnabled!false -> SKIP)));share__choice(true & (share__choice(set_mSetPoint!0 -> SKIP))) ; j0::enter -> SKIP))))
							 []
							 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
							 )
						,SKIP);Trans
					within
						Trans [|{terminate}|> SKIP
					)
					)
					
					-- Stateful
					-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
					
					-- Named process definitions
					MachineBody(id__,
								arg) = 
						dbisim((
						let
							finalNodesEntered = {|f0::entered|}
						within
							((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								f0::enter,
								j0::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited|})
									transSync = {|internal__.NID_j0,internal__.NID_j0,internal__.NID_i0|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
									   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   		    i0::D__(id__,
									   		    			arg)
									   		    [| { share__, terminate } |] (
									   		    f0::D__(id__,
									   		    			arg)
									   		    [| { share__, terminate } |] (
									   		    j0::D__(id__,
									   		    			arg)
									   		    )
									   		    )
									   		  )
									 )
									 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									|}) |]
									 ((i0::enter -> Transitions(id__,
									 			arg))
									  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 )
									)
									)
								)
								 \ hideSet)
								[[
									int_enablePWM__.x____ <- int_enablePWM,
									int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
									| x____ <- NIDS
								]]
							)
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour(id__,
								arg) = 
						dbisim((let
							stateClockSync = {|get_CLID_f0,f0::entered|}
						 within
							(MachineBody(id__,
										arg) [| union(stateClockSync,{terminate}) |] StateClocks) \ union(stateClockSync,enteredSS)
						)
						)
					
					Stateful(id__,
								arg) = 
						dbisim((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour(id__,
										arg) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__,
							 			arg) [| {terminate} |] Clocks)
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					-- Visible counterparts
					MachineBody_VS_O(id__,
								arg) = 
						dbisim((
						let
							finalNodesEntered = {|f0::entered|}
						within
							((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								f0::enter,
								j0::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited|})
									transSync = {|internal__.NID_j0,internal__.NID_j0,internal__.NID_i0|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
									   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   		    i0::VS_O__(id__,
									   		    			arg)
									   		    [| { share__, terminate } |] (
									   		    f0::VS_O__(id__,
									   		    			arg)
									   		    [| { share__, terminate } |] (
									   		    j0::VS_O__(id__,
									   		    			arg)
									   		    )
									   		    )
									   		  )
									 )
									 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									|}) |]
									 ((i0::enter -> Transitions(id__,
									 			arg))
									  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 )
									)
									)
								)
								 \ hideSet)
								[[
									int_enablePWM__.x____ <- int_enablePWM,
									int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
									| x____ <- NIDS
								]]
							)
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour_VS_O(id__,
								arg) = 
						dbisim((let
							stateClockSync = {|get_CLID_f0,f0::entered|}
						 within
							(MachineBody_VS_O(id__,
										arg) [| union(stateClockSync,{terminate}) |] StateClocks) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					Stateful_VS_O(id__,
								arg) = 
						dbisim((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour_VS_O(id__,
										arg) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__,
							 			arg) [| {terminate} |] Clocks)
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
						
					-- END
					
					-- Memory
					-- Memory variables
					
					-- varMemory process
					varMemory(id__,
								arg) = terminate -> SKIP
					
					getsetLocalChannels = {||}
					
					-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
					FVS__(id__,
								arg) = STM_VS_O(id__,
								arg) \ localClockResets
					D__(id__,
								arg) = timed_priority(STM(id__,
								arg) \ union(internal_events,localClockResets))
					O__(id__,
								arg) = dbisim(D__(id__,
								arg))
					VS__(id__,
								arg) = FVS__(id__,
								arg)
					VS_O__(id__,
								arg) = dbisim(FVS__(id__,
								arg))
					HEXT__(id__,
								arg) = O__(id__,
								arg) [|shared_variable_events|] SKIP
					FVS_C__(id__,
								arg) = dbisim(timed_priority(STM(id__,
								arg) \ internal_events))
					HUP__(id__,
								arg) = timed_priority(O__(id__,
								arg) [|{share__}|] SKIP)
					
					-- Clocks
					
					Clocks = terminate -> SKIP
					
					clockSync = {||}
					
					Clock_CLID_f0(x__) = 
						TimeOut_1(
							f0::entered -> Clock_CLID_f0(0)
							[]
							get_CLID_f0!x__ -> Clock_CLID_f0(x__)
							[]
							terminate -> SKIP,Clock_CLID_f0(Plus(x__,1,CLID_f0_clock_type)))
					
					StateClocks = dbisim(Clock_CLID_f0(0))
					
					stateClockSync = {|get_CLID_f0,f0::entered|}
					}
						endmodule
			-- compileOperationDef
			module OP_supplyVoltCheck
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
				
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_f0|
				              NID_j0
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_pow24VStatus, set_pow24VStatus, setL_pow24VStatus, setR_pow24VStatus: Power
				channel get_HVEnabled, set_HVEnabled, setL_HVEnabled, setR_HVEnabled: core_boolean
				channel get_currentState, set_currentState, setL_currentState, setR_currentState: State
				channel get_dutyCyclePWM1, set_dutyCyclePWM1, setL_dutyCyclePWM1, setR_dutyCyclePWM1: duty
				channel get_mSetPoint, set_mSetPoint, setL_mSetPoint, setR_mSetPoint: core_real
				
				-- Shared variable channels
				channel set_EXT_pow24VStatus: Power
				channel set_EXT_HVEnabled: core_boolean
				channel set_EXT_currentState: State
				channel set_EXT_dutyCyclePWM1: duty
				channel set_EXT_mSetPoint: core_real
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel ext_pow24VStatus__: NIDS.InOut.Power
				channel ext_pow24VStatus: InOut.Power
				channel int_enablePWM__: NIDS.InOut.core_boolean
				channel int_enablePWM: InOut.core_boolean
				channel int_dutyCyclePWM1__: NIDS.InOut.duty
				channel int_dutyCyclePWM1: InOut.duty
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i0::enter,
				f0::enter,
				j0::enter
				|}
				
				enteredSS = 	{|
				f0::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
					set_EXT_pow24VStatus,
					set_EXT_HVEnabled,
					set_EXT_currentState,
					set_EXT_dutyCyclePWM1,
					set_EXT_mSetPoint
				|}
				
				channel clockReset, clockResetL, clockResetR 
				
				localClockResets = {||}
				
				
				channel get_CLID_f0 : CLID_f0_clock_type
				
				--channel increment__
				
				CLID_f0_clock_type = {0..(clock_type_max(Union({
				{}
				}))+1)}
				
				
					-- Nodes --
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Final state: f0
					module f0
					
					exports
					
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
									
									Entering 	= entered -> SKIP ; Active
									Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
									Interrupted	= share__choice(exit -> exited -> Inactive)
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Junction: j0
					module j0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					-- END of Nodes --
					
					Timed(OneStep) {
					-- Operation calls --
					-- Only the undefined operations are declared here.
					-- If the state machine is in isolation, all required operations will be undefined.
					-- If it is in the context of a controller, the required operations not provided by the
					-- controller will be declared here, and the defined operations will be defined in the
					-- context of the Controller module, and therefore within scope of the state machine module.
					
					CALL__disableHV(id__,
								arg) 	= (OP_disableHV::O__(id__,
								arg))
					[[
						OP_disableHV::int_enablePWM <- int_enablePWM,
						OP_disableHV::int_dutyCyclePWM1 <- int_dutyCyclePWM1
					]]
					[[
						OP_disableHV::get_HVEnabled <- get_HVEnabled,
						OP_disableHV::set_HVEnabled <- set_HVEnabled,
						OP_disableHV::get_currentState <- get_currentState,
						OP_disableHV::set_currentState <- set_currentState,
						OP_disableHV::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
						OP_disableHV::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
						OP_disableHV::get_mSetPoint <- get_mSetPoint,
						OP_disableHV::set_mSetPoint <- set_mSetPoint
					]]
					-- END of Operation calls --
				
					-- STM processes
					STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
					Stateful(id__) \ {terminate}
					
					STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
					Stateful(id__) \ {terminate}
					
					-- Transitions
					Transitions(id__) = ((let
						Trans = get_pow24VStatus?pow24VStatus -> TimeOut_1(
							 (share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((Deadline(true&(share__choice(ext_pow24VStatus.in?pow24VStatus -> (SStop /\ set_pow24VStatus!pow24VStatus -> SKIP))),0) ; j0::enter -> SKIP))))
							 [] dbisim(((pow24VStatus==Power_Off))&(internal__!NID_j0 -> SKIP ;  ((true&CALL__disableHV(
							 			id__,
							 			true
							 		) ; f0::enter -> SKIP))))
							 [] dbisim(((pow24VStatus==Power_On))&(internal__!NID_j0 -> SKIP ;  ((SKIP ; f0::enter -> SKIP))))
							 []
							 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
							 )
						,SKIP);Trans
					within
						Trans [|{terminate}|> SKIP
					)
					)
					
					-- Stateful
					-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
					
					-- Named process definitions
					MachineBody(id__) = 
						dbisim((
						let
							finalNodesEntered = {|f0::entered|}
						within
							((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								f0::enter,
								j0::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited|})
									transSync = {|internal__.NID_i0,internal__.NID_j0,internal__.NID_j0|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
									   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   		    i0::D__(id__)
									   		    [| { share__, terminate } |] (
									   		    f0::D__(id__)
									   		    [| { share__, terminate } |] (
									   		    j0::D__(id__)
									   		    )
									   		    )
									   		  )
									 )
									 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									  [[set_pow24VStatus <- setL_pow24VStatus]]
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 			,setL_pow24VStatus
									|}) |]
									 ((i0::enter -> Transitions(id__))
									  [[ share__ <- x__ | x__ <- {| share__,setL_pow24VStatus |} ]]
									 )
									)[[setL_pow24VStatus <- set_pow24VStatus]]
									)
								)
								 \ hideSet)
								[[
									ext_pow24VStatus__.x____ <- ext_pow24VStatus,
									int_enablePWM__.x____ <- int_enablePWM,
									int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
									| x____ <- NIDS
								]]
							)
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour(id__) = 
						dbisim((let
							stateClockSync = {|get_CLID_f0,f0::entered|}
						 within
							(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ union(stateClockSync,enteredSS)
						)
						)
					
					Stateful(id__) = 
						dbisim((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour(id__) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__) [| {terminate} |] Clocks)
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					-- Visible counterparts
					MachineBody_VS_O(id__) = 
						dbisim((
						let
							finalNodesEntered = {|f0::entered|}
						within
							((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								f0::enter,
								j0::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited|})
									transSync = {|internal__.NID_i0,internal__.NID_j0,internal__.NID_j0|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
									   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   		    i0::VS_O__(id__)
									   		    [| { share__, terminate } |] (
									   		    f0::VS_O__(id__)
									   		    [| { share__, terminate } |] (
									   		    j0::VS_O__(id__)
									   		    )
									   		    )
									   		  )
									 )
									 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									  [[set_pow24VStatus <- setL_pow24VStatus]]
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 			,setL_pow24VStatus
									|}) |]
									 ((i0::enter -> Transitions(id__))
									  [[ share__ <- x__ | x__ <- {| share__,setL_pow24VStatus |} ]]
									 )
									)[[setL_pow24VStatus <- set_pow24VStatus]]
									)
								)
								 \ hideSet)
								[[
									ext_pow24VStatus__.x____ <- ext_pow24VStatus,
									int_enablePWM__.x____ <- int_enablePWM,
									int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
									| x____ <- NIDS
								]]
							)
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour_VS_O(id__) = 
						dbisim((let
							stateClockSync = {|get_CLID_f0,f0::entered|}
						 within
							(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					Stateful_VS_O(id__) = 
						dbisim((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour_VS_O(id__) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__) [| {terminate} |] Clocks)
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
						
					-- END
					
					-- Memory
					-- Memory variables
					
					-- varMemory process
					varMemory(id__) = terminate -> SKIP
					
					getsetLocalChannels = {||}
					
					-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
					FVS__(id__) = STM_VS_O(id__) \ localClockResets
					D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
					O__(id__) = dbisim(D__(id__))
					VS__(id__) = FVS__(id__)
					VS_O__(id__) = dbisim(FVS__(id__))
					HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
					FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
					HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
					
					-- Clocks
					
					Clocks = terminate -> SKIP
					
					clockSync = {||}
					
					Clock_CLID_f0(x__) = 
						TimeOut_1(
							f0::entered -> Clock_CLID_f0(0)
							[]
							get_CLID_f0!x__ -> Clock_CLID_f0(x__)
							[]
							terminate -> SKIP,Clock_CLID_f0(Plus(x__,1,CLID_f0_clock_type)))
					
					StateClocks = dbisim(Clock_CLID_f0(0))
					
					stateClockSync = {|get_CLID_f0,f0::entered|}
					}
						endmodule
			-- compileOperationDef
			module OP_checkLimits
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
				
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_f0|
				              NID_j0
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_ActualHV, set_ActualHV, setL_ActualHV, setR_ActualHV: core_real
				channel get_overLimit, set_overLimit, setL_overLimit, setR_overLimit: core_real
				channel get_underLimit, set_underLimit, setL_underLimit, setR_underLimit: core_real
				channel get_HVEnabled, set_HVEnabled, setL_HVEnabled, setR_HVEnabled: core_boolean
				channel get_currentState, set_currentState, setL_currentState, setR_currentState: State
				channel get_dutyCyclePWM1, set_dutyCyclePWM1, setL_dutyCyclePWM1, setR_dutyCyclePWM1: duty
				channel get_mSetPoint, set_mSetPoint, setL_mSetPoint, setR_mSetPoint: core_real
				
				-- Shared variable channels
				channel set_EXT_ActualHV: core_real
				channel set_EXT_overLimit: core_real
				channel set_EXT_underLimit: core_real
				channel set_EXT_HVEnabled: core_boolean
				channel set_EXT_currentState: State
				channel set_EXT_dutyCyclePWM1: duty
				channel set_EXT_mSetPoint: core_real
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel int_enablePWM__: NIDS.InOut.core_boolean
				channel int_enablePWM: InOut.core_boolean
				channel int_dutyCyclePWM1__: NIDS.InOut.duty
				channel int_dutyCyclePWM1: InOut.duty
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i0::enter,
				f0::enter,
				j0::enter
				|}
				
				enteredSS = 	{|
				f0::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
					set_EXT_ActualHV,
					set_EXT_overLimit,
					set_EXT_underLimit,
					set_EXT_HVEnabled,
					set_EXT_currentState,
					set_EXT_dutyCyclePWM1,
					set_EXT_mSetPoint
				|}
				
				channel clockReset, clockResetL, clockResetR 
				
				localClockResets = {||}
				
				
				channel get_CLID_f0 : CLID_f0_clock_type
				
				--channel increment__
				
				CLID_f0_clock_type = {0..(clock_type_max(Union({
				{}
				}))+1)}
				
				
					-- Nodes --
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Final state: f0
					module f0
					
					exports
					
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
									
									Entering 	= entered -> SKIP ; Active
									Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
									Interrupted	= share__choice(exit -> exited -> Inactive)
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Junction: j0
					module j0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					-- END of Nodes --
					
					Timed(OneStep) {
					-- Operation calls --
					-- Only the undefined operations are declared here.
					-- If the state machine is in isolation, all required operations will be undefined.
					-- If it is in the context of a controller, the required operations not provided by the
					-- controller will be declared here, and the defined operations will be defined in the
					-- context of the Controller module, and therefore within scope of the state machine module.
					
					CALL__disableHV(id__,
								arg) 	= (OP_disableHV::O__(id__,
								arg))
					[[
						OP_disableHV::int_enablePWM <- int_enablePWM,
						OP_disableHV::int_dutyCyclePWM1 <- int_dutyCyclePWM1
					]]
					[[
						OP_disableHV::get_HVEnabled <- get_HVEnabled,
						OP_disableHV::set_HVEnabled <- set_HVEnabled,
						OP_disableHV::get_currentState <- get_currentState,
						OP_disableHV::set_currentState <- set_currentState,
						OP_disableHV::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
						OP_disableHV::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
						OP_disableHV::get_mSetPoint <- get_mSetPoint,
						OP_disableHV::set_mSetPoint <- set_mSetPoint
					]]
					-- END of Operation calls --
				
					-- STM processes
					STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
					Stateful(id__) \ {terminate}
					
					STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
					Stateful(id__) \ {terminate}
					
					-- Transitions
					Transitions(id__) = ((let
						Trans = get_ActualHV?ActualHV -> get_underLimit?underLimit -> get_overLimit?overLimit -> TimeOut_1(
							 (share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; j0::enter -> SKIP))))
							 [] dbisim((((ActualHV<=overLimit) and (ActualHV>=underLimit)))&(internal__!NID_j0 -> SKIP ;  ((SKIP ; f0::enter -> SKIP))))
							 [] dbisim((((ActualHV<underLimit) or (ActualHV>overLimit)))&(internal__!NID_j0 -> SKIP ;  ((true&CALL__disableHV(
							 			id__,
							 			true
							 		) ; f0::enter -> SKIP))))
							 []
							 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
							 )
						,SKIP);Trans
					within
						Trans [|{terminate}|> SKIP
					)
					)
					
					-- Stateful
					-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
					
					-- Named process definitions
					MachineBody(id__) = 
						dbisim((
						let
							finalNodesEntered = {|f0::entered|}
						within
							((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								f0::enter,
								j0::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited|})
									transSync = {|internal__.NID_i0,internal__.NID_j0,internal__.NID_j0|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
									   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   		    i0::D__(id__)
									   		    [| { share__, terminate } |] (
									   		    f0::D__(id__)
									   		    [| { share__, terminate } |] (
									   		    j0::D__(id__)
									   		    )
									   		    )
									   		  )
									 )
									 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									  [[set_ActualHV <- setL_ActualHV,set_underLimit <- setL_underLimit,set_overLimit <- setL_overLimit]]
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 			,setL_ActualHV
									 			,setL_underLimit
									 			,setL_overLimit
									|}) |]
									 ((i0::enter -> Transitions(id__))
									  [[ share__ <- x__ | x__ <- {| share__,setL_ActualHV,setL_underLimit,setL_overLimit |} ]]
									 )
									)[[setL_ActualHV <- set_ActualHV,setL_underLimit <- set_underLimit,setL_overLimit <- set_overLimit]]
									)
								)
								 \ hideSet)
								[[
									int_enablePWM__.x____ <- int_enablePWM,
									int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
									| x____ <- NIDS
								]]
							)
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour(id__) = 
						dbisim((let
							stateClockSync = {|get_CLID_f0,f0::entered|}
						 within
							(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ union(stateClockSync,enteredSS)
						)
						)
					
					Stateful(id__) = 
						dbisim((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour(id__) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__) [| {terminate} |] Clocks)
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					-- Visible counterparts
					MachineBody_VS_O(id__) = 
						dbisim((
						let
							finalNodesEntered = {|f0::entered|}
						within
							((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								f0::enter,
								j0::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited|})
									transSync = {|internal__.NID_i0,internal__.NID_j0,internal__.NID_j0|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
									   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   		    i0::VS_O__(id__)
									   		    [| { share__, terminate } |] (
									   		    f0::VS_O__(id__)
									   		    [| { share__, terminate } |] (
									   		    j0::VS_O__(id__)
									   		    )
									   		    )
									   		  )
									 )
									 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									  [[set_ActualHV <- setL_ActualHV,set_underLimit <- setL_underLimit,set_overLimit <- setL_overLimit]]
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 			,setL_ActualHV
									 			,setL_underLimit
									 			,setL_overLimit
									|}) |]
									 ((i0::enter -> Transitions(id__))
									  [[ share__ <- x__ | x__ <- {| share__,setL_ActualHV,setL_underLimit,setL_overLimit |} ]]
									 )
									)[[setL_ActualHV <- set_ActualHV,setL_underLimit <- set_underLimit,setL_overLimit <- set_overLimit]]
									)
								)
								 \ hideSet)
								[[
									int_enablePWM__.x____ <- int_enablePWM,
									int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
									| x____ <- NIDS
								]]
							)
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour_VS_O(id__) = 
						dbisim((let
							stateClockSync = {|get_CLID_f0,f0::entered|}
						 within
							(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					Stateful_VS_O(id__) = 
						dbisim((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour_VS_O(id__) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__) [| {terminate} |] Clocks)
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
						
					-- END
					
					-- Memory
					-- Memory variables
					
					-- varMemory process
					varMemory(id__) = terminate -> SKIP
					
					getsetLocalChannels = {||}
					
					-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
					FVS__(id__) = STM_VS_O(id__) \ localClockResets
					D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
					O__(id__) = dbisim(D__(id__))
					VS__(id__) = FVS__(id__)
					VS_O__(id__) = dbisim(FVS__(id__))
					HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
					FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
					HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
					
					-- Clocks
					
					Clocks = terminate -> SKIP
					
					clockSync = {||}
					
					Clock_CLID_f0(x__) = 
						TimeOut_1(
							f0::entered -> Clock_CLID_f0(0)
							[]
							get_CLID_f0!x__ -> Clock_CLID_f0(x__)
							[]
							terminate -> SKIP,Clock_CLID_f0(Plus(x__,1,CLID_f0_clock_type)))
					
					StateClocks = dbisim(Clock_CLID_f0(0))
					
					stateClockSync = {|get_CLID_f0,f0::entered|}
					}
						endmodule
			-- compileOperationDef
			module OP_PID_Control
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
				
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_j1|
				              NID_j3|
				              NID_f0
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_ActualHV, set_ActualHV, setL_ActualHV, setR_ActualHV: core_real
				channel get_dutyCyclePWM1, set_dutyCyclePWM1, setL_dutyCyclePWM1, setR_dutyCyclePWM1: duty
				channel get_mSetPoint, set_mSetPoint, setL_mSetPoint, setR_mSetPoint: core_real
				
				-- Shared variable channels
				channel set_EXT_ActualHV: core_real
				channel set_EXT_dutyCyclePWM1: duty
				channel set_EXT_mSetPoint: core_real
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel ext_ActualHV__: NIDS.InOut.core_real
				channel ext_ActualHV: InOut.core_real
				channel int_dutyCyclePWM1__: NIDS.InOut.duty
				channel int_dutyCyclePWM1: InOut.duty
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i0::enter,
				j1::enter,
				j3::enter,
				f0::enter
				|}
				
				enteredSS = 	{|
				f0::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
					set_EXT_ActualHV,
					set_EXT_dutyCyclePWM1,
					set_EXT_mSetPoint
				|}
				
				channel clockReset, clockResetL, clockResetR 
				
				localClockResets = {||}
				
				
				channel get_CLID_f0 : CLID_f0_clock_type
				
				--channel increment__
				
				CLID_f0_clock_type = {0..(clock_type_max(Union({
				{}
				}))+1)}
				
				
					-- Nodes --
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Junction: j1
					module j1
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Junction: j3
					module j3
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Final state: f0
					module f0
					
					exports
					
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
									
									Entering 	= entered -> SKIP ; Active
									Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
									Interrupted	= share__choice(exit -> exited -> Inactive)
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					-- END of Nodes --
					
					Timed(OneStep) {
					-- Operation calls --
					-- Only the undefined operations are declared here.
					-- If the state machine is in isolation, all required operations will be undefined.
					-- If it is in the context of a controller, the required operations not provided by the
					-- controller will be declared here, and the defined operations will be defined in the
					-- context of the Controller module, and therefore within scope of the state machine module.
					
					-- END of Operation calls --
				
					-- STM processes
					STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
					Stateful(id__) \ {terminate}
					
					STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
					Stateful(id__) \ {terminate}
					
					-- Transitions
					Transitions(id__) = ((let
						Trans = get_mSetPoint?mSetPoint -> get_ActualHV?ActualHV -> TimeOut_1(
							 (share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((Deadline(true&(share__choice(ext_ActualHV.in?ActualHV -> (SStop /\ set_ActualHV!ActualHV -> SKIP))),0) ; j1::enter -> SKIP))))
							 [] dbisim(((ActualHV<mSetPoint))&(internal__!NID_j1 -> SKIP ;  ((share__choice(share__choice(get_dutyCyclePWM1?dutyCyclePWM1 -> true & (share__choice(set_dutyCyclePWM1!increaseduty(dutyCyclePWM1) -> SKIP)))) ; j3::enter -> SKIP))))
							 [] dbisim(((ActualHV>mSetPoint))&(internal__!NID_j1 -> SKIP ;  ((share__choice(share__choice(get_dutyCyclePWM1?dutyCyclePWM1 -> true & (share__choice(set_dutyCyclePWM1!decreaseduty(dutyCyclePWM1) -> SKIP)))) ; j3::enter -> SKIP))))
							 [] dbisim((true)&(internal__!NID_j3 -> SKIP ;  ((Deadline(share__choice(get_dutyCyclePWM1?dutyCyclePWM1 -> true&(share__choice(int_dutyCyclePWM1.out!dutyCyclePWM1 -> SKIP))),0) ; f0::enter -> SKIP))))
							 [] dbisim(((ActualHV==mSetPoint))&(internal__!NID_j1 -> SKIP ;  ((SKIP ; j3::enter -> SKIP))))
							 []
							 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
							 )
						,SKIP);Trans
					within
						Trans [|{terminate}|> SKIP
					)
					)
					
					-- Stateful
					-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
					
					-- Named process definitions
					MachineBody(id__) = 
						dbisim((
						let
							finalNodesEntered = {|f0::entered|}
						within
							((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								j1::enter,
								j3::enter,
								f0::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited|})
									transSync = {|internal__.NID_i0,internal__.NID_j1,internal__.NID_j1,internal__.NID_j3,internal__.NID_j1|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
									   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   		    i0::D__(id__)
									   		    [| { share__, terminate } |] (
									   		    j1::D__(id__)
									   		    [| { share__, terminate } |] (
									   		    j3::D__(id__)
									   		    [| { share__, terminate } |] (
									   		    f0::D__(id__)
									   		    )
									   		    )
									   		    )
									   		  )
									 )
									 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 [[j1::interrupt <- x__ | x__ <- {|internal__.NID_j1,internal__.NID_j1,internal__.NID_j1|}]]
									 [[j3::interrupt <- x__ | x__ <- {|internal__.NID_j3|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									  [[set_mSetPoint <- setL_mSetPoint,set_ActualHV <- setL_ActualHV]]
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 			,setL_mSetPoint
									 			,setL_ActualHV
									|}) |]
									 ((i0::enter -> Transitions(id__))
									  [[ share__ <- x__ | x__ <- {| share__,setL_mSetPoint,setL_ActualHV |} ]]
									 )
									)[[setL_mSetPoint <- set_mSetPoint,setL_ActualHV <- set_ActualHV]]
									)
								)
								 \ hideSet)
								[[
									ext_ActualHV__.x____ <- ext_ActualHV,
									int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
									| x____ <- NIDS
								]]
							)
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour(id__) = 
						dbisim((let
							stateClockSync = {|get_CLID_f0,f0::entered|}
						 within
							(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ union(stateClockSync,enteredSS)
						)
						)
					
					Stateful(id__) = 
						dbisim((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour(id__) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__) [| {terminate} |] Clocks)
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					-- Visible counterparts
					MachineBody_VS_O(id__) = 
						dbisim((
						let
							finalNodesEntered = {|f0::entered|}
						within
							((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								j1::enter,
								j3::enter,
								f0::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited|})
									transSync = {|internal__.NID_i0,internal__.NID_j1,internal__.NID_j1,internal__.NID_j3,internal__.NID_j1|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
									   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   		    i0::VS_O__(id__)
									   		    [| { share__, terminate } |] (
									   		    j1::VS_O__(id__)
									   		    [| { share__, terminate } |] (
									   		    j3::VS_O__(id__)
									   		    [| { share__, terminate } |] (
									   		    f0::VS_O__(id__)
									   		    )
									   		    )
									   		    )
									   		  )
									 )
									 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 [[j1::interrupt <- x__ | x__ <- {|internal__.NID_j1,internal__.NID_j1,internal__.NID_j1|}]]
									 [[j3::interrupt <- x__ | x__ <- {|internal__.NID_j3|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									  [[set_mSetPoint <- setL_mSetPoint,set_ActualHV <- setL_ActualHV]]
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 			,setL_mSetPoint
									 			,setL_ActualHV
									|}) |]
									 ((i0::enter -> Transitions(id__))
									  [[ share__ <- x__ | x__ <- {| share__,setL_mSetPoint,setL_ActualHV |} ]]
									 )
									)[[setL_mSetPoint <- set_mSetPoint,setL_ActualHV <- set_ActualHV]]
									)
								)
								 \ hideSet)
								[[
									ext_ActualHV__.x____ <- ext_ActualHV,
									int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
									| x____ <- NIDS
								]]
							)
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour_VS_O(id__) = 
						dbisim((let
							stateClockSync = {|get_CLID_f0,f0::entered|}
						 within
							(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					Stateful_VS_O(id__) = 
						dbisim((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour_VS_O(id__) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__) [| {terminate} |] Clocks)
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
						
					-- END
					
					-- Memory
					-- Memory variables
					
					-- varMemory process
					varMemory(id__) = terminate -> SKIP
					
					getsetLocalChannels = {||}
					
					-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
					FVS__(id__) = STM_VS_O(id__) \ localClockResets
					D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
					O__(id__) = dbisim(D__(id__))
					VS__(id__) = FVS__(id__)
					VS_O__(id__) = dbisim(FVS__(id__))
					HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
					FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
					HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
					
					-- Clocks
					
					Clocks = terminate -> SKIP
					
					clockSync = {||}
					
					Clock_CLID_f0(x__) = 
						TimeOut_1(
							f0::entered -> Clock_CLID_f0(0)
							[]
							get_CLID_f0!x__ -> Clock_CLID_f0(x__)
							[]
							terminate -> SKIP,Clock_CLID_f0(Plus(x__,1,CLID_f0_clock_type)))
					
					StateClocks = dbisim(Clock_CLID_f0(0))
					
					stateClockSync = {|get_CLID_f0,f0::entered|}
					}
						endmodule
			-- compileOperationDef
			module OP_setPointRamping
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
				
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_f0|
				              NID_j0|
				              NID_j1|
				              NID_j2|
				              NID_j3|
				              NID_j4|
				              NID_j5
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_HVEnabled, set_HVEnabled, setL_HVEnabled, setR_HVEnabled: core_boolean
				channel get_currentState, set_currentState, setL_currentState, setR_currentState: State
				channel get_dutyCyclePWM1, set_dutyCyclePWM1, setL_dutyCyclePWM1, setR_dutyCyclePWM1: duty
				channel get_mSetPoint, set_mSetPoint, setL_mSetPoint, setR_mSetPoint: core_real
				
				-- Shared variable channels
				channel set_EXT_HVEnabled: core_boolean
				channel set_EXT_currentState: State
				channel set_EXT_dutyCyclePWM1: duty
				channel set_EXT_mSetPoint: core_real
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel int_enablePWM__: NIDS.InOut.core_boolean
				channel int_enablePWM: InOut.core_boolean
				channel int_dutyCyclePWM1__: NIDS.InOut.duty
				channel int_dutyCyclePWM1: InOut.duty
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i0::enter,
				f0::enter,
				j0::enter,
				j1::enter,
				j2::enter,
				j3::enter,
				j4::enter,
				j5::enter
				|}
				
				enteredSS = 	{|
				f0::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
					set_EXT_HVEnabled,
					set_EXT_currentState,
					set_EXT_dutyCyclePWM1,
					set_EXT_mSetPoint
				|}
				
				channel clockReset, clockResetL, clockResetR 
				
				localClockResets = {||}
				
				
				channel get_CLID_f0 : CLID_f0_clock_type
				
				--channel increment__
				
				CLID_f0_clock_type = {0..(clock_type_max(Union({
				{}
				}))+1)}
				
				
					-- Nodes --
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
										newSetPoint,
									    const_setPointRamping_rampStep) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__,
										newSetPoint,
									    const_setPointRamping_rampStep) = D__(id__,
										newSetPoint,
									    const_setPointRamping_rampStep)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Final state: f0
					module f0
					
					exports
					
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							D__(id__,
										newSetPoint,
									    const_setPointRamping_rampStep) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
									
									Entering 	= entered -> SKIP ; Active
									Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
									Interrupted	= share__choice(exit -> exited -> Inactive)
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
										newSetPoint,
									    const_setPointRamping_rampStep) = D__(id__,
										newSetPoint,
									    const_setPointRamping_rampStep)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Junction: j0
					module j0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
										newSetPoint,
									    const_setPointRamping_rampStep) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
										newSetPoint,
									    const_setPointRamping_rampStep) = D__(id__,
										newSetPoint,
									    const_setPointRamping_rampStep)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Junction: j1
					module j1
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
										newSetPoint,
									    const_setPointRamping_rampStep) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
										newSetPoint,
									    const_setPointRamping_rampStep) = D__(id__,
										newSetPoint,
									    const_setPointRamping_rampStep)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Junction: j2
					module j2
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
										newSetPoint,
									    const_setPointRamping_rampStep) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
										newSetPoint,
									    const_setPointRamping_rampStep) = D__(id__,
										newSetPoint,
									    const_setPointRamping_rampStep)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Junction: j3
					module j3
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
										newSetPoint,
									    const_setPointRamping_rampStep) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
										newSetPoint,
									    const_setPointRamping_rampStep) = D__(id__,
										newSetPoint,
									    const_setPointRamping_rampStep)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Junction: j4
					module j4
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
										newSetPoint,
									    const_setPointRamping_rampStep) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
										newSetPoint,
									    const_setPointRamping_rampStep) = D__(id__,
										newSetPoint,
									    const_setPointRamping_rampStep)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Junction: j5
					module j5
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
										newSetPoint,
									    const_setPointRamping_rampStep) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
										newSetPoint,
									    const_setPointRamping_rampStep) = D__(id__,
										newSetPoint,
									    const_setPointRamping_rampStep)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					-- END of Nodes --
					
					Timed(OneStep) {
					-- Operation calls --
					-- Only the undefined operations are declared here.
					-- If the state machine is in isolation, all required operations will be undefined.
					-- If it is in the context of a controller, the required operations not provided by the
					-- controller will be declared here, and the defined operations will be defined in the
					-- context of the Controller module, and therefore within scope of the state machine module.
					
					CALL__disableHV(id__,
								arg) 	= (OP_disableHV::O__(id__,
								arg))
					[[
						OP_disableHV::int_enablePWM <- int_enablePWM,
						OP_disableHV::int_dutyCyclePWM1 <- int_dutyCyclePWM1
					]]
					[[
						OP_disableHV::get_HVEnabled <- get_HVEnabled,
						OP_disableHV::set_HVEnabled <- set_HVEnabled,
						OP_disableHV::get_currentState <- get_currentState,
						OP_disableHV::set_currentState <- set_currentState,
						OP_disableHV::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
						OP_disableHV::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
						OP_disableHV::get_mSetPoint <- get_mSetPoint,
						OP_disableHV::set_mSetPoint <- set_mSetPoint
					]]
					-- END of Operation calls --
				
					-- STM processes
					STM(id__,
								newSetPoint,
							    const_setPointRamping_rampStep) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
					Stateful(id__,
								newSetPoint,
							    const_setPointRamping_rampStep) \ {terminate}
					
					STM_VS_O(id__,
								newSetPoint,
							    const_setPointRamping_rampStep) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
					Stateful(id__,
								newSetPoint,
							    const_setPointRamping_rampStep) \ {terminate}
					
					-- Transitions
					Transitions(id__,
								newSetPoint,
							    const_setPointRamping_rampStep) = ((let
						Trans = get_mSetPoint?mSetPoint -> TimeOut_1(
							 (share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; j5::enter -> SKIP))))
							 [] dbisim(((newSetPoint<=0))&(internal__!NID_j5 -> SKIP ;  ((share__choice(true & (share__choice(set_mSetPoint!0 -> SKIP)));true&CALL__disableHV(
							 			id__,
							 			false
							 		) ; f0::enter -> SKIP))))
							 [] dbisim(((newSetPoint>0))&(internal__!NID_j5 -> SKIP ;  ((SKIP ; j0::enter -> SKIP))))
							 [] dbisim(((mSetPoint>newSetPoint))&(internal__!NID_j0 -> SKIP ;  ((share__choice(share__choice(get_mSetPoint?mSetPoint -> true & (share__choice(set_mSetPoint!Minus(mSetPoint, const_setPointRamping_rampStep, core_real) -> SKIP)))) ; j1::enter -> SKIP))))
							 [] dbisim(((mSetPoint<newSetPoint))&(internal__!NID_j1 -> SKIP ;  ((share__choice(true & (share__choice(set_mSetPoint!newSetPoint -> SKIP))) ; j2::enter -> SKIP))))
							 [] dbisim(((mSetPoint>=newSetPoint))&(internal__!NID_j1 -> SKIP ;  ((SKIP ; j2::enter -> SKIP))))
							 [] dbisim((true)&(internal__!NID_j2 -> SKIP ;  ((SKIP ; f0::enter -> SKIP))))
							 [] dbisim(((mSetPoint<newSetPoint))&(internal__!NID_j0 -> SKIP ;  ((share__choice(share__choice(get_mSetPoint?mSetPoint -> true & (share__choice(set_mSetPoint!Plus(mSetPoint, const_setPointRamping_rampStep, core_real) -> SKIP)))) ; j3::enter -> SKIP))))
							 [] dbisim((true)&(internal__!NID_j4 -> SKIP ;  ((SKIP ; f0::enter -> SKIP))))
							 [] dbisim(((mSetPoint>newSetPoint))&(internal__!NID_j3 -> SKIP ;  ((share__choice(true & (share__choice(set_mSetPoint!newSetPoint -> SKIP))) ; j4::enter -> SKIP))))
							 [] dbisim(((mSetPoint<=newSetPoint))&(internal__!NID_j3 -> SKIP ;  ((SKIP ; j4::enter -> SKIP))))
							 [] dbisim(((mSetPoint==newSetPoint))&(internal__!NID_j0 -> SKIP ;  ((SKIP ; f0::enter -> SKIP))))
							 []
							 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
							 )
						,SKIP);Trans
					within
						Trans [|{terminate}|> SKIP
					)
					)
					
					-- Stateful
					-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
					
					-- Named process definitions
					MachineBody(id__,
								newSetPoint,
							    const_setPointRamping_rampStep) = 
						dbisim((
						let
							finalNodesEntered = {|f0::entered|}
						within
							((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								f0::enter,
								j0::enter,
								j1::enter,
								j2::enter,
								j3::enter,
								j4::enter,
								j5::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited|})
									transSync = {|internal__.NID_i0,internal__.NID_j5,internal__.NID_j5,internal__.NID_j0,internal__.NID_j1,internal__.NID_j1,internal__.NID_j2,internal__.NID_j0,internal__.NID_j4,internal__.NID_j3,internal__.NID_j3,internal__.NID_j0|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
									   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   		    i0::D__(id__,
									   		    			newSetPoint,
									   		    		    const_setPointRamping_rampStep)
									   		    [| { share__, terminate } |] (
									   		    f0::D__(id__,
									   		    			newSetPoint,
									   		    		    const_setPointRamping_rampStep)
									   		    [| { share__, terminate } |] (
									   		    j0::D__(id__,
									   		    			newSetPoint,
									   		    		    const_setPointRamping_rampStep)
									   		    [| { share__, terminate } |] (
									   		    j1::D__(id__,
									   		    			newSetPoint,
									   		    		    const_setPointRamping_rampStep)
									   		    [| { share__, terminate } |] (
									   		    j2::D__(id__,
									   		    			newSetPoint,
									   		    		    const_setPointRamping_rampStep)
									   		    [| { share__, terminate } |] (
									   		    j3::D__(id__,
									   		    			newSetPoint,
									   		    		    const_setPointRamping_rampStep)
									   		    [| { share__, terminate } |] (
									   		    j4::D__(id__,
									   		    			newSetPoint,
									   		    		    const_setPointRamping_rampStep)
									   		    [| { share__, terminate } |] (
									   		    j5::D__(id__,
									   		    			newSetPoint,
									   		    		    const_setPointRamping_rampStep)
									   		    )
									   		    )
									   		    )
									   		    )
									   		    )
									   		    )
									   		    )
									   		  )
									 )
									 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0,internal__.NID_j0|}]]
									 [[j1::interrupt <- x__ | x__ <- {|internal__.NID_j1,internal__.NID_j1|}]]
									 [[j2::interrupt <- x__ | x__ <- {|internal__.NID_j2|}]]
									 [[j3::interrupt <- x__ | x__ <- {|internal__.NID_j3,internal__.NID_j3|}]]
									 [[j4::interrupt <- x__ | x__ <- {|internal__.NID_j4|}]]
									 [[j5::interrupt <- x__ | x__ <- {|internal__.NID_j5,internal__.NID_j5|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									  [[set_mSetPoint <- setL_mSetPoint]]
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 			,setL_mSetPoint
									|}) |]
									 ((i0::enter -> Transitions(id__,
									 			newSetPoint,
									 		    const_setPointRamping_rampStep))
									  [[ share__ <- x__ | x__ <- {| share__,setL_mSetPoint |} ]]
									 )
									)[[setL_mSetPoint <- set_mSetPoint]]
									)
								)
								 \ hideSet)
								[[
									int_enablePWM__.x____ <- int_enablePWM,
									int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
									| x____ <- NIDS
								]]
							)
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour(id__,
								newSetPoint,
							    const_setPointRamping_rampStep) = 
						dbisim((let
							stateClockSync = {|get_CLID_f0,f0::entered|}
						 within
							(MachineBody(id__,
										newSetPoint,
									    const_setPointRamping_rampStep) [| union(stateClockSync,{terminate}) |] StateClocks) \ union(stateClockSync,enteredSS)
						)
						)
					
					Stateful(id__,
								newSetPoint,
							    const_setPointRamping_rampStep) = 
						dbisim((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour(id__,
										newSetPoint,
									    const_setPointRamping_rampStep) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__,
							 			newSetPoint,
							 		    const_setPointRamping_rampStep) [| {terminate} |] Clocks)
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					-- Visible counterparts
					MachineBody_VS_O(id__,
								newSetPoint,
							    const_setPointRamping_rampStep) = 
						dbisim((
						let
							finalNodesEntered = {|f0::entered|}
						within
							((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								f0::enter,
								j0::enter,
								j1::enter,
								j2::enter,
								j3::enter,
								j4::enter,
								j5::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited|})
									transSync = {|internal__.NID_i0,internal__.NID_j5,internal__.NID_j5,internal__.NID_j0,internal__.NID_j1,internal__.NID_j1,internal__.NID_j2,internal__.NID_j0,internal__.NID_j4,internal__.NID_j3,internal__.NID_j3,internal__.NID_j0|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
									   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   		    i0::VS_O__(id__,
									   		    			newSetPoint,
									   		    		    const_setPointRamping_rampStep)
									   		    [| { share__, terminate } |] (
									   		    f0::VS_O__(id__,
									   		    			newSetPoint,
									   		    		    const_setPointRamping_rampStep)
									   		    [| { share__, terminate } |] (
									   		    j0::VS_O__(id__,
									   		    			newSetPoint,
									   		    		    const_setPointRamping_rampStep)
									   		    [| { share__, terminate } |] (
									   		    j1::VS_O__(id__,
									   		    			newSetPoint,
									   		    		    const_setPointRamping_rampStep)
									   		    [| { share__, terminate } |] (
									   		    j2::VS_O__(id__,
									   		    			newSetPoint,
									   		    		    const_setPointRamping_rampStep)
									   		    [| { share__, terminate } |] (
									   		    j3::VS_O__(id__,
									   		    			newSetPoint,
									   		    		    const_setPointRamping_rampStep)
									   		    [| { share__, terminate } |] (
									   		    j4::VS_O__(id__,
									   		    			newSetPoint,
									   		    		    const_setPointRamping_rampStep)
									   		    [| { share__, terminate } |] (
									   		    j5::VS_O__(id__,
									   		    			newSetPoint,
									   		    		    const_setPointRamping_rampStep)
									   		    )
									   		    )
									   		    )
									   		    )
									   		    )
									   		    )
									   		    )
									   		  )
									 )
									 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0,internal__.NID_j0|}]]
									 [[j1::interrupt <- x__ | x__ <- {|internal__.NID_j1,internal__.NID_j1|}]]
									 [[j2::interrupt <- x__ | x__ <- {|internal__.NID_j2|}]]
									 [[j3::interrupt <- x__ | x__ <- {|internal__.NID_j3,internal__.NID_j3|}]]
									 [[j4::interrupt <- x__ | x__ <- {|internal__.NID_j4|}]]
									 [[j5::interrupt <- x__ | x__ <- {|internal__.NID_j5,internal__.NID_j5|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									  [[set_mSetPoint <- setL_mSetPoint]]
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 			,setL_mSetPoint
									|}) |]
									 ((i0::enter -> Transitions(id__,
									 			newSetPoint,
									 		    const_setPointRamping_rampStep))
									  [[ share__ <- x__ | x__ <- {| share__,setL_mSetPoint |} ]]
									 )
									)[[setL_mSetPoint <- set_mSetPoint]]
									)
								)
								 \ hideSet)
								[[
									int_enablePWM__.x____ <- int_enablePWM,
									int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
									| x____ <- NIDS
								]]
							)
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour_VS_O(id__,
								newSetPoint,
							    const_setPointRamping_rampStep) = 
						dbisim((let
							stateClockSync = {|get_CLID_f0,f0::entered|}
						 within
							(MachineBody_VS_O(id__,
										newSetPoint,
									    const_setPointRamping_rampStep) [| union(stateClockSync,{terminate}) |] StateClocks) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					Stateful_VS_O(id__,
								newSetPoint,
							    const_setPointRamping_rampStep) = 
						dbisim((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour_VS_O(id__,
										newSetPoint,
									    const_setPointRamping_rampStep) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__,
							 			newSetPoint,
							 		    const_setPointRamping_rampStep) [| {terminate} |] Clocks)
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
						
					-- END
					
					-- Memory
					-- Memory variables
					
					-- varMemory process
					varMemory(id__,
								newSetPoint,
							    const_setPointRamping_rampStep) = terminate -> SKIP
					
					getsetLocalChannels = {||}
					
					-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
					FVS__(id__,
								newSetPoint,
							    const_setPointRamping_rampStep) = STM_VS_O(id__,
								newSetPoint,
							    const_setPointRamping_rampStep) \ localClockResets
					D__(id__,
								newSetPoint,
							    const_setPointRamping_rampStep) = timed_priority(STM(id__,
								newSetPoint,
							    const_setPointRamping_rampStep) \ union(internal_events,localClockResets))
					O__(id__,
								newSetPoint,
							    const_setPointRamping_rampStep) = dbisim(D__(id__,
								newSetPoint,
							    const_setPointRamping_rampStep))
					VS__(id__,
								newSetPoint,
							    const_setPointRamping_rampStep) = FVS__(id__,
								newSetPoint,
							    const_setPointRamping_rampStep)
					VS_O__(id__,
								newSetPoint,
							    const_setPointRamping_rampStep) = dbisim(FVS__(id__,
								newSetPoint,
							    const_setPointRamping_rampStep))
					HEXT__(id__,
								newSetPoint,
							    const_setPointRamping_rampStep) = O__(id__,
								newSetPoint,
							    const_setPointRamping_rampStep) [|shared_variable_events|] SKIP
					FVS_C__(id__,
								newSetPoint,
							    const_setPointRamping_rampStep) = dbisim(timed_priority(STM(id__,
								newSetPoint,
							    const_setPointRamping_rampStep) \ internal_events))
					HUP__(id__,
								newSetPoint,
							    const_setPointRamping_rampStep) = timed_priority(O__(id__,
								newSetPoint,
							    const_setPointRamping_rampStep) [|{share__}|] SKIP)
					
					-- Clocks
					
					Clocks = terminate -> SKIP
					
					clockSync = {||}
					
					Clock_CLID_f0(x__) = 
						TimeOut_1(
							f0::entered -> Clock_CLID_f0(0)
							[]
							get_CLID_f0!x__ -> Clock_CLID_f0(x__)
							[]
							terminate -> SKIP,Clock_CLID_f0(Plus(x__,1,CLID_f0_clock_type)))
					
					StateClocks = dbisim(Clock_CLID_f0(0))
					
					stateClockSync = {|get_CLID_f0,f0::entered|}
					}
						endmodule
			-- compileOperationDef
			module OP_AdjustLimits
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
				
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_f0
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_overLimit, set_overLimit, setL_overLimit, setR_overLimit: core_real
				channel get_underLimit, set_underLimit, setL_underLimit, setR_underLimit: core_real
				channel get_mSetPoint, set_mSetPoint, setL_mSetPoint, setR_mSetPoint: core_real
				
				-- Shared variable channels
				channel set_EXT_overLimit: core_real
				channel set_EXT_underLimit: core_real
				channel set_EXT_mSetPoint: core_real
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i0::enter,
				f0::enter
				|}
				
				enteredSS = 	{|
				f0::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
					set_EXT_overLimit,
					set_EXT_underLimit,
					set_EXT_mSetPoint
				|}
				
				channel clockReset, clockResetL, clockResetR 
				
				localClockResets = {||}
				
				
				channel get_CLID_f0 : CLID_f0_clock_type
				
				--channel increment__
				
				CLID_f0_clock_type = {0..(clock_type_max(Union({
				}))+1)}
				
				
					-- Nodes --
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Final state: f0
					module f0
					
					exports
					
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
									
									Entering 	= entered -> SKIP ; Active
									Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
									Interrupted	= share__choice(exit -> exited -> Inactive)
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					-- END of Nodes --
					
					Timed(OneStep) {
					-- Operation calls --
					-- Only the undefined operations are declared here.
					-- If the state machine is in isolation, all required operations will be undefined.
					-- If it is in the context of a controller, the required operations not provided by the
					-- controller will be declared here, and the defined operations will be defined in the
					-- context of the Controller module, and therefore within scope of the state machine module.
					
					-- END of Operation calls --
				
					-- STM processes
					STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
					Stateful(id__) \ {terminate}
					
					STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
					Stateful(id__) \ {terminate}
					
					-- Transitions
					Transitions(id__) = ((let
						Trans = TimeOut_1(
							 (share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((share__choice(share__choice(get_mSetPoint?mSetPoint -> true & (share__choice(set_overLimit!overLimitF(Plus(mSetPoint, 2, core_real)) -> SKIP))));share__choice(share__choice(get_mSetPoint?mSetPoint -> true & (share__choice(set_underLimit!underLimitF(Minus(mSetPoint, 2, core_real)) -> SKIP)))) ; f0::enter -> SKIP))))
							 []
							 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
							 )
						,SKIP);Trans
					within
						Trans [|{terminate}|> SKIP
					)
					)
					
					-- Stateful
					-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
					
					-- Named process definitions
					MachineBody(id__) = 
						dbisim((
						let
							finalNodesEntered = {|f0::entered|}
						within
							((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								f0::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited|})
									transSync = {|internal__.NID_i0|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
									   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   		    i0::D__(id__)
									   		    [| { share__, terminate } |] (
									   		    f0::D__(id__)
									   		    )
									   		  )
									 )
									 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									|}) |]
									 ((i0::enter -> Transitions(id__))
									  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 )
									)
									)
								)
								 \ hideSet)
							)
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour(id__) = 
						dbisim((let
							stateClockSync = {|get_CLID_f0,f0::entered|}
						 within
							(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ union(stateClockSync,enteredSS)
						)
						)
					
					Stateful(id__) = 
						dbisim((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour(id__) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__) [| {terminate} |] Clocks)
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					-- Visible counterparts
					MachineBody_VS_O(id__) = 
						dbisim((
						let
							finalNodesEntered = {|f0::entered|}
						within
							((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								f0::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited|})
									transSync = {|internal__.NID_i0|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
									   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   		    i0::VS_O__(id__)
									   		    [| { share__, terminate } |] (
									   		    f0::VS_O__(id__)
									   		    )
									   		  )
									 )
									 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									|}) |]
									 ((i0::enter -> Transitions(id__))
									  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 )
									)
									)
								)
								 \ hideSet)
							)
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour_VS_O(id__) = 
						dbisim((let
							stateClockSync = {|get_CLID_f0,f0::entered|}
						 within
							(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					Stateful_VS_O(id__) = 
						dbisim((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour_VS_O(id__) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__) [| {terminate} |] Clocks)
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
						
					-- END
					
					-- Memory
					-- Memory variables
					
					-- varMemory process
					varMemory(id__) = terminate -> SKIP
					
					getsetLocalChannels = {||}
					
					-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
					FVS__(id__) = STM_VS_O(id__) \ localClockResets
					D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
					O__(id__) = dbisim(D__(id__))
					VS__(id__) = FVS__(id__)
					VS_O__(id__) = dbisim(FVS__(id__))
					HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
					FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
					HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
					
					-- Clocks
					
					Clocks = terminate -> SKIP
					
					clockSync = {||}
					
					Clock_CLID_f0(x__) = 
						TimeOut_1(
							f0::entered -> Clock_CLID_f0(0)
							[]
							get_CLID_f0!x__ -> Clock_CLID_f0(x__)
							[]
							terminate -> SKIP,Clock_CLID_f0(Plus(x__,1,CLID_f0_clock_type)))
					
					StateClocks = dbisim(Clock_CLID_f0(0))
					
					stateClockSync = {|get_CLID_f0,f0::entered|}
					}
						endmodule
			-- compileOperationDef
			module OP_enableHV
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
				
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_f0
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_dutyCyclePWM1, set_dutyCyclePWM1, setL_dutyCyclePWM1, setR_dutyCyclePWM1: duty
				
				-- Shared variable channels
				channel set_EXT_dutyCyclePWM1: duty
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel int_enablePWM__: NIDS.InOut.core_boolean
				channel int_enablePWM: InOut.core_boolean
				channel int_dutyCyclePWM1__: NIDS.InOut.duty
				channel int_dutyCyclePWM1: InOut.duty
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i0::enter,
				f0::enter
				|}
				
				enteredSS = 	{|
				f0::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
					set_EXT_dutyCyclePWM1
				|}
				
				channel clockReset, clockResetL, clockResetR 
				
				localClockResets = {||}
				
				
				channel get_CLID_f0 : CLID_f0_clock_type
				
				--channel increment__
				
				CLID_f0_clock_type = {0..(clock_type_max(Union({
				}))+1)}
				
				
					-- Nodes --
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Final state: f0
					module f0
					
					exports
					
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
									
									Entering 	= entered -> SKIP ; Active
									Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
									Interrupted	= share__choice(exit -> exited -> Inactive)
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					-- END of Nodes --
					
					Timed(OneStep) {
					-- Operation calls --
					-- Only the undefined operations are declared here.
					-- If the state machine is in isolation, all required operations will be undefined.
					-- If it is in the context of a controller, the required operations not provided by the
					-- controller will be declared here, and the defined operations will be defined in the
					-- context of the Controller module, and therefore within scope of the state machine module.
					
					-- END of Operation calls --
				
					-- STM processes
					STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
					Stateful(id__) \ {terminate}
					
					STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
					Stateful(id__) \ {terminate}
					
					-- Transitions
					Transitions(id__) = ((let
						Trans = TimeOut_1(
							 (share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((Deadline(true&(share__choice(int_enablePWM.out!true -> SKIP)),0);share__choice(true & (share__choice(set_dutyCyclePWM1!real2duty(0) -> SKIP)));Deadline(share__choice(get_dutyCyclePWM1?dutyCyclePWM1 -> true&(share__choice(int_dutyCyclePWM1.out!dutyCyclePWM1 -> SKIP))),0) ; f0::enter -> SKIP))))
							 []
							 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
							 )
						,SKIP);Trans
					within
						Trans [|{terminate}|> SKIP
					)
					)
					
					-- Stateful
					-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
					
					-- Named process definitions
					MachineBody(id__) = 
						dbisim((
						let
							finalNodesEntered = {|f0::entered|}
						within
							((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								f0::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited|})
									transSync = {|internal__.NID_i0|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
									   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   		    i0::D__(id__)
									   		    [| { share__, terminate } |] (
									   		    f0::D__(id__)
									   		    )
									   		  )
									 )
									 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									|}) |]
									 ((i0::enter -> Transitions(id__))
									  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 )
									)
									)
								)
								 \ hideSet)
								[[
									int_enablePWM__.x____ <- int_enablePWM,
									int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
									| x____ <- NIDS
								]]
							)
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour(id__) = 
						dbisim((let
							stateClockSync = {|get_CLID_f0,f0::entered|}
						 within
							(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ union(stateClockSync,enteredSS)
						)
						)
					
					Stateful(id__) = 
						dbisim((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour(id__) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__) [| {terminate} |] Clocks)
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					-- Visible counterparts
					MachineBody_VS_O(id__) = 
						dbisim((
						let
							finalNodesEntered = {|f0::entered|}
						within
							((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								f0::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited|})
									transSync = {|internal__.NID_i0|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
									   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   		    i0::VS_O__(id__)
									   		    [| { share__, terminate } |] (
									   		    f0::VS_O__(id__)
									   		    )
									   		  )
									 )
									 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									|}) |]
									 ((i0::enter -> Transitions(id__))
									  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 )
									)
									)
								)
								 \ hideSet)
								[[
									int_enablePWM__.x____ <- int_enablePWM,
									int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
									| x____ <- NIDS
								]]
							)
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour_VS_O(id__) = 
						dbisim((let
							stateClockSync = {|get_CLID_f0,f0::entered|}
						 within
							(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					Stateful_VS_O(id__) = 
						dbisim((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour_VS_O(id__) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__) [| {terminate} |] Clocks)
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
						
					-- END
					
					-- Memory
					-- Memory variables
					
					-- varMemory process
					varMemory(id__) = terminate -> SKIP
					
					getsetLocalChannels = {||}
					
					-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
					FVS__(id__) = STM_VS_O(id__) \ localClockResets
					D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
					O__(id__) = dbisim(D__(id__))
					VS__(id__) = FVS__(id__)
					VS_O__(id__) = dbisim(FVS__(id__))
					HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
					FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
					HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
					
					-- Clocks
					
					Clocks = terminate -> SKIP
					
					clockSync = {||}
					
					Clock_CLID_f0(x__) = 
						TimeOut_1(
							f0::entered -> Clock_CLID_f0(0)
							[]
							get_CLID_f0!x__ -> Clock_CLID_f0(x__)
							[]
							terminate -> SKIP,Clock_CLID_f0(Plus(x__,1,CLID_f0_clock_type)))
					
					StateClocks = dbisim(Clock_CLID_f0(0))
					
					stateClockSync = {|get_CLID_f0,f0::entered|}
					}
						endmodule
		
			-- declaring machines
			module stm_ref0
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_Init|
				              NID_ClosedLoop|
				              NID_i0|
				              NID_Wait24Vpower|
				              NID_ErrorMode
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_setPoint, set_setPoint, setL_setPoint, setR_setPoint: core_real
				channel get_newSetPoint, set_newSetPoint, setL_newSetPoint, setR_newSetPoint: core_real
				channel get_ActualHV, set_ActualHV, setL_ActualHV, setR_ActualHV: core_real
				channel get_overLimit, set_overLimit, setL_overLimit, setR_overLimit: core_real
				channel get_underLimit, set_underLimit, setL_underLimit, setR_underLimit: core_real
				channel get_currentState, set_currentState, setL_currentState, setR_currentState: State
				channel get_HVEnabled, set_HVEnabled, setL_HVEnabled, setR_HVEnabled: core_boolean
				channel get_pow24VStatus, set_pow24VStatus, setL_pow24VStatus, setR_pow24VStatus: Power
				channel get_mSetPoint, set_mSetPoint, setL_mSetPoint, setR_mSetPoint: core_real
				channel get_dutyCyclePWM1, set_dutyCyclePWM1, setL_dutyCyclePWM1, setR_dutyCyclePWM1: duty
				
				-- Shared variable channels
				channel set_EXT_overLimit: core_real
				channel set_EXT_underLimit: core_real
				channel set_EXT_currentState: State
				channel set_EXT_HVEnabled: core_boolean
				channel set_EXT_pow24VStatus: Power
				channel set_EXT_mSetPoint: core_real
				channel set_EXT_dutyCyclePWM1: duty
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel ext_ActualHV__: NIDS.InOut.core_real
				channel ext_ActualHV: InOut.core_real
				channel ext_pow24VStatus__: NIDS.InOut.Power
				channel ext_pow24VStatus: InOut.Power
				channel ext_errorAck__: NIDS.InOut
				channel ext_errorAck: InOut
				channel ext_setPoint__: NIDS.InOut.core_real
				channel ext_setPoint: InOut.core_real
				channel int_dutyCyclePWM1__: NIDS.InOut.duty
				channel int_dutyCyclePWM1: InOut.duty
				channel int_enablePWM__: NIDS.InOut.core_boolean
				channel int_enablePWM: InOut.core_boolean
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				Init::enter,
				ClosedLoop::enter,
				i0::enter,
				Wait24Vpower::enter,
				ErrorMode::enter
				|}
				
				enteredSS = 	{|
				Init::entered,
				ClosedLoop::entered,
				Wait24Vpower::entered,
				ErrorMode::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
					set_EXT_overLimit,
					set_EXT_underLimit,
					set_EXT_currentState,
					set_EXT_HVEnabled,
					set_EXT_pow24VStatus,
					set_EXT_mSetPoint,
					set_EXT_dutyCyclePWM1
				|}
				datatype ClockSet = 
					CLID_Cl1
				
				channel clockReset, clockResetL, clockResetR : ClockSet
				
				localClockResets = {|clockReset.CLID_Cl1|}
				
				
				channel get_CLID_Init : CLID_Init_clock_type
				channel get_CLID_ErrorMode : CLID_ErrorMode_clock_type
				channel get_CLID_Cl1 : CLID_Cl1_clock_type
				channel get_CLID_ClosedLoop : CLID_ClosedLoop_clock_type
				channel get_CLID_Wait24Vpower : CLID_Wait24Vpower_clock_type
				
				--channel increment__
				
				CLID_Init_clock_type = {0..(clock_type_max(Union({
				{}
				}))+1)}
				CLID_ErrorMode_clock_type = {0..(clock_type_max(Union({
				{}
				}))+1)}
				CLID_Cl1_clock_type = {0..(clock_type_max(Union({
				{},
				({const_State_machine_cycleTime|cycleTime <- core_nat}),
				({const_State_machine_cycleTime|cycleTime <- core_nat}),
				({const_State_machine_cycleTime|cycleTime <- core_nat})
				}))+1)}
				CLID_ClosedLoop_clock_type = {0..(clock_type_max(Union({
				{}
				}))+1)}
				CLID_Wait24Vpower_clock_type = {0..(clock_type_max(Union({
				{}
				}))+1)}
				
			
					-- Nodes --
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- State: Init
					module Init
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&CALL__AdjustLimits(
											id__
										) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&CALL__AdjustLimits(
											id__
										) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: ClosedLoop
					module ClosedLoop
					
					enterSS = 
							{|			i0::enter,
								j0::enter,
								j1::enter,
								j2::enter,
								j3::enter,
								j4::enter,
								j6::enter,
								s0::enter,
								j7::enter
							|}
					enteredSS = 
							{|			s0::entered
							|}
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						-- declaring identifiers of transitions
						datatype NIDS = 
						              NID_i0|
						              NID_j0|
						              NID_j1|
						              NID_j2|
						              NID_j3|
						              NID_j4|
						              NID_j6|
						              NID_s0|
						              NID_j7
						
						channel internal__ : NIDS
						channel ext_ActualHV__: NIDS.InOut.core_real
						channel ext_pow24VStatus__: NIDS.InOut.Power
						channel ext_errorAck__: NIDS.InOut
						channel ext_setPoint__: NIDS.InOut.core_real
						channel int_dutyCyclePWM1__: NIDS.InOut.duty
						channel int_enablePWM__: NIDS.InOut.core_boolean
						
						channel get_CLID_s0 : CLID_s0_clock_type
						
						--channel increment__
						
						CLID_s0_clock_type = {0..(clock_type_max(Union({
						{}
						}))+1)}
						
						--	Nodes
						-- declaring all nodes
						
						----------------------------------------------------------------------
						-- Initial: i0
						module i0
						exports
						
							channel enter, interrupt
							
							Timed(OneStep) {
								D__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep) = 
									dbisim(let
										Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
										
										Termination = terminate -> SKIP
										
										Active 		= share__choice(interrupt -> SKIP) ; Inactive
									within
										Inactive [| {terminate} |> SKIP)
								
								VS_O__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep) = D__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep)
							}
						
						endmodule
						----------------------------------------------------------------------
						
						
						----------------------------------------------------------------------
						-- Junction: j0
						module j0
						exports
						
							channel enter, interrupt
							
							Timed(OneStep) {
								D__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep) = 
									dbisim(let
										Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
										
										Active 		= share__choice(interrupt -> SKIP) ; Inactive
									within
										Inactive [| {terminate} |> SKIP)
									
								VS_O__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep) = D__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep)
							}
						
						endmodule
						----------------------------------------------------------------------
						
						
						----------------------------------------------------------------------
						-- Junction: j1
						module j1
						exports
						
							channel enter, interrupt
							
							Timed(OneStep) {
								D__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep) = 
									dbisim(let
										Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
										
										Active 		= share__choice(interrupt -> SKIP) ; Inactive
									within
										Inactive [| {terminate} |> SKIP)
									
								VS_O__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep) = D__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep)
							}
						
						endmodule
						----------------------------------------------------------------------
						
						
						----------------------------------------------------------------------
						-- Junction: j2
						module j2
						exports
						
							channel enter, interrupt
							
							Timed(OneStep) {
								D__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep) = 
									dbisim(let
										Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
										
										Active 		= share__choice(interrupt -> SKIP) ; Inactive
									within
										Inactive [| {terminate} |> SKIP)
									
								VS_O__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep) = D__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep)
							}
						
						endmodule
						----------------------------------------------------------------------
						
						
						----------------------------------------------------------------------
						-- Junction: j3
						module j3
						exports
						
							channel enter, interrupt
							
							Timed(OneStep) {
								D__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep) = 
									dbisim(let
										Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
										
										Active 		= share__choice(interrupt -> SKIP) ; Inactive
									within
										Inactive [| {terminate} |> SKIP)
									
								VS_O__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep) = D__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep)
							}
						
						endmodule
						----------------------------------------------------------------------
						
						
						----------------------------------------------------------------------
						-- Junction: j4
						module j4
						exports
						
							channel enter, interrupt
							
							Timed(OneStep) {
								D__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep) = 
									dbisim(let
										Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
										
										Active 		= share__choice(interrupt -> SKIP) ; Inactive
									within
										Inactive [| {terminate} |> SKIP)
									
								VS_O__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep) = D__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep)
							}
						
						endmodule
						----------------------------------------------------------------------
						
						
						----------------------------------------------------------------------
						-- Junction: j6
						module j6
						exports
						
							channel enter, interrupt
							
							Timed(OneStep) {
								D__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep) = 
									dbisim(let
										Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
										
										Active 		= share__choice(interrupt -> SKIP) ; Inactive
									within
										Inactive [| {terminate} |> SKIP)
									
								VS_O__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep) = D__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep)
							}
						
						endmodule
						----------------------------------------------------------------------
						
						
						----------------------------------------------------------------------
						-- State: s0
						module s0
						
						enterSS = {}
						
						enteredSS = {}
						
						exports
						
							--  Declarations
							
							channel enter, entered, interrupt
							channel enteredL, enteredR
							
											
							
							
							--channel increment__
							
							
							--	Nodes
							-- declaring all nodes
							
							
							Timed(OneStep) {
								--	Rule: behaviours(Node)
								--  Note that FDR has problems with efficiently compiling the process below
								-- 	if using a different recursion pattern.
								D__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep) = 
								dbisim(let
									-- IMPLEMENTATION NOTE: 
									-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
									-- however FDR struggles with that form in certain cases. So we use the exception operator
									-- instead to 'terminate'.
									
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= SKIP ; 
											 	  Behaviour ; 
											 	  share__choice(exit -> SKIP) ; SKIP ; 
											 	  share__choice(exited -> SKIP) ; Inactive
								
									Behaviour 	= entered -> During
									During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
								within
									Inactive [| {terminate} |> SKIP)
									
								VS_O__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= SKIP ; 
											 	  Behaviour ; 
											 	  share__choice(exit -> SKIP) ; SKIP ; 
											 	  share__choice(exited -> SKIP) ; Inactive
								
									Behaviour 	= entered -> During
									During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
								within
									Inactive [| {terminate} |> SKIP)
								
								
								-- Clocks
								
								StateClocks = terminate -> SKIP
								
								stateClockSync = {||}
							}
						
						endmodule
						----------------------------------------------------------------------
						
						
						----------------------------------------------------------------------
						-- Junction: j7
						module j7
						exports
						
							channel enter, interrupt
							
							Timed(OneStep) {
								D__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep) = 
									dbisim(let
										Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
										
										Active 		= share__choice(interrupt -> SKIP) ; Inactive
									within
										Inactive [| {terminate} |> SKIP)
									
								VS_O__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep) = D__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep)
							}
						
						endmodule
						----------------------------------------------------------------------
						
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(true & (share__choice(set_currentState!State_ClosedLoop -> SKIP))) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
							
								Behaviour 	= dbisim(
									((
									 ((dbisim((dbisim((let
									 	-- IMPLEMENTATION NOTE:
									 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
									 	-- modules for defining the semantics of each node.
									 	enterSS = {|
									 	i0::enter,
									 	j0::enter,
									 	j1::enter,
									 	j2::enter,
									 	j3::enter,
									 	j4::enter,
									 	j6::enter,
									 	s0::enter,
									 	j7::enter
									 	|}
									 	hideSet = union(enterSS,{|exit,exited,internal__|})
									 within 
									 	((let
									 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									 		-- because CSPM modules are used for the semantics of Node.
									 		flowevts = union(enterSS,{|exit,exited|})
									 		transSync = {|internal__.NID_i0,internal__.NID_j0,internal__.NID_j1,internal__.NID_j0,internal__.NID_j2,internal__.NID_j2,internal__.NID_j3,internal__.NID_s0,internal__.NID_j6,internal__.NID_j4,internal__.NID_j4,internal__.NID_j7|}
									 	within
									 		((
									 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
									 		   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									 		   		    i0::D__(id__,
									 		   		    		    const_State_machine_cycleTime,
									 		   		    		    const_setPointRamping_rampStep)
									 		   		    [| { share__, terminate } |] (
									 		   		    j0::D__(id__,
									 		   		    		    const_State_machine_cycleTime,
									 		   		    		    const_setPointRamping_rampStep)
									 		   		    [| { share__, terminate } |] (
									 		   		    j1::D__(id__,
									 		   		    		    const_State_machine_cycleTime,
									 		   		    		    const_setPointRamping_rampStep)
									 		   		    [| { share__, terminate } |] (
									 		   		    j2::D__(id__,
									 		   		    		    const_State_machine_cycleTime,
									 		   		    		    const_setPointRamping_rampStep)
									 		   		    [| { share__, terminate } |] (
									 		   		    j3::D__(id__,
									 		   		    		    const_State_machine_cycleTime,
									 		   		    		    const_setPointRamping_rampStep)
									 		   		    [| { share__, terminate } |] (
									 		   		    j4::D__(id__,
									 		   		    		    const_State_machine_cycleTime,
									 		   		    		    const_setPointRamping_rampStep)
									 		   		    [| { share__, terminate } |] (
									 		   		    j6::D__(id__,
									 		   		    		    const_State_machine_cycleTime,
									 		   		    		    const_setPointRamping_rampStep)
									 		   		    [| { share__, terminate } |] (
									 		   		    s0::D__(id__,
									 		   		    		    const_State_machine_cycleTime,
									 		   		    		    const_setPointRamping_rampStep)
									 		   		    [| { share__, terminate } |] (
									 		   		    j7::D__(id__,
									 		   		    		    const_State_machine_cycleTime,
									 		   		    		    const_setPointRamping_rampStep)
									 		   		    )
									 		   		    )
									 		   		    )
									 		   		    )
									 		   		    )
									 		   		    )
									 		   		    )
									 		   		    )
									 		   		  )
									 		 )
									 		 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
									 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 		 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
									 		 [[j1::interrupt <- x__ | x__ <- {|internal__.NID_j1|}]]
									 		 [[j2::interrupt <- x__ | x__ <- {|internal__.NID_j2,internal__.NID_j2|}]]
									 		 [[j3::interrupt <- x__ | x__ <- {|internal__.NID_j3|}]]
									 		 [[j4::interrupt <- x__ | x__ <- {|internal__.NID_j4,internal__.NID_j4|}]]
									 		 [[j6::interrupt <- x__ | x__ <- {|internal__.NID_j6|}]]
									 		 [[j7::interrupt <- x__ | x__ <- {|internal__.NID_j7|}]]
									 		 )
									 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 		  [[set_setPoint <- setL_setPoint,set_HVEnabled <- setL_HVEnabled,set_currentState <- setL_currentState]]
									 		 )
									 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 		 			,setL_setPoint
									 		 			,setL_HVEnabled
									 		 			,setL_currentState
									 		|}) |]
									 		 ((i0::enter -> Transitions(id__,
									 		 		    const_State_machine_cycleTime,
									 		 		    const_setPointRamping_rampStep))
									 		  [[ share__ <- x__ | x__ <- {| share__,setL_setPoint,setL_HVEnabled,setL_currentState |} ]]
									 		 )
									 		)[[setL_setPoint <- set_setPoint,setL_HVEnabled <- set_HVEnabled,setL_currentState <- set_currentState]]
									 		)
									 	)
									 	 \ hideSet)
									 	[[
									 		ext_ActualHV__.x____ <- ext_ActualHV,
									 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
									 		ext_errorAck__.x____ <- ext_errorAck,
									 		ext_setPoint__.x____ <- ext_setPoint,
									 		int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1,
									 		int_enablePWM__.x____ <- int_enablePWM
									 		| x____ <- NIDS
									 	]]
									 )
									 )
									  [| union(stateClockSync,{terminate}) |]
									  StateClocks
									 )\diff(stateClockSync,enteredSS)))
									  [[ share__ <- x__ | x__ <- {| share__,setR_setPoint,setR_dutyCyclePWM1,setR_pow24VStatus,setR_ActualHV,setR_overLimit,setR_underLimit,setR_currentState,setR_HVEnabled,setR_newSetPoint,setR_mSetPoint |} ]] 
									  [[set_setPoint <- setL_setPoint,set_dutyCyclePWM1 <- setL_dutyCyclePWM1,set_pow24VStatus <- setL_pow24VStatus,set_ActualHV <- setL_ActualHV,set_overLimit <- setL_overLimit,set_underLimit <- setL_underLimit,set_currentState <- setL_currentState,set_HVEnabled <- setL_HVEnabled,set_newSetPoint <- setL_newSetPoint,set_mSetPoint <- setL_mSetPoint]]
									 )
									 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
									 			,setL_setPoint
									 			,setL_dutyCyclePWM1
									 			,setL_pow24VStatus
									 			,setL_ActualHV
									 			,setL_overLimit
									 			,setL_underLimit
									 			,setL_currentState
									 			,setL_HVEnabled
									 			,setL_newSetPoint
									 			,setL_mSetPoint
									 			,setR_setPoint
									 			 			,setR_dutyCyclePWM1
									 			 			,setR_pow24VStatus
									 			 			,setR_ActualHV
									 			 			,setR_overLimit
									 			 			,setR_underLimit
									 			 			,setR_currentState
									 			 			,setR_HVEnabled
									 			 			,setR_newSetPoint
									 			 			,setR_mSetPoint
									 			|}) |]
									 ((During)
									  [[ share__ <- x__ | x__ <- {| share__,setL_setPoint,setL_dutyCyclePWM1,setL_pow24VStatus,setL_ActualHV,setL_overLimit,setL_underLimit,setL_currentState,setL_HVEnabled,setL_newSetPoint,setL_mSetPoint |} ]]
									  [[set_setPoint <- setR_setPoint,set_dutyCyclePWM1 <- setR_dutyCyclePWM1,set_pow24VStatus <- setR_pow24VStatus,set_ActualHV <- setR_ActualHV,set_overLimit <- setR_overLimit,set_underLimit <- setR_underLimit,set_currentState <- setR_currentState,set_HVEnabled <- setR_HVEnabled,set_newSetPoint <- setR_newSetPoint,set_mSetPoint <- setR_mSetPoint]]
									 )
									)[[setL_setPoint <- set_setPoint,setL_dutyCyclePWM1 <- set_dutyCyclePWM1,setL_pow24VStatus <- set_pow24VStatus,setL_ActualHV <- set_ActualHV,setL_overLimit <- set_overLimit,setL_underLimit <- set_underLimit,setL_currentState <- set_currentState,setL_HVEnabled <- set_HVEnabled,setL_newSetPoint <- set_newSetPoint,setL_mSetPoint <- set_mSetPoint]]
									 [[setR_setPoint <- set_setPoint,setR_dutyCyclePWM1 <- set_dutyCyclePWM1,setR_pow24VStatus <- set_pow24VStatus,setR_ActualHV <- set_ActualHV,setR_overLimit <- set_overLimit,setR_underLimit <- set_underLimit,setR_currentState <- set_currentState,setR_HVEnabled <- set_HVEnabled,setR_newSetPoint <- set_newSetPoint,setR_mSetPoint <- set_mSetPoint]]
									)\union(enteredSS,{terminate}) 
								)
								During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
										 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> terminate -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(true & (share__choice(set_currentState!State_ClosedLoop -> SKIP))) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
							
								Behaviour 	= dbisim(
									((
									 ((dbisim((dbisim((let
									 	-- IMPLEMENTATION NOTE:
									 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
									 	-- modules for defining the semantics of each node.
									 	enterSS = {|
									 	i0::enter,
									 	j0::enter,
									 	j1::enter,
									 	j2::enter,
									 	j3::enter,
									 	j4::enter,
									 	j6::enter,
									 	s0::enter,
									 	j7::enter
									 	|}
									 	hideSet = union(enterSS,{|exit,exited,internal__|})
									 within 
									 	((let
									 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									 		-- because CSPM modules are used for the semantics of Node.
									 		flowevts = union(enterSS,{|exit,exited|})
									 		transSync = {|internal__.NID_i0,internal__.NID_j0,internal__.NID_j1,internal__.NID_j0,internal__.NID_j2,internal__.NID_j2,internal__.NID_j3,internal__.NID_s0,internal__.NID_j6,internal__.NID_j4,internal__.NID_j4,internal__.NID_j7|}
									 	within
									 		((
									 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
									 		   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									 		   		    i0::VS_O__(id__,
									 		   		    		    const_State_machine_cycleTime,
									 		   		    		    const_setPointRamping_rampStep)
									 		   		    [| { share__, terminate } |] (
									 		   		    j0::VS_O__(id__,
									 		   		    		    const_State_machine_cycleTime,
									 		   		    		    const_setPointRamping_rampStep)
									 		   		    [| { share__, terminate } |] (
									 		   		    j1::VS_O__(id__,
									 		   		    		    const_State_machine_cycleTime,
									 		   		    		    const_setPointRamping_rampStep)
									 		   		    [| { share__, terminate } |] (
									 		   		    j2::VS_O__(id__,
									 		   		    		    const_State_machine_cycleTime,
									 		   		    		    const_setPointRamping_rampStep)
									 		   		    [| { share__, terminate } |] (
									 		   		    j3::VS_O__(id__,
									 		   		    		    const_State_machine_cycleTime,
									 		   		    		    const_setPointRamping_rampStep)
									 		   		    [| { share__, terminate } |] (
									 		   		    j4::VS_O__(id__,
									 		   		    		    const_State_machine_cycleTime,
									 		   		    		    const_setPointRamping_rampStep)
									 		   		    [| { share__, terminate } |] (
									 		   		    j6::VS_O__(id__,
									 		   		    		    const_State_machine_cycleTime,
									 		   		    		    const_setPointRamping_rampStep)
									 		   		    [| { share__, terminate } |] (
									 		   		    s0::VS_O__(id__,
									 		   		    		    const_State_machine_cycleTime,
									 		   		    		    const_setPointRamping_rampStep)
									 		   		    [| { share__, terminate } |] (
									 		   		    j7::VS_O__(id__,
									 		   		    		    const_State_machine_cycleTime,
									 		   		    		    const_setPointRamping_rampStep)
									 		   		    )
									 		   		    )
									 		   		    )
									 		   		    )
									 		   		    )
									 		   		    )
									 		   		    )
									 		   		    )
									 		   		  )
									 		 )
									 		 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
									 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 		 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
									 		 [[j1::interrupt <- x__ | x__ <- {|internal__.NID_j1|}]]
									 		 [[j2::interrupt <- x__ | x__ <- {|internal__.NID_j2,internal__.NID_j2|}]]
									 		 [[j3::interrupt <- x__ | x__ <- {|internal__.NID_j3|}]]
									 		 [[j4::interrupt <- x__ | x__ <- {|internal__.NID_j4,internal__.NID_j4|}]]
									 		 [[j6::interrupt <- x__ | x__ <- {|internal__.NID_j6|}]]
									 		 [[j7::interrupt <- x__ | x__ <- {|internal__.NID_j7|}]]
									 		 )
									 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 		  [[set_setPoint <- setL_setPoint,set_HVEnabled <- setL_HVEnabled,set_currentState <- setL_currentState]]
									 		 )
									 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 		 			,setL_setPoint
									 		 			,setL_HVEnabled
									 		 			,setL_currentState
									 		|}) |]
									 		 ((i0::enter -> Transitions(id__,
									 		 		    const_State_machine_cycleTime,
									 		 		    const_setPointRamping_rampStep))
									 		  [[ share__ <- x__ | x__ <- {| share__,setL_setPoint,setL_HVEnabled,setL_currentState |} ]]
									 		 )
									 		)[[setL_setPoint <- set_setPoint,setL_HVEnabled <- set_HVEnabled,setL_currentState <- set_currentState]]
									 		)
									 	)
									 	 \ hideSet)
									 	[[
									 		ext_ActualHV__.x____ <- ext_ActualHV,
									 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
									 		ext_errorAck__.x____ <- ext_errorAck,
									 		ext_setPoint__.x____ <- ext_setPoint,
									 		int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1,
									 		int_enablePWM__.x____ <- int_enablePWM
									 		| x____ <- NIDS
									 	]]
									 )
									 )
									  [| union(stateClockSync,{terminate}) |]
									  StateClocks
									 )\diff(stateClockSync,enteredSS)))
									  [[ share__ <- x__ | x__ <- {| share__,setR_setPoint,setR_dutyCyclePWM1,setR_pow24VStatus,setR_ActualHV,setR_overLimit,setR_underLimit,setR_currentState,setR_HVEnabled,setR_newSetPoint,setR_mSetPoint |} ]] 
									  [[set_setPoint <- setL_setPoint,set_dutyCyclePWM1 <- setL_dutyCyclePWM1,set_pow24VStatus <- setL_pow24VStatus,set_ActualHV <- setL_ActualHV,set_overLimit <- setL_overLimit,set_underLimit <- setL_underLimit,set_currentState <- setL_currentState,set_HVEnabled <- setL_HVEnabled,set_newSetPoint <- setL_newSetPoint,set_mSetPoint <- setL_mSetPoint]]
									 )
									 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
									 			,setL_setPoint
									 			,setL_dutyCyclePWM1
									 			,setL_pow24VStatus
									 			,setL_ActualHV
									 			,setL_overLimit
									 			,setL_underLimit
									 			,setL_currentState
									 			,setL_HVEnabled
									 			,setL_newSetPoint
									 			,setL_mSetPoint
									 			,setR_setPoint
									 			 			,setR_dutyCyclePWM1
									 			 			,setR_pow24VStatus
									 			 			,setR_ActualHV
									 			 			,setR_overLimit
									 			 			,setR_underLimit
									 			 			,setR_currentState
									 			 			,setR_HVEnabled
									 			 			,setR_newSetPoint
									 			 			,setR_mSetPoint
									 			|}) |]
									 ((During)
									  [[ share__ <- x__ | x__ <- {| share__,setL_setPoint,setL_dutyCyclePWM1,setL_pow24VStatus,setL_ActualHV,setL_overLimit,setL_underLimit,setL_currentState,setL_HVEnabled,setL_newSetPoint,setL_mSetPoint |} ]]
									  [[set_setPoint <- setR_setPoint,set_dutyCyclePWM1 <- setR_dutyCyclePWM1,set_pow24VStatus <- setR_pow24VStatus,set_ActualHV <- setR_ActualHV,set_overLimit <- setR_overLimit,set_underLimit <- setR_underLimit,set_currentState <- setR_currentState,set_HVEnabled <- setR_HVEnabled,set_newSetPoint <- setR_newSetPoint,set_mSetPoint <- setR_mSetPoint]]
									 )
									)[[setL_setPoint <- set_setPoint,setL_dutyCyclePWM1 <- set_dutyCyclePWM1,setL_pow24VStatus <- set_pow24VStatus,setL_ActualHV <- set_ActualHV,setL_overLimit <- set_overLimit,setL_underLimit <- set_underLimit,setL_currentState <- set_currentState,setL_HVEnabled <- set_HVEnabled,setL_newSetPoint <- set_newSetPoint,setL_mSetPoint <- set_mSetPoint]]
									 [[setR_setPoint <- set_setPoint,setR_dutyCyclePWM1 <- set_dutyCyclePWM1,setR_pow24VStatus <- set_pow24VStatus,setR_ActualHV <- set_ActualHV,setR_overLimit <- set_overLimit,setR_underLimit <- set_underLimit,setR_currentState <- set_currentState,setR_HVEnabled <- set_HVEnabled,setR_newSetPoint <- set_newSetPoint,setR_mSetPoint <- set_mSetPoint]]
									)\{terminate} 
								)
								During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
										 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> terminate -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							Transitions(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = ((let
								Trans = get_setPoint?setPoint -> get_HVEnabled?HVEnabled -> get_currentState?currentState -> TimeOut_1(
									 (share__ -> SKIP
									 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; j7::enter -> SKIP))))
									 [] dbisim((((setPoint!=0) and (HVEnabled==false)))&(internal__!NID_j0 -> SKIP ;  ((share__choice(true & (share__choice(set_HVEnabled!true -> SKIP))) ; j1::enter -> SKIP))))
									 [] dbisim((true)&(internal__!NID_j1 -> SKIP ;  ((true&CALL__supplyVoltCheck(
									 			id__
									 		) ; j2::enter -> SKIP))))
									 [] dbisim((((setPoint==0) or (HVEnabled==true)))&(internal__!NID_j0 -> SKIP ;  ((SKIP ; j3::enter -> SKIP))))
									 [] dbisim(((HVEnabled==true))&(internal__!NID_j2 -> SKIP ;  ((true&CALL__enableHV(
									 			id__
									 		) ; j3::enter -> SKIP))))
									 [] dbisim(((HVEnabled==false))&(internal__!NID_j2 -> SKIP ;  ((SKIP ; j3::enter -> SKIP))))
									 [] dbisim((true)&(internal__!NID_j3 -> SKIP ;  ((true&CALL__checkLimits(
									 			id__
									 		) ; j4::enter -> SKIP))))
									 [] dbisim(((currentState==State_ClosedLoop))&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SHARE_WAIT(const_State_machine_cycleTime) ; j7::enter -> SKIP)))
									 [] dbisim((true)&(internal__!NID_j6 -> SKIP ;  ((true&CALL__PID_Control(
									 			id__
									 		) ; s0::enter -> SKIP))))
									 [] dbisim(((HVEnabled==true))&(internal__!NID_j4 -> SKIP ;  ((Deadline(true&(share__choice(ext_setPoint.in?setPoint -> (SStop /\ set_setPoint!setPoint -> SKIP))),0);share__choice(get_setPoint?setPoint -> true&CALL__setPointRamping(
									 			id__,
									 			setPoint,
									 			const_setPointRamping_rampStep
									 		)) ; j6::enter -> SKIP))))
									 [] dbisim(((HVEnabled==false))&(internal__!NID_j4 -> SKIP ;  ((SKIP ; j6::enter -> SKIP))))
									 [] dbisim((true)&(internal__!NID_j7 -> SKIP ;  ((Deadline(true&(share__choice(ext_setPoint.in?setPoint -> (SStop /\ set_setPoint!setPoint -> SKIP))),0);share__choice(get_setPoint?setPoint -> true&(if ((setPoint==0)) then (true&CALL__disableHV(
									 			id__,
									 			false
									 		)) else (SKIP))) ; j0::enter -> SKIP))))
									 []
									 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
									 []
									 terminate -> SKIP
									 )
								,SKIP);Trans
							within
								Trans [|{terminate}|> SKIP
							)
							)
							
							
							-- Clocks
							Clock_CLID_s0(x__) = 
								TimeOut_1(
									s0::entered -> Clock_CLID_s0(0)
									[]
									get_CLID_s0!x__ -> Clock_CLID_s0(x__)
									[]
									terminate -> SKIP,Clock_CLID_s0(Plus(x__,1,CLID_s0_clock_type)))
							
							StateClocks = dbisim(Clock_CLID_s0(0))
							
							stateClockSync = {|get_CLID_s0,s0::entered|}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = D__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: Wait24Vpower
					module Wait24Vpower
					
					enterSS = 
							{|			i0::enter,
								j0::enter,
								j1::enter,
								f0::enter
							|}
					enteredSS = 
							{|			f0::entered
							|}
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						-- declaring identifiers of transitions
						datatype NIDS = 
						              NID_i0|
						              NID_j0|
						              NID_j1|
						              NID_f0
						
						channel internal__ : NIDS
						channel ext_ActualHV__: NIDS.InOut.core_real
						channel ext_pow24VStatus__: NIDS.InOut.Power
						channel ext_errorAck__: NIDS.InOut
						channel ext_setPoint__: NIDS.InOut.core_real
						channel int_dutyCyclePWM1__: NIDS.InOut.duty
						channel int_enablePWM__: NIDS.InOut.core_boolean
						
						channel get_CLID_f0 : CLID_f0_clock_type
						
						--channel increment__
						
						CLID_f0_clock_type = {0..(clock_type_max(Union({
						{}
						}))+1)}
						
						--	Nodes
						-- declaring all nodes
						
						----------------------------------------------------------------------
						-- Initial: i0
						module i0
						exports
						
							channel enter, interrupt
							
							Timed(OneStep) {
								D__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep) = 
									dbisim(let
										Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
										
										Termination = terminate -> SKIP
										
										Active 		= share__choice(interrupt -> SKIP) ; Inactive
									within
										Inactive [| {terminate} |> SKIP)
								
								VS_O__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep) = D__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep)
							}
						
						endmodule
						----------------------------------------------------------------------
						
						
						----------------------------------------------------------------------
						-- Junction: j0
						module j0
						exports
						
							channel enter, interrupt
							
							Timed(OneStep) {
								D__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep) = 
									dbisim(let
										Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
										
										Active 		= share__choice(interrupt -> SKIP) ; Inactive
									within
										Inactive [| {terminate} |> SKIP)
									
								VS_O__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep) = D__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep)
							}
						
						endmodule
						----------------------------------------------------------------------
						
						
						----------------------------------------------------------------------
						-- Junction: j1
						module j1
						exports
						
							channel enter, interrupt
							
							Timed(OneStep) {
								D__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep) = 
									dbisim(let
										Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
										
										Active 		= share__choice(interrupt -> SKIP) ; Inactive
									within
										Inactive [| {terminate} |> SKIP)
									
								VS_O__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep) = D__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep)
							}
						
						endmodule
						----------------------------------------------------------------------
						
						
						----------------------------------------------------------------------
						-- Final state: f0
						module f0
						
						exports
						
							channel enter, entered, interrupt
							channel enteredL, enteredR
							
							Timed(OneStep) {
								--	Rule: behaviours(Node)
								D__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep) = 
									dbisim(let
										Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
										
										Entering 	= entered -> SKIP ; Active
										Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
										Interrupted	= share__choice(exit -> exited -> Inactive)
									within
										Inactive [| {terminate} |> SKIP)
									
								VS_O__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep) = D__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep)
							}
						
						endmodule
						----------------------------------------------------------------------
						
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(true & (share__choice(set_currentState!State_Wait24Vpower -> SKIP))) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
							
								Behaviour 	= dbisim(
									((
									 ((dbisim((dbisim((let
									 	-- IMPLEMENTATION NOTE:
									 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
									 	-- modules for defining the semantics of each node.
									 	enterSS = {|
									 	i0::enter,
									 	j0::enter,
									 	j1::enter,
									 	f0::enter
									 	|}
									 	hideSet = union(enterSS,{|exit,exited,internal__|})
									 within 
									 	((let
									 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									 		-- because CSPM modules are used for the semantics of Node.
									 		flowevts = union(enterSS,{|exit,exited|})
									 		transSync = {|internal__.NID_i0,internal__.NID_j0,internal__.NID_j1,internal__.NID_j1,internal__.NID_j1|}
									 	within
									 		((
									 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
									 		   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									 		   		    i0::D__(id__,
									 		   		    		    const_State_machine_cycleTime,
									 		   		    		    const_setPointRamping_rampStep)
									 		   		    [| { share__, terminate } |] (
									 		   		    j0::D__(id__,
									 		   		    		    const_State_machine_cycleTime,
									 		   		    		    const_setPointRamping_rampStep)
									 		   		    [| { share__, terminate } |] (
									 		   		    j1::D__(id__,
									 		   		    		    const_State_machine_cycleTime,
									 		   		    		    const_setPointRamping_rampStep)
									 		   		    [| { share__, terminate } |] (
									 		   		    f0::D__(id__,
									 		   		    		    const_State_machine_cycleTime,
									 		   		    		    const_setPointRamping_rampStep)
									 		   		    )
									 		   		    )
									 		   		    )
									 		   		  )
									 		 )
									 		 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 		 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0|}]]
									 		 [[j1::interrupt <- x__ | x__ <- {|internal__.NID_j1,internal__.NID_j1,internal__.NID_j1|}]]
									 		 )
									 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 		  [[set_setPoint <- setL_setPoint,set_pow24VStatus <- setL_pow24VStatus]]
									 		 )
									 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 		 			,setL_setPoint
									 		 			,setL_pow24VStatus
									 		|}) |]
									 		 ((i0::enter -> Transitions(id__,
									 		 		    const_State_machine_cycleTime,
									 		 		    const_setPointRamping_rampStep))
									 		  [[ share__ <- x__ | x__ <- {| share__,setL_setPoint,setL_pow24VStatus |} ]]
									 		 )
									 		)[[setL_setPoint <- set_setPoint,setL_pow24VStatus <- set_pow24VStatus]]
									 		)
									 	)
									 	 \ hideSet)
									 	[[
									 		ext_ActualHV__.x____ <- ext_ActualHV,
									 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
									 		ext_errorAck__.x____ <- ext_errorAck,
									 		ext_setPoint__.x____ <- ext_setPoint,
									 		int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1,
									 		int_enablePWM__.x____ <- int_enablePWM
									 		| x____ <- NIDS
									 	]]
									 )
									 )
									  [| union(stateClockSync,{terminate}) |]
									  StateClocks
									 )\diff(stateClockSync,enteredSS)))
									  [[ share__ <- x__ | x__ <- {| share__,setR_setPoint,setR_dutyCyclePWM1,setR_pow24VStatus,setR_ActualHV,setR_overLimit,setR_underLimit,setR_currentState,setR_HVEnabled,setR_newSetPoint,setR_mSetPoint |} ]] 
									  [[set_setPoint <- setL_setPoint,set_dutyCyclePWM1 <- setL_dutyCyclePWM1,set_pow24VStatus <- setL_pow24VStatus,set_ActualHV <- setL_ActualHV,set_overLimit <- setL_overLimit,set_underLimit <- setL_underLimit,set_currentState <- setL_currentState,set_HVEnabled <- setL_HVEnabled,set_newSetPoint <- setL_newSetPoint,set_mSetPoint <- setL_mSetPoint]]
									 )
									 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
									 			,setL_setPoint
									 			,setL_dutyCyclePWM1
									 			,setL_pow24VStatus
									 			,setL_ActualHV
									 			,setL_overLimit
									 			,setL_underLimit
									 			,setL_currentState
									 			,setL_HVEnabled
									 			,setL_newSetPoint
									 			,setL_mSetPoint
									 			,setR_setPoint
									 			 			,setR_dutyCyclePWM1
									 			 			,setR_pow24VStatus
									 			 			,setR_ActualHV
									 			 			,setR_overLimit
									 			 			,setR_underLimit
									 			 			,setR_currentState
									 			 			,setR_HVEnabled
									 			 			,setR_newSetPoint
									 			 			,setR_mSetPoint
									 			|}) |]
									 ((During)
									  [[ share__ <- x__ | x__ <- {| share__,setL_setPoint,setL_dutyCyclePWM1,setL_pow24VStatus,setL_ActualHV,setL_overLimit,setL_underLimit,setL_currentState,setL_HVEnabled,setL_newSetPoint,setL_mSetPoint |} ]]
									  [[set_setPoint <- setR_setPoint,set_dutyCyclePWM1 <- setR_dutyCyclePWM1,set_pow24VStatus <- setR_pow24VStatus,set_ActualHV <- setR_ActualHV,set_overLimit <- setR_overLimit,set_underLimit <- setR_underLimit,set_currentState <- setR_currentState,set_HVEnabled <- setR_HVEnabled,set_newSetPoint <- setR_newSetPoint,set_mSetPoint <- setR_mSetPoint]]
									 )
									)[[setL_setPoint <- set_setPoint,setL_dutyCyclePWM1 <- set_dutyCyclePWM1,setL_pow24VStatus <- set_pow24VStatus,setL_ActualHV <- set_ActualHV,setL_overLimit <- set_overLimit,setL_underLimit <- set_underLimit,setL_currentState <- set_currentState,setL_HVEnabled <- set_HVEnabled,setL_newSetPoint <- set_newSetPoint,setL_mSetPoint <- set_mSetPoint]]
									 [[setR_setPoint <- set_setPoint,setR_dutyCyclePWM1 <- set_dutyCyclePWM1,setR_pow24VStatus <- set_pow24VStatus,setR_ActualHV <- set_ActualHV,setR_overLimit <- set_overLimit,setR_underLimit <- set_underLimit,setR_currentState <- set_currentState,setR_HVEnabled <- set_HVEnabled,setR_newSetPoint <- set_newSetPoint,setR_mSetPoint <- set_mSetPoint]]
									)\union(enteredSS,{terminate}) 
								)
								During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
										 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> terminate -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(true & (share__choice(set_currentState!State_Wait24Vpower -> SKIP))) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
							
								Behaviour 	= dbisim(
									((
									 ((dbisim((dbisim((let
									 	-- IMPLEMENTATION NOTE:
									 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
									 	-- modules for defining the semantics of each node.
									 	enterSS = {|
									 	i0::enter,
									 	j0::enter,
									 	j1::enter,
									 	f0::enter
									 	|}
									 	hideSet = union(enterSS,{|exit,exited,internal__|})
									 within 
									 	((let
									 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									 		-- because CSPM modules are used for the semantics of Node.
									 		flowevts = union(enterSS,{|exit,exited|})
									 		transSync = {|internal__.NID_i0,internal__.NID_j0,internal__.NID_j1,internal__.NID_j1,internal__.NID_j1|}
									 	within
									 		((
									 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
									 		   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									 		   		    i0::VS_O__(id__,
									 		   		    		    const_State_machine_cycleTime,
									 		   		    		    const_setPointRamping_rampStep)
									 		   		    [| { share__, terminate } |] (
									 		   		    j0::VS_O__(id__,
									 		   		    		    const_State_machine_cycleTime,
									 		   		    		    const_setPointRamping_rampStep)
									 		   		    [| { share__, terminate } |] (
									 		   		    j1::VS_O__(id__,
									 		   		    		    const_State_machine_cycleTime,
									 		   		    		    const_setPointRamping_rampStep)
									 		   		    [| { share__, terminate } |] (
									 		   		    f0::VS_O__(id__,
									 		   		    		    const_State_machine_cycleTime,
									 		   		    		    const_setPointRamping_rampStep)
									 		   		    )
									 		   		    )
									 		   		    )
									 		   		  )
									 		 )
									 		 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 		 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0|}]]
									 		 [[j1::interrupt <- x__ | x__ <- {|internal__.NID_j1,internal__.NID_j1,internal__.NID_j1|}]]
									 		 )
									 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 		  [[set_setPoint <- setL_setPoint,set_pow24VStatus <- setL_pow24VStatus]]
									 		 )
									 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 		 			,setL_setPoint
									 		 			,setL_pow24VStatus
									 		|}) |]
									 		 ((i0::enter -> Transitions(id__,
									 		 		    const_State_machine_cycleTime,
									 		 		    const_setPointRamping_rampStep))
									 		  [[ share__ <- x__ | x__ <- {| share__,setL_setPoint,setL_pow24VStatus |} ]]
									 		 )
									 		)[[setL_setPoint <- set_setPoint,setL_pow24VStatus <- set_pow24VStatus]]
									 		)
									 	)
									 	 \ hideSet)
									 	[[
									 		ext_ActualHV__.x____ <- ext_ActualHV,
									 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
									 		ext_errorAck__.x____ <- ext_errorAck,
									 		ext_setPoint__.x____ <- ext_setPoint,
									 		int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1,
									 		int_enablePWM__.x____ <- int_enablePWM
									 		| x____ <- NIDS
									 	]]
									 )
									 )
									  [| union(stateClockSync,{terminate}) |]
									  StateClocks
									 )\diff(stateClockSync,enteredSS)))
									  [[ share__ <- x__ | x__ <- {| share__,setR_setPoint,setR_dutyCyclePWM1,setR_pow24VStatus,setR_ActualHV,setR_overLimit,setR_underLimit,setR_currentState,setR_HVEnabled,setR_newSetPoint,setR_mSetPoint |} ]] 
									  [[set_setPoint <- setL_setPoint,set_dutyCyclePWM1 <- setL_dutyCyclePWM1,set_pow24VStatus <- setL_pow24VStatus,set_ActualHV <- setL_ActualHV,set_overLimit <- setL_overLimit,set_underLimit <- setL_underLimit,set_currentState <- setL_currentState,set_HVEnabled <- setL_HVEnabled,set_newSetPoint <- setL_newSetPoint,set_mSetPoint <- setL_mSetPoint]]
									 )
									 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
									 			,setL_setPoint
									 			,setL_dutyCyclePWM1
									 			,setL_pow24VStatus
									 			,setL_ActualHV
									 			,setL_overLimit
									 			,setL_underLimit
									 			,setL_currentState
									 			,setL_HVEnabled
									 			,setL_newSetPoint
									 			,setL_mSetPoint
									 			,setR_setPoint
									 			 			,setR_dutyCyclePWM1
									 			 			,setR_pow24VStatus
									 			 			,setR_ActualHV
									 			 			,setR_overLimit
									 			 			,setR_underLimit
									 			 			,setR_currentState
									 			 			,setR_HVEnabled
									 			 			,setR_newSetPoint
									 			 			,setR_mSetPoint
									 			|}) |]
									 ((During)
									  [[ share__ <- x__ | x__ <- {| share__,setL_setPoint,setL_dutyCyclePWM1,setL_pow24VStatus,setL_ActualHV,setL_overLimit,setL_underLimit,setL_currentState,setL_HVEnabled,setL_newSetPoint,setL_mSetPoint |} ]]
									  [[set_setPoint <- setR_setPoint,set_dutyCyclePWM1 <- setR_dutyCyclePWM1,set_pow24VStatus <- setR_pow24VStatus,set_ActualHV <- setR_ActualHV,set_overLimit <- setR_overLimit,set_underLimit <- setR_underLimit,set_currentState <- setR_currentState,set_HVEnabled <- setR_HVEnabled,set_newSetPoint <- setR_newSetPoint,set_mSetPoint <- setR_mSetPoint]]
									 )
									)[[setL_setPoint <- set_setPoint,setL_dutyCyclePWM1 <- set_dutyCyclePWM1,setL_pow24VStatus <- set_pow24VStatus,setL_ActualHV <- set_ActualHV,setL_overLimit <- set_overLimit,setL_underLimit <- set_underLimit,setL_currentState <- set_currentState,setL_HVEnabled <- set_HVEnabled,setL_newSetPoint <- set_newSetPoint,setL_mSetPoint <- set_mSetPoint]]
									 [[setR_setPoint <- set_setPoint,setR_dutyCyclePWM1 <- set_dutyCyclePWM1,setR_pow24VStatus <- set_pow24VStatus,setR_ActualHV <- set_ActualHV,setR_overLimit <- set_overLimit,setR_underLimit <- set_underLimit,setR_currentState <- set_currentState,setR_HVEnabled <- set_HVEnabled,setR_newSetPoint <- set_newSetPoint,setR_mSetPoint <- set_mSetPoint]]
									)\{terminate} 
								)
								During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
										 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> terminate -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							Transitions(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = ((let
								Trans = get_setPoint?setPoint -> get_pow24VStatus?pow24VStatus -> TimeOut_1(
									 (share__ -> SKIP
									 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; j0::enter -> SKIP))))
									 [] dbisim((true)&(internal__!NID_j0 -> SKIP ;  ((true&CALL__disableHV(
									 			id__,
									 			false
									 		);true&CALL__supplyVoltCheck(
									 			id__
									 		);Deadline(true&(share__choice(ext_setPoint.in?setPoint -> (SStop /\ set_setPoint!setPoint -> SKIP))),0) ; j1::enter -> SKIP))))
									 [] dbisim(((setPoint!=0))&(internal__!NID_j1 -> SKIP ;  ((true&CALL__disableHV(
									 			id__,
									 			true
									 		);SHARE_WAIT(const_State_machine_cycleTime) ; f0::enter -> SKIP))))
									 [] dbisim((((pow24VStatus==Power_On) and (setPoint==0)))&(internal__!NID_j1 -> SKIP ;  ((SHARE_WAIT(const_State_machine_cycleTime) ; f0::enter -> SKIP))))
									 [] dbisim(((not (((((setPoint!=0)) or ((pow24VStatus==Power_On)))))))&(internal__!NID_j1 -> SKIP ;  ((SHARE_WAIT(const_State_machine_cycleTime) ; j0::enter -> SKIP))))
									 []
									 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
									 []
									 terminate -> SKIP
									 )
								,SKIP);Trans
							within
								Trans [|{terminate}|> SKIP
							)
							)
							
							
							-- Clocks
							Clock_CLID_f0(x__) = 
								TimeOut_1(
									f0::entered -> Clock_CLID_f0(0)
									[]
									get_CLID_f0!x__ -> Clock_CLID_f0(x__)
									[]
									terminate -> SKIP,Clock_CLID_f0(Plus(x__,1,CLID_f0_clock_type)))
							
							StateClocks = dbisim(Clock_CLID_f0(0))
							
							stateClockSync = {|get_CLID_f0,f0::entered|}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: ErrorMode
					module ErrorMode
					
					enterSS = 
							{|			i0::enter,
								s0::enter,
								f0::enter
							|}
					enteredSS = 
							{|			s0::entered,
								f0::entered
							|}
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						-- declaring identifiers of transitions
						datatype NIDS = 
						              NID_i0|
						              NID_s0|
						              NID_f0
						
						channel internal__ : NIDS
						channel ext_ActualHV__: NIDS.InOut.core_real
						channel ext_pow24VStatus__: NIDS.InOut.Power
						channel ext_errorAck__: NIDS.InOut
						channel ext_setPoint__: NIDS.InOut.core_real
						channel int_dutyCyclePWM1__: NIDS.InOut.duty
						channel int_enablePWM__: NIDS.InOut.core_boolean
						
						channel get_CLID_s0 : CLID_s0_clock_type
						channel get_CLID_f0 : CLID_f0_clock_type
						
						--channel increment__
						
						CLID_s0_clock_type = {0..(clock_type_max(Union({
						{}
						}))+1)}
						CLID_f0_clock_type = {0..(clock_type_max(Union({
						{}
						}))+1)}
						
						--	Nodes
						-- declaring all nodes
						
						----------------------------------------------------------------------
						-- Initial: i0
						module i0
						exports
						
							channel enter, interrupt
							
							Timed(OneStep) {
								D__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep) = 
									dbisim(let
										Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
										
										Termination = terminate -> SKIP
										
										Active 		= share__choice(interrupt -> SKIP) ; Inactive
									within
										Inactive [| {terminate} |> SKIP)
								
								VS_O__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep) = D__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep)
							}
						
						endmodule
						----------------------------------------------------------------------
						
						
						----------------------------------------------------------------------
						-- State: s0
						module s0
						
						enterSS = {}
						
						enteredSS = {}
						
						exports
						
							--  Declarations
							
							channel enter, entered, interrupt
							channel enteredL, enteredR
							
											
							
							
							--channel increment__
							
							
							--	Nodes
							-- declaring all nodes
							
							
							Timed(OneStep) {
								--	Rule: behaviours(Node)
								--  Note that FDR has problems with efficiently compiling the process below
								-- 	if using a different recursion pattern.
								D__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep) = 
								dbisim(let
									-- IMPLEMENTATION NOTE: 
									-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
									-- however FDR struggles with that form in certain cases. So we use the exception operator
									-- instead to 'terminate'.
									
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= true&CALL__disableHV(
												id__,
												false
											);DoClockReset({clockReset.CLID_Cl1}) ; 
											 	  Behaviour ; 
											 	  share__choice(exit -> SKIP) ; SKIP ; 
											 	  share__choice(exited -> SKIP) ; Inactive
								
									Behaviour 	= entered -> During
									During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
								within
									Inactive [| {terminate} |> SKIP)
									
								VS_O__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= true&CALL__disableHV(
												id__,
												false
											);DoClockReset({clockReset.CLID_Cl1}) ; 
											 	  Behaviour ; 
											 	  share__choice(exit -> SKIP) ; SKIP ; 
											 	  share__choice(exited -> SKIP) ; Inactive
								
									Behaviour 	= entered -> During
									During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
								within
									Inactive [| {terminate} |> SKIP)
								
								
								-- Clocks
								
								StateClocks = terminate -> SKIP
								
								stateClockSync = {||}
							}
						
						endmodule
						----------------------------------------------------------------------
						
						
						----------------------------------------------------------------------
						-- Final state: f0
						module f0
						
						exports
						
							channel enter, entered, interrupt
							channel enteredL, enteredR
							
							Timed(OneStep) {
								--	Rule: behaviours(Node)
								D__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep) = 
									dbisim(let
										Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
										
										Entering 	= entered -> SKIP ; Active
										Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
										Interrupted	= share__choice(exit -> exited -> Inactive)
									within
										Inactive [| {terminate} |> SKIP)
									
								VS_O__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep) = D__(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep)
							}
						
						endmodule
						----------------------------------------------------------------------
						
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(true & (share__choice(set_currentState!State_ErrorMode -> SKIP))) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
							
								Behaviour 	= dbisim(
									((
									 ((dbisim((dbisim((let
									 	-- IMPLEMENTATION NOTE:
									 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
									 	-- modules for defining the semantics of each node.
									 	enterSS = {|
									 	i0::enter,
									 	s0::enter,
									 	f0::enter
									 	|}
									 	hideSet = union(enterSS,{|exit,exited,internal__|})
									 within 
									 	((let
									 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									 		-- because CSPM modules are used for the semantics of Node.
									 		flowevts = union(enterSS,{|exit,exited|})
									 		transSync = {|internal__.NID_i0,internal__.NID_s0,ext_errorAck__.NID_s0.in|}
									 	within
									 		((
									 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
									 		   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									 		   		    i0::D__(id__,
									 		   		    		    const_State_machine_cycleTime,
									 		   		    		    const_setPointRamping_rampStep)
									 		   		    [| { share__, terminate } |] (
									 		   		    s0::D__(id__,
									 		   		    		    const_State_machine_cycleTime,
									 		   		    		    const_setPointRamping_rampStep)
									 		   		    [| { share__, terminate } |] (
									 		   		    f0::D__(id__,
									 		   		    		    const_State_machine_cycleTime,
									 		   		    		    const_setPointRamping_rampStep)
									 		   		    )
									 		   		    )
									 		   		  )
									 		 )
									 		 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0,ext_errorAck__.NID_s0.in|}]]
									 		 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 		 )
									 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 		  [[clockReset.CLID_Cl1 <- clockResetL.CLID_Cl1]]
									 		 )
									 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 		 			,clockResetL.CLID_Cl1
									 		|}) |]
									 		 ((i0::enter -> Transitions(id__,
									 		 		    const_State_machine_cycleTime,
									 		 		    const_setPointRamping_rampStep))
									 		  [[ share__ <- x__ | x__ <- {| share__,clockResetL.CLID_Cl1 |} ]]
									 		 )
									 		)[[clockResetL.CLID_Cl1 <- clockReset.CLID_Cl1]]
									 		)
									 	)
									 	 \ hideSet)
									 	[[
									 		ext_ActualHV__.x____ <- ext_ActualHV,
									 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
									 		ext_errorAck__.x____ <- ext_errorAck,
									 		ext_setPoint__.x____ <- ext_setPoint,
									 		int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1,
									 		int_enablePWM__.x____ <- int_enablePWM
									 		| x____ <- NIDS
									 	]]
									 )
									 )
									  [| union(stateClockSync,{terminate}) |]
									  StateClocks
									 )\diff(stateClockSync,enteredSS)))
									  [[ share__ <- x__ | x__ <- {| share__,setR_pow24VStatus,setR_overLimit,setR_currentState,setR_setPoint,setR_dutyCyclePWM1,setR_ActualHV,setR_underLimit,setR_HVEnabled,setR_newSetPoint,setR_mSetPoint |} ]] 
									  [[set_setPoint <- setL_setPoint,set_dutyCyclePWM1 <- setL_dutyCyclePWM1,set_pow24VStatus <- setL_pow24VStatus,set_ActualHV <- setL_ActualHV,set_overLimit <- setL_overLimit,set_underLimit <- setL_underLimit,set_currentState <- setL_currentState,set_HVEnabled <- setL_HVEnabled,set_newSetPoint <- setL_newSetPoint,set_mSetPoint <- setL_mSetPoint]]
									 )
									 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
									 			,setL_setPoint
									 			,setL_dutyCyclePWM1
									 			,setL_pow24VStatus
									 			,setL_ActualHV
									 			,setL_overLimit
									 			,setL_underLimit
									 			,setL_currentState
									 			,setL_HVEnabled
									 			,setL_newSetPoint
									 			,setL_mSetPoint
									 			,setR_pow24VStatus
									 			 			,setR_overLimit
									 			 			,setR_currentState
									 			 			,setR_setPoint
									 			 			,setR_dutyCyclePWM1
									 			 			,setR_ActualHV
									 			 			,setR_underLimit
									 			 			,setR_HVEnabled
									 			 			,setR_newSetPoint
									 			 			,setR_mSetPoint
									 			|}) |]
									 ((During)
									  [[ share__ <- x__ | x__ <- {| share__,setL_setPoint,setL_dutyCyclePWM1,setL_pow24VStatus,setL_ActualHV,setL_overLimit,setL_underLimit,setL_currentState,setL_HVEnabled,setL_newSetPoint,setL_mSetPoint |} ]]
									  [[set_pow24VStatus <- setR_pow24VStatus,set_overLimit <- setR_overLimit,set_currentState <- setR_currentState,set_setPoint <- setR_setPoint,set_dutyCyclePWM1 <- setR_dutyCyclePWM1,set_ActualHV <- setR_ActualHV,set_underLimit <- setR_underLimit,set_HVEnabled <- setR_HVEnabled,set_newSetPoint <- setR_newSetPoint,set_mSetPoint <- setR_mSetPoint]]
									 )
									)[[setL_setPoint <- set_setPoint,setL_dutyCyclePWM1 <- set_dutyCyclePWM1,setL_pow24VStatus <- set_pow24VStatus,setL_ActualHV <- set_ActualHV,setL_overLimit <- set_overLimit,setL_underLimit <- set_underLimit,setL_currentState <- set_currentState,setL_HVEnabled <- set_HVEnabled,setL_newSetPoint <- set_newSetPoint,setL_mSetPoint <- set_mSetPoint]]
									 [[setR_pow24VStatus <- set_pow24VStatus,setR_overLimit <- set_overLimit,setR_currentState <- set_currentState,setR_setPoint <- set_setPoint,setR_dutyCyclePWM1 <- set_dutyCyclePWM1,setR_ActualHV <- set_ActualHV,setR_underLimit <- set_underLimit,setR_HVEnabled <- set_HVEnabled,setR_newSetPoint <- set_newSetPoint,setR_mSetPoint <- set_mSetPoint]]
									)\union(enteredSS,{terminate}) 
								)
								During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
										 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> terminate -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(true & (share__choice(set_currentState!State_ErrorMode -> SKIP))) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
							
								Behaviour 	= dbisim(
									((
									 ((dbisim((dbisim((let
									 	-- IMPLEMENTATION NOTE:
									 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
									 	-- modules for defining the semantics of each node.
									 	enterSS = {|
									 	i0::enter,
									 	s0::enter,
									 	f0::enter
									 	|}
									 	hideSet = union(enterSS,{|exit,exited,internal__|})
									 within 
									 	((let
									 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									 		-- because CSPM modules are used for the semantics of Node.
									 		flowevts = union(enterSS,{|exit,exited|})
									 		transSync = {|internal__.NID_i0,internal__.NID_s0,ext_errorAck__.NID_s0.in|}
									 	within
									 		((
									 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
									 		   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									 		   		    i0::VS_O__(id__,
									 		   		    		    const_State_machine_cycleTime,
									 		   		    		    const_setPointRamping_rampStep)
									 		   		    [| { share__, terminate } |] (
									 		   		    s0::VS_O__(id__,
									 		   		    		    const_State_machine_cycleTime,
									 		   		    		    const_setPointRamping_rampStep)
									 		   		    [| { share__, terminate } |] (
									 		   		    f0::VS_O__(id__,
									 		   		    		    const_State_machine_cycleTime,
									 		   		    		    const_setPointRamping_rampStep)
									 		   		    )
									 		   		    )
									 		   		  )
									 		 )
									 		 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0,ext_errorAck__.NID_s0.in|}]]
									 		 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 		 )
									 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 		  [[clockReset.CLID_Cl1 <- clockResetL.CLID_Cl1]]
									 		 )
									 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 		 			,clockResetL.CLID_Cl1
									 		|}) |]
									 		 ((i0::enter -> Transitions(id__,
									 		 		    const_State_machine_cycleTime,
									 		 		    const_setPointRamping_rampStep))
									 		  [[ share__ <- x__ | x__ <- {| share__,clockResetL.CLID_Cl1 |} ]]
									 		 )
									 		)[[clockResetL.CLID_Cl1 <- clockReset.CLID_Cl1]]
									 		)
									 	)
									 	 \ hideSet)
									 	[[
									 		ext_ActualHV__.x____ <- ext_ActualHV,
									 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
									 		ext_errorAck__.x____ <- ext_errorAck,
									 		ext_setPoint__.x____ <- ext_setPoint,
									 		int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1,
									 		int_enablePWM__.x____ <- int_enablePWM
									 		| x____ <- NIDS
									 	]]
									 )
									 )
									  [| union(stateClockSync,{terminate}) |]
									  StateClocks
									 )\diff(stateClockSync,enteredSS)))
									  [[ share__ <- x__ | x__ <- {| share__,setR_pow24VStatus,setR_overLimit,setR_currentState,setR_setPoint,setR_dutyCyclePWM1,setR_ActualHV,setR_underLimit,setR_HVEnabled,setR_newSetPoint,setR_mSetPoint |} ]] 
									  [[set_setPoint <- setL_setPoint,set_dutyCyclePWM1 <- setL_dutyCyclePWM1,set_pow24VStatus <- setL_pow24VStatus,set_ActualHV <- setL_ActualHV,set_overLimit <- setL_overLimit,set_underLimit <- setL_underLimit,set_currentState <- setL_currentState,set_HVEnabled <- setL_HVEnabled,set_newSetPoint <- setL_newSetPoint,set_mSetPoint <- setL_mSetPoint]]
									 )
									 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
									 			,setL_setPoint
									 			,setL_dutyCyclePWM1
									 			,setL_pow24VStatus
									 			,setL_ActualHV
									 			,setL_overLimit
									 			,setL_underLimit
									 			,setL_currentState
									 			,setL_HVEnabled
									 			,setL_newSetPoint
									 			,setL_mSetPoint
									 			,setR_pow24VStatus
									 			 			,setR_overLimit
									 			 			,setR_currentState
									 			 			,setR_setPoint
									 			 			,setR_dutyCyclePWM1
									 			 			,setR_ActualHV
									 			 			,setR_underLimit
									 			 			,setR_HVEnabled
									 			 			,setR_newSetPoint
									 			 			,setR_mSetPoint
									 			|}) |]
									 ((During)
									  [[ share__ <- x__ | x__ <- {| share__,setL_setPoint,setL_dutyCyclePWM1,setL_pow24VStatus,setL_ActualHV,setL_overLimit,setL_underLimit,setL_currentState,setL_HVEnabled,setL_newSetPoint,setL_mSetPoint |} ]]
									  [[set_pow24VStatus <- setR_pow24VStatus,set_overLimit <- setR_overLimit,set_currentState <- setR_currentState,set_setPoint <- setR_setPoint,set_dutyCyclePWM1 <- setR_dutyCyclePWM1,set_ActualHV <- setR_ActualHV,set_underLimit <- setR_underLimit,set_HVEnabled <- setR_HVEnabled,set_newSetPoint <- setR_newSetPoint,set_mSetPoint <- setR_mSetPoint]]
									 )
									)[[setL_setPoint <- set_setPoint,setL_dutyCyclePWM1 <- set_dutyCyclePWM1,setL_pow24VStatus <- set_pow24VStatus,setL_ActualHV <- set_ActualHV,setL_overLimit <- set_overLimit,setL_underLimit <- set_underLimit,setL_currentState <- set_currentState,setL_HVEnabled <- set_HVEnabled,setL_newSetPoint <- set_newSetPoint,setL_mSetPoint <- set_mSetPoint]]
									 [[setR_pow24VStatus <- set_pow24VStatus,setR_overLimit <- set_overLimit,setR_currentState <- set_currentState,setR_setPoint <- set_setPoint,setR_dutyCyclePWM1 <- set_dutyCyclePWM1,setR_ActualHV <- set_ActualHV,setR_underLimit <- set_underLimit,setR_HVEnabled <- set_HVEnabled,setR_newSetPoint <- set_newSetPoint,setR_mSetPoint <- set_mSetPoint]]
									)\{terminate} 
								)
								During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
										 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> terminate -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							Transitions(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = ((let
								Trans = get_CLID_Cl1?Cl1 -> TimeOut_1(
									 (share__ -> SKIP
									 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s0::enter -> SKIP))))
									 [] dbisim(((Cl1==const_State_machine_cycleTime))&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s0::enter -> SKIP)))
									 [] dbisim(((Cl1<const_State_machine_cycleTime))&(ext_errorAck__!NID_s0.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_currentState!State_Wait24Vpower -> SKIP))) ; f0::enter -> SKIP)))
									 []
									 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
									 []
									 terminate -> SKIP
									 )
								,SKIP);Trans
							within
								Trans [|{terminate}|> SKIP
							)
							)
							
							
							-- Clocks
							Clock_CLID_s0(x__) = 
								TimeOut_1(
									s0::entered -> Clock_CLID_s0(0)
									[]
									get_CLID_s0!x__ -> Clock_CLID_s0(x__)
									[]
									terminate -> SKIP,Clock_CLID_s0(Plus(x__,1,CLID_s0_clock_type)))
							Clock_CLID_f0(x__) = 
								TimeOut_1(
									f0::entered -> Clock_CLID_f0(0)
									[]
									get_CLID_f0!x__ -> Clock_CLID_f0(x__)
									[]
									terminate -> SKIP,Clock_CLID_f0(Plus(x__,1,CLID_f0_clock_type)))
							
							StateClocks = dbisim(Clock_CLID_s0(0))
							[| { terminate } |] (
							dbisim(Clock_CLID_f0(0))
							)
							
							stateClockSync = {|get_CLID_s0,s0::entered,get_CLID_f0,f0::entered|}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					-- END of Nodes --
					
					Timed(OneStep) {
					-- Operation calls --
					-- Only the undefined operations are declared here.
					-- If the state machine is in isolation, all required operations will be undefined.
					-- If it is in the context of a controller, the required operations not provided by the
					-- controller will be declared here, and the defined operations will be defined in the
					-- context of the Controller module, and therefore within scope of the state machine module.
					
					CALL__supplyVoltCheck(id__) 	= (OP_supplyVoltCheck::O__(id__))
					[[
						OP_supplyVoltCheck::ext_pow24VStatus <- ext_pow24VStatus,
						OP_supplyVoltCheck::int_enablePWM <- int_enablePWM,
						OP_supplyVoltCheck::int_dutyCyclePWM1 <- int_dutyCyclePWM1
					]]
					[[
						OP_supplyVoltCheck::get_pow24VStatus <- get_pow24VStatus,
						OP_supplyVoltCheck::set_pow24VStatus <- set_pow24VStatus,
						OP_supplyVoltCheck::get_HVEnabled <- get_HVEnabled,
						OP_supplyVoltCheck::set_HVEnabled <- set_HVEnabled,
						OP_supplyVoltCheck::get_currentState <- get_currentState,
						OP_supplyVoltCheck::set_currentState <- set_currentState,
						OP_supplyVoltCheck::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
						OP_supplyVoltCheck::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
						OP_supplyVoltCheck::get_mSetPoint <- get_mSetPoint,
						OP_supplyVoltCheck::set_mSetPoint <- set_mSetPoint
					]]
					CALL__checkLimits(id__) 	= (OP_checkLimits::O__(id__))
					[[
						OP_checkLimits::int_enablePWM <- int_enablePWM,
						OP_checkLimits::int_dutyCyclePWM1 <- int_dutyCyclePWM1
					]]
					[[
						OP_checkLimits::get_ActualHV <- get_ActualHV,
						OP_checkLimits::set_ActualHV <- set_ActualHV,
						OP_checkLimits::get_overLimit <- get_overLimit,
						OP_checkLimits::set_overLimit <- set_overLimit,
						OP_checkLimits::get_underLimit <- get_underLimit,
						OP_checkLimits::set_underLimit <- set_underLimit,
						OP_checkLimits::get_HVEnabled <- get_HVEnabled,
						OP_checkLimits::set_HVEnabled <- set_HVEnabled,
						OP_checkLimits::get_currentState <- get_currentState,
						OP_checkLimits::set_currentState <- set_currentState,
						OP_checkLimits::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
						OP_checkLimits::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
						OP_checkLimits::get_mSetPoint <- get_mSetPoint,
						OP_checkLimits::set_mSetPoint <- set_mSetPoint
					]]
					CALL__PID_Control(id__) 	= (OP_PID_Control::O__(id__))
					[[
						OP_PID_Control::ext_ActualHV <- ext_ActualHV,
						OP_PID_Control::int_dutyCyclePWM1 <- int_dutyCyclePWM1
					]]
					[[
						OP_PID_Control::get_ActualHV <- get_ActualHV,
						OP_PID_Control::set_ActualHV <- set_ActualHV,
						OP_PID_Control::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
						OP_PID_Control::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
						OP_PID_Control::get_mSetPoint <- get_mSetPoint,
						OP_PID_Control::set_mSetPoint <- set_mSetPoint
					]]
					CALL__disableHV(id__,
								arg) 	= (OP_disableHV::O__(id__,
								arg))
					[[
						OP_disableHV::int_enablePWM <- int_enablePWM,
						OP_disableHV::int_dutyCyclePWM1 <- int_dutyCyclePWM1
					]]
					[[
						OP_disableHV::get_HVEnabled <- get_HVEnabled,
						OP_disableHV::set_HVEnabled <- set_HVEnabled,
						OP_disableHV::get_currentState <- get_currentState,
						OP_disableHV::set_currentState <- set_currentState,
						OP_disableHV::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
						OP_disableHV::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
						OP_disableHV::get_mSetPoint <- get_mSetPoint,
						OP_disableHV::set_mSetPoint <- set_mSetPoint
					]]
					CALL__AdjustLimits(id__) 	= (OP_AdjustLimits::O__(id__))
					[[
						OP_AdjustLimits::get_overLimit <- get_overLimit,
						OP_AdjustLimits::set_overLimit <- set_overLimit,
						OP_AdjustLimits::get_underLimit <- get_underLimit,
						OP_AdjustLimits::set_underLimit <- set_underLimit,
						OP_AdjustLimits::get_mSetPoint <- get_mSetPoint,
						OP_AdjustLimits::set_mSetPoint <- set_mSetPoint
					]]
					CALL__setPointRamping(id__,
								newSetPoint,
							    const_setPointRamping_rampStep) 	= (OP_setPointRamping::O__(id__,
								newSetPoint,
							    const_setPointRamping_rampStep))
					[[
						OP_setPointRamping::int_enablePWM <- int_enablePWM,
						OP_setPointRamping::int_dutyCyclePWM1 <- int_dutyCyclePWM1
					]]
					[[
						OP_setPointRamping::get_HVEnabled <- get_HVEnabled,
						OP_setPointRamping::set_HVEnabled <- set_HVEnabled,
						OP_setPointRamping::get_currentState <- get_currentState,
						OP_setPointRamping::set_currentState <- set_currentState,
						OP_setPointRamping::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
						OP_setPointRamping::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
						OP_setPointRamping::get_mSetPoint <- get_mSetPoint,
						OP_setPointRamping::set_mSetPoint <- set_mSetPoint
					]]
					CALL__enableHV(id__) 	= (OP_enableHV::O__(id__))
					[[
						OP_enableHV::int_enablePWM <- int_enablePWM,
						OP_enableHV::int_dutyCyclePWM1 <- int_dutyCyclePWM1
					]]
					[[
						OP_enableHV::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
						OP_enableHV::set_dutyCyclePWM1 <- set_dutyCyclePWM1
					]]
					-- END of Operation calls --
				
					-- STM processes
					STM(id__,
							    const_State_machine_cycleTime,
							    const_setPointRamping_rampStep) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
					( 
						(
							(
								(Stateful(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep) \ {terminate} ; share__choice(terminate -> SKIP))
							 	[[ share__ <- x__ | x__ <- {|set_EXT_overLimit,set_EXT_underLimit,set_EXT_currentState,set_EXT_HVEnabled,set_EXT_pow24VStatus,set_EXT_mSetPoint,set_EXT_dutyCyclePWM1|} ]]
							)
						[| {share__} |]
						SKIP
						)
						[| union(sharedVarSync,{terminate}) |]
						dbisim(sharedVarMemory(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep))
					)\sharedVarHide
					,<{terminate},{tock}>)
					
					STM_VS_O(id__,
							    const_State_machine_cycleTime,
							    const_setPointRamping_rampStep) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
					( 
						(
							(
								(Stateful_VS_O(id__,
										    const_State_machine_cycleTime,
										    const_setPointRamping_rampStep) \ {terminate} ; share__choice(terminate -> SKIP))
							 	[[ share__ <- x__ | x__ <- {|set_EXT_overLimit,set_EXT_underLimit,set_EXT_currentState,set_EXT_HVEnabled,set_EXT_pow24VStatus,set_EXT_mSetPoint,set_EXT_dutyCyclePWM1|} ]]
							)
						[| {share__} |]
						SKIP
						)
						[| union(sharedVarSync,{terminate}) |]
						dbisim(sharedVarMemory(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep))
					)\sharedVarHide
					,<{terminate},{tock}>)
					
					-- Transitions
					Transitions(id__,
							    const_State_machine_cycleTime,
							    const_setPointRamping_rampStep) = ((let
						Trans = get_setPoint?setPoint -> get_pow24VStatus?pow24VStatus -> get_CLID_Cl1?Cl1 -> get_currentState?currentState -> TimeOut_1(
							 (share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_Init -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SHARE_WAIT(const_State_machine_cycleTime) ; Wait24Vpower::enter -> SKIP)))
							 [] dbisim(((currentState==State_ErrorMode))&(internal__!NID_Wait24Vpower -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; ErrorMode::enter -> SKIP)))
							 [] dbisim(((((setPoint==0) and (currentState!=State_ErrorMode)) and (pow24VStatus==Power_On)))&(internal__!NID_Wait24Vpower -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; ClosedLoop::enter -> SKIP)))
							 [] dbisim(((currentState==State_ErrorMode))&(internal__!NID_ClosedLoop -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SHARE_WAIT(const_State_machine_cycleTime) ; ErrorMode::enter -> SKIP)))
							 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((share__choice(true & (share__choice(set_mSetPoint!0 -> SKIP)));share__choice(true & (share__choice(set_HVEnabled!false -> SKIP)));SHARE_WAIT(const_State_machine_cycleTime) ; Init::enter -> SKIP))))
							 [] dbisim((((Cl1>=const_State_machine_cycleTime) and (currentState==State_Wait24Vpower)))&(internal__!NID_ErrorMode -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Wait24Vpower::enter -> SKIP)))
							 []
							 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
							 )
						,SKIP);Trans
					within
						Trans [|{terminate}|> SKIP
					)
					)
					
					-- Stateful
					-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
					
					-- Named process definitions
					MachineBody(id__,
							    const_State_machine_cycleTime,
							    const_setPointRamping_rampStep) = 
						dbisim((
						let
							finalNodesEntered = {||}
						within
							((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								Init::enter,
								ClosedLoop::enter,
								i0::enter,
								Wait24Vpower::enter,
								ErrorMode::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited|})
									transSync = {|internal__.NID_Init,internal__.NID_Wait24Vpower,internal__.NID_Wait24Vpower,internal__.NID_ClosedLoop,internal__.NID_i0,internal__.NID_ErrorMode|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
									   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   		    Init::D__(id__,
									   		    		    const_State_machine_cycleTime,
									   		    		    const_setPointRamping_rampStep)
									   		    [| { share__, terminate } |] (
									   		    ClosedLoop::D__(id__,
									   		    		    const_State_machine_cycleTime,
									   		    		    const_setPointRamping_rampStep)
									   		    [| { share__, terminate } |] (
									   		    i0::D__(id__,
									   		    		    const_State_machine_cycleTime,
									   		    		    const_setPointRamping_rampStep)
									   		    [| { share__, terminate } |] (
									   		    Wait24Vpower::D__(id__,
									   		    		    const_State_machine_cycleTime,
									   		    		    const_setPointRamping_rampStep)
									   		    [| { share__, terminate } |] (
									   		    ErrorMode::D__(id__,
									   		    		    const_State_machine_cycleTime,
									   		    		    const_setPointRamping_rampStep)
									   		    )
									   		    )
									   		    )
									   		    )
									   		  )
									 )
									 [[Init::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Init|}]]
									 [[ClosedLoop::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_ClosedLoop|}]]
									 [[Wait24Vpower::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Wait24Vpower,internal__.NID_Wait24Vpower|}]]
									 [[ErrorMode::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_ErrorMode|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									  [[set_setPoint <- setL_setPoint,set_pow24VStatus <- setL_pow24VStatus,clockReset.CLID_Cl1 <- clockResetL.CLID_Cl1,set_currentState <- setL_currentState]]
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 			,setL_setPoint
									 			,setL_pow24VStatus
									 			,clockResetL.CLID_Cl1
									 			,setL_currentState
									|}) |]
									 ((i0::enter -> Transitions(id__,
									 		    const_State_machine_cycleTime,
									 		    const_setPointRamping_rampStep))
									  [[ share__ <- x__ | x__ <- {| share__,setL_setPoint,setL_pow24VStatus,clockResetL.CLID_Cl1,setL_currentState |} ]]
									 )
									)[[setL_setPoint <- set_setPoint,setL_pow24VStatus <- set_pow24VStatus,clockResetL.CLID_Cl1 <- clockReset.CLID_Cl1,setL_currentState <- set_currentState]]
									)
								)
								 \ hideSet)
								[[
									ext_ActualHV__.x____ <- ext_ActualHV,
									ext_pow24VStatus__.x____ <- ext_pow24VStatus,
									ext_errorAck__.x____ <- ext_errorAck,
									ext_setPoint__.x____ <- ext_setPoint,
									int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1,
									int_enablePWM__.x____ <- int_enablePWM
									| x____ <- NIDS
								]]
							)
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour(id__,
							    const_State_machine_cycleTime,
							    const_setPointRamping_rampStep) = 
						dbisim((let
							stateClockSync = {|get_CLID_Init,Init::entered,get_CLID_ErrorMode,ErrorMode::entered,get_CLID_ClosedLoop,ClosedLoop::entered,get_CLID_Wait24Vpower,Wait24Vpower::entered|}
						 within
							(MachineBody(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) [| union(stateClockSync,{terminate}) |] StateClocks) \ union(stateClockSync,enteredSS)
						)
						)
					
					Stateful(id__,
							    const_State_machine_cycleTime,
							    const_setPointRamping_rampStep) = 
						dbisim((let
							getsetLocalChannels = {|get_setPoint,set_setPoint,
							get_newSetPoint,set_newSetPoint,
							get_ActualHV,set_ActualHV|}
							clockSync = {|get_CLID_Cl1,clockReset.CLID_Cl1|}
						within
							(Behaviour(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__,
							 		    const_State_machine_cycleTime,
							 		    const_setPointRamping_rampStep) [| {terminate} |] Clocks)
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					-- Visible counterparts
					MachineBody_VS_O(id__,
							    const_State_machine_cycleTime,
							    const_setPointRamping_rampStep) = 
						dbisim((
						let
							finalNodesEntered = {||}
						within
							((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								Init::enter,
								ClosedLoop::enter,
								i0::enter,
								Wait24Vpower::enter,
								ErrorMode::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited|})
									transSync = {|internal__.NID_Init,internal__.NID_Wait24Vpower,internal__.NID_Wait24Vpower,internal__.NID_ClosedLoop,internal__.NID_i0,internal__.NID_ErrorMode|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
									   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   		    Init::VS_O__(id__,
									   		    		    const_State_machine_cycleTime,
									   		    		    const_setPointRamping_rampStep)
									   		    [| { share__, terminate } |] (
									   		    ClosedLoop::VS_O__(id__,
									   		    		    const_State_machine_cycleTime,
									   		    		    const_setPointRamping_rampStep)
									   		    [| { share__, terminate } |] (
									   		    i0::VS_O__(id__,
									   		    		    const_State_machine_cycleTime,
									   		    		    const_setPointRamping_rampStep)
									   		    [| { share__, terminate } |] (
									   		    Wait24Vpower::VS_O__(id__,
									   		    		    const_State_machine_cycleTime,
									   		    		    const_setPointRamping_rampStep)
									   		    [| { share__, terminate } |] (
									   		    ErrorMode::VS_O__(id__,
									   		    		    const_State_machine_cycleTime,
									   		    		    const_setPointRamping_rampStep)
									   		    )
									   		    )
									   		    )
									   		    )
									   		  )
									 )
									 [[Init::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Init|}]]
									 [[ClosedLoop::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_ClosedLoop|}]]
									 [[Wait24Vpower::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Wait24Vpower,internal__.NID_Wait24Vpower|}]]
									 [[ErrorMode::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_ErrorMode|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									  [[set_setPoint <- setL_setPoint,set_pow24VStatus <- setL_pow24VStatus,clockReset.CLID_Cl1 <- clockResetL.CLID_Cl1,set_currentState <- setL_currentState]]
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 			,setL_setPoint
									 			,setL_pow24VStatus
									 			,clockResetL.CLID_Cl1
									 			,setL_currentState
									|}) |]
									 ((i0::enter -> Transitions(id__,
									 		    const_State_machine_cycleTime,
									 		    const_setPointRamping_rampStep))
									  [[ share__ <- x__ | x__ <- {| share__,setL_setPoint,setL_pow24VStatus,clockResetL.CLID_Cl1,setL_currentState |} ]]
									 )
									)[[setL_setPoint <- set_setPoint,setL_pow24VStatus <- set_pow24VStatus,clockResetL.CLID_Cl1 <- clockReset.CLID_Cl1,setL_currentState <- set_currentState]]
									)
								)
								 \ hideSet)
								[[
									ext_ActualHV__.x____ <- ext_ActualHV,
									ext_pow24VStatus__.x____ <- ext_pow24VStatus,
									ext_errorAck__.x____ <- ext_errorAck,
									ext_setPoint__.x____ <- ext_setPoint,
									int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1,
									int_enablePWM__.x____ <- int_enablePWM
									| x____ <- NIDS
								]]
							)
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour_VS_O(id__,
							    const_State_machine_cycleTime,
							    const_setPointRamping_rampStep) = 
						dbisim((let
							stateClockSync = {|get_CLID_Init,Init::entered,get_CLID_ErrorMode,ErrorMode::entered,get_CLID_ClosedLoop,ClosedLoop::entered,get_CLID_Wait24Vpower,Wait24Vpower::entered|}
						 within
							(MachineBody_VS_O(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) [| union(stateClockSync,{terminate}) |] StateClocks) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					Stateful_VS_O(id__,
							    const_State_machine_cycleTime,
							    const_setPointRamping_rampStep) = 
						dbisim((let
							getsetLocalChannels = {|get_setPoint,set_setPoint,
							get_newSetPoint,set_newSetPoint,
							get_ActualHV,set_ActualHV|}
							clockSync = {|get_CLID_Cl1,clockReset.CLID_Cl1|}
						within
							(Behaviour_VS_O(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__,
							 		    const_State_machine_cycleTime,
							 		    const_setPointRamping_rampStep) [| {terminate} |] Clocks)
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
						
					-- END
					
					-- Memory
					-- Memory variables
					Memory_setPoint(setPoint) =
						get_setPoint!setPoint -> Memory_setPoint(setPoint)
						[]
						set_setPoint?x__ -> Memory_setPoint(x__)
						[]
						terminate -> SKIP
					Memory_newSetPoint(newSetPoint) =
						get_newSetPoint!newSetPoint -> Memory_newSetPoint(newSetPoint)
						[]
						set_newSetPoint?x__ -> Memory_newSetPoint(x__)
						[]
						terminate -> SKIP
					Memory_ActualHV(ActualHV) =
						get_ActualHV!ActualHV -> Memory_ActualHV(ActualHV)
						[]
						set_ActualHV?x__ -> Memory_ActualHV(x__)
						[]
						terminate -> SKIP
					
					-- varMemory process
					varMemory(id__,
							    const_State_machine_cycleTime,
							    const_setPointRamping_rampStep) = Memory_setPoint(0)
					[| { terminate } |] (
					Memory_newSetPoint(0)
					[| { terminate } |] (
					Memory_ActualHV(0)
					)
					)
					
					getsetLocalChannels = {|get_setPoint,set_setPoint,get_newSetPoint,set_newSetPoint,get_ActualHV,set_ActualHV|}
					
					-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
					FVS__(id__,
							    const_State_machine_cycleTime,
							    const_setPointRamping_rampStep) = STM_VS_O(id__,
							    const_State_machine_cycleTime,
							    const_setPointRamping_rampStep) \ localClockResets
					D__(id__,
							    const_State_machine_cycleTime,
							    const_setPointRamping_rampStep) = timed_priority(STM(id__,
							    const_State_machine_cycleTime,
							    const_setPointRamping_rampStep) \ union(internal_events,localClockResets))
					O__(id__,
							    const_State_machine_cycleTime,
							    const_setPointRamping_rampStep) = dbisim(D__(id__,
							    const_State_machine_cycleTime,
							    const_setPointRamping_rampStep))
					VS__(id__,
							    const_State_machine_cycleTime,
							    const_setPointRamping_rampStep) = FVS__(id__,
							    const_State_machine_cycleTime,
							    const_setPointRamping_rampStep)
					VS_O__(id__,
							    const_State_machine_cycleTime,
							    const_setPointRamping_rampStep) = dbisim(FVS__(id__,
							    const_State_machine_cycleTime,
							    const_setPointRamping_rampStep))
					HEXT__(id__,
							    const_State_machine_cycleTime,
							    const_setPointRamping_rampStep) = O__(id__,
							    const_State_machine_cycleTime,
							    const_setPointRamping_rampStep) [|shared_variable_events|] SKIP
					FVS_C__(id__,
							    const_State_machine_cycleTime,
							    const_setPointRamping_rampStep) = dbisim(timed_priority(STM(id__,
							    const_State_machine_cycleTime,
							    const_setPointRamping_rampStep) \ internal_events))
					HUP__(id__,
							    const_State_machine_cycleTime,
							    const_setPointRamping_rampStep) = timed_priority(O__(id__,
							    const_State_machine_cycleTime,
							    const_setPointRamping_rampStep) [|{share__}|] SKIP)
					
					-- Clocks
					Clock_CLID_Cl1(x__) = 
						TimeOut_1(
							clockReset.CLID_Cl1 -> Clock_CLID_Cl1(0)
							[]
							get_CLID_Cl1!x__ -> Clock_CLID_Cl1(x__)
							[]
							terminate -> SKIP,Clock_CLID_Cl1(Plus(x__,1,CLID_Cl1_clock_type)))
					
					Clocks = dbisim(Clock_CLID_Cl1(0))
					
					clockSync = {|get_CLID_Cl1,clockReset.CLID_Cl1|}
					
					Clock_CLID_Init(x__) = 
						TimeOut_1(
							Init::entered -> Clock_CLID_Init(0)
							[]
							get_CLID_Init!x__ -> Clock_CLID_Init(x__)
							[]
							terminate -> SKIP,Clock_CLID_Init(Plus(x__,1,CLID_Init_clock_type)))
					Clock_CLID_ErrorMode(x__) = 
						TimeOut_1(
							ErrorMode::entered -> Clock_CLID_ErrorMode(0)
							[]
							get_CLID_ErrorMode!x__ -> Clock_CLID_ErrorMode(x__)
							[]
							terminate -> SKIP,Clock_CLID_ErrorMode(Plus(x__,1,CLID_ErrorMode_clock_type)))
					Clock_CLID_ClosedLoop(x__) = 
						TimeOut_1(
							ClosedLoop::entered -> Clock_CLID_ClosedLoop(0)
							[]
							get_CLID_ClosedLoop!x__ -> Clock_CLID_ClosedLoop(x__)
							[]
							terminate -> SKIP,Clock_CLID_ClosedLoop(Plus(x__,1,CLID_ClosedLoop_clock_type)))
					Clock_CLID_Wait24Vpower(x__) = 
						TimeOut_1(
							Wait24Vpower::entered -> Clock_CLID_Wait24Vpower(0)
							[]
							get_CLID_Wait24Vpower!x__ -> Clock_CLID_Wait24Vpower(x__)
							[]
							terminate -> SKIP,Clock_CLID_Wait24Vpower(Plus(x__,1,CLID_Wait24Vpower_clock_type)))
					
					StateClocks = dbisim(Clock_CLID_Init(0))
					[| { terminate } |] (
					dbisim(Clock_CLID_ErrorMode(0))
					[| { terminate } |] (
					dbisim(Clock_CLID_ClosedLoop(0))
					[| { terminate } |] (
					dbisim(Clock_CLID_Wait24Vpower(0))
					)
					)
					)
					
					stateClockSync = {|get_CLID_Init,Init::entered,get_CLID_ErrorMode,ErrorMode::entered,get_CLID_ClosedLoop,ClosedLoop::entered,get_CLID_Wait24Vpower,Wait24Vpower::entered|}
					
					-- Shared memory
					-- Shared memory variables
					Memory_overLimit(overLimit) =
						get_overLimit!overLimit -> Memory_overLimit(overLimit)
						[]
						set_overLimit?x__ -> Memory_overLimit(x__)
						[]
						set_EXT_overLimit?x__ -> Memory_overLimit(x__)
						[]
						terminate -> SKIP
					Memory_underLimit(underLimit) =
						get_underLimit!underLimit -> Memory_underLimit(underLimit)
						[]
						set_underLimit?x__ -> Memory_underLimit(x__)
						[]
						set_EXT_underLimit?x__ -> Memory_underLimit(x__)
						[]
						terminate -> SKIP
					Memory_currentState(currentState) =
						get_currentState!currentState -> Memory_currentState(currentState)
						[]
						set_currentState?x__ -> Memory_currentState(x__)
						[]
						set_EXT_currentState?x__ -> Memory_currentState(x__)
						[]
						terminate -> SKIP
					Memory_HVEnabled(HVEnabled) =
						get_HVEnabled!HVEnabled -> Memory_HVEnabled(HVEnabled)
						[]
						set_HVEnabled?x__ -> Memory_HVEnabled(x__)
						[]
						set_EXT_HVEnabled?x__ -> Memory_HVEnabled(x__)
						[]
						terminate -> SKIP
					Memory_pow24VStatus(pow24VStatus) =
						get_pow24VStatus!pow24VStatus -> Memory_pow24VStatus(pow24VStatus)
						[]
						set_pow24VStatus?x__ -> Memory_pow24VStatus(x__)
						[]
						set_EXT_pow24VStatus?x__ -> Memory_pow24VStatus(x__)
						[]
						terminate -> SKIP
					Memory_mSetPoint(mSetPoint) =
						get_mSetPoint!mSetPoint -> Memory_mSetPoint(mSetPoint)
						[]
						set_mSetPoint?x__ -> Memory_mSetPoint(x__)
						[]
						set_EXT_mSetPoint?x__ -> Memory_mSetPoint(x__)
						[]
						terminate -> SKIP
					Memory_dutyCyclePWM1(dutyCyclePWM1) =
						get_dutyCyclePWM1!dutyCyclePWM1 -> Memory_dutyCyclePWM1(dutyCyclePWM1)
						[]
						set_dutyCyclePWM1?x__ -> Memory_dutyCyclePWM1(x__)
						[]
						set_EXT_dutyCyclePWM1?x__ -> Memory_dutyCyclePWM1(x__)
						[]
						terminate -> SKIP
					
					-- sharedVarMemory process
					sharedVarMemory(id__,
							    const_State_machine_cycleTime,
							    const_setPointRamping_rampStep) = Memory_overLimit(0)
					[| { terminate } |] (
					Memory_underLimit(0)
					[| { terminate } |] (
					Memory_currentState(State_Wait24Vpower)
					[| { terminate } |] (
					Memory_HVEnabled(true)
					[| { terminate } |] (
					Memory_pow24VStatus(Power_On)
					[| { terminate } |] (
					Memory_mSetPoint(0)
					[| { terminate } |] (
					Memory_dutyCyclePWM1(0)
					)
					)
					)
					)
					)
					)
					
					sharedVarSync = {|get_overLimit,set_overLimit,set_EXT_overLimit,get_underLimit,set_underLimit,set_EXT_underLimit,get_currentState,set_currentState,set_EXT_currentState,get_HVEnabled,set_HVEnabled,set_EXT_HVEnabled,get_pow24VStatus,set_pow24VStatus,set_EXT_pow24VStatus,get_mSetPoint,set_mSetPoint,set_EXT_mSetPoint,get_dutyCyclePWM1,set_dutyCyclePWM1,set_EXT_dutyCyclePWM1|}
					
					sharedVarHide = {|get_overLimit,get_underLimit,get_currentState,get_HVEnabled,get_pow24VStatus,get_mSetPoint,get_dutyCyclePWM1|}
					}
			endmodule
			
			Timed(OneStep) {
					-- undefined operations
					
					-- declaring controller memory
					Memory(id__, overLimit, underLimit, currentState, HVEnabled, pow24VStatus, mSetPoint, dutyCyclePWM1) = (
					set_EXT_overLimit?x__ -> stm_ref0::set_EXT_overLimit!x__ -> 
					Memory(id__,x__,underLimit,currentState,HVEnabled,pow24VStatus,mSetPoint,dutyCyclePWM1)
					 []
					set_EXT_underLimit?x__ -> stm_ref0::set_EXT_underLimit!x__ -> 
					Memory(id__,overLimit,x__,currentState,HVEnabled,pow24VStatus,mSetPoint,dutyCyclePWM1)
					 []
					set_EXT_currentState?x__ -> stm_ref0::set_EXT_currentState!x__ -> 
					Memory(id__,overLimit,underLimit,x__,HVEnabled,pow24VStatus,mSetPoint,dutyCyclePWM1)
					 []
					set_EXT_HVEnabled?x__ -> stm_ref0::set_EXT_HVEnabled!x__ -> 
					Memory(id__,overLimit,underLimit,currentState,x__,pow24VStatus,mSetPoint,dutyCyclePWM1)
					 []
					set_EXT_pow24VStatus?x__ -> stm_ref0::set_EXT_pow24VStatus!x__ -> 
					Memory(id__,overLimit,underLimit,currentState,HVEnabled,x__,mSetPoint,dutyCyclePWM1)
					 []
					set_EXT_mSetPoint?x__ -> stm_ref0::set_EXT_mSetPoint!x__ -> 
					Memory(id__,overLimit,underLimit,currentState,HVEnabled,pow24VStatus,x__,dutyCyclePWM1)
					 []
					set_EXT_dutyCyclePWM1?x__ -> stm_ref0::set_EXT_dutyCyclePWM1!x__ -> 
					Memory(id__,overLimit,underLimit,currentState,HVEnabled,pow24VStatus,mSetPoint,x__)
					)
					
					D__(id__,
							    const_ctrl0_stm_ref0_cycleTime,
							   	const_setPointRamping_rampStep) = prioritise(	((
							let
								const_State_machine_cycleTime = ms(10)
							within 
							stm_ref0::D__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::ext_setPoint <- ext_setPoint,
								stm_ref0::ext_pow24VStatus <- ext_pow24VStatus,
								stm_ref0::ext_ActualHV <- ext_ActualHV,
								stm_ref0::ext_errorAck <- ext_errorAck,
								stm_ref0::int_dutyCyclePWM1 <- int_dutyCyclePWM1,
								stm_ref0::int_enablePWM <- int_enablePWM,
								stm_ref0::set_overLimit <- set_overLimit,
								stm_ref0::get_overLimit <- get_overLimit,
								stm_ref0::set_underLimit <- set_underLimit,
								stm_ref0::get_underLimit <- get_underLimit,
								stm_ref0::set_currentState <- set_currentState,
								stm_ref0::get_currentState <- get_currentState,
								stm_ref0::set_HVEnabled <- set_HVEnabled,
								stm_ref0::get_HVEnabled <- get_HVEnabled,
								stm_ref0::set_pow24VStatus <- set_pow24VStatus,
								stm_ref0::get_pow24VStatus <- get_pow24VStatus,
								stm_ref0::set_mSetPoint <- set_mSetPoint,
								stm_ref0::get_mSetPoint <- get_mSetPoint,
								stm_ref0::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
								stm_ref0::get_dutyCyclePWM1 <- get_dutyCyclePWM1
							]]
						)
							[|
								union(
									{|
									|},
									{|
										stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
									|}
								)
							|]
						Memory(id__, 0, 0, State_Wait24Vpower, true, Power_On, 0, 0)
					)
					\ union(
						{|
						|},
						{|
							stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>)
					
					-- VS version
					VS__(id__,
							    const_ctrl0_stm_ref0_cycleTime,
							   	const_setPointRamping_rampStep) = prioritise(	((
							let
								const_State_machine_cycleTime = ms(10)
							within 
							stm_ref0::VS__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::ext_setPoint <- ext_setPoint,
								stm_ref0::ext_pow24VStatus <- ext_pow24VStatus,
								stm_ref0::ext_ActualHV <- ext_ActualHV,
								stm_ref0::ext_errorAck <- ext_errorAck,
								stm_ref0::int_dutyCyclePWM1 <- int_dutyCyclePWM1,
								stm_ref0::int_enablePWM <- int_enablePWM,
								stm_ref0::set_overLimit <- set_overLimit,
								stm_ref0::get_overLimit <- get_overLimit,
								stm_ref0::set_underLimit <- set_underLimit,
								stm_ref0::get_underLimit <- get_underLimit,
								stm_ref0::set_currentState <- set_currentState,
								stm_ref0::get_currentState <- get_currentState,
								stm_ref0::set_HVEnabled <- set_HVEnabled,
								stm_ref0::get_HVEnabled <- get_HVEnabled,
								stm_ref0::set_pow24VStatus <- set_pow24VStatus,
								stm_ref0::get_pow24VStatus <- get_pow24VStatus,
								stm_ref0::set_mSetPoint <- set_mSetPoint,
								stm_ref0::get_mSetPoint <- get_mSetPoint,
								stm_ref0::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
								stm_ref0::get_dutyCyclePWM1 <- get_dutyCyclePWM1
							]]
						)
							[|
								union(
									{|
									|},
									{|
										stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
									|}
								)
							|]
						Memory(id__, 0, 0, State_Wait24Vpower, true, Power_On, 0, 0)
					)
					\ union(
						{|
						|},
						{|
							stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>)
				
					-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
					O__(id__,
							    const_ctrl0_stm_ref0_cycleTime,
							   	const_setPointRamping_rampStep) = dbisim(prioritise(	((
							let
								const_State_machine_cycleTime = ms(10)
							within 
							stm_ref0::O__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::ext_setPoint <- ext_setPoint,
								stm_ref0::ext_pow24VStatus <- ext_pow24VStatus,
								stm_ref0::ext_ActualHV <- ext_ActualHV,
								stm_ref0::ext_errorAck <- ext_errorAck,
								stm_ref0::int_dutyCyclePWM1 <- int_dutyCyclePWM1,
								stm_ref0::int_enablePWM <- int_enablePWM,
								stm_ref0::set_overLimit <- set_overLimit,
								stm_ref0::get_overLimit <- get_overLimit,
								stm_ref0::set_underLimit <- set_underLimit,
								stm_ref0::get_underLimit <- get_underLimit,
								stm_ref0::set_currentState <- set_currentState,
								stm_ref0::get_currentState <- get_currentState,
								stm_ref0::set_HVEnabled <- set_HVEnabled,
								stm_ref0::get_HVEnabled <- get_HVEnabled,
								stm_ref0::set_pow24VStatus <- set_pow24VStatus,
								stm_ref0::get_pow24VStatus <- get_pow24VStatus,
								stm_ref0::set_mSetPoint <- set_mSetPoint,
								stm_ref0::get_mSetPoint <- get_mSetPoint,
								stm_ref0::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
								stm_ref0::get_dutyCyclePWM1 <- get_dutyCyclePWM1
							]]
						)
							[|
								union(
									{|
									|},
									{|
										stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
									|}
								)
							|]
						dbisim(Memory(id__, 0, 0, State_Wait24Vpower, true, Power_On, 0, 0))
					)
					\ union(
						{|
						|},
						{|
							stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>))
									
					-- VS_O version
					VS_O__(id__,
							    const_ctrl0_stm_ref0_cycleTime,
							   	const_setPointRamping_rampStep) = dbisim(prioritise(	((
							let
								const_State_machine_cycleTime = ms(10)
							within 
							stm_ref0::VS_O__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::ext_setPoint <- ext_setPoint,
								stm_ref0::ext_pow24VStatus <- ext_pow24VStatus,
								stm_ref0::ext_ActualHV <- ext_ActualHV,
								stm_ref0::ext_errorAck <- ext_errorAck,
								stm_ref0::int_dutyCyclePWM1 <- int_dutyCyclePWM1,
								stm_ref0::int_enablePWM <- int_enablePWM,
								stm_ref0::set_overLimit <- set_overLimit,
								stm_ref0::get_overLimit <- get_overLimit,
								stm_ref0::set_underLimit <- set_underLimit,
								stm_ref0::get_underLimit <- get_underLimit,
								stm_ref0::set_currentState <- set_currentState,
								stm_ref0::get_currentState <- get_currentState,
								stm_ref0::set_HVEnabled <- set_HVEnabled,
								stm_ref0::get_HVEnabled <- get_HVEnabled,
								stm_ref0::set_pow24VStatus <- set_pow24VStatus,
								stm_ref0::get_pow24VStatus <- get_pow24VStatus,
								stm_ref0::set_mSetPoint <- set_mSetPoint,
								stm_ref0::get_mSetPoint <- get_mSetPoint,
								stm_ref0::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
								stm_ref0::get_dutyCyclePWM1 <- get_dutyCyclePWM1
							]]
						)
							[|
								union(
									{|
									|},
									{|
										stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
									|}
								)
							|]
						dbisim(Memory(id__, 0, 0, State_Wait24Vpower, true, Power_On, 0, 0))
					)
					\ union(
						{|
						|},
						{|
							stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>))
				
					HEXT(id__,
							    const_ctrl0_stm_ref0_cycleTime,
							   	const_setPointRamping_rampStep) = O__(id__,
							    const_ctrl0_stm_ref0_cycleTime,
							   	const_setPointRamping_rampStep) [|shared_variable_events|] SKIP			
			}
	
		endmodule
		module ctrl_ref1
			shared_variable_events = {|
				set_EXT_HVEnabled,
				set_EXT_pow24VStatus,
				set_EXT_currentState,
				set_EXT_overLimit,
				set_EXT_underLimit,
				set_EXT_mSetPoint,
				set_EXT_dutyCyclePWM1
			|}
			
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
	
			-- declaring controller events
			channel ext_pow24VStatus: InOut.Power
			channel int_dutyCyclePWM1: InOut.duty
			channel int_enablePWM: InOut.core_boolean
			
			channel set_HVEnabled: core_boolean
			channel get_HVEnabled: core_boolean
			channel set_pow24VStatus: Power
			channel get_pow24VStatus: Power
			channel set_currentState: State
			channel get_currentState: State
			channel set_overLimit: core_real
			channel get_overLimit: core_real
			channel set_underLimit: core_real
			channel get_underLimit: core_real
			channel set_mSetPoint: core_real
			channel get_mSetPoint: core_real
			channel set_dutyCyclePWM1: duty
			channel get_dutyCyclePWM1: duty
			
			channel set_EXT_HVEnabled: core_boolean
			channel set_EXT_pow24VStatus: Power
			channel set_EXT_currentState: State
			channel set_EXT_overLimit: core_real
			channel set_EXT_underLimit: core_real
			channel set_EXT_mSetPoint: core_real
			channel set_EXT_dutyCyclePWM1: duty
			
			-- declaring call and ret events for undefined operations
			
			-- declaring controller termination channel		
			channel terminate
			
			-- set of visible memory events
			visibleMemoryEvents = {|get_HVEnabled,set_HVEnabled,get_pow24VStatus,set_pow24VStatus,get_currentState,set_currentState,get_overLimit,set_overLimit,get_underLimit,set_underLimit,get_mSetPoint,set_mSetPoint,get_dutyCyclePWM1,set_dutyCyclePWM1|}
	
			-- defined operations
			-- compileOperationDef
			module OP_supplyVoltCheck
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
				
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_f0|
				              NID_j0
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_pow24VStatus, set_pow24VStatus, setL_pow24VStatus, setR_pow24VStatus: Power
				channel get_HVEnabled, set_HVEnabled, setL_HVEnabled, setR_HVEnabled: core_boolean
				channel get_currentState, set_currentState, setL_currentState, setR_currentState: State
				channel get_dutyCyclePWM1, set_dutyCyclePWM1, setL_dutyCyclePWM1, setR_dutyCyclePWM1: duty
				channel get_mSetPoint, set_mSetPoint, setL_mSetPoint, setR_mSetPoint: core_real
				
				-- Shared variable channels
				channel set_EXT_pow24VStatus: Power
				channel set_EXT_HVEnabled: core_boolean
				channel set_EXT_currentState: State
				channel set_EXT_dutyCyclePWM1: duty
				channel set_EXT_mSetPoint: core_real
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel ext_pow24VStatus__: NIDS.InOut.Power
				channel ext_pow24VStatus: InOut.Power
				channel int_enablePWM__: NIDS.InOut.core_boolean
				channel int_enablePWM: InOut.core_boolean
				channel int_dutyCyclePWM1__: NIDS.InOut.duty
				channel int_dutyCyclePWM1: InOut.duty
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i0::enter,
				f0::enter,
				j0::enter
				|}
				
				enteredSS = 	{|
				f0::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
					set_EXT_pow24VStatus,
					set_EXT_HVEnabled,
					set_EXT_currentState,
					set_EXT_dutyCyclePWM1,
					set_EXT_mSetPoint
				|}
				
				channel clockReset, clockResetL, clockResetR 
				
				localClockResets = {||}
				
				
				channel get_CLID_f0 : CLID_f0_clock_type
				
				--channel increment__
				
				CLID_f0_clock_type = {0..(clock_type_max(Union({
				{}
				}))+1)}
				
				
					-- Nodes --
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Final state: f0
					module f0
					
					exports
					
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
									
									Entering 	= entered -> SKIP ; Active
									Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
									Interrupted	= share__choice(exit -> exited -> Inactive)
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Junction: j0
					module j0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					-- END of Nodes --
					
					Timed(OneStep) {
					-- Operation calls --
					-- Only the undefined operations are declared here.
					-- If the state machine is in isolation, all required operations will be undefined.
					-- If it is in the context of a controller, the required operations not provided by the
					-- controller will be declared here, and the defined operations will be defined in the
					-- context of the Controller module, and therefore within scope of the state machine module.
					
					CALL__disableHV(id__,
								arg) 	= (OP_disableHV::O__(id__,
								arg))
					[[
						OP_disableHV::int_enablePWM <- int_enablePWM,
						OP_disableHV::int_dutyCyclePWM1 <- int_dutyCyclePWM1
					]]
					[[
						OP_disableHV::get_HVEnabled <- get_HVEnabled,
						OP_disableHV::set_HVEnabled <- set_HVEnabled,
						OP_disableHV::get_currentState <- get_currentState,
						OP_disableHV::set_currentState <- set_currentState,
						OP_disableHV::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
						OP_disableHV::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
						OP_disableHV::get_mSetPoint <- get_mSetPoint,
						OP_disableHV::set_mSetPoint <- set_mSetPoint
					]]
					-- END of Operation calls --
				
					-- STM processes
					STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
					Stateful(id__) \ {terminate}
					
					STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
					Stateful(id__) \ {terminate}
					
					-- Transitions
					Transitions(id__) = ((let
						Trans = get_pow24VStatus?pow24VStatus -> TimeOut_1(
							 (share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((Deadline(true&(share__choice(ext_pow24VStatus.in?pow24VStatus -> (SStop /\ set_pow24VStatus!pow24VStatus -> SKIP))),0) ; j0::enter -> SKIP))))
							 [] dbisim(((pow24VStatus==Power_Off))&(internal__!NID_j0 -> SKIP ;  ((true&CALL__disableHV(
							 			id__,
							 			true
							 		) ; f0::enter -> SKIP))))
							 [] dbisim(((pow24VStatus==Power_On))&(internal__!NID_j0 -> SKIP ;  ((SKIP ; f0::enter -> SKIP))))
							 []
							 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
							 )
						,SKIP);Trans
					within
						Trans [|{terminate}|> SKIP
					)
					)
					
					-- Stateful
					-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
					
					-- Named process definitions
					MachineBody(id__) = 
						dbisim((
						let
							finalNodesEntered = {|f0::entered|}
						within
							((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								f0::enter,
								j0::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited|})
									transSync = {|internal__.NID_i0,internal__.NID_j0,internal__.NID_j0|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
									   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   		    i0::D__(id__)
									   		    [| { share__, terminate } |] (
									   		    f0::D__(id__)
									   		    [| { share__, terminate } |] (
									   		    j0::D__(id__)
									   		    )
									   		    )
									   		  )
									 )
									 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									  [[set_pow24VStatus <- setL_pow24VStatus]]
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 			,setL_pow24VStatus
									|}) |]
									 ((i0::enter -> Transitions(id__))
									  [[ share__ <- x__ | x__ <- {| share__,setL_pow24VStatus |} ]]
									 )
									)[[setL_pow24VStatus <- set_pow24VStatus]]
									)
								)
								 \ hideSet)
								[[
									ext_pow24VStatus__.x____ <- ext_pow24VStatus,
									int_enablePWM__.x____ <- int_enablePWM,
									int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
									| x____ <- NIDS
								]]
							)
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour(id__) = 
						dbisim((let
							stateClockSync = {|get_CLID_f0,f0::entered|}
						 within
							(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ union(stateClockSync,enteredSS)
						)
						)
					
					Stateful(id__) = 
						dbisim((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour(id__) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__) [| {terminate} |] Clocks)
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					-- Visible counterparts
					MachineBody_VS_O(id__) = 
						dbisim((
						let
							finalNodesEntered = {|f0::entered|}
						within
							((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								f0::enter,
								j0::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited|})
									transSync = {|internal__.NID_i0,internal__.NID_j0,internal__.NID_j0|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
									   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   		    i0::VS_O__(id__)
									   		    [| { share__, terminate } |] (
									   		    f0::VS_O__(id__)
									   		    [| { share__, terminate } |] (
									   		    j0::VS_O__(id__)
									   		    )
									   		    )
									   		  )
									 )
									 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									  [[set_pow24VStatus <- setL_pow24VStatus]]
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 			,setL_pow24VStatus
									|}) |]
									 ((i0::enter -> Transitions(id__))
									  [[ share__ <- x__ | x__ <- {| share__,setL_pow24VStatus |} ]]
									 )
									)[[setL_pow24VStatus <- set_pow24VStatus]]
									)
								)
								 \ hideSet)
								[[
									ext_pow24VStatus__.x____ <- ext_pow24VStatus,
									int_enablePWM__.x____ <- int_enablePWM,
									int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
									| x____ <- NIDS
								]]
							)
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour_VS_O(id__) = 
						dbisim((let
							stateClockSync = {|get_CLID_f0,f0::entered|}
						 within
							(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					Stateful_VS_O(id__) = 
						dbisim((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour_VS_O(id__) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__) [| {terminate} |] Clocks)
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
						
					-- END
					
					-- Memory
					-- Memory variables
					
					-- varMemory process
					varMemory(id__) = terminate -> SKIP
					
					getsetLocalChannels = {||}
					
					-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
					FVS__(id__) = STM_VS_O(id__) \ localClockResets
					D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
					O__(id__) = dbisim(D__(id__))
					VS__(id__) = FVS__(id__)
					VS_O__(id__) = dbisim(FVS__(id__))
					HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
					FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
					HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
					
					-- Clocks
					
					Clocks = terminate -> SKIP
					
					clockSync = {||}
					
					Clock_CLID_f0(x__) = 
						TimeOut_1(
							f0::entered -> Clock_CLID_f0(0)
							[]
							get_CLID_f0!x__ -> Clock_CLID_f0(x__)
							[]
							terminate -> SKIP,Clock_CLID_f0(Plus(x__,1,CLID_f0_clock_type)))
					
					StateClocks = dbisim(Clock_CLID_f0(0))
					
					stateClockSync = {|get_CLID_f0,f0::entered|}
					}
						endmodule
			-- compileOperationDef
			module OP_AdjustLimits
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
				
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_f0
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_overLimit, set_overLimit, setL_overLimit, setR_overLimit: core_real
				channel get_underLimit, set_underLimit, setL_underLimit, setR_underLimit: core_real
				channel get_mSetPoint, set_mSetPoint, setL_mSetPoint, setR_mSetPoint: core_real
				
				-- Shared variable channels
				channel set_EXT_overLimit: core_real
				channel set_EXT_underLimit: core_real
				channel set_EXT_mSetPoint: core_real
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i0::enter,
				f0::enter
				|}
				
				enteredSS = 	{|
				f0::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
					set_EXT_overLimit,
					set_EXT_underLimit,
					set_EXT_mSetPoint
				|}
				
				channel clockReset, clockResetL, clockResetR 
				
				localClockResets = {||}
				
				
				channel get_CLID_f0 : CLID_f0_clock_type
				
				--channel increment__
				
				CLID_f0_clock_type = {0..(clock_type_max(Union({
				}))+1)}
				
				
					-- Nodes --
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Final state: f0
					module f0
					
					exports
					
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
									
									Entering 	= entered -> SKIP ; Active
									Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
									Interrupted	= share__choice(exit -> exited -> Inactive)
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					-- END of Nodes --
					
					Timed(OneStep) {
					-- Operation calls --
					-- Only the undefined operations are declared here.
					-- If the state machine is in isolation, all required operations will be undefined.
					-- If it is in the context of a controller, the required operations not provided by the
					-- controller will be declared here, and the defined operations will be defined in the
					-- context of the Controller module, and therefore within scope of the state machine module.
					
					-- END of Operation calls --
				
					-- STM processes
					STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
					Stateful(id__) \ {terminate}
					
					STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
					Stateful(id__) \ {terminate}
					
					-- Transitions
					Transitions(id__) = ((let
						Trans = TimeOut_1(
							 (share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((share__choice(share__choice(get_mSetPoint?mSetPoint -> true & (share__choice(set_overLimit!overLimitF(Plus(mSetPoint, 2, core_real)) -> SKIP))));share__choice(share__choice(get_mSetPoint?mSetPoint -> true & (share__choice(set_underLimit!underLimitF(Minus(mSetPoint, 2, core_real)) -> SKIP)))) ; f0::enter -> SKIP))))
							 []
							 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
							 )
						,SKIP);Trans
					within
						Trans [|{terminate}|> SKIP
					)
					)
					
					-- Stateful
					-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
					
					-- Named process definitions
					MachineBody(id__) = 
						dbisim((
						let
							finalNodesEntered = {|f0::entered|}
						within
							((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								f0::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited|})
									transSync = {|internal__.NID_i0|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
									   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   		    i0::D__(id__)
									   		    [| { share__, terminate } |] (
									   		    f0::D__(id__)
									   		    )
									   		  )
									 )
									 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									|}) |]
									 ((i0::enter -> Transitions(id__))
									  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 )
									)
									)
								)
								 \ hideSet)
							)
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour(id__) = 
						dbisim((let
							stateClockSync = {|get_CLID_f0,f0::entered|}
						 within
							(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ union(stateClockSync,enteredSS)
						)
						)
					
					Stateful(id__) = 
						dbisim((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour(id__) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__) [| {terminate} |] Clocks)
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					-- Visible counterparts
					MachineBody_VS_O(id__) = 
						dbisim((
						let
							finalNodesEntered = {|f0::entered|}
						within
							((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								f0::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited|})
									transSync = {|internal__.NID_i0|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
									   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   		    i0::VS_O__(id__)
									   		    [| { share__, terminate } |] (
									   		    f0::VS_O__(id__)
									   		    )
									   		  )
									 )
									 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									|}) |]
									 ((i0::enter -> Transitions(id__))
									  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 )
									)
									)
								)
								 \ hideSet)
							)
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour_VS_O(id__) = 
						dbisim((let
							stateClockSync = {|get_CLID_f0,f0::entered|}
						 within
							(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					Stateful_VS_O(id__) = 
						dbisim((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour_VS_O(id__) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__) [| {terminate} |] Clocks)
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
						
					-- END
					
					-- Memory
					-- Memory variables
					
					-- varMemory process
					varMemory(id__) = terminate -> SKIP
					
					getsetLocalChannels = {||}
					
					-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
					FVS__(id__) = STM_VS_O(id__) \ localClockResets
					D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
					O__(id__) = dbisim(D__(id__))
					VS__(id__) = FVS__(id__)
					VS_O__(id__) = dbisim(FVS__(id__))
					HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
					FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
					HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
					
					-- Clocks
					
					Clocks = terminate -> SKIP
					
					clockSync = {||}
					
					Clock_CLID_f0(x__) = 
						TimeOut_1(
							f0::entered -> Clock_CLID_f0(0)
							[]
							get_CLID_f0!x__ -> Clock_CLID_f0(x__)
							[]
							terminate -> SKIP,Clock_CLID_f0(Plus(x__,1,CLID_f0_clock_type)))
					
					StateClocks = dbisim(Clock_CLID_f0(0))
					
					stateClockSync = {|get_CLID_f0,f0::entered|}
					}
						endmodule
			-- compileOperationDef
			module OP_disableHV
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
				
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_f0|
				              NID_j0
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_HVEnabled, set_HVEnabled, setL_HVEnabled, setR_HVEnabled: core_boolean
				channel get_currentState, set_currentState, setL_currentState, setR_currentState: State
				channel get_dutyCyclePWM1, set_dutyCyclePWM1, setL_dutyCyclePWM1, setR_dutyCyclePWM1: duty
				channel get_mSetPoint, set_mSetPoint, setL_mSetPoint, setR_mSetPoint: core_real
				
				-- Shared variable channels
				channel set_EXT_HVEnabled: core_boolean
				channel set_EXT_currentState: State
				channel set_EXT_dutyCyclePWM1: duty
				channel set_EXT_mSetPoint: core_real
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel int_enablePWM__: NIDS.InOut.core_boolean
				channel int_enablePWM: InOut.core_boolean
				channel int_dutyCyclePWM1__: NIDS.InOut.duty
				channel int_dutyCyclePWM1: InOut.duty
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i0::enter,
				f0::enter,
				j0::enter
				|}
				
				enteredSS = 	{|
				f0::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
					set_EXT_HVEnabled,
					set_EXT_currentState,
					set_EXT_dutyCyclePWM1,
					set_EXT_mSetPoint
				|}
				
				channel clockReset, clockResetL, clockResetR 
				
				localClockResets = {||}
				
				
				channel get_CLID_f0 : CLID_f0_clock_type
				
				--channel increment__
				
				CLID_f0_clock_type = {0..(clock_type_max(Union({
				{}
				}))+1)}
				
				
					-- Nodes --
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
										arg) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__,
										arg) = D__(id__,
										arg)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Final state: f0
					module f0
					
					exports
					
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							D__(id__,
										arg) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
									
									Entering 	= entered -> SKIP ; Active
									Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
									Interrupted	= share__choice(exit -> exited -> Inactive)
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
										arg) = D__(id__,
										arg)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Junction: j0
					module j0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
										arg) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
										arg) = D__(id__,
										arg)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					-- END of Nodes --
					
					Timed(OneStep) {
					-- Operation calls --
					-- Only the undefined operations are declared here.
					-- If the state machine is in isolation, all required operations will be undefined.
					-- If it is in the context of a controller, the required operations not provided by the
					-- controller will be declared here, and the defined operations will be defined in the
					-- context of the Controller module, and therefore within scope of the state machine module.
					
					-- END of Operation calls --
				
					-- STM processes
					STM(id__,
								arg) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
					Stateful(id__,
								arg) \ {terminate}
					
					STM_VS_O(id__,
								arg) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
					Stateful(id__,
								arg) \ {terminate}
					
					-- Transitions
					Transitions(id__,
								arg) = ((let
						Trans = TimeOut_1(
							 (share__ -> SKIP
							 [] dbisim(((arg==false))&(internal__!NID_j0 -> SKIP ;  ((SKIP ; f0::enter -> SKIP))))
							 [] dbisim(((arg==true))&(internal__!NID_j0 -> SKIP ;  ((share__choice(true & (share__choice(set_currentState!State_ErrorMode -> SKIP))) ; f0::enter -> SKIP))))
							 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((Deadline(true&(share__choice(int_enablePWM.out!false -> SKIP)),0);share__choice(true & (share__choice(set_dutyCyclePWM1!real2duty(0) -> SKIP)));Deadline(share__choice(get_dutyCyclePWM1?dutyCyclePWM1 -> true&(share__choice(int_dutyCyclePWM1.out!dutyCyclePWM1 -> SKIP))),0);share__choice(true & (share__choice(set_HVEnabled!false -> SKIP)));share__choice(true & (share__choice(set_mSetPoint!0 -> SKIP))) ; j0::enter -> SKIP))))
							 []
							 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
							 )
						,SKIP);Trans
					within
						Trans [|{terminate}|> SKIP
					)
					)
					
					-- Stateful
					-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
					
					-- Named process definitions
					MachineBody(id__,
								arg) = 
						dbisim((
						let
							finalNodesEntered = {|f0::entered|}
						within
							((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								f0::enter,
								j0::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited|})
									transSync = {|internal__.NID_j0,internal__.NID_j0,internal__.NID_i0|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
									   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   		    i0::D__(id__,
									   		    			arg)
									   		    [| { share__, terminate } |] (
									   		    f0::D__(id__,
									   		    			arg)
									   		    [| { share__, terminate } |] (
									   		    j0::D__(id__,
									   		    			arg)
									   		    )
									   		    )
									   		  )
									 )
									 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									|}) |]
									 ((i0::enter -> Transitions(id__,
									 			arg))
									  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 )
									)
									)
								)
								 \ hideSet)
								[[
									int_enablePWM__.x____ <- int_enablePWM,
									int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
									| x____ <- NIDS
								]]
							)
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour(id__,
								arg) = 
						dbisim((let
							stateClockSync = {|get_CLID_f0,f0::entered|}
						 within
							(MachineBody(id__,
										arg) [| union(stateClockSync,{terminate}) |] StateClocks) \ union(stateClockSync,enteredSS)
						)
						)
					
					Stateful(id__,
								arg) = 
						dbisim((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour(id__,
										arg) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__,
							 			arg) [| {terminate} |] Clocks)
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					-- Visible counterparts
					MachineBody_VS_O(id__,
								arg) = 
						dbisim((
						let
							finalNodesEntered = {|f0::entered|}
						within
							((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								f0::enter,
								j0::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited|})
									transSync = {|internal__.NID_j0,internal__.NID_j0,internal__.NID_i0|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
									   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   		    i0::VS_O__(id__,
									   		    			arg)
									   		    [| { share__, terminate } |] (
									   		    f0::VS_O__(id__,
									   		    			arg)
									   		    [| { share__, terminate } |] (
									   		    j0::VS_O__(id__,
									   		    			arg)
									   		    )
									   		    )
									   		  )
									 )
									 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									|}) |]
									 ((i0::enter -> Transitions(id__,
									 			arg))
									  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 )
									)
									)
								)
								 \ hideSet)
								[[
									int_enablePWM__.x____ <- int_enablePWM,
									int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
									| x____ <- NIDS
								]]
							)
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour_VS_O(id__,
								arg) = 
						dbisim((let
							stateClockSync = {|get_CLID_f0,f0::entered|}
						 within
							(MachineBody_VS_O(id__,
										arg) [| union(stateClockSync,{terminate}) |] StateClocks) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					Stateful_VS_O(id__,
								arg) = 
						dbisim((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour_VS_O(id__,
										arg) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__,
							 			arg) [| {terminate} |] Clocks)
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
						
					-- END
					
					-- Memory
					-- Memory variables
					
					-- varMemory process
					varMemory(id__,
								arg) = terminate -> SKIP
					
					getsetLocalChannels = {||}
					
					-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
					FVS__(id__,
								arg) = STM_VS_O(id__,
								arg) \ localClockResets
					D__(id__,
								arg) = timed_priority(STM(id__,
								arg) \ union(internal_events,localClockResets))
					O__(id__,
								arg) = dbisim(D__(id__,
								arg))
					VS__(id__,
								arg) = FVS__(id__,
								arg)
					VS_O__(id__,
								arg) = dbisim(FVS__(id__,
								arg))
					HEXT__(id__,
								arg) = O__(id__,
								arg) [|shared_variable_events|] SKIP
					FVS_C__(id__,
								arg) = dbisim(timed_priority(STM(id__,
								arg) \ internal_events))
					HUP__(id__,
								arg) = timed_priority(O__(id__,
								arg) [|{share__}|] SKIP)
					
					-- Clocks
					
					Clocks = terminate -> SKIP
					
					clockSync = {||}
					
					Clock_CLID_f0(x__) = 
						TimeOut_1(
							f0::entered -> Clock_CLID_f0(0)
							[]
							get_CLID_f0!x__ -> Clock_CLID_f0(x__)
							[]
							terminate -> SKIP,Clock_CLID_f0(Plus(x__,1,CLID_f0_clock_type)))
					
					StateClocks = dbisim(Clock_CLID_f0(0))
					
					stateClockSync = {|get_CLID_f0,f0::entered|}
					}
						endmodule
		
			-- declaring machines
			module stm_ref0
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i1|
				              NID_s1|
				              NID_s0
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_HVEnabled, set_HVEnabled, setL_HVEnabled, setR_HVEnabled: core_boolean
				channel get_pow24VStatus, set_pow24VStatus, setL_pow24VStatus, setR_pow24VStatus: Power
				channel get_currentState, set_currentState, setL_currentState, setR_currentState: State
				channel get_overLimit, set_overLimit, setL_overLimit, setR_overLimit: core_real
				channel get_underLimit, set_underLimit, setL_underLimit, setR_underLimit: core_real
				channel get_mSetPoint, set_mSetPoint, setL_mSetPoint, setR_mSetPoint: core_real
				channel get_dutyCyclePWM1, set_dutyCyclePWM1, setL_dutyCyclePWM1, setR_dutyCyclePWM1: duty
				
				-- Shared variable channels
				channel set_EXT_HVEnabled: core_boolean
				channel set_EXT_pow24VStatus: Power
				channel set_EXT_currentState: State
				channel set_EXT_overLimit: core_real
				channel set_EXT_underLimit: core_real
				channel set_EXT_mSetPoint: core_real
				channel set_EXT_dutyCyclePWM1: duty
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel ext_pow24VStatus__: NIDS.InOut.Power
				channel ext_pow24VStatus: InOut.Power
				channel int_dutyCyclePWM1__: NIDS.InOut.duty
				channel int_dutyCyclePWM1: InOut.duty
				channel int_enablePWM__: NIDS.InOut.core_boolean
				channel int_enablePWM: InOut.core_boolean
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i1::enter,
				s1::enter,
				s0::enter
				|}
				
				enteredSS = 	{|
				s1::entered,
				s0::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
					set_EXT_HVEnabled,
					set_EXT_pow24VStatus,
					set_EXT_currentState,
					set_EXT_overLimit,
					set_EXT_underLimit,
					set_EXT_mSetPoint,
					set_EXT_dutyCyclePWM1
				|}
				
				channel clockReset, clockResetL, clockResetR 
				
				localClockResets = {||}
				
				
				channel get_CLID_s0 : CLID_s0_clock_type
				channel get_CLID_s1 : CLID_s1_clock_type
				
				--channel increment__
				
				CLID_s0_clock_type = {0..(clock_type_max(Union({
				}))+1)}
				CLID_s1_clock_type = {0..(clock_type_max(Union({
				}))+1)}
				
			
					-- Nodes --
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i1
					module i1
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: s1
					module s1
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&CALL__supplyVoltCheck(
											id__
										) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&CALL__supplyVoltCheck(
											id__
										) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: s0
					module s0
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&CALL__AdjustLimits(
											id__
										) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&CALL__AdjustLimits(
											id__
										) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					-- END of Nodes --
					
					Timed(OneStep) {
					-- Operation calls --
					-- Only the undefined operations are declared here.
					-- If the state machine is in isolation, all required operations will be undefined.
					-- If it is in the context of a controller, the required operations not provided by the
					-- controller will be declared here, and the defined operations will be defined in the
					-- context of the Controller module, and therefore within scope of the state machine module.
					
					CALL__supplyVoltCheck(id__) 	= (OP_supplyVoltCheck::O__(id__))
					[[
						OP_supplyVoltCheck::ext_pow24VStatus <- ext_pow24VStatus,
						OP_supplyVoltCheck::int_enablePWM <- int_enablePWM,
						OP_supplyVoltCheck::int_dutyCyclePWM1 <- int_dutyCyclePWM1
					]]
					[[
						OP_supplyVoltCheck::get_pow24VStatus <- get_pow24VStatus,
						OP_supplyVoltCheck::set_pow24VStatus <- set_pow24VStatus,
						OP_supplyVoltCheck::get_HVEnabled <- get_HVEnabled,
						OP_supplyVoltCheck::set_HVEnabled <- set_HVEnabled,
						OP_supplyVoltCheck::get_currentState <- get_currentState,
						OP_supplyVoltCheck::set_currentState <- set_currentState,
						OP_supplyVoltCheck::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
						OP_supplyVoltCheck::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
						OP_supplyVoltCheck::get_mSetPoint <- get_mSetPoint,
						OP_supplyVoltCheck::set_mSetPoint <- set_mSetPoint
					]]
					CALL__AdjustLimits(id__) 	= (OP_AdjustLimits::O__(id__))
					[[
						OP_AdjustLimits::get_overLimit <- get_overLimit,
						OP_AdjustLimits::set_overLimit <- set_overLimit,
						OP_AdjustLimits::get_underLimit <- get_underLimit,
						OP_AdjustLimits::set_underLimit <- set_underLimit,
						OP_AdjustLimits::get_mSetPoint <- get_mSetPoint,
						OP_AdjustLimits::set_mSetPoint <- set_mSetPoint
					]]
					-- END of Operation calls --
				
					-- STM processes
					STM(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
					( 
						(
							(
								(Stateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
							 	[[ share__ <- x__ | x__ <- {|set_EXT_HVEnabled,set_EXT_pow24VStatus,set_EXT_currentState,set_EXT_overLimit,set_EXT_underLimit,set_EXT_mSetPoint,set_EXT_dutyCyclePWM1|} ]]
							)
						[| {share__} |]
						SKIP
						)
						[| union(sharedVarSync,{terminate}) |]
						dbisim(sharedVarMemory(id__))
					)\sharedVarHide
					,<{terminate},{tock}>)
					
					STM_VS_O(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
					( 
						(
							(
								(Stateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
							 	[[ share__ <- x__ | x__ <- {|set_EXT_HVEnabled,set_EXT_pow24VStatus,set_EXT_currentState,set_EXT_overLimit,set_EXT_underLimit,set_EXT_mSetPoint,set_EXT_dutyCyclePWM1|} ]]
							)
						[| {share__} |]
						SKIP
						)
						[| union(sharedVarSync,{terminate}) |]
						dbisim(sharedVarMemory(id__))
					)\sharedVarHide
					,<{terminate},{tock}>)
					
					-- Transitions
					Transitions(id__) = ((let
						Trans = TimeOut_1(
							 (share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_i1 -> SKIP ;  ((SHARE_WAIT(ms(4)) ; s0::enter -> SKIP))))
							 [] dbisim((true)&(internal__!NID_s1 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SHARE_WAIT(ms(8)) ; s0::enter -> SKIP)))
							 [] dbisim((true)&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SHARE_WAIT(ms(2)) ; s1::enter -> SKIP)))
							 []
							 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
							 )
						,SKIP);Trans
					within
						Trans [|{terminate}|> SKIP
					)
					)
					
					-- Stateful
					-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
					
					-- Named process definitions
					MachineBody(id__) = 
						dbisim((
						let
							finalNodesEntered = {||}
						within
							((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i1::enter,
								s1::enter,
								s0::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited|})
									transSync = {|internal__.NID_i1,internal__.NID_s1,internal__.NID_s0|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
									   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   		    i1::D__(id__)
									   		    [| { share__, terminate } |] (
									   		    s1::D__(id__)
									   		    [| { share__, terminate } |] (
									   		    s0::D__(id__)
									   		    )
									   		    )
									   		  )
									 )
									 [[s1::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s1|}]]
									 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
									 [[i1::interrupt <- x__ | x__ <- {|internal__.NID_i1|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									|}) |]
									 ((i1::enter -> Transitions(id__))
									  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 )
									)
									)
								)
								 \ hideSet)
								[[
									ext_pow24VStatus__.x____ <- ext_pow24VStatus,
									int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1,
									int_enablePWM__.x____ <- int_enablePWM
									| x____ <- NIDS
								]]
							)
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour(id__) = 
						dbisim((let
							stateClockSync = {|get_CLID_s0,s0::entered,get_CLID_s1,s1::entered|}
						 within
							(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ union(stateClockSync,enteredSS)
						)
						)
					
					Stateful(id__) = 
						dbisim((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour(id__) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__) [| {terminate} |] Clocks)
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					-- Visible counterparts
					MachineBody_VS_O(id__) = 
						dbisim((
						let
							finalNodesEntered = {||}
						within
							((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i1::enter,
								s1::enter,
								s0::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited|})
									transSync = {|internal__.NID_i1,internal__.NID_s1,internal__.NID_s0|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
									   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   		    i1::VS_O__(id__)
									   		    [| { share__, terminate } |] (
									   		    s1::VS_O__(id__)
									   		    [| { share__, terminate } |] (
									   		    s0::VS_O__(id__)
									   		    )
									   		    )
									   		  )
									 )
									 [[s1::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s1|}]]
									 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
									 [[i1::interrupt <- x__ | x__ <- {|internal__.NID_i1|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									|}) |]
									 ((i1::enter -> Transitions(id__))
									  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 )
									)
									)
								)
								 \ hideSet)
								[[
									ext_pow24VStatus__.x____ <- ext_pow24VStatus,
									int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1,
									int_enablePWM__.x____ <- int_enablePWM
									| x____ <- NIDS
								]]
							)
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour_VS_O(id__) = 
						dbisim((let
							stateClockSync = {|get_CLID_s0,s0::entered,get_CLID_s1,s1::entered|}
						 within
							(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					Stateful_VS_O(id__) = 
						dbisim((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour_VS_O(id__) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__) [| {terminate} |] Clocks)
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
						
					-- END
					
					-- Memory
					-- Memory variables
					
					-- varMemory process
					varMemory(id__) = terminate -> SKIP
					
					getsetLocalChannels = {||}
					
					-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
					FVS__(id__) = STM_VS_O(id__) \ localClockResets
					D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
					O__(id__) = dbisim(D__(id__))
					VS__(id__) = FVS__(id__)
					VS_O__(id__) = dbisim(FVS__(id__))
					HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
					FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
					HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
					
					-- Clocks
					
					Clocks = terminate -> SKIP
					
					clockSync = {||}
					
					Clock_CLID_s0(x__) = 
						TimeOut_1(
							s0::entered -> Clock_CLID_s0(0)
							[]
							get_CLID_s0!x__ -> Clock_CLID_s0(x__)
							[]
							terminate -> SKIP,Clock_CLID_s0(Plus(x__,1,CLID_s0_clock_type)))
					Clock_CLID_s1(x__) = 
						TimeOut_1(
							s1::entered -> Clock_CLID_s1(0)
							[]
							get_CLID_s1!x__ -> Clock_CLID_s1(x__)
							[]
							terminate -> SKIP,Clock_CLID_s1(Plus(x__,1,CLID_s1_clock_type)))
					
					StateClocks = dbisim(Clock_CLID_s0(0))
					[| { terminate } |] (
					dbisim(Clock_CLID_s1(0))
					)
					
					stateClockSync = {|get_CLID_s0,s0::entered,get_CLID_s1,s1::entered|}
					
					-- Shared memory
					-- Shared memory variables
					Memory_HVEnabled(HVEnabled) =
						get_HVEnabled!HVEnabled -> Memory_HVEnabled(HVEnabled)
						[]
						set_HVEnabled?x__ -> Memory_HVEnabled(x__)
						[]
						set_EXT_HVEnabled?x__ -> Memory_HVEnabled(x__)
						[]
						terminate -> SKIP
					Memory_pow24VStatus(pow24VStatus) =
						get_pow24VStatus!pow24VStatus -> Memory_pow24VStatus(pow24VStatus)
						[]
						set_pow24VStatus?x__ -> Memory_pow24VStatus(x__)
						[]
						set_EXT_pow24VStatus?x__ -> Memory_pow24VStatus(x__)
						[]
						terminate -> SKIP
					Memory_currentState(currentState) =
						get_currentState!currentState -> Memory_currentState(currentState)
						[]
						set_currentState?x__ -> Memory_currentState(x__)
						[]
						set_EXT_currentState?x__ -> Memory_currentState(x__)
						[]
						terminate -> SKIP
					Memory_overLimit(overLimit) =
						get_overLimit!overLimit -> Memory_overLimit(overLimit)
						[]
						set_overLimit?x__ -> Memory_overLimit(x__)
						[]
						set_EXT_overLimit?x__ -> Memory_overLimit(x__)
						[]
						terminate -> SKIP
					Memory_underLimit(underLimit) =
						get_underLimit!underLimit -> Memory_underLimit(underLimit)
						[]
						set_underLimit?x__ -> Memory_underLimit(x__)
						[]
						set_EXT_underLimit?x__ -> Memory_underLimit(x__)
						[]
						terminate -> SKIP
					Memory_mSetPoint(mSetPoint) =
						get_mSetPoint!mSetPoint -> Memory_mSetPoint(mSetPoint)
						[]
						set_mSetPoint?x__ -> Memory_mSetPoint(x__)
						[]
						set_EXT_mSetPoint?x__ -> Memory_mSetPoint(x__)
						[]
						terminate -> SKIP
					Memory_dutyCyclePWM1(dutyCyclePWM1) =
						get_dutyCyclePWM1!dutyCyclePWM1 -> Memory_dutyCyclePWM1(dutyCyclePWM1)
						[]
						set_dutyCyclePWM1?x__ -> Memory_dutyCyclePWM1(x__)
						[]
						set_EXT_dutyCyclePWM1?x__ -> Memory_dutyCyclePWM1(x__)
						[]
						terminate -> SKIP
					
					-- sharedVarMemory process
					sharedVarMemory(id__) = Memory_HVEnabled(true)
					[| { terminate } |] (
					Memory_pow24VStatus(Power_On)
					[| { terminate } |] (
					Memory_currentState(State_Wait24Vpower)
					[| { terminate } |] (
					Memory_overLimit(0)
					[| { terminate } |] (
					Memory_underLimit(0)
					[| { terminate } |] (
					Memory_mSetPoint(0)
					[| { terminate } |] (
					Memory_dutyCyclePWM1(0)
					)
					)
					)
					)
					)
					)
					
					sharedVarSync = {|get_HVEnabled,set_HVEnabled,set_EXT_HVEnabled,get_pow24VStatus,set_pow24VStatus,set_EXT_pow24VStatus,get_currentState,set_currentState,set_EXT_currentState,get_overLimit,set_overLimit,set_EXT_overLimit,get_underLimit,set_underLimit,set_EXT_underLimit,get_mSetPoint,set_mSetPoint,set_EXT_mSetPoint,get_dutyCyclePWM1,set_dutyCyclePWM1,set_EXT_dutyCyclePWM1|}
					
					sharedVarHide = {|get_HVEnabled,get_pow24VStatus,get_currentState,get_overLimit,get_underLimit,get_mSetPoint,get_dutyCyclePWM1|}
					}
			endmodule
			
			Timed(OneStep) {
					-- undefined operations
					
					-- declaring controller memory
					Memory(id__, HVEnabled, pow24VStatus, currentState, overLimit, underLimit, mSetPoint, dutyCyclePWM1) = (
					set_EXT_HVEnabled?x__ -> stm_ref0::set_EXT_HVEnabled!x__ -> 
					Memory(id__,x__,pow24VStatus,currentState,overLimit,underLimit,mSetPoint,dutyCyclePWM1)
					 []
					set_EXT_pow24VStatus?x__ -> stm_ref0::set_EXT_pow24VStatus!x__ -> 
					Memory(id__,HVEnabled,x__,currentState,overLimit,underLimit,mSetPoint,dutyCyclePWM1)
					 []
					set_EXT_currentState?x__ -> stm_ref0::set_EXT_currentState!x__ -> 
					Memory(id__,HVEnabled,pow24VStatus,x__,overLimit,underLimit,mSetPoint,dutyCyclePWM1)
					 []
					set_EXT_overLimit?x__ -> stm_ref0::set_EXT_overLimit!x__ -> 
					Memory(id__,HVEnabled,pow24VStatus,currentState,x__,underLimit,mSetPoint,dutyCyclePWM1)
					 []
					set_EXT_underLimit?x__ -> stm_ref0::set_EXT_underLimit!x__ -> 
					Memory(id__,HVEnabled,pow24VStatus,currentState,overLimit,x__,mSetPoint,dutyCyclePWM1)
					 []
					set_EXT_mSetPoint?x__ -> stm_ref0::set_EXT_mSetPoint!x__ -> 
					Memory(id__,HVEnabled,pow24VStatus,currentState,overLimit,underLimit,x__,dutyCyclePWM1)
					 []
					set_EXT_dutyCyclePWM1?x__ -> stm_ref0::set_EXT_dutyCyclePWM1!x__ -> 
					Memory(id__,HVEnabled,pow24VStatus,currentState,overLimit,underLimit,mSetPoint,x__)
					)
					
					D__(id__) = prioritise(	((
							stm_ref0::D__(id__)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::ext_pow24VStatus <- ext_pow24VStatus,
								stm_ref0::int_dutyCyclePWM1 <- int_dutyCyclePWM1,
								stm_ref0::int_enablePWM <- int_enablePWM,
								stm_ref0::set_HVEnabled <- set_HVEnabled,
								stm_ref0::get_HVEnabled <- get_HVEnabled,
								stm_ref0::set_pow24VStatus <- set_pow24VStatus,
								stm_ref0::get_pow24VStatus <- get_pow24VStatus,
								stm_ref0::set_currentState <- set_currentState,
								stm_ref0::get_currentState <- get_currentState,
								stm_ref0::set_overLimit <- set_overLimit,
								stm_ref0::get_overLimit <- get_overLimit,
								stm_ref0::set_underLimit <- set_underLimit,
								stm_ref0::get_underLimit <- get_underLimit,
								stm_ref0::set_mSetPoint <- set_mSetPoint,
								stm_ref0::get_mSetPoint <- get_mSetPoint,
								stm_ref0::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
								stm_ref0::get_dutyCyclePWM1 <- get_dutyCyclePWM1
							]]
						)
							[|
								union(
									{|
									|},
									{|
										stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
									|}
								)
							|]
						Memory(id__, true, Power_On, State_Wait24Vpower, 0, 0, 0, 0)
					)
					\ union(
						{|
						|},
						{|
							stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>)
					
					-- VS version
					VS__(id__) = prioritise(	((
							stm_ref0::VS__(id__)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::ext_pow24VStatus <- ext_pow24VStatus,
								stm_ref0::int_dutyCyclePWM1 <- int_dutyCyclePWM1,
								stm_ref0::int_enablePWM <- int_enablePWM,
								stm_ref0::set_HVEnabled <- set_HVEnabled,
								stm_ref0::get_HVEnabled <- get_HVEnabled,
								stm_ref0::set_pow24VStatus <- set_pow24VStatus,
								stm_ref0::get_pow24VStatus <- get_pow24VStatus,
								stm_ref0::set_currentState <- set_currentState,
								stm_ref0::get_currentState <- get_currentState,
								stm_ref0::set_overLimit <- set_overLimit,
								stm_ref0::get_overLimit <- get_overLimit,
								stm_ref0::set_underLimit <- set_underLimit,
								stm_ref0::get_underLimit <- get_underLimit,
								stm_ref0::set_mSetPoint <- set_mSetPoint,
								stm_ref0::get_mSetPoint <- get_mSetPoint,
								stm_ref0::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
								stm_ref0::get_dutyCyclePWM1 <- get_dutyCyclePWM1
							]]
						)
							[|
								union(
									{|
									|},
									{|
										stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
									|}
								)
							|]
						Memory(id__, true, Power_On, State_Wait24Vpower, 0, 0, 0, 0)
					)
					\ union(
						{|
						|},
						{|
							stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>)
				
					-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
					O__(id__) = dbisim(prioritise(	((
							stm_ref0::O__(id__)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::ext_pow24VStatus <- ext_pow24VStatus,
								stm_ref0::int_dutyCyclePWM1 <- int_dutyCyclePWM1,
								stm_ref0::int_enablePWM <- int_enablePWM,
								stm_ref0::set_HVEnabled <- set_HVEnabled,
								stm_ref0::get_HVEnabled <- get_HVEnabled,
								stm_ref0::set_pow24VStatus <- set_pow24VStatus,
								stm_ref0::get_pow24VStatus <- get_pow24VStatus,
								stm_ref0::set_currentState <- set_currentState,
								stm_ref0::get_currentState <- get_currentState,
								stm_ref0::set_overLimit <- set_overLimit,
								stm_ref0::get_overLimit <- get_overLimit,
								stm_ref0::set_underLimit <- set_underLimit,
								stm_ref0::get_underLimit <- get_underLimit,
								stm_ref0::set_mSetPoint <- set_mSetPoint,
								stm_ref0::get_mSetPoint <- get_mSetPoint,
								stm_ref0::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
								stm_ref0::get_dutyCyclePWM1 <- get_dutyCyclePWM1
							]]
						)
							[|
								union(
									{|
									|},
									{|
										stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
									|}
								)
							|]
						dbisim(Memory(id__, true, Power_On, State_Wait24Vpower, 0, 0, 0, 0))
					)
					\ union(
						{|
						|},
						{|
							stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>))
									
					-- VS_O version
					VS_O__(id__) = dbisim(prioritise(	((
							stm_ref0::VS_O__(id__)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::ext_pow24VStatus <- ext_pow24VStatus,
								stm_ref0::int_dutyCyclePWM1 <- int_dutyCyclePWM1,
								stm_ref0::int_enablePWM <- int_enablePWM,
								stm_ref0::set_HVEnabled <- set_HVEnabled,
								stm_ref0::get_HVEnabled <- get_HVEnabled,
								stm_ref0::set_pow24VStatus <- set_pow24VStatus,
								stm_ref0::get_pow24VStatus <- get_pow24VStatus,
								stm_ref0::set_currentState <- set_currentState,
								stm_ref0::get_currentState <- get_currentState,
								stm_ref0::set_overLimit <- set_overLimit,
								stm_ref0::get_overLimit <- get_overLimit,
								stm_ref0::set_underLimit <- set_underLimit,
								stm_ref0::get_underLimit <- get_underLimit,
								stm_ref0::set_mSetPoint <- set_mSetPoint,
								stm_ref0::get_mSetPoint <- get_mSetPoint,
								stm_ref0::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
								stm_ref0::get_dutyCyclePWM1 <- get_dutyCyclePWM1
							]]
						)
							[|
								union(
									{|
									|},
									{|
										stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
									|}
								)
							|]
						dbisim(Memory(id__, true, Power_On, State_Wait24Vpower, 0, 0, 0, 0))
					)
					\ union(
						{|
						|},
						{|
							stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>))
				
					HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP			
			}
	
		endmodule
		module ctrl_ref2
			shared_variable_events = {|
			|}
			
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
	
			-- declaring controller events
			channel ext_pow24VStatus: InOut.Power
			channel ext_pow24_1: InOut.Power
			channel ext_pow24_2: InOut.Power
			
			
			
			-- declaring call and ret events for undefined operations
			
			-- declaring controller termination channel		
			channel terminate
			
			-- set of visible memory events
			visibleMemoryEvents = {||}
	
			-- defined operations
		
			-- declaring machines
			module stm0
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_s0
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_power, set_power, setL_power, setR_power: Power
				channel get_fresh, set_fresh, setL_fresh, setR_fresh: core_boolean
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel ext_pow24VStatus__: NIDS.InOut.Power
				channel ext_pow24VStatus: InOut.Power
				channel ext_pow24_1__: NIDS.InOut.Power
				channel ext_pow24_1: InOut.Power
				channel ext_pow24_2__: NIDS.InOut.Power
				channel ext_pow24_2: InOut.Power
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i0::enter,
				s0::enter
				|}
				
				enteredSS = 	{|
				s0::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				channel clockReset, clockResetL, clockResetR 
				
				localClockResets = {||}
				
				
				channel get_CLID_s0 : CLID_s0_clock_type
				
				--channel increment__
				
				CLID_s0_clock_type = {0..(clock_type_max(Union({
				{}
				}))+1)}
				
			
					-- Nodes --
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: s0
					module s0
					
					enterSS = 
							{|			i0::enter,
								s0::enter
							|}
					enteredSS = 
							{|			s0::entered
							|}
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						-- declaring identifiers of transitions
						datatype NIDS = 
						              NID_i0|
						              NID_s0
						
						channel internal__ : NIDS
						channel ext_pow24VStatus__: NIDS.InOut.Power
						channel ext_pow24_1__: NIDS.InOut.Power
						channel ext_pow24_2__: NIDS.InOut.Power
						
						channel get_CLID_s0 : CLID_s0_clock_type
						
						--channel increment__
						
						CLID_s0_clock_type = {0..(clock_type_max(Union({
						}))+1)}
						
						--	Nodes
						-- declaring all nodes
						
						----------------------------------------------------------------------
						-- Initial: i0
						module i0
						exports
						
							channel enter, interrupt
							
							Timed(OneStep) {
								D__(id__) = 
									dbisim(let
										Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
										
										Termination = terminate -> SKIP
										
										Active 		= share__choice(interrupt -> SKIP) ; Inactive
									within
										Inactive [| {terminate} |> SKIP)
								
								VS_O__(id__) = D__(id__)
							}
						
						endmodule
						----------------------------------------------------------------------
						
						
						----------------------------------------------------------------------
						-- State: s0
						module s0
						
						enterSS = {}
						
						enteredSS = {}
						
						exports
						
							--  Declarations
							
							channel enter, entered, interrupt
							channel enteredL, enteredR
							
											
							
							
							--channel increment__
							
							
							--	Nodes
							-- declaring all nodes
							
							
							Timed(OneStep) {
								--	Rule: behaviours(Node)
								--  Note that FDR has problems with efficiently compiling the process below
								-- 	if using a different recursion pattern.
								D__(id__) = 
								dbisim(let
									-- IMPLEMENTATION NOTE: 
									-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
									-- however FDR struggles with that form in certain cases. So we use the exception operator
									-- instead to 'terminate'.
									
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= SKIP ; 
											 	  Behaviour ; 
											 	  share__choice(exit -> SKIP) ; SKIP ; 
											 	  share__choice(exited -> SKIP) ; Inactive
								
									Behaviour 	= entered -> During
									During 		= ((share__choice(get_power?power -> true&(share__choice(ext_pow24_2.out!power -> SKIP)));share__choice(true & (share__choice(set_fresh!false -> SKIP))) ; SStop) /\ interrupt -> SKIP)
								within
									Inactive [| {terminate} |> SKIP)
									
								VS_O__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= SKIP ; 
											 	  Behaviour ; 
											 	  share__choice(exit -> SKIP) ; SKIP ; 
											 	  share__choice(exited -> SKIP) ; Inactive
								
									Behaviour 	= entered -> During
									During 		= ((share__choice(get_power?power -> true&(share__choice(ext_pow24_2.out!power -> SKIP)));share__choice(true & (share__choice(set_fresh!false -> SKIP))) ; SStop) /\ interrupt -> SKIP)
								within
									Inactive [| {terminate} |> SKIP)
								
								
								-- Clocks
								
								StateClocks = terminate -> SKIP
								
								stateClockSync = {||}
							}
						
						endmodule
						----------------------------------------------------------------------
						
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&(share__choice(ext_pow24VStatus.in?power -> (SStop /\ set_power!power -> SKIP)));share__choice(true & (share__choice(set_fresh!true -> SKIP))) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
							
								Behaviour 	= dbisim(
									((
									 ((dbisim((dbisim((let
									 	-- IMPLEMENTATION NOTE:
									 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
									 	-- modules for defining the semantics of each node.
									 	enterSS = {|
									 	i0::enter,
									 	s0::enter
									 	|}
									 	hideSet = union(enterSS,{|exit,exited,internal__|})
									 within 
									 	((let
									 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									 		-- because CSPM modules are used for the semantics of Node.
									 		flowevts = union(enterSS,{|exit,exited|})
									 		transSync = {|internal__.NID_i0|}
									 	within
									 		((
									 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
									 		   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									 		   		    i0::D__(id__)
									 		   		    [| { share__, terminate } |] (
									 		   		    s0::D__(id__)
									 		   		    )
									 		   		  )
									 		 )
									 		 [[s0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 		 )
									 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 		 )
									 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 		|}) |]
									 		 ((i0::enter -> Transitions(id__))
									 		  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 		 )
									 		)
									 		)
									 	)
									 	 \ hideSet)
									 	[[
									 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
									 		ext_pow24_1__.x____ <- ext_pow24_1,
									 		ext_pow24_2__.x____ <- ext_pow24_2
									 		| x____ <- NIDS
									 	]]
									 )
									 )
									  [| union(stateClockSync,{terminate}) |]
									  StateClocks
									 )\diff(stateClockSync,enteredSS)))
									  [[ share__ <- x__ | x__ <- {| share__,setR_fresh,setR_power |} ]] 
									  [[set_fresh <- setL_fresh,set_power <- setL_power]]
									 )
									 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
									 			,setL_fresh
									 			,setL_power
									 			,setR_fresh
									 			 			,setR_power
									 			|}) |]
									 ((During)
									  [[ share__ <- x__ | x__ <- {| share__,setL_fresh,setL_power |} ]]
									  [[set_fresh <- setR_fresh,set_power <- setR_power]]
									 )
									)[[setL_fresh <- set_fresh,setL_power <- set_power]]
									 [[setR_fresh <- set_fresh,setR_power <- set_power]]
									)\union(enteredSS,{terminate}) 
								)
								During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
										 	  ; entered -> ((CRUN(enteredSS) ||| share__choice(get_power?power -> true&(share__choice(ext_pow24_1.out!power -> SKIP)));share__choice(true & (share__choice(set_fresh!false -> SKIP))) ; SStop) /\ interrupt -> terminate -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&(share__choice(ext_pow24VStatus.in?power -> (SStop /\ set_power!power -> SKIP)));share__choice(true & (share__choice(set_fresh!true -> SKIP))) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
							
								Behaviour 	= dbisim(
									((
									 ((dbisim((dbisim((let
									 	-- IMPLEMENTATION NOTE:
									 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
									 	-- modules for defining the semantics of each node.
									 	enterSS = {|
									 	i0::enter,
									 	s0::enter
									 	|}
									 	hideSet = union(enterSS,{|exit,exited,internal__|})
									 within 
									 	((let
									 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									 		-- because CSPM modules are used for the semantics of Node.
									 		flowevts = union(enterSS,{|exit,exited|})
									 		transSync = {|internal__.NID_i0|}
									 	within
									 		((
									 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
									 		   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									 		   		    i0::VS_O__(id__)
									 		   		    [| { share__, terminate } |] (
									 		   		    s0::VS_O__(id__)
									 		   		    )
									 		   		  )
									 		 )
									 		 [[s0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 		 )
									 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 		 )
									 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 		|}) |]
									 		 ((i0::enter -> Transitions(id__))
									 		  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 		 )
									 		)
									 		)
									 	)
									 	 \ hideSet)
									 	[[
									 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
									 		ext_pow24_1__.x____ <- ext_pow24_1,
									 		ext_pow24_2__.x____ <- ext_pow24_2
									 		| x____ <- NIDS
									 	]]
									 )
									 )
									  [| union(stateClockSync,{terminate}) |]
									  StateClocks
									 )\diff(stateClockSync,enteredSS)))
									  [[ share__ <- x__ | x__ <- {| share__,setR_fresh,setR_power |} ]] 
									  [[set_fresh <- setL_fresh,set_power <- setL_power]]
									 )
									 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
									 			,setL_fresh
									 			,setL_power
									 			,setR_fresh
									 			 			,setR_power
									 			|}) |]
									 ((During)
									  [[ share__ <- x__ | x__ <- {| share__,setL_fresh,setL_power |} ]]
									  [[set_fresh <- setR_fresh,set_power <- setR_power]]
									 )
									)[[setL_fresh <- set_fresh,setL_power <- set_power]]
									 [[setR_fresh <- set_fresh,setR_power <- set_power]]
									)\{terminate} 
								)
								During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
										 	  ; entered -> ((CRUN(enteredSS) ||| share__choice(get_power?power -> true&(share__choice(ext_pow24_1.out!power -> SKIP)));share__choice(true & (share__choice(set_fresh!false -> SKIP))) ; SStop) /\ interrupt -> terminate -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							Transitions(id__) = ((let
								Trans = TimeOut_1(
									 (share__ -> SKIP
									 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s0::enter -> SKIP))))
									 []
									 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
									 []
									 terminate -> SKIP
									 )
								,SKIP);Trans
							within
								Trans [|{terminate}|> SKIP
							)
							)
							
							
							-- Clocks
							Clock_CLID_s0(x__) = 
								TimeOut_1(
									s0::entered -> Clock_CLID_s0(0)
									[]
									get_CLID_s0!x__ -> Clock_CLID_s0(x__)
									[]
									terminate -> SKIP,Clock_CLID_s0(Plus(x__,1,CLID_s0_clock_type)))
							
							StateClocks = dbisim(Clock_CLID_s0(0))
							
							stateClockSync = {|get_CLID_s0,s0::entered|}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					-- END of Nodes --
					
					Timed(OneStep) {
					-- Operation calls --
					-- Only the undefined operations are declared here.
					-- If the state machine is in isolation, all required operations will be undefined.
					-- If it is in the context of a controller, the required operations not provided by the
					-- controller will be declared here, and the defined operations will be defined in the
					-- context of the Controller module, and therefore within scope of the state machine module.
					
					-- END of Operation calls --
				
					-- STM processes
					STM(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
					( 
						(
							(
								(Stateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
							 	[[ share__ <- x__ | x__ <- {||} ]]
							)
						[| {share__} |]
						SKIP
						)
						[| union(sharedVarSync,{terminate}) |]
						dbisim(sharedVarMemory(id__))
					)\sharedVarHide
					,<{terminate},{tock}>)
					
					STM_VS_O(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
					( 
						(
							(
								(Stateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
							 	[[ share__ <- x__ | x__ <- {||} ]]
							)
						[| {share__} |]
						SKIP
						)
						[| union(sharedVarSync,{terminate}) |]
						dbisim(sharedVarMemory(id__))
					)\sharedVarHide
					,<{terminate},{tock}>)
					
					-- Transitions
					Transitions(id__) = ((let
						Trans = get_fresh?fresh -> TimeOut_1(
							 (share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s0::enter -> SKIP))))
							 [] dbisim(((fresh==false))&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s0::enter -> SKIP)))
							 []
							 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
							 )
						,SKIP);Trans
					within
						Trans [|{terminate}|> SKIP
					)
					)
					
					-- Stateful
					-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
					
					-- Named process definitions
					MachineBody(id__) = 
						dbisim((
						let
							finalNodesEntered = {||}
						within
							((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								s0::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited|})
									transSync = {|internal__.NID_i0,internal__.NID_s0|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
									   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   		    i0::D__(id__)
									   		    [| { share__, terminate } |] (
									   		    s0::D__(id__)
									   		    )
									   		  )
									 )
									 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									  [[set_fresh <- setL_fresh]]
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 			,setL_fresh
									|}) |]
									 ((i0::enter -> Transitions(id__))
									  [[ share__ <- x__ | x__ <- {| share__,setL_fresh |} ]]
									 )
									)[[setL_fresh <- set_fresh]]
									)
								)
								 \ hideSet)
								[[
									ext_pow24VStatus__.x____ <- ext_pow24VStatus,
									ext_pow24_1__.x____ <- ext_pow24_1,
									ext_pow24_2__.x____ <- ext_pow24_2
									| x____ <- NIDS
								]]
							)
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour(id__) = 
						dbisim((let
							stateClockSync = {|get_CLID_s0,s0::entered|}
						 within
							(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ union(stateClockSync,enteredSS)
						)
						)
					
					Stateful(id__) = 
						dbisim((let
							getsetLocalChannels = {|get_power,set_power,
							get_fresh,set_fresh|}
							clockSync = {||}
						within
							(Behaviour(id__) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__) [| {terminate} |] Clocks)
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					-- Visible counterparts
					MachineBody_VS_O(id__) = 
						dbisim((
						let
							finalNodesEntered = {||}
						within
							((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								s0::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited|})
									transSync = {|internal__.NID_i0,internal__.NID_s0|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
									   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   		    i0::VS_O__(id__)
									   		    [| { share__, terminate } |] (
									   		    s0::VS_O__(id__)
									   		    )
									   		  )
									 )
									 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									  [[set_fresh <- setL_fresh]]
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 			,setL_fresh
									|}) |]
									 ((i0::enter -> Transitions(id__))
									  [[ share__ <- x__ | x__ <- {| share__,setL_fresh |} ]]
									 )
									)[[setL_fresh <- set_fresh]]
									)
								)
								 \ hideSet)
								[[
									ext_pow24VStatus__.x____ <- ext_pow24VStatus,
									ext_pow24_1__.x____ <- ext_pow24_1,
									ext_pow24_2__.x____ <- ext_pow24_2
									| x____ <- NIDS
								]]
							)
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour_VS_O(id__) = 
						dbisim((let
							stateClockSync = {|get_CLID_s0,s0::entered|}
						 within
							(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					Stateful_VS_O(id__) = 
						dbisim((let
							getsetLocalChannels = {|get_power,set_power,
							get_fresh,set_fresh|}
							clockSync = {||}
						within
							(Behaviour_VS_O(id__) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__) [| {terminate} |] Clocks)
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
						
					-- END
					
					-- Memory
					-- Memory variables
					Memory_power(power) =
						get_power!power -> Memory_power(power)
						[]
						set_power?x__ -> Memory_power(x__)
						[]
						terminate -> SKIP
					Memory_fresh(fresh) =
						get_fresh!fresh -> Memory_fresh(fresh)
						[]
						set_fresh?x__ -> Memory_fresh(x__)
						[]
						terminate -> SKIP
					
					-- varMemory process
					varMemory(id__) = Memory_power(Power_On)
					[| { terminate } |] (
					Memory_fresh(true)
					)
					
					getsetLocalChannels = {|get_power,set_power,get_fresh,set_fresh|}
					
					-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
					FVS__(id__) = STM_VS_O(id__) \ localClockResets
					D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
					O__(id__) = dbisim(D__(id__))
					VS__(id__) = FVS__(id__)
					VS_O__(id__) = dbisim(FVS__(id__))
					HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
					FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
					HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
					
					-- Clocks
					
					Clocks = terminate -> SKIP
					
					clockSync = {||}
					
					Clock_CLID_s0(x__) = 
						TimeOut_1(
							s0::entered -> Clock_CLID_s0(0)
							[]
							get_CLID_s0!x__ -> Clock_CLID_s0(x__)
							[]
							terminate -> SKIP,Clock_CLID_s0(Plus(x__,1,CLID_s0_clock_type)))
					
					StateClocks = dbisim(Clock_CLID_s0(0))
					
					stateClockSync = {|get_CLID_s0,s0::entered|}
					
					-- Shared memory
					-- Shared memory variables
					
					-- sharedVarMemory process
					sharedVarMemory(id__) = terminate -> SKIP
					
					sharedVarSync = {||}
					
					sharedVarHide = {||}
					}
			endmodule
			
			Timed(OneStep) {
					-- undefined operations
					
					-- declaring controller memory
					Memory(id__) = SKIP
					
					D__(id__) = prioritise(	((
							stm0::D__(id__)[[
								stm0::terminate <- terminate,
								stm0::ext_pow24VStatus <- ext_pow24VStatus,
								stm0::ext_pow24_1 <- ext_pow24_1,
								stm0::ext_pow24_2 <- ext_pow24_2
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>)
					
					-- VS version
					VS__(id__) = prioritise(	((
							stm0::VS__(id__)[[
								stm0::terminate <- terminate,
								stm0::ext_pow24VStatus <- ext_pow24VStatus,
								stm0::ext_pow24_1 <- ext_pow24_1,
								stm0::ext_pow24_2 <- ext_pow24_2
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>)
				
					-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
					O__(id__) = dbisim(prioritise(	((
							stm0::O__(id__)[[
								stm0::terminate <- terminate,
								stm0::ext_pow24VStatus <- ext_pow24VStatus,
								stm0::ext_pow24_1 <- ext_pow24_1,
								stm0::ext_pow24_2 <- ext_pow24_2
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>))
									
					-- VS_O version
					VS_O__(id__) = dbisim(prioritise(	((
							stm0::VS_O__(id__)[[
								stm0::terminate <- terminate,
								stm0::ext_pow24VStatus <- ext_pow24VStatus,
								stm0::ext_pow24_1 <- ext_pow24_1,
								stm0::ext_pow24_2 <- ext_pow24_2
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>))
				
					HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP			
			}
	
		endmodule
		module ctrl_ref3
			shared_variable_events = {|
			|}
			
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
	
			-- declaring controller events
			channel int_dutyCyclePWM1: InOut.duty
			channel int_enablePWM: InOut.core_boolean
			channel ctrl0_dutyCyclePWM1: InOut.duty
			channel ctrl1_dutyCyclePWM1: InOut.duty
			channel ctrl0_enablePWM: InOut.core_boolean
			channel ctrl1_enablePWM: InOut.core_boolean
			
			
			
			-- declaring call and ret events for undefined operations
			
			-- declaring controller termination channel		
			channel terminate
			
			-- set of visible memory events
			visibleMemoryEvents = {||}
	
			-- defined operations
		
			-- declaring machines
			module stm0
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_s0
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_duty, set_duty, setL_duty, setR_duty: duty
				channel get_enabled, set_enabled, setL_enabled, setR_enabled: core_boolean
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel int_dutyCyclePWM1__: NIDS.InOut.duty
				channel int_dutyCyclePWM1: InOut.duty
				channel int_enablePWM__: NIDS.InOut.core_boolean
				channel int_enablePWM: InOut.core_boolean
				channel ctrl0_dutyCyclePWM1__: NIDS.InOut.duty
				channel ctrl0_dutyCyclePWM1: InOut.duty
				channel ctrl1_dutyCyclePWM1__: NIDS.InOut.duty
				channel ctrl1_dutyCyclePWM1: InOut.duty
				channel ctrl0_enablePWM__: NIDS.InOut.core_boolean
				channel ctrl0_enablePWM: InOut.core_boolean
				channel ctrl1_enablePWM__: NIDS.InOut.core_boolean
				channel ctrl1_enablePWM: InOut.core_boolean
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i0::enter,
				s0::enter
				|}
				
				enteredSS = 	{|
				s0::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				channel clockReset, clockResetL, clockResetR 
				
				localClockResets = {||}
				
				
				channel get_CLID_s0 : CLID_s0_clock_type
				
				--channel increment__
				
				CLID_s0_clock_type = {0..(clock_type_max(Union({
				}))+1)}
				
			
					-- Nodes --
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: s0
					module s0
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					-- END of Nodes --
					
					Timed(OneStep) {
					-- Operation calls --
					-- Only the undefined operations are declared here.
					-- If the state machine is in isolation, all required operations will be undefined.
					-- If it is in the context of a controller, the required operations not provided by the
					-- controller will be declared here, and the defined operations will be defined in the
					-- context of the Controller module, and therefore within scope of the state machine module.
					
					-- END of Operation calls --
				
					-- STM processes
					STM(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
					( 
						(
							(
								(Stateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
							 	[[ share__ <- x__ | x__ <- {||} ]]
							)
						[| {share__} |]
						SKIP
						)
						[| union(sharedVarSync,{terminate}) |]
						dbisim(sharedVarMemory(id__))
					)\sharedVarHide
					,<{terminate},{tock}>)
					
					STM_VS_O(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
					( 
						(
							(
								(Stateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
							 	[[ share__ <- x__ | x__ <- {||} ]]
							)
						[| {share__} |]
						SKIP
						)
						[| union(sharedVarSync,{terminate}) |]
						dbisim(sharedVarMemory(id__))
					)\sharedVarHide
					,<{terminate},{tock}>)
					
					-- Transitions
					Transitions(id__) = ((let
						Trans = TimeOut_1(
							 (share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s0::enter -> SKIP))))
							 [] dbisim((true)&(ctrl1_enablePWM__!NID_s0.in?enabled:{enabled|enabled <- core_boolean, true} -> share__choice(set_enabled!enabled -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; Deadline(share__choice(get_enabled?enabled -> true&(share__choice(int_enablePWM.out!enabled -> SKIP))),0) ; s0::enter -> SKIP)))
							 [] dbisim((true)&(ctrl0_enablePWM__!NID_s0.in?enabled:{enabled|enabled <- core_boolean, true} -> share__choice(set_enabled!enabled -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; Deadline(share__choice(get_enabled?enabled -> true&(share__choice(int_enablePWM.out!enabled -> SKIP))),0) ; s0::enter -> SKIP)))
							 [] dbisim((true)&(ctrl1_dutyCyclePWM1__!NID_s0.in?duty:{duty|duty <- duty, true} -> share__choice(set_duty!duty -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; Deadline(share__choice(get_duty?duty -> true&(share__choice(int_dutyCyclePWM1.out!duty -> SKIP))),0) ; s0::enter -> SKIP)))
							 [] dbisim((true)&(ctrl0_dutyCyclePWM1__!NID_s0.in?duty:{duty|duty <- duty, true} -> share__choice(set_duty!duty -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; Deadline(share__choice(get_duty?duty -> true&(share__choice(int_dutyCyclePWM1.out!duty -> SKIP))),0) ; s0::enter -> SKIP)))
							 []
							 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
							 )
						,SKIP);Trans
					within
						Trans [|{terminate}|> SKIP
					)
					)
					
					-- Stateful
					-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
					
					-- Named process definitions
					MachineBody(id__) = 
						dbisim((
						let
							finalNodesEntered = {||}
						within
							((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								s0::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited|})
									transSync = {|internal__.NID_i0,ctrl1_enablePWM__.NID_s0.in,ctrl0_enablePWM__.NID_s0.in,ctrl1_dutyCyclePWM1__.NID_s0.in,ctrl0_dutyCyclePWM1__.NID_s0.in|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
									   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   		    i0::D__(id__)
									   		    [| { share__, terminate } |] (
									   		    s0::D__(id__)
									   		    )
									   		  )
									 )
									 [[s0::interrupt <- x__ | x__ <- {|interrupt,ctrl1_enablePWM__.NID_s0.in,ctrl0_enablePWM__.NID_s0.in,ctrl1_dutyCyclePWM1__.NID_s0.in,ctrl0_dutyCyclePWM1__.NID_s0.in|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__,setR_duty,setR_enabled |} ]] 
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 			,setR_duty
									 			 			,setR_enabled
									 			|}) |]
									 ((i0::enter -> Transitions(id__))
									  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									  [[set_duty <- setR_duty,set_enabled <- setR_enabled]]
									 )
									)
									 [[setR_duty <- set_duty,setR_enabled <- set_enabled]]
									)
								)
								 \ hideSet)
								[[
									int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1,
									int_enablePWM__.x____ <- int_enablePWM,
									ctrl0_dutyCyclePWM1__.x____ <- ctrl0_dutyCyclePWM1,
									ctrl1_dutyCyclePWM1__.x____ <- ctrl1_dutyCyclePWM1,
									ctrl0_enablePWM__.x____ <- ctrl0_enablePWM,
									ctrl1_enablePWM__.x____ <- ctrl1_enablePWM
									| x____ <- NIDS
								]]
							)
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour(id__) = 
						dbisim((let
							stateClockSync = {|get_CLID_s0,s0::entered|}
						 within
							(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ union(stateClockSync,enteredSS)
						)
						)
					
					Stateful(id__) = 
						dbisim((let
							getsetLocalChannels = {|get_duty,set_duty,
							get_enabled,set_enabled|}
							clockSync = {||}
						within
							(Behaviour(id__) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__) [| {terminate} |] Clocks)
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					-- Visible counterparts
					MachineBody_VS_O(id__) = 
						dbisim((
						let
							finalNodesEntered = {||}
						within
							((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								s0::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited|})
									transSync = {|internal__.NID_i0,ctrl1_enablePWM__.NID_s0.in,ctrl0_enablePWM__.NID_s0.in,ctrl1_dutyCyclePWM1__.NID_s0.in,ctrl0_dutyCyclePWM1__.NID_s0.in|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
									   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   		    i0::VS_O__(id__)
									   		    [| { share__, terminate } |] (
									   		    s0::VS_O__(id__)
									   		    )
									   		  )
									 )
									 [[s0::interrupt <- x__ | x__ <- {|interrupt,ctrl1_enablePWM__.NID_s0.in,ctrl0_enablePWM__.NID_s0.in,ctrl1_dutyCyclePWM1__.NID_s0.in,ctrl0_dutyCyclePWM1__.NID_s0.in|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__,setR_duty,setR_enabled |} ]] 
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 			,setR_duty
									 			 			,setR_enabled
									 			|}) |]
									 ((i0::enter -> Transitions(id__))
									  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									  [[set_duty <- setR_duty,set_enabled <- setR_enabled]]
									 )
									)
									 [[setR_duty <- set_duty,setR_enabled <- set_enabled]]
									)
								)
								 \ hideSet)
								[[
									int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1,
									int_enablePWM__.x____ <- int_enablePWM,
									ctrl0_dutyCyclePWM1__.x____ <- ctrl0_dutyCyclePWM1,
									ctrl1_dutyCyclePWM1__.x____ <- ctrl1_dutyCyclePWM1,
									ctrl0_enablePWM__.x____ <- ctrl0_enablePWM,
									ctrl1_enablePWM__.x____ <- ctrl1_enablePWM
									| x____ <- NIDS
								]]
							)
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour_VS_O(id__) = 
						dbisim((let
							stateClockSync = {|get_CLID_s0,s0::entered|}
						 within
							(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					Stateful_VS_O(id__) = 
						dbisim((let
							getsetLocalChannels = {|get_duty,set_duty,
							get_enabled,set_enabled|}
							clockSync = {||}
						within
							(Behaviour_VS_O(id__) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__) [| {terminate} |] Clocks)
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
						
					-- END
					
					-- Memory
					-- Memory variables
					Memory_duty(duty) =
						get_duty!duty -> Memory_duty(duty)
						[]
						set_duty?x__ -> Memory_duty(x__)
						[]
						terminate -> SKIP
					Memory_enabled(enabled) =
						get_enabled!enabled -> Memory_enabled(enabled)
						[]
						set_enabled?x__ -> Memory_enabled(x__)
						[]
						terminate -> SKIP
					
					-- varMemory process
					varMemory(id__) = Memory_duty(0)
					[| { terminate } |] (
					Memory_enabled(true)
					)
					
					getsetLocalChannels = {|get_duty,set_duty,get_enabled,set_enabled|}
					
					-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
					FVS__(id__) = STM_VS_O(id__) \ localClockResets
					D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
					O__(id__) = dbisim(D__(id__))
					VS__(id__) = FVS__(id__)
					VS_O__(id__) = dbisim(FVS__(id__))
					HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
					FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
					HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
					
					-- Clocks
					
					Clocks = terminate -> SKIP
					
					clockSync = {||}
					
					Clock_CLID_s0(x__) = 
						TimeOut_1(
							s0::entered -> Clock_CLID_s0(0)
							[]
							get_CLID_s0!x__ -> Clock_CLID_s0(x__)
							[]
							terminate -> SKIP,Clock_CLID_s0(Plus(x__,1,CLID_s0_clock_type)))
					
					StateClocks = dbisim(Clock_CLID_s0(0))
					
					stateClockSync = {|get_CLID_s0,s0::entered|}
					
					-- Shared memory
					-- Shared memory variables
					
					-- sharedVarMemory process
					sharedVarMemory(id__) = terminate -> SKIP
					
					sharedVarSync = {||}
					
					sharedVarHide = {||}
					}
			endmodule
			
			Timed(OneStep) {
					-- undefined operations
					
					-- declaring controller memory
					Memory(id__) = SKIP
					
					D__(id__) = prioritise(	((
							stm0::D__(id__)[[
								stm0::terminate <- terminate,
								stm0::int_enablePWM <- int_enablePWM,
								stm0::int_dutyCyclePWM1 <- int_dutyCyclePWM1,
								stm0::ctrl0_dutyCyclePWM1 <- ctrl0_dutyCyclePWM1,
								stm0::ctrl1_dutyCyclePWM1 <- ctrl1_dutyCyclePWM1,
								stm0::ctrl0_enablePWM <- ctrl0_enablePWM,
								stm0::ctrl1_enablePWM <- ctrl1_enablePWM
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>)
					
					-- VS version
					VS__(id__) = prioritise(	((
							stm0::VS__(id__)[[
								stm0::terminate <- terminate,
								stm0::int_enablePWM <- int_enablePWM,
								stm0::int_dutyCyclePWM1 <- int_dutyCyclePWM1,
								stm0::ctrl0_dutyCyclePWM1 <- ctrl0_dutyCyclePWM1,
								stm0::ctrl1_dutyCyclePWM1 <- ctrl1_dutyCyclePWM1,
								stm0::ctrl0_enablePWM <- ctrl0_enablePWM,
								stm0::ctrl1_enablePWM <- ctrl1_enablePWM
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>)
				
					-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
					O__(id__) = dbisim(prioritise(	((
							stm0::O__(id__)[[
								stm0::terminate <- terminate,
								stm0::int_enablePWM <- int_enablePWM,
								stm0::int_dutyCyclePWM1 <- int_dutyCyclePWM1,
								stm0::ctrl0_dutyCyclePWM1 <- ctrl0_dutyCyclePWM1,
								stm0::ctrl1_dutyCyclePWM1 <- ctrl1_dutyCyclePWM1,
								stm0::ctrl0_enablePWM <- ctrl0_enablePWM,
								stm0::ctrl1_enablePWM <- ctrl1_enablePWM
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>))
									
					-- VS_O version
					VS_O__(id__) = dbisim(prioritise(	((
							stm0::VS_O__(id__)[[
								stm0::terminate <- terminate,
								stm0::int_enablePWM <- int_enablePWM,
								stm0::int_dutyCyclePWM1 <- int_dutyCyclePWM1,
								stm0::ctrl0_dutyCyclePWM1 <- ctrl0_dutyCyclePWM1,
								stm0::ctrl1_dutyCyclePWM1 <- ctrl1_dutyCyclePWM1,
								stm0::ctrl0_enablePWM <- ctrl0_enablePWM,
								stm0::ctrl1_enablePWM <- ctrl1_enablePWM
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>))
				
					HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP			
			}
	
		endmodule
	
	Timed(OneStep) {
		visibleMemoryEvents = {|get_overLimit,set_overLimit,get_underLimit,set_underLimit,get_currentState,set_currentState,get_HVEnabled,set_HVEnabled,get_pow24VStatus,set_pow24VStatus,get_dutyCyclePWM1,set_dutyCyclePWM1,get_mSetPoint,set_mSetPoint|}
		
		-- declaring module memory
		Memory(id__, overLimit, underLimit, currentState, HVEnabled, pow24VStatus, dutyCyclePWM1, mSetPoint) = (
						set_overLimit?x__ -> 
						ctrl_ref0::set_EXT_overLimit!x__ -> 
						ctrl_ref1::set_EXT_overLimit!x__ -> 
						Memory(id__,x__,underLimit,currentState,HVEnabled,pow24VStatus,dutyCyclePWM1,mSetPoint)
						  []
						set_underLimit?x__ -> 
						ctrl_ref0::set_EXT_underLimit!x__ -> 
						ctrl_ref1::set_EXT_underLimit!x__ -> 
						Memory(id__,overLimit,x__,currentState,HVEnabled,pow24VStatus,dutyCyclePWM1,mSetPoint)
						  []
						set_currentState?x__ -> 
						ctrl_ref0::set_EXT_currentState!x__ -> 
						ctrl_ref1::set_EXT_currentState!x__ -> 
						Memory(id__,overLimit,underLimit,x__,HVEnabled,pow24VStatus,dutyCyclePWM1,mSetPoint)
						  []
						set_HVEnabled?x__ -> 
						ctrl_ref0::set_EXT_HVEnabled!x__ -> 
						ctrl_ref1::set_EXT_HVEnabled!x__ -> 
						Memory(id__,overLimit,underLimit,currentState,x__,pow24VStatus,dutyCyclePWM1,mSetPoint)
						  []
						set_pow24VStatus?x__ -> 
						ctrl_ref0::set_EXT_pow24VStatus!x__ -> 
						ctrl_ref1::set_EXT_pow24VStatus!x__ -> 
						Memory(id__,overLimit,underLimit,currentState,HVEnabled,x__,dutyCyclePWM1,mSetPoint)
						  []
						set_dutyCyclePWM1?x__ -> 
						ctrl_ref0::set_EXT_dutyCyclePWM1!x__ -> 
						ctrl_ref1::set_EXT_dutyCyclePWM1!x__ -> 
						Memory(id__,overLimit,underLimit,currentState,HVEnabled,pow24VStatus,x__,mSetPoint)
						  []
						set_mSetPoint?x__ -> 
						ctrl_ref0::set_EXT_mSetPoint!x__ -> 
						ctrl_ref1::set_EXT_mSetPoint!x__ -> 
						Memory(id__,overLimit,underLimit,currentState,HVEnabled,pow24VStatus,dutyCyclePWM1,x__)
						)
		
		D__(id__,
				    const_ctrl0_stm_ref0_cycleTime,
				   	const_setPointRamping_rampStep) = prioritise(	(
				(
					(SKIP)
						[|{||}|]
					(
						(
							(
								ctrl_ref0::D__(id__,
										    const_ctrl0_stm_ref0_cycleTime,
										   	const_setPointRamping_rampStep)[[
									ctrl_ref0::terminate <- terminate,
									ctrl_ref0::ext_setPoint <- ext_setPoint,
									ctrl_ref0::ext_errorAck <- ext_errorAck,
									ctrl_ref0::ext_ActualHV <- ext_ActualHV,
									ctrl_ref0::ext_pow24VStatus.in <- ctrl_ref2::ext_pow24_1.out,
									ctrl_ref0::ext_pow24VStatus.out <- ctrl_ref2::ext_pow24_1.in,
									ctrl_ref0::set_overLimit <- set_overLimit,
									ctrl_ref0::get_overLimit <- get_overLimit,
									ctrl_ref0::set_underLimit <- set_underLimit,
									ctrl_ref0::get_underLimit <- get_underLimit,
									ctrl_ref0::set_currentState <- set_currentState,
									ctrl_ref0::get_currentState <- get_currentState,
									ctrl_ref0::set_HVEnabled <- set_HVEnabled,
									ctrl_ref0::get_HVEnabled <- get_HVEnabled,
									ctrl_ref0::set_pow24VStatus <- set_pow24VStatus,
									ctrl_ref0::get_pow24VStatus <- get_pow24VStatus,
									ctrl_ref0::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
									ctrl_ref0::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
									ctrl_ref0::set_mSetPoint <- set_mSetPoint,
									ctrl_ref0::get_mSetPoint <- get_mSetPoint
								]]
							)
								[|{|terminate, ctrl_ref2::ext_pow24_1, ctrl_ref0::int_dutyCyclePWM1, ctrl_ref0::int_enablePWM|}|]
							(
								(
									ctrl_ref1::D__(id__)[[
										ctrl_ref1::terminate <- terminate,
										ctrl_ref1::ext_pow24VStatus.in <- ctrl_ref2::ext_pow24_2.out,
										ctrl_ref1::ext_pow24VStatus.out <- ctrl_ref2::ext_pow24_2.in,
										ctrl_ref1::set_overLimit <- set_overLimit,
										ctrl_ref1::get_overLimit <- get_overLimit,
										ctrl_ref1::set_underLimit <- set_underLimit,
										ctrl_ref1::get_underLimit <- get_underLimit,
										ctrl_ref1::set_currentState <- set_currentState,
										ctrl_ref1::get_currentState <- get_currentState,
										ctrl_ref1::set_HVEnabled <- set_HVEnabled,
										ctrl_ref1::get_HVEnabled <- get_HVEnabled,
										ctrl_ref1::set_pow24VStatus <- set_pow24VStatus,
										ctrl_ref1::get_pow24VStatus <- get_pow24VStatus,
										ctrl_ref1::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
										ctrl_ref1::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
										ctrl_ref1::set_mSetPoint <- set_mSetPoint,
										ctrl_ref1::get_mSetPoint <- get_mSetPoint
									]]
								)
									[|{|terminate, ctrl_ref2::ext_pow24_2, ctrl_ref1::int_dutyCyclePWM1, ctrl_ref1::int_enablePWM|}|]
								(
									(
										ctrl_ref2::D__(id__)[[
											ctrl_ref2::terminate <- terminate,
											ctrl_ref2::ext_pow24VStatus <- ext_pow24VStatus
										]]
									)
										[|{|terminate|}|]
									(
										ctrl_ref3::D__(id__)[[
											ctrl_ref3::terminate <- terminate,
											ctrl_ref3::int_enablePWM <- int_enablePWM,
											ctrl_ref3::int_dutyCyclePWM1 <- int_dutyCyclePWM1,
											ctrl_ref3::ctrl0_dutyCyclePWM1.in <- ctrl_ref0::int_dutyCyclePWM1.out,
											ctrl_ref3::ctrl0_dutyCyclePWM1.out <- ctrl_ref0::int_dutyCyclePWM1.in,
											ctrl_ref3::ctrl1_dutyCyclePWM1.in <- ctrl_ref1::int_dutyCyclePWM1.out,
											ctrl_ref3::ctrl1_dutyCyclePWM1.out <- ctrl_ref1::int_dutyCyclePWM1.in,
											ctrl_ref3::ctrl0_enablePWM.in <- ctrl_ref0::int_enablePWM.out,
											ctrl_ref3::ctrl0_enablePWM.out <- ctrl_ref0::int_enablePWM.in,
											ctrl_ref3::ctrl1_enablePWM.in <- ctrl_ref1::int_enablePWM.out,
											ctrl_ref3::ctrl1_enablePWM.out <- ctrl_ref1::int_enablePWM.in
										]]
									)
								)
								\
								diff(
									{|terminate|},
									{|terminate|}
								)
							)
							\
							diff(
								{|terminate, ctrl_ref2::ext_pow24_2, ctrl_ref1::int_dutyCyclePWM1, ctrl_ref1::int_enablePWM|},
								{|terminate|}
							)
						)
						\
						diff(
							{|terminate, ctrl_ref2::ext_pow24_1, ctrl_ref0::int_dutyCyclePWM1, ctrl_ref0::int_enablePWM|},
							{|terminate|}
						)
							[|
								union(
									{|
										set_overLimit,
										set_underLimit,
										set_currentState,
										set_HVEnabled,
										set_pow24VStatus,
										set_dutyCyclePWM1,
										set_mSetPoint
									|},
									{|
										ctrl_ref0::set_EXT_overLimit,ctrl_ref0::set_EXT_underLimit,ctrl_ref0::set_EXT_currentState,ctrl_ref0::set_EXT_HVEnabled,ctrl_ref0::set_EXT_pow24VStatus,ctrl_ref0::set_EXT_mSetPoint,ctrl_ref0::set_EXT_dutyCyclePWM1,
										ctrl_ref1::set_EXT_HVEnabled,ctrl_ref1::set_EXT_pow24VStatus,ctrl_ref1::set_EXT_currentState,ctrl_ref1::set_EXT_overLimit,ctrl_ref1::set_EXT_underLimit,ctrl_ref1::set_EXT_mSetPoint,ctrl_ref1::set_EXT_dutyCyclePWM1
									|}
								)
							|]
						Memory(id__, 0, 0, State_Wait24Vpower, true, Power_On, 0, 0)
					)
				)
				\ Union({
					{|
					|},
					{|
						ctrl_ref0::set_EXT_overLimit,ctrl_ref0::set_EXT_underLimit,ctrl_ref0::set_EXT_currentState,ctrl_ref0::set_EXT_HVEnabled,ctrl_ref0::set_EXT_pow24VStatus,ctrl_ref0::set_EXT_mSetPoint,ctrl_ref0::set_EXT_dutyCyclePWM1,
						ctrl_ref1::set_EXT_HVEnabled,ctrl_ref1::set_EXT_pow24VStatus,ctrl_ref1::set_EXT_currentState,ctrl_ref1::set_EXT_overLimit,ctrl_ref1::set_EXT_underLimit,ctrl_ref1::set_EXT_mSetPoint,ctrl_ref1::set_EXT_dutyCyclePWM1
					|},
					{|
						get_overLimit, set_overLimit,
						get_underLimit, set_underLimit,
						get_currentState, set_currentState,
						get_HVEnabled, set_HVEnabled,
						get_pow24VStatus, set_pow24VStatus,
						get_dutyCyclePWM1, set_dutyCyclePWM1,
						get_mSetPoint, set_mSetPoint
					|}
				})
				[|{|terminate|}|>SKIP
			)
			\{|terminate|}
		,<visibleMemoryEvents,{tock}>)
		
		-- visible state equivalent
		
		VS__(id__,
				    const_ctrl0_stm_ref0_cycleTime,
				   	const_setPointRamping_rampStep) = prioritise(	(
				(
					(SKIP)
						[|{||}|]
					(
						(
							(
								ctrl_ref0::VS__(id__,
										    const_ctrl0_stm_ref0_cycleTime,
										   	const_setPointRamping_rampStep)[[
									ctrl_ref0::terminate <- terminate,
									ctrl_ref0::ext_setPoint <- ext_setPoint,
									ctrl_ref0::ext_errorAck <- ext_errorAck,
									ctrl_ref0::ext_ActualHV <- ext_ActualHV,
									ctrl_ref0::ext_pow24VStatus.in <- ctrl_ref2::ext_pow24_1.out,
									ctrl_ref0::ext_pow24VStatus.out <- ctrl_ref2::ext_pow24_1.in,
									ctrl_ref0::set_overLimit <- set_overLimit,
									ctrl_ref0::get_overLimit <- get_overLimit,
									ctrl_ref0::set_underLimit <- set_underLimit,
									ctrl_ref0::get_underLimit <- get_underLimit,
									ctrl_ref0::set_currentState <- set_currentState,
									ctrl_ref0::get_currentState <- get_currentState,
									ctrl_ref0::set_HVEnabled <- set_HVEnabled,
									ctrl_ref0::get_HVEnabled <- get_HVEnabled,
									ctrl_ref0::set_pow24VStatus <- set_pow24VStatus,
									ctrl_ref0::get_pow24VStatus <- get_pow24VStatus,
									ctrl_ref0::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
									ctrl_ref0::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
									ctrl_ref0::set_mSetPoint <- set_mSetPoint,
									ctrl_ref0::get_mSetPoint <- get_mSetPoint
								]]
							)
								[|{|terminate, ctrl_ref2::ext_pow24_1, ctrl_ref0::int_dutyCyclePWM1, ctrl_ref0::int_enablePWM|}|]
							(
								(
									ctrl_ref1::VS__(id__)[[
										ctrl_ref1::terminate <- terminate,
										ctrl_ref1::ext_pow24VStatus.in <- ctrl_ref2::ext_pow24_2.out,
										ctrl_ref1::ext_pow24VStatus.out <- ctrl_ref2::ext_pow24_2.in,
										ctrl_ref1::set_overLimit <- set_overLimit,
										ctrl_ref1::get_overLimit <- get_overLimit,
										ctrl_ref1::set_underLimit <- set_underLimit,
										ctrl_ref1::get_underLimit <- get_underLimit,
										ctrl_ref1::set_currentState <- set_currentState,
										ctrl_ref1::get_currentState <- get_currentState,
										ctrl_ref1::set_HVEnabled <- set_HVEnabled,
										ctrl_ref1::get_HVEnabled <- get_HVEnabled,
										ctrl_ref1::set_pow24VStatus <- set_pow24VStatus,
										ctrl_ref1::get_pow24VStatus <- get_pow24VStatus,
										ctrl_ref1::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
										ctrl_ref1::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
										ctrl_ref1::set_mSetPoint <- set_mSetPoint,
										ctrl_ref1::get_mSetPoint <- get_mSetPoint
									]]
								)
									[|{|terminate, ctrl_ref2::ext_pow24_2, ctrl_ref1::int_dutyCyclePWM1, ctrl_ref1::int_enablePWM|}|]
								(
									(
										ctrl_ref2::VS__(id__)[[
											ctrl_ref2::terminate <- terminate,
											ctrl_ref2::ext_pow24VStatus <- ext_pow24VStatus
										]]
									)
										[|{|terminate|}|]
									(
										ctrl_ref3::VS__(id__)[[
											ctrl_ref3::terminate <- terminate,
											ctrl_ref3::int_enablePWM <- int_enablePWM,
											ctrl_ref3::int_dutyCyclePWM1 <- int_dutyCyclePWM1,
											ctrl_ref3::ctrl0_dutyCyclePWM1.in <- ctrl_ref0::int_dutyCyclePWM1.out,
											ctrl_ref3::ctrl0_dutyCyclePWM1.out <- ctrl_ref0::int_dutyCyclePWM1.in,
											ctrl_ref3::ctrl1_dutyCyclePWM1.in <- ctrl_ref1::int_dutyCyclePWM1.out,
											ctrl_ref3::ctrl1_dutyCyclePWM1.out <- ctrl_ref1::int_dutyCyclePWM1.in,
											ctrl_ref3::ctrl0_enablePWM.in <- ctrl_ref0::int_enablePWM.out,
											ctrl_ref3::ctrl0_enablePWM.out <- ctrl_ref0::int_enablePWM.in,
											ctrl_ref3::ctrl1_enablePWM.in <- ctrl_ref1::int_enablePWM.out,
											ctrl_ref3::ctrl1_enablePWM.out <- ctrl_ref1::int_enablePWM.in
										]]
									)
								)
								\
								diff(
									{|terminate|},
									{|terminate|}
								)
							)
							\
							diff(
								{|terminate, ctrl_ref2::ext_pow24_2, ctrl_ref1::int_dutyCyclePWM1, ctrl_ref1::int_enablePWM|},
								{|terminate|}
							)
						)
						\
						diff(
							{|terminate, ctrl_ref2::ext_pow24_1, ctrl_ref0::int_dutyCyclePWM1, ctrl_ref0::int_enablePWM|},
							{|terminate|}
						)
							[|
								union(
									{|
										set_overLimit,
										set_underLimit,
										set_currentState,
										set_HVEnabled,
										set_pow24VStatus,
										set_dutyCyclePWM1,
										set_mSetPoint
									|},
									{|
										ctrl_ref0::set_EXT_overLimit,ctrl_ref0::set_EXT_underLimit,ctrl_ref0::set_EXT_currentState,ctrl_ref0::set_EXT_HVEnabled,ctrl_ref0::set_EXT_pow24VStatus,ctrl_ref0::set_EXT_mSetPoint,ctrl_ref0::set_EXT_dutyCyclePWM1,
										ctrl_ref1::set_EXT_HVEnabled,ctrl_ref1::set_EXT_pow24VStatus,ctrl_ref1::set_EXT_currentState,ctrl_ref1::set_EXT_overLimit,ctrl_ref1::set_EXT_underLimit,ctrl_ref1::set_EXT_mSetPoint,ctrl_ref1::set_EXT_dutyCyclePWM1
									|}
								)
							|]
						Memory(id__, 0, 0, State_Wait24Vpower, true, Power_On, 0, 0)
					)
				)
				\ Union({
					{|
					|},
					{|
						ctrl_ref0::set_EXT_overLimit,ctrl_ref0::set_EXT_underLimit,ctrl_ref0::set_EXT_currentState,ctrl_ref0::set_EXT_HVEnabled,ctrl_ref0::set_EXT_pow24VStatus,ctrl_ref0::set_EXT_mSetPoint,ctrl_ref0::set_EXT_dutyCyclePWM1,
						ctrl_ref1::set_EXT_HVEnabled,ctrl_ref1::set_EXT_pow24VStatus,ctrl_ref1::set_EXT_currentState,ctrl_ref1::set_EXT_overLimit,ctrl_ref1::set_EXT_underLimit,ctrl_ref1::set_EXT_mSetPoint,ctrl_ref1::set_EXT_dutyCyclePWM1
					|},
					{|
						get_overLimit, set_overLimit,
						get_underLimit, set_underLimit,
						get_currentState, set_currentState,
						get_HVEnabled, set_HVEnabled,
						get_pow24VStatus, set_pow24VStatus,
						get_dutyCyclePWM1, set_dutyCyclePWM1,
						get_mSetPoint, set_mSetPoint
					|}
				})
				[|{|terminate|}|>SKIP
			)
			\{|terminate|}
		,<visibleMemoryEvents,{tock}>)
		
		-- O version (optimised)
		
		O__(id__,
				    const_ctrl0_stm_ref0_cycleTime,
				   	const_setPointRamping_rampStep) = dbisim(prioritise(	(
				(
					(SKIP)
						[|{||}|]
					(
						(
							(
								ctrl_ref0::O__(id__,
										    const_ctrl0_stm_ref0_cycleTime,
										   	const_setPointRamping_rampStep)[[
									ctrl_ref0::terminate <- terminate,
									ctrl_ref0::ext_setPoint <- ext_setPoint,
									ctrl_ref0::ext_errorAck <- ext_errorAck,
									ctrl_ref0::ext_ActualHV <- ext_ActualHV,
									ctrl_ref0::ext_pow24VStatus.in <- ctrl_ref2::ext_pow24_1.out,
									ctrl_ref0::ext_pow24VStatus.out <- ctrl_ref2::ext_pow24_1.in,
									ctrl_ref0::set_overLimit <- set_overLimit,
									ctrl_ref0::get_overLimit <- get_overLimit,
									ctrl_ref0::set_underLimit <- set_underLimit,
									ctrl_ref0::get_underLimit <- get_underLimit,
									ctrl_ref0::set_currentState <- set_currentState,
									ctrl_ref0::get_currentState <- get_currentState,
									ctrl_ref0::set_HVEnabled <- set_HVEnabled,
									ctrl_ref0::get_HVEnabled <- get_HVEnabled,
									ctrl_ref0::set_pow24VStatus <- set_pow24VStatus,
									ctrl_ref0::get_pow24VStatus <- get_pow24VStatus,
									ctrl_ref0::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
									ctrl_ref0::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
									ctrl_ref0::set_mSetPoint <- set_mSetPoint,
									ctrl_ref0::get_mSetPoint <- get_mSetPoint
								]]
							)
								[|{|terminate, ctrl_ref2::ext_pow24_1, ctrl_ref0::int_dutyCyclePWM1, ctrl_ref0::int_enablePWM|}|]
							(
								(
									ctrl_ref1::O__(id__)[[
										ctrl_ref1::terminate <- terminate,
										ctrl_ref1::ext_pow24VStatus.in <- ctrl_ref2::ext_pow24_2.out,
										ctrl_ref1::ext_pow24VStatus.out <- ctrl_ref2::ext_pow24_2.in,
										ctrl_ref1::set_overLimit <- set_overLimit,
										ctrl_ref1::get_overLimit <- get_overLimit,
										ctrl_ref1::set_underLimit <- set_underLimit,
										ctrl_ref1::get_underLimit <- get_underLimit,
										ctrl_ref1::set_currentState <- set_currentState,
										ctrl_ref1::get_currentState <- get_currentState,
										ctrl_ref1::set_HVEnabled <- set_HVEnabled,
										ctrl_ref1::get_HVEnabled <- get_HVEnabled,
										ctrl_ref1::set_pow24VStatus <- set_pow24VStatus,
										ctrl_ref1::get_pow24VStatus <- get_pow24VStatus,
										ctrl_ref1::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
										ctrl_ref1::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
										ctrl_ref1::set_mSetPoint <- set_mSetPoint,
										ctrl_ref1::get_mSetPoint <- get_mSetPoint
									]]
								)
									[|{|terminate, ctrl_ref2::ext_pow24_2, ctrl_ref1::int_dutyCyclePWM1, ctrl_ref1::int_enablePWM|}|]
								(
									(
										ctrl_ref2::O__(id__)[[
											ctrl_ref2::terminate <- terminate,
											ctrl_ref2::ext_pow24VStatus <- ext_pow24VStatus
										]]
									)
										[|{|terminate|}|]
									(
										ctrl_ref3::O__(id__)[[
											ctrl_ref3::terminate <- terminate,
											ctrl_ref3::int_enablePWM <- int_enablePWM,
											ctrl_ref3::int_dutyCyclePWM1 <- int_dutyCyclePWM1,
											ctrl_ref3::ctrl0_dutyCyclePWM1.in <- ctrl_ref0::int_dutyCyclePWM1.out,
											ctrl_ref3::ctrl0_dutyCyclePWM1.out <- ctrl_ref0::int_dutyCyclePWM1.in,
											ctrl_ref3::ctrl1_dutyCyclePWM1.in <- ctrl_ref1::int_dutyCyclePWM1.out,
											ctrl_ref3::ctrl1_dutyCyclePWM1.out <- ctrl_ref1::int_dutyCyclePWM1.in,
											ctrl_ref3::ctrl0_enablePWM.in <- ctrl_ref0::int_enablePWM.out,
											ctrl_ref3::ctrl0_enablePWM.out <- ctrl_ref0::int_enablePWM.in,
											ctrl_ref3::ctrl1_enablePWM.in <- ctrl_ref1::int_enablePWM.out,
											ctrl_ref3::ctrl1_enablePWM.out <- ctrl_ref1::int_enablePWM.in
										]]
									)
								)
								\
								diff(
									{|terminate|},
									{|terminate|}
								)
							)
							\
							diff(
								{|terminate, ctrl_ref2::ext_pow24_2, ctrl_ref1::int_dutyCyclePWM1, ctrl_ref1::int_enablePWM|},
								{|terminate|}
							)
						)
						\
						diff(
							{|terminate, ctrl_ref2::ext_pow24_1, ctrl_ref0::int_dutyCyclePWM1, ctrl_ref0::int_enablePWM|},
							{|terminate|}
						)
							[|
								union(
									{|
										set_overLimit,
										set_underLimit,
										set_currentState,
										set_HVEnabled,
										set_pow24VStatus,
										set_dutyCyclePWM1,
										set_mSetPoint
									|},
									{|
										ctrl_ref0::set_EXT_overLimit,ctrl_ref0::set_EXT_underLimit,ctrl_ref0::set_EXT_currentState,ctrl_ref0::set_EXT_HVEnabled,ctrl_ref0::set_EXT_pow24VStatus,ctrl_ref0::set_EXT_mSetPoint,ctrl_ref0::set_EXT_dutyCyclePWM1,
										ctrl_ref1::set_EXT_HVEnabled,ctrl_ref1::set_EXT_pow24VStatus,ctrl_ref1::set_EXT_currentState,ctrl_ref1::set_EXT_overLimit,ctrl_ref1::set_EXT_underLimit,ctrl_ref1::set_EXT_mSetPoint,ctrl_ref1::set_EXT_dutyCyclePWM1
									|}
								)
							|]
						dbisim(Memory(id__, 0, 0, State_Wait24Vpower, true, Power_On, 0, 0))
					)
				)
				\ Union({
					{|
					|},
					{|
						ctrl_ref0::set_EXT_overLimit,ctrl_ref0::set_EXT_underLimit,ctrl_ref0::set_EXT_currentState,ctrl_ref0::set_EXT_HVEnabled,ctrl_ref0::set_EXT_pow24VStatus,ctrl_ref0::set_EXT_mSetPoint,ctrl_ref0::set_EXT_dutyCyclePWM1,
						ctrl_ref1::set_EXT_HVEnabled,ctrl_ref1::set_EXT_pow24VStatus,ctrl_ref1::set_EXT_currentState,ctrl_ref1::set_EXT_overLimit,ctrl_ref1::set_EXT_underLimit,ctrl_ref1::set_EXT_mSetPoint,ctrl_ref1::set_EXT_dutyCyclePWM1
					|},
					{|
						get_overLimit, set_overLimit,
						get_underLimit, set_underLimit,
						get_currentState, set_currentState,
						get_HVEnabled, set_HVEnabled,
						get_pow24VStatus, set_pow24VStatus,
						get_dutyCyclePWM1, set_dutyCyclePWM1,
						get_mSetPoint, set_mSetPoint
					|}
				})
				[|{|terminate|}|>SKIP
			)
			\{|terminate|}
		,<visibleMemoryEvents,{tock}>))
		
		-- visible state optimised equivalent
		
		VS_O__(id__,
				    const_ctrl0_stm_ref0_cycleTime,
				   	const_setPointRamping_rampStep) = dbisim(prioritise(	(
				(
					(SKIP)
						[|{||}|]
					(
						(
							(
								ctrl_ref0::VS_O__(id__,
										    const_ctrl0_stm_ref0_cycleTime,
										   	const_setPointRamping_rampStep)[[
									ctrl_ref0::terminate <- terminate,
									ctrl_ref0::ext_setPoint <- ext_setPoint,
									ctrl_ref0::ext_errorAck <- ext_errorAck,
									ctrl_ref0::ext_ActualHV <- ext_ActualHV,
									ctrl_ref0::ext_pow24VStatus.in <- ctrl_ref2::ext_pow24_1.out,
									ctrl_ref0::ext_pow24VStatus.out <- ctrl_ref2::ext_pow24_1.in,
									ctrl_ref0::set_overLimit <- set_overLimit,
									ctrl_ref0::get_overLimit <- get_overLimit,
									ctrl_ref0::set_underLimit <- set_underLimit,
									ctrl_ref0::get_underLimit <- get_underLimit,
									ctrl_ref0::set_currentState <- set_currentState,
									ctrl_ref0::get_currentState <- get_currentState,
									ctrl_ref0::set_HVEnabled <- set_HVEnabled,
									ctrl_ref0::get_HVEnabled <- get_HVEnabled,
									ctrl_ref0::set_pow24VStatus <- set_pow24VStatus,
									ctrl_ref0::get_pow24VStatus <- get_pow24VStatus,
									ctrl_ref0::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
									ctrl_ref0::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
									ctrl_ref0::set_mSetPoint <- set_mSetPoint,
									ctrl_ref0::get_mSetPoint <- get_mSetPoint
								]]
							)
								[|{|terminate, ctrl_ref2::ext_pow24_1, ctrl_ref0::int_dutyCyclePWM1, ctrl_ref0::int_enablePWM|}|]
							(
								(
									ctrl_ref1::VS_O__(id__)[[
										ctrl_ref1::terminate <- terminate,
										ctrl_ref1::ext_pow24VStatus.in <- ctrl_ref2::ext_pow24_2.out,
										ctrl_ref1::ext_pow24VStatus.out <- ctrl_ref2::ext_pow24_2.in,
										ctrl_ref1::set_overLimit <- set_overLimit,
										ctrl_ref1::get_overLimit <- get_overLimit,
										ctrl_ref1::set_underLimit <- set_underLimit,
										ctrl_ref1::get_underLimit <- get_underLimit,
										ctrl_ref1::set_currentState <- set_currentState,
										ctrl_ref1::get_currentState <- get_currentState,
										ctrl_ref1::set_HVEnabled <- set_HVEnabled,
										ctrl_ref1::get_HVEnabled <- get_HVEnabled,
										ctrl_ref1::set_pow24VStatus <- set_pow24VStatus,
										ctrl_ref1::get_pow24VStatus <- get_pow24VStatus,
										ctrl_ref1::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
										ctrl_ref1::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
										ctrl_ref1::set_mSetPoint <- set_mSetPoint,
										ctrl_ref1::get_mSetPoint <- get_mSetPoint
									]]
								)
									[|{|terminate, ctrl_ref2::ext_pow24_2, ctrl_ref1::int_dutyCyclePWM1, ctrl_ref1::int_enablePWM|}|]
								(
									(
										ctrl_ref2::VS_O__(id__)[[
											ctrl_ref2::terminate <- terminate,
											ctrl_ref2::ext_pow24VStatus <- ext_pow24VStatus
										]]
									)
										[|{|terminate|}|]
									(
										ctrl_ref3::VS_O__(id__)[[
											ctrl_ref3::terminate <- terminate,
											ctrl_ref3::int_enablePWM <- int_enablePWM,
											ctrl_ref3::int_dutyCyclePWM1 <- int_dutyCyclePWM1,
											ctrl_ref3::ctrl0_dutyCyclePWM1.in <- ctrl_ref0::int_dutyCyclePWM1.out,
											ctrl_ref3::ctrl0_dutyCyclePWM1.out <- ctrl_ref0::int_dutyCyclePWM1.in,
											ctrl_ref3::ctrl1_dutyCyclePWM1.in <- ctrl_ref1::int_dutyCyclePWM1.out,
											ctrl_ref3::ctrl1_dutyCyclePWM1.out <- ctrl_ref1::int_dutyCyclePWM1.in,
											ctrl_ref3::ctrl0_enablePWM.in <- ctrl_ref0::int_enablePWM.out,
											ctrl_ref3::ctrl0_enablePWM.out <- ctrl_ref0::int_enablePWM.in,
											ctrl_ref3::ctrl1_enablePWM.in <- ctrl_ref1::int_enablePWM.out,
											ctrl_ref3::ctrl1_enablePWM.out <- ctrl_ref1::int_enablePWM.in
										]]
									)
								)
								\
								diff(
									{|terminate|},
									{|terminate|}
								)
							)
							\
							diff(
								{|terminate, ctrl_ref2::ext_pow24_2, ctrl_ref1::int_dutyCyclePWM1, ctrl_ref1::int_enablePWM|},
								{|terminate|}
							)
						)
						\
						diff(
							{|terminate, ctrl_ref2::ext_pow24_1, ctrl_ref0::int_dutyCyclePWM1, ctrl_ref0::int_enablePWM|},
							{|terminate|}
						)
							[|
								union(
									{|
										set_overLimit,
										set_underLimit,
										set_currentState,
										set_HVEnabled,
										set_pow24VStatus,
										set_dutyCyclePWM1,
										set_mSetPoint
									|},
									{|
										ctrl_ref0::set_EXT_overLimit,ctrl_ref0::set_EXT_underLimit,ctrl_ref0::set_EXT_currentState,ctrl_ref0::set_EXT_HVEnabled,ctrl_ref0::set_EXT_pow24VStatus,ctrl_ref0::set_EXT_mSetPoint,ctrl_ref0::set_EXT_dutyCyclePWM1,
										ctrl_ref1::set_EXT_HVEnabled,ctrl_ref1::set_EXT_pow24VStatus,ctrl_ref1::set_EXT_currentState,ctrl_ref1::set_EXT_overLimit,ctrl_ref1::set_EXT_underLimit,ctrl_ref1::set_EXT_mSetPoint,ctrl_ref1::set_EXT_dutyCyclePWM1
									|}
								)
							|]
						dbisim(Memory(id__, 0, 0, State_Wait24Vpower, true, Power_On, 0, 0))
					)
				)
				\ Union({
					{|
					|},
					{|
						ctrl_ref0::set_EXT_overLimit,ctrl_ref0::set_EXT_underLimit,ctrl_ref0::set_EXT_currentState,ctrl_ref0::set_EXT_HVEnabled,ctrl_ref0::set_EXT_pow24VStatus,ctrl_ref0::set_EXT_mSetPoint,ctrl_ref0::set_EXT_dutyCyclePWM1,
						ctrl_ref1::set_EXT_HVEnabled,ctrl_ref1::set_EXT_pow24VStatus,ctrl_ref1::set_EXT_currentState,ctrl_ref1::set_EXT_overLimit,ctrl_ref1::set_EXT_underLimit,ctrl_ref1::set_EXT_mSetPoint,ctrl_ref1::set_EXT_dutyCyclePWM1
					|},
					{|
						get_overLimit, set_overLimit,
						get_underLimit, set_underLimit,
						get_currentState, set_currentState,
						get_HVEnabled, set_HVEnabled,
						get_pow24VStatus, set_pow24VStatus,
						get_dutyCyclePWM1, set_dutyCyclePWM1,
						get_mSetPoint, set_mSetPoint
					|}
				})
				[|{|terminate|}|>SKIP
			)
			\{|terminate|}
		,<visibleMemoryEvents,{tock}>))
		
		-- O version (optimised) with visible assignments
		
		AS_O__(id__,
				    const_ctrl0_stm_ref0_cycleTime,
				   	const_setPointRamping_rampStep) = dbisim(	(
				(
					(SKIP)
						[|{||}|]
					(
						(
							(
								ctrl_ref0::O__(id__,
										    const_ctrl0_stm_ref0_cycleTime,
										   	const_setPointRamping_rampStep)[[
									ctrl_ref0::terminate <- terminate,
									ctrl_ref0::ext_setPoint <- ext_setPoint,
									ctrl_ref0::ext_errorAck <- ext_errorAck,
									ctrl_ref0::ext_ActualHV <- ext_ActualHV,
									ctrl_ref0::ext_pow24VStatus.in <- ctrl_ref2::ext_pow24_1.out,
									ctrl_ref0::ext_pow24VStatus.out <- ctrl_ref2::ext_pow24_1.in,
									ctrl_ref0::set_overLimit <- set_overLimit,
									ctrl_ref0::get_overLimit <- get_overLimit,
									ctrl_ref0::set_underLimit <- set_underLimit,
									ctrl_ref0::get_underLimit <- get_underLimit,
									ctrl_ref0::set_currentState <- set_currentState,
									ctrl_ref0::get_currentState <- get_currentState,
									ctrl_ref0::set_HVEnabled <- set_HVEnabled,
									ctrl_ref0::get_HVEnabled <- get_HVEnabled,
									ctrl_ref0::set_pow24VStatus <- set_pow24VStatus,
									ctrl_ref0::get_pow24VStatus <- get_pow24VStatus,
									ctrl_ref0::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
									ctrl_ref0::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
									ctrl_ref0::set_mSetPoint <- set_mSetPoint,
									ctrl_ref0::get_mSetPoint <- get_mSetPoint
								]]
							)
								[|{|terminate, ctrl_ref2::ext_pow24_1, ctrl_ref0::int_dutyCyclePWM1, ctrl_ref0::int_enablePWM|}|]
							(
								(
									ctrl_ref1::O__(id__)[[
										ctrl_ref1::terminate <- terminate,
										ctrl_ref1::ext_pow24VStatus.in <- ctrl_ref2::ext_pow24_2.out,
										ctrl_ref1::ext_pow24VStatus.out <- ctrl_ref2::ext_pow24_2.in,
										ctrl_ref1::set_overLimit <- set_overLimit,
										ctrl_ref1::get_overLimit <- get_overLimit,
										ctrl_ref1::set_underLimit <- set_underLimit,
										ctrl_ref1::get_underLimit <- get_underLimit,
										ctrl_ref1::set_currentState <- set_currentState,
										ctrl_ref1::get_currentState <- get_currentState,
										ctrl_ref1::set_HVEnabled <- set_HVEnabled,
										ctrl_ref1::get_HVEnabled <- get_HVEnabled,
										ctrl_ref1::set_pow24VStatus <- set_pow24VStatus,
										ctrl_ref1::get_pow24VStatus <- get_pow24VStatus,
										ctrl_ref1::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
										ctrl_ref1::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
										ctrl_ref1::set_mSetPoint <- set_mSetPoint,
										ctrl_ref1::get_mSetPoint <- get_mSetPoint
									]]
								)
									[|{|terminate, ctrl_ref2::ext_pow24_2, ctrl_ref1::int_dutyCyclePWM1, ctrl_ref1::int_enablePWM|}|]
								(
									(
										ctrl_ref2::O__(id__)[[
											ctrl_ref2::terminate <- terminate,
											ctrl_ref2::ext_pow24VStatus <- ext_pow24VStatus
										]]
									)
										[|{|terminate|}|]
									(
										ctrl_ref3::O__(id__)[[
											ctrl_ref3::terminate <- terminate,
											ctrl_ref3::int_enablePWM <- int_enablePWM,
											ctrl_ref3::int_dutyCyclePWM1 <- int_dutyCyclePWM1,
											ctrl_ref3::ctrl0_dutyCyclePWM1.in <- ctrl_ref0::int_dutyCyclePWM1.out,
											ctrl_ref3::ctrl0_dutyCyclePWM1.out <- ctrl_ref0::int_dutyCyclePWM1.in,
											ctrl_ref3::ctrl1_dutyCyclePWM1.in <- ctrl_ref1::int_dutyCyclePWM1.out,
											ctrl_ref3::ctrl1_dutyCyclePWM1.out <- ctrl_ref1::int_dutyCyclePWM1.in,
											ctrl_ref3::ctrl0_enablePWM.in <- ctrl_ref0::int_enablePWM.out,
											ctrl_ref3::ctrl0_enablePWM.out <- ctrl_ref0::int_enablePWM.in,
											ctrl_ref3::ctrl1_enablePWM.in <- ctrl_ref1::int_enablePWM.out,
											ctrl_ref3::ctrl1_enablePWM.out <- ctrl_ref1::int_enablePWM.in
										]]
									)
								)
								\
								diff(
									{|terminate|},
									{|terminate|}
								)
							)
							\
							diff(
								{|terminate, ctrl_ref2::ext_pow24_2, ctrl_ref1::int_dutyCyclePWM1, ctrl_ref1::int_enablePWM|},
								{|terminate|}
							)
						)
						\
						diff(
							{|terminate, ctrl_ref2::ext_pow24_1, ctrl_ref0::int_dutyCyclePWM1, ctrl_ref0::int_enablePWM|},
							{|terminate|}
						)
							[|
								union(
									{|
										set_overLimit,
										set_underLimit,
										set_currentState,
										set_HVEnabled,
										set_pow24VStatus,
										set_dutyCyclePWM1,
										set_mSetPoint
									|},
									{|
										ctrl_ref0::set_EXT_overLimit,ctrl_ref0::set_EXT_underLimit,ctrl_ref0::set_EXT_currentState,ctrl_ref0::set_EXT_HVEnabled,ctrl_ref0::set_EXT_pow24VStatus,ctrl_ref0::set_EXT_mSetPoint,ctrl_ref0::set_EXT_dutyCyclePWM1,
										ctrl_ref1::set_EXT_HVEnabled,ctrl_ref1::set_EXT_pow24VStatus,ctrl_ref1::set_EXT_currentState,ctrl_ref1::set_EXT_overLimit,ctrl_ref1::set_EXT_underLimit,ctrl_ref1::set_EXT_mSetPoint,ctrl_ref1::set_EXT_dutyCyclePWM1
									|}
								)
							|]
						dbisim(Memory(id__, 0, 0, State_Wait24Vpower, true, Power_On, 0, 0))
					)
				)
				\ Union({
					{|
					|},
					{|
						ctrl_ref0::set_EXT_overLimit,ctrl_ref0::set_EXT_underLimit,ctrl_ref0::set_EXT_currentState,ctrl_ref0::set_EXT_HVEnabled,ctrl_ref0::set_EXT_pow24VStatus,ctrl_ref0::set_EXT_mSetPoint,ctrl_ref0::set_EXT_dutyCyclePWM1,
						ctrl_ref1::set_EXT_HVEnabled,ctrl_ref1::set_EXT_pow24VStatus,ctrl_ref1::set_EXT_currentState,ctrl_ref1::set_EXT_overLimit,ctrl_ref1::set_EXT_underLimit,ctrl_ref1::set_EXT_mSetPoint,ctrl_ref1::set_EXT_dutyCyclePWM1
					|},
					{|
						get_overLimit,
						get_underLimit,
						get_currentState,
						get_HVEnabled,
						get_pow24VStatus,
						get_dutyCyclePWM1,
						get_mSetPoint
					|}
				})
				[|{|terminate|}|>SKIP
			)
			\{|terminate|}
		)
	}
	
endmodule

	module ctrl0
		shared_variable_events = {|
			set_EXT_overLimit,
			set_EXT_underLimit,
			set_EXT_currentState,
			set_EXT_HVEnabled,
			set_EXT_pow24VStatus,
			set_EXT_mSetPoint,
			set_EXT_dutyCyclePWM1
		|}
		
	exports
		transparent diamond
		transparent sbisim
		transparent dbisim
		transparent chase

		-- declaring controller events
		channel ext_ActualHV: InOut.core_real
		channel ext_pow24VStatus: InOut.Power
		channel ext_errorAck: InOut
		channel ext_setPoint: InOut.core_real
		channel int_dutyCyclePWM1: InOut.duty
		channel int_enablePWM: InOut.core_boolean
		
		channel set_overLimit: core_real
		channel get_overLimit: core_real
		channel set_underLimit: core_real
		channel get_underLimit: core_real
		channel set_currentState: State
		channel get_currentState: State
		channel set_HVEnabled: core_boolean
		channel get_HVEnabled: core_boolean
		channel set_pow24VStatus: Power
		channel get_pow24VStatus: Power
		channel set_mSetPoint: core_real
		channel get_mSetPoint: core_real
		channel set_dutyCyclePWM1: duty
		channel get_dutyCyclePWM1: duty
		
		channel set_EXT_overLimit: core_real
		channel set_EXT_underLimit: core_real
		channel set_EXT_currentState: State
		channel set_EXT_HVEnabled: core_boolean
		channel set_EXT_pow24VStatus: Power
		channel set_EXT_mSetPoint: core_real
		channel set_EXT_dutyCyclePWM1: duty
		
		-- declaring call and ret events for undefined operations
		
		-- declaring controller termination channel		
		channel terminate
		
		-- set of visible memory events
		visibleMemoryEvents = {|get_overLimit,set_overLimit,get_underLimit,set_underLimit,get_currentState,set_currentState,get_HVEnabled,set_HVEnabled,get_pow24VStatus,set_pow24VStatus,get_mSetPoint,set_mSetPoint,get_dutyCyclePWM1,set_dutyCyclePWM1|}

		-- defined operations
		-- compileOperationDef
		module OP_disableHV
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i0|
			              NID_f0|
			              NID_j0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_HVEnabled, set_HVEnabled, setL_HVEnabled, setR_HVEnabled: core_boolean
			channel get_currentState, set_currentState, setL_currentState, setR_currentState: State
			channel get_dutyCyclePWM1, set_dutyCyclePWM1, setL_dutyCyclePWM1, setR_dutyCyclePWM1: duty
			channel get_mSetPoint, set_mSetPoint, setL_mSetPoint, setR_mSetPoint: core_real
			
			-- Shared variable channels
			channel set_EXT_HVEnabled: core_boolean
			channel set_EXT_currentState: State
			channel set_EXT_dutyCyclePWM1: duty
			channel set_EXT_mSetPoint: core_real
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel int_enablePWM__: NIDS.InOut.core_boolean
			channel int_enablePWM: InOut.core_boolean
			channel int_dutyCyclePWM1__: NIDS.InOut.duty
			channel int_dutyCyclePWM1: InOut.duty
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i0::enter,
			f0::enter,
			j0::enter
			|}
			
			enteredSS = 	{|
			f0::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
				set_EXT_HVEnabled,
				set_EXT_currentState,
				set_EXT_dutyCyclePWM1,
				set_EXT_mSetPoint
			|}
			
			channel clockReset, clockResetL, clockResetR 
			
			localClockResets = {||}
			
			
			channel get_CLID_f0 : CLID_f0_clock_type
			
			--channel increment__
			
			CLID_f0_clock_type = {0..(clock_type_max(Union({
			{}
			}))+1)}
			
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__,
									arg) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__,
									arg) = D__(id__,
									arg)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f0
				module f0
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						D__(id__,
									arg) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
								
								Entering 	= entered -> SKIP ; Active
								Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
								Interrupted	= share__choice(exit -> exited -> Inactive)
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
									arg) = D__(id__,
									arg)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: j0
				module j0
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__,
									arg) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
									arg) = D__(id__,
									arg)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
			
				-- STM processes
				STM(id__,
							arg) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__,
							arg) \ {terminate}
				
				STM_VS_O(id__,
							arg) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__,
							arg) \ {terminate}
				
				-- Transitions
				Transitions(id__,
							arg) = ((let
					Trans = TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim(((arg==false))&(internal__!NID_j0 -> SKIP ;  ((SKIP ; f0::enter -> SKIP))))
						 [] dbisim(((arg==true))&(internal__!NID_j0 -> SKIP ;  ((share__choice(true & (share__choice(set_currentState!State_ErrorMode -> SKIP))) ; f0::enter -> SKIP))))
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((Deadline(true&(share__choice(int_enablePWM.out!false -> SKIP)),0);share__choice(true & (share__choice(set_dutyCyclePWM1!real2duty(0) -> SKIP)));Deadline(share__choice(get_dutyCyclePWM1?dutyCyclePWM1 -> true&(share__choice(int_dutyCyclePWM1.out!dutyCyclePWM1 -> SKIP))),0);share__choice(true & (share__choice(set_HVEnabled!false -> SKIP)));share__choice(true & (share__choice(set_mSetPoint!0 -> SKIP))) ; j0::enter -> SKIP))))
						 []
						 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__,
							arg) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter,
							j0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_j0,internal__.NID_j0,internal__.NID_i0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i0::D__(id__,
								   		    			arg)
								   		    [| { share__, terminate } |] (
								   		    f0::D__(id__,
								   		    			arg)
								   		    [| { share__, terminate } |] (
								   		    j0::D__(id__,
								   		    			arg)
								   		    )
								   		    )
								   		  )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__,
								 			arg))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								int_enablePWM__.x____ <- int_enablePWM,
								int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__,
							arg) = 
					dbisim((let
						stateClockSync = {|get_CLID_f0,f0::entered|}
					 within
						(MachineBody(id__,
									arg) [| union(stateClockSync,{terminate}) |] StateClocks) \ union(stateClockSync,enteredSS)
					)
					)
				
				Stateful(id__,
							arg) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour(id__,
									arg) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__,
						 			arg) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__,
							arg) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter,
							j0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_j0,internal__.NID_j0,internal__.NID_i0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i0::VS_O__(id__,
								   		    			arg)
								   		    [| { share__, terminate } |] (
								   		    f0::VS_O__(id__,
								   		    			arg)
								   		    [| { share__, terminate } |] (
								   		    j0::VS_O__(id__,
								   		    			arg)
								   		    )
								   		    )
								   		  )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__,
								 			arg))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								int_enablePWM__.x____ <- int_enablePWM,
								int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__,
							arg) = 
					dbisim((let
						stateClockSync = {|get_CLID_f0,f0::entered|}
					 within
						(MachineBody_VS_O(id__,
									arg) [| union(stateClockSync,{terminate}) |] StateClocks) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				Stateful_VS_O(id__,
							arg) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__,
									arg) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__,
						 			arg) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
					
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__,
							arg) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__,
							arg) = STM_VS_O(id__,
							arg) \ localClockResets
				D__(id__,
							arg) = timed_priority(STM(id__,
							arg) \ union(internal_events,localClockResets))
				O__(id__,
							arg) = dbisim(D__(id__,
							arg))
				VS__(id__,
							arg) = FVS__(id__,
							arg)
				VS_O__(id__,
							arg) = dbisim(FVS__(id__,
							arg))
				HEXT__(id__,
							arg) = O__(id__,
							arg) [|shared_variable_events|] SKIP
				FVS_C__(id__,
							arg) = dbisim(timed_priority(STM(id__,
							arg) \ internal_events))
				HUP__(id__,
							arg) = timed_priority(O__(id__,
							arg) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks = terminate -> SKIP
				
				clockSync = {||}
				
				Clock_CLID_f0(x__) = 
					TimeOut_1(
						f0::entered -> Clock_CLID_f0(0)
						[]
						get_CLID_f0!x__ -> Clock_CLID_f0(x__)
						[]
						terminate -> SKIP,Clock_CLID_f0(Plus(x__,1,CLID_f0_clock_type)))
				
				StateClocks = dbisim(Clock_CLID_f0(0))
				
				stateClockSync = {|get_CLID_f0,f0::entered|}
				}
					endmodule
		-- compileOperationDef
		module OP_supplyVoltCheck
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i0|
			              NID_f0|
			              NID_j0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_pow24VStatus, set_pow24VStatus, setL_pow24VStatus, setR_pow24VStatus: Power
			channel get_HVEnabled, set_HVEnabled, setL_HVEnabled, setR_HVEnabled: core_boolean
			channel get_currentState, set_currentState, setL_currentState, setR_currentState: State
			channel get_dutyCyclePWM1, set_dutyCyclePWM1, setL_dutyCyclePWM1, setR_dutyCyclePWM1: duty
			channel get_mSetPoint, set_mSetPoint, setL_mSetPoint, setR_mSetPoint: core_real
			
			-- Shared variable channels
			channel set_EXT_pow24VStatus: Power
			channel set_EXT_HVEnabled: core_boolean
			channel set_EXT_currentState: State
			channel set_EXT_dutyCyclePWM1: duty
			channel set_EXT_mSetPoint: core_real
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel ext_pow24VStatus__: NIDS.InOut.Power
			channel ext_pow24VStatus: InOut.Power
			channel int_enablePWM__: NIDS.InOut.core_boolean
			channel int_enablePWM: InOut.core_boolean
			channel int_dutyCyclePWM1__: NIDS.InOut.duty
			channel int_dutyCyclePWM1: InOut.duty
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i0::enter,
			f0::enter,
			j0::enter
			|}
			
			enteredSS = 	{|
			f0::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
				set_EXT_pow24VStatus,
				set_EXT_HVEnabled,
				set_EXT_currentState,
				set_EXT_dutyCyclePWM1,
				set_EXT_mSetPoint
			|}
			
			channel clockReset, clockResetL, clockResetR 
			
			localClockResets = {||}
			
			
			channel get_CLID_f0 : CLID_f0_clock_type
			
			--channel increment__
			
			CLID_f0_clock_type = {0..(clock_type_max(Union({
			{}
			}))+1)}
			
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f0
				module f0
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
								
								Entering 	= entered -> SKIP ; Active
								Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
								Interrupted	= share__choice(exit -> exited -> Inactive)
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: j0
				module j0
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				CALL__disableHV(id__,
							arg) 	= (OP_disableHV::O__(id__,
							arg))
				[[
					OP_disableHV::int_enablePWM <- int_enablePWM,
					OP_disableHV::int_dutyCyclePWM1 <- int_dutyCyclePWM1
				]]
				[[
					OP_disableHV::get_HVEnabled <- get_HVEnabled,
					OP_disableHV::set_HVEnabled <- set_HVEnabled,
					OP_disableHV::get_currentState <- get_currentState,
					OP_disableHV::set_currentState <- set_currentState,
					OP_disableHV::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
					OP_disableHV::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
					OP_disableHV::get_mSetPoint <- get_mSetPoint,
					OP_disableHV::set_mSetPoint <- set_mSetPoint
				]]
				-- END of Operation calls --
			
				-- STM processes
				STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = get_pow24VStatus?pow24VStatus -> TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((Deadline(true&(share__choice(ext_pow24VStatus.in?pow24VStatus -> (SStop /\ set_pow24VStatus!pow24VStatus -> SKIP))),0) ; j0::enter -> SKIP))))
						 [] dbisim(((pow24VStatus==Power_Off))&(internal__!NID_j0 -> SKIP ;  ((true&CALL__disableHV(
						 			id__,
						 			true
						 		) ; f0::enter -> SKIP))))
						 [] dbisim(((pow24VStatus==Power_On))&(internal__!NID_j0 -> SKIP ;  ((SKIP ; f0::enter -> SKIP))))
						 []
						 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter,
							j0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_i0,internal__.NID_j0,internal__.NID_j0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i0::D__(id__)
								   		    [| { share__, terminate } |] (
								   		    f0::D__(id__)
								   		    [| { share__, terminate } |] (
								   		    j0::D__(id__)
								   		    )
								   		    )
								   		  )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[set_pow24VStatus <- setL_pow24VStatus]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_pow24VStatus
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_pow24VStatus |} ]]
								 )
								)[[setL_pow24VStatus <- set_pow24VStatus]]
								)
							)
							 \ hideSet)
							[[
								ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								int_enablePWM__.x____ <- int_enablePWM,
								int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_f0,f0::entered|}
					 within
						(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ union(stateClockSync,enteredSS)
					)
					)
				
				Stateful(id__) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter,
							j0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_i0,internal__.NID_j0,internal__.NID_j0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i0::VS_O__(id__)
								   		    [| { share__, terminate } |] (
								   		    f0::VS_O__(id__)
								   		    [| { share__, terminate } |] (
								   		    j0::VS_O__(id__)
								   		    )
								   		    )
								   		  )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[set_pow24VStatus <- setL_pow24VStatus]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_pow24VStatus
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_pow24VStatus |} ]]
								 )
								)[[setL_pow24VStatus <- set_pow24VStatus]]
								)
							)
							 \ hideSet)
							[[
								ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								int_enablePWM__.x____ <- int_enablePWM,
								int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_f0,f0::entered|}
					 within
						(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				Stateful_VS_O(id__) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
					
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__) \ localClockResets
				D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
				O__(id__) = dbisim(D__(id__))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = dbisim(FVS__(id__))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
				HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks = terminate -> SKIP
				
				clockSync = {||}
				
				Clock_CLID_f0(x__) = 
					TimeOut_1(
						f0::entered -> Clock_CLID_f0(0)
						[]
						get_CLID_f0!x__ -> Clock_CLID_f0(x__)
						[]
						terminate -> SKIP,Clock_CLID_f0(Plus(x__,1,CLID_f0_clock_type)))
				
				StateClocks = dbisim(Clock_CLID_f0(0))
				
				stateClockSync = {|get_CLID_f0,f0::entered|}
				}
					endmodule
		-- compileOperationDef
		module OP_checkLimits
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i0|
			              NID_f0|
			              NID_j0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_ActualHV, set_ActualHV, setL_ActualHV, setR_ActualHV: core_real
			channel get_overLimit, set_overLimit, setL_overLimit, setR_overLimit: core_real
			channel get_underLimit, set_underLimit, setL_underLimit, setR_underLimit: core_real
			channel get_HVEnabled, set_HVEnabled, setL_HVEnabled, setR_HVEnabled: core_boolean
			channel get_currentState, set_currentState, setL_currentState, setR_currentState: State
			channel get_dutyCyclePWM1, set_dutyCyclePWM1, setL_dutyCyclePWM1, setR_dutyCyclePWM1: duty
			channel get_mSetPoint, set_mSetPoint, setL_mSetPoint, setR_mSetPoint: core_real
			
			-- Shared variable channels
			channel set_EXT_ActualHV: core_real
			channel set_EXT_overLimit: core_real
			channel set_EXT_underLimit: core_real
			channel set_EXT_HVEnabled: core_boolean
			channel set_EXT_currentState: State
			channel set_EXT_dutyCyclePWM1: duty
			channel set_EXT_mSetPoint: core_real
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel int_enablePWM__: NIDS.InOut.core_boolean
			channel int_enablePWM: InOut.core_boolean
			channel int_dutyCyclePWM1__: NIDS.InOut.duty
			channel int_dutyCyclePWM1: InOut.duty
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i0::enter,
			f0::enter,
			j0::enter
			|}
			
			enteredSS = 	{|
			f0::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
				set_EXT_ActualHV,
				set_EXT_overLimit,
				set_EXT_underLimit,
				set_EXT_HVEnabled,
				set_EXT_currentState,
				set_EXT_dutyCyclePWM1,
				set_EXT_mSetPoint
			|}
			
			channel clockReset, clockResetL, clockResetR 
			
			localClockResets = {||}
			
			
			channel get_CLID_f0 : CLID_f0_clock_type
			
			--channel increment__
			
			CLID_f0_clock_type = {0..(clock_type_max(Union({
			{}
			}))+1)}
			
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f0
				module f0
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
								
								Entering 	= entered -> SKIP ; Active
								Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
								Interrupted	= share__choice(exit -> exited -> Inactive)
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: j0
				module j0
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				CALL__disableHV(id__,
							arg) 	= (OP_disableHV::O__(id__,
							arg))
				[[
					OP_disableHV::int_enablePWM <- int_enablePWM,
					OP_disableHV::int_dutyCyclePWM1 <- int_dutyCyclePWM1
				]]
				[[
					OP_disableHV::get_HVEnabled <- get_HVEnabled,
					OP_disableHV::set_HVEnabled <- set_HVEnabled,
					OP_disableHV::get_currentState <- get_currentState,
					OP_disableHV::set_currentState <- set_currentState,
					OP_disableHV::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
					OP_disableHV::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
					OP_disableHV::get_mSetPoint <- get_mSetPoint,
					OP_disableHV::set_mSetPoint <- set_mSetPoint
				]]
				-- END of Operation calls --
			
				-- STM processes
				STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = get_ActualHV?ActualHV -> get_underLimit?underLimit -> get_overLimit?overLimit -> TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; j0::enter -> SKIP))))
						 [] dbisim((((ActualHV<=overLimit) and (ActualHV>=underLimit)))&(internal__!NID_j0 -> SKIP ;  ((SKIP ; f0::enter -> SKIP))))
						 [] dbisim((((ActualHV<underLimit) or (ActualHV>overLimit)))&(internal__!NID_j0 -> SKIP ;  ((true&CALL__disableHV(
						 			id__,
						 			true
						 		) ; f0::enter -> SKIP))))
						 []
						 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter,
							j0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_i0,internal__.NID_j0,internal__.NID_j0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i0::D__(id__)
								   		    [| { share__, terminate } |] (
								   		    f0::D__(id__)
								   		    [| { share__, terminate } |] (
								   		    j0::D__(id__)
								   		    )
								   		    )
								   		  )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[set_ActualHV <- setL_ActualHV,set_underLimit <- setL_underLimit,set_overLimit <- setL_overLimit]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_ActualHV
								 			,setL_underLimit
								 			,setL_overLimit
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_ActualHV,setL_underLimit,setL_overLimit |} ]]
								 )
								)[[setL_ActualHV <- set_ActualHV,setL_underLimit <- set_underLimit,setL_overLimit <- set_overLimit]]
								)
							)
							 \ hideSet)
							[[
								int_enablePWM__.x____ <- int_enablePWM,
								int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_f0,f0::entered|}
					 within
						(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ union(stateClockSync,enteredSS)
					)
					)
				
				Stateful(id__) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter,
							j0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_i0,internal__.NID_j0,internal__.NID_j0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i0::VS_O__(id__)
								   		    [| { share__, terminate } |] (
								   		    f0::VS_O__(id__)
								   		    [| { share__, terminate } |] (
								   		    j0::VS_O__(id__)
								   		    )
								   		    )
								   		  )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[set_ActualHV <- setL_ActualHV,set_underLimit <- setL_underLimit,set_overLimit <- setL_overLimit]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_ActualHV
								 			,setL_underLimit
								 			,setL_overLimit
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_ActualHV,setL_underLimit,setL_overLimit |} ]]
								 )
								)[[setL_ActualHV <- set_ActualHV,setL_underLimit <- set_underLimit,setL_overLimit <- set_overLimit]]
								)
							)
							 \ hideSet)
							[[
								int_enablePWM__.x____ <- int_enablePWM,
								int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_f0,f0::entered|}
					 within
						(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				Stateful_VS_O(id__) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
					
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__) \ localClockResets
				D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
				O__(id__) = dbisim(D__(id__))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = dbisim(FVS__(id__))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
				HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks = terminate -> SKIP
				
				clockSync = {||}
				
				Clock_CLID_f0(x__) = 
					TimeOut_1(
						f0::entered -> Clock_CLID_f0(0)
						[]
						get_CLID_f0!x__ -> Clock_CLID_f0(x__)
						[]
						terminate -> SKIP,Clock_CLID_f0(Plus(x__,1,CLID_f0_clock_type)))
				
				StateClocks = dbisim(Clock_CLID_f0(0))
				
				stateClockSync = {|get_CLID_f0,f0::entered|}
				}
					endmodule
		-- compileOperationDef
		module OP_PID_Control
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i0|
			              NID_j1|
			              NID_j3|
			              NID_f0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_ActualHV, set_ActualHV, setL_ActualHV, setR_ActualHV: core_real
			channel get_dutyCyclePWM1, set_dutyCyclePWM1, setL_dutyCyclePWM1, setR_dutyCyclePWM1: duty
			channel get_mSetPoint, set_mSetPoint, setL_mSetPoint, setR_mSetPoint: core_real
			
			-- Shared variable channels
			channel set_EXT_ActualHV: core_real
			channel set_EXT_dutyCyclePWM1: duty
			channel set_EXT_mSetPoint: core_real
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel ext_ActualHV__: NIDS.InOut.core_real
			channel ext_ActualHV: InOut.core_real
			channel int_dutyCyclePWM1__: NIDS.InOut.duty
			channel int_dutyCyclePWM1: InOut.duty
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i0::enter,
			j1::enter,
			j3::enter,
			f0::enter
			|}
			
			enteredSS = 	{|
			f0::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
				set_EXT_ActualHV,
				set_EXT_dutyCyclePWM1,
				set_EXT_mSetPoint
			|}
			
			channel clockReset, clockResetL, clockResetR 
			
			localClockResets = {||}
			
			
			channel get_CLID_f0 : CLID_f0_clock_type
			
			--channel increment__
			
			CLID_f0_clock_type = {0..(clock_type_max(Union({
			{}
			}))+1)}
			
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: j1
				module j1
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: j3
				module j3
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f0
				module f0
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
								
								Entering 	= entered -> SKIP ; Active
								Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
								Interrupted	= share__choice(exit -> exited -> Inactive)
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
			
				-- STM processes
				STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = get_mSetPoint?mSetPoint -> get_ActualHV?ActualHV -> TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((Deadline(true&(share__choice(ext_ActualHV.in?ActualHV -> (SStop /\ set_ActualHV!ActualHV -> SKIP))),0) ; j1::enter -> SKIP))))
						 [] dbisim(((ActualHV<mSetPoint))&(internal__!NID_j1 -> SKIP ;  ((share__choice(share__choice(get_dutyCyclePWM1?dutyCyclePWM1 -> true & (share__choice(set_dutyCyclePWM1!increaseduty(dutyCyclePWM1) -> SKIP)))) ; j3::enter -> SKIP))))
						 [] dbisim(((ActualHV>mSetPoint))&(internal__!NID_j1 -> SKIP ;  ((share__choice(share__choice(get_dutyCyclePWM1?dutyCyclePWM1 -> true & (share__choice(set_dutyCyclePWM1!decreaseduty(dutyCyclePWM1) -> SKIP)))) ; j3::enter -> SKIP))))
						 [] dbisim((true)&(internal__!NID_j3 -> SKIP ;  ((Deadline(share__choice(get_dutyCyclePWM1?dutyCyclePWM1 -> true&(share__choice(int_dutyCyclePWM1.out!dutyCyclePWM1 -> SKIP))),0) ; f0::enter -> SKIP))))
						 [] dbisim(((ActualHV==mSetPoint))&(internal__!NID_j1 -> SKIP ;  ((SKIP ; j3::enter -> SKIP))))
						 []
						 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							j1::enter,
							j3::enter,
							f0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_i0,internal__.NID_j1,internal__.NID_j1,internal__.NID_j3,internal__.NID_j1|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i0::D__(id__)
								   		    [| { share__, terminate } |] (
								   		    j1::D__(id__)
								   		    [| { share__, terminate } |] (
								   		    j3::D__(id__)
								   		    [| { share__, terminate } |] (
								   		    f0::D__(id__)
								   		    )
								   		    )
								   		    )
								   		  )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 [[j1::interrupt <- x__ | x__ <- {|internal__.NID_j1,internal__.NID_j1,internal__.NID_j1|}]]
								 [[j3::interrupt <- x__ | x__ <- {|internal__.NID_j3|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[set_mSetPoint <- setL_mSetPoint,set_ActualHV <- setL_ActualHV]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_mSetPoint
								 			,setL_ActualHV
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_mSetPoint,setL_ActualHV |} ]]
								 )
								)[[setL_mSetPoint <- set_mSetPoint,setL_ActualHV <- set_ActualHV]]
								)
							)
							 \ hideSet)
							[[
								ext_ActualHV__.x____ <- ext_ActualHV,
								int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_f0,f0::entered|}
					 within
						(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ union(stateClockSync,enteredSS)
					)
					)
				
				Stateful(id__) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							j1::enter,
							j3::enter,
							f0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_i0,internal__.NID_j1,internal__.NID_j1,internal__.NID_j3,internal__.NID_j1|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i0::VS_O__(id__)
								   		    [| { share__, terminate } |] (
								   		    j1::VS_O__(id__)
								   		    [| { share__, terminate } |] (
								   		    j3::VS_O__(id__)
								   		    [| { share__, terminate } |] (
								   		    f0::VS_O__(id__)
								   		    )
								   		    )
								   		    )
								   		  )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 [[j1::interrupt <- x__ | x__ <- {|internal__.NID_j1,internal__.NID_j1,internal__.NID_j1|}]]
								 [[j3::interrupt <- x__ | x__ <- {|internal__.NID_j3|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[set_mSetPoint <- setL_mSetPoint,set_ActualHV <- setL_ActualHV]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_mSetPoint
								 			,setL_ActualHV
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_mSetPoint,setL_ActualHV |} ]]
								 )
								)[[setL_mSetPoint <- set_mSetPoint,setL_ActualHV <- set_ActualHV]]
								)
							)
							 \ hideSet)
							[[
								ext_ActualHV__.x____ <- ext_ActualHV,
								int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_f0,f0::entered|}
					 within
						(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				Stateful_VS_O(id__) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
					
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__) \ localClockResets
				D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
				O__(id__) = dbisim(D__(id__))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = dbisim(FVS__(id__))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
				HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks = terminate -> SKIP
				
				clockSync = {||}
				
				Clock_CLID_f0(x__) = 
					TimeOut_1(
						f0::entered -> Clock_CLID_f0(0)
						[]
						get_CLID_f0!x__ -> Clock_CLID_f0(x__)
						[]
						terminate -> SKIP,Clock_CLID_f0(Plus(x__,1,CLID_f0_clock_type)))
				
				StateClocks = dbisim(Clock_CLID_f0(0))
				
				stateClockSync = {|get_CLID_f0,f0::entered|}
				}
					endmodule
		-- compileOperationDef
		module OP_setPointRamping
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i0|
			              NID_f0|
			              NID_j0|
			              NID_j1|
			              NID_j2|
			              NID_j3|
			              NID_j4|
			              NID_j5
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_HVEnabled, set_HVEnabled, setL_HVEnabled, setR_HVEnabled: core_boolean
			channel get_currentState, set_currentState, setL_currentState, setR_currentState: State
			channel get_dutyCyclePWM1, set_dutyCyclePWM1, setL_dutyCyclePWM1, setR_dutyCyclePWM1: duty
			channel get_mSetPoint, set_mSetPoint, setL_mSetPoint, setR_mSetPoint: core_real
			
			-- Shared variable channels
			channel set_EXT_HVEnabled: core_boolean
			channel set_EXT_currentState: State
			channel set_EXT_dutyCyclePWM1: duty
			channel set_EXT_mSetPoint: core_real
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel int_enablePWM__: NIDS.InOut.core_boolean
			channel int_enablePWM: InOut.core_boolean
			channel int_dutyCyclePWM1__: NIDS.InOut.duty
			channel int_dutyCyclePWM1: InOut.duty
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i0::enter,
			f0::enter,
			j0::enter,
			j1::enter,
			j2::enter,
			j3::enter,
			j4::enter,
			j5::enter
			|}
			
			enteredSS = 	{|
			f0::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
				set_EXT_HVEnabled,
				set_EXT_currentState,
				set_EXT_dutyCyclePWM1,
				set_EXT_mSetPoint
			|}
			
			channel clockReset, clockResetL, clockResetR 
			
			localClockResets = {||}
			
			
			channel get_CLID_f0 : CLID_f0_clock_type
			
			--channel increment__
			
			CLID_f0_clock_type = {0..(clock_type_max(Union({
			{}
			}))+1)}
			
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__,
									newSetPoint,
								    const_setPointRamping_rampStep) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__,
									newSetPoint,
								    const_setPointRamping_rampStep) = D__(id__,
									newSetPoint,
								    const_setPointRamping_rampStep)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f0
				module f0
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						D__(id__,
									newSetPoint,
								    const_setPointRamping_rampStep) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
								
								Entering 	= entered -> SKIP ; Active
								Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
								Interrupted	= share__choice(exit -> exited -> Inactive)
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
									newSetPoint,
								    const_setPointRamping_rampStep) = D__(id__,
									newSetPoint,
								    const_setPointRamping_rampStep)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: j0
				module j0
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__,
									newSetPoint,
								    const_setPointRamping_rampStep) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
									newSetPoint,
								    const_setPointRamping_rampStep) = D__(id__,
									newSetPoint,
								    const_setPointRamping_rampStep)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: j1
				module j1
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__,
									newSetPoint,
								    const_setPointRamping_rampStep) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
									newSetPoint,
								    const_setPointRamping_rampStep) = D__(id__,
									newSetPoint,
								    const_setPointRamping_rampStep)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: j2
				module j2
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__,
									newSetPoint,
								    const_setPointRamping_rampStep) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
									newSetPoint,
								    const_setPointRamping_rampStep) = D__(id__,
									newSetPoint,
								    const_setPointRamping_rampStep)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: j3
				module j3
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__,
									newSetPoint,
								    const_setPointRamping_rampStep) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
									newSetPoint,
								    const_setPointRamping_rampStep) = D__(id__,
									newSetPoint,
								    const_setPointRamping_rampStep)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: j4
				module j4
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__,
									newSetPoint,
								    const_setPointRamping_rampStep) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
									newSetPoint,
								    const_setPointRamping_rampStep) = D__(id__,
									newSetPoint,
								    const_setPointRamping_rampStep)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: j5
				module j5
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__,
									newSetPoint,
								    const_setPointRamping_rampStep) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
									newSetPoint,
								    const_setPointRamping_rampStep) = D__(id__,
									newSetPoint,
								    const_setPointRamping_rampStep)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				CALL__disableHV(id__,
							arg) 	= (OP_disableHV::O__(id__,
							arg))
				[[
					OP_disableHV::int_enablePWM <- int_enablePWM,
					OP_disableHV::int_dutyCyclePWM1 <- int_dutyCyclePWM1
				]]
				[[
					OP_disableHV::get_HVEnabled <- get_HVEnabled,
					OP_disableHV::set_HVEnabled <- set_HVEnabled,
					OP_disableHV::get_currentState <- get_currentState,
					OP_disableHV::set_currentState <- set_currentState,
					OP_disableHV::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
					OP_disableHV::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
					OP_disableHV::get_mSetPoint <- get_mSetPoint,
					OP_disableHV::set_mSetPoint <- set_mSetPoint
				]]
				-- END of Operation calls --
			
				-- STM processes
				STM(id__,
							newSetPoint,
						    const_setPointRamping_rampStep) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__,
							newSetPoint,
						    const_setPointRamping_rampStep) \ {terminate}
				
				STM_VS_O(id__,
							newSetPoint,
						    const_setPointRamping_rampStep) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__,
							newSetPoint,
						    const_setPointRamping_rampStep) \ {terminate}
				
				-- Transitions
				Transitions(id__,
							newSetPoint,
						    const_setPointRamping_rampStep) = ((let
					Trans = get_mSetPoint?mSetPoint -> TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; j5::enter -> SKIP))))
						 [] dbisim(((newSetPoint<=0))&(internal__!NID_j5 -> SKIP ;  ((share__choice(true & (share__choice(set_mSetPoint!0 -> SKIP)));true&CALL__disableHV(
						 			id__,
						 			false
						 		) ; f0::enter -> SKIP))))
						 [] dbisim(((newSetPoint>0))&(internal__!NID_j5 -> SKIP ;  ((SKIP ; j0::enter -> SKIP))))
						 [] dbisim(((mSetPoint>newSetPoint))&(internal__!NID_j0 -> SKIP ;  ((share__choice(share__choice(get_mSetPoint?mSetPoint -> true & (share__choice(set_mSetPoint!Minus(mSetPoint, const_setPointRamping_rampStep, core_real) -> SKIP)))) ; j1::enter -> SKIP))))
						 [] dbisim(((mSetPoint<newSetPoint))&(internal__!NID_j1 -> SKIP ;  ((share__choice(true & (share__choice(set_mSetPoint!newSetPoint -> SKIP))) ; j2::enter -> SKIP))))
						 [] dbisim(((mSetPoint>=newSetPoint))&(internal__!NID_j1 -> SKIP ;  ((SKIP ; j2::enter -> SKIP))))
						 [] dbisim((true)&(internal__!NID_j2 -> SKIP ;  ((SKIP ; f0::enter -> SKIP))))
						 [] dbisim(((mSetPoint<newSetPoint))&(internal__!NID_j0 -> SKIP ;  ((share__choice(share__choice(get_mSetPoint?mSetPoint -> true & (share__choice(set_mSetPoint!Plus(mSetPoint, const_setPointRamping_rampStep, core_real) -> SKIP)))) ; j3::enter -> SKIP))))
						 [] dbisim((true)&(internal__!NID_j4 -> SKIP ;  ((SKIP ; f0::enter -> SKIP))))
						 [] dbisim(((mSetPoint>newSetPoint))&(internal__!NID_j3 -> SKIP ;  ((share__choice(true & (share__choice(set_mSetPoint!newSetPoint -> SKIP))) ; j4::enter -> SKIP))))
						 [] dbisim(((mSetPoint<=newSetPoint))&(internal__!NID_j3 -> SKIP ;  ((SKIP ; j4::enter -> SKIP))))
						 [] dbisim(((mSetPoint==newSetPoint))&(internal__!NID_j0 -> SKIP ;  ((SKIP ; f0::enter -> SKIP))))
						 []
						 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__,
							newSetPoint,
						    const_setPointRamping_rampStep) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter,
							j0::enter,
							j1::enter,
							j2::enter,
							j3::enter,
							j4::enter,
							j5::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_i0,internal__.NID_j5,internal__.NID_j5,internal__.NID_j0,internal__.NID_j1,internal__.NID_j1,internal__.NID_j2,internal__.NID_j0,internal__.NID_j4,internal__.NID_j3,internal__.NID_j3,internal__.NID_j0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i0::D__(id__,
								   		    			newSetPoint,
								   		    		    const_setPointRamping_rampStep)
								   		    [| { share__, terminate } |] (
								   		    f0::D__(id__,
								   		    			newSetPoint,
								   		    		    const_setPointRamping_rampStep)
								   		    [| { share__, terminate } |] (
								   		    j0::D__(id__,
								   		    			newSetPoint,
								   		    		    const_setPointRamping_rampStep)
								   		    [| { share__, terminate } |] (
								   		    j1::D__(id__,
								   		    			newSetPoint,
								   		    		    const_setPointRamping_rampStep)
								   		    [| { share__, terminate } |] (
								   		    j2::D__(id__,
								   		    			newSetPoint,
								   		    		    const_setPointRamping_rampStep)
								   		    [| { share__, terminate } |] (
								   		    j3::D__(id__,
								   		    			newSetPoint,
								   		    		    const_setPointRamping_rampStep)
								   		    [| { share__, terminate } |] (
								   		    j4::D__(id__,
								   		    			newSetPoint,
								   		    		    const_setPointRamping_rampStep)
								   		    [| { share__, terminate } |] (
								   		    j5::D__(id__,
								   		    			newSetPoint,
								   		    		    const_setPointRamping_rampStep)
								   		    )
								   		    )
								   		    )
								   		    )
								   		    )
								   		    )
								   		    )
								   		  )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0,internal__.NID_j0|}]]
								 [[j1::interrupt <- x__ | x__ <- {|internal__.NID_j1,internal__.NID_j1|}]]
								 [[j2::interrupt <- x__ | x__ <- {|internal__.NID_j2|}]]
								 [[j3::interrupt <- x__ | x__ <- {|internal__.NID_j3,internal__.NID_j3|}]]
								 [[j4::interrupt <- x__ | x__ <- {|internal__.NID_j4|}]]
								 [[j5::interrupt <- x__ | x__ <- {|internal__.NID_j5,internal__.NID_j5|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[set_mSetPoint <- setL_mSetPoint]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_mSetPoint
								|}) |]
								 ((i0::enter -> Transitions(id__,
								 			newSetPoint,
								 		    const_setPointRamping_rampStep))
								  [[ share__ <- x__ | x__ <- {| share__,setL_mSetPoint |} ]]
								 )
								)[[setL_mSetPoint <- set_mSetPoint]]
								)
							)
							 \ hideSet)
							[[
								int_enablePWM__.x____ <- int_enablePWM,
								int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__,
							newSetPoint,
						    const_setPointRamping_rampStep) = 
					dbisim((let
						stateClockSync = {|get_CLID_f0,f0::entered|}
					 within
						(MachineBody(id__,
									newSetPoint,
								    const_setPointRamping_rampStep) [| union(stateClockSync,{terminate}) |] StateClocks) \ union(stateClockSync,enteredSS)
					)
					)
				
				Stateful(id__,
							newSetPoint,
						    const_setPointRamping_rampStep) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour(id__,
									newSetPoint,
								    const_setPointRamping_rampStep) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__,
						 			newSetPoint,
						 		    const_setPointRamping_rampStep) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__,
							newSetPoint,
						    const_setPointRamping_rampStep) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter,
							j0::enter,
							j1::enter,
							j2::enter,
							j3::enter,
							j4::enter,
							j5::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_i0,internal__.NID_j5,internal__.NID_j5,internal__.NID_j0,internal__.NID_j1,internal__.NID_j1,internal__.NID_j2,internal__.NID_j0,internal__.NID_j4,internal__.NID_j3,internal__.NID_j3,internal__.NID_j0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i0::VS_O__(id__,
								   		    			newSetPoint,
								   		    		    const_setPointRamping_rampStep)
								   		    [| { share__, terminate } |] (
								   		    f0::VS_O__(id__,
								   		    			newSetPoint,
								   		    		    const_setPointRamping_rampStep)
								   		    [| { share__, terminate } |] (
								   		    j0::VS_O__(id__,
								   		    			newSetPoint,
								   		    		    const_setPointRamping_rampStep)
								   		    [| { share__, terminate } |] (
								   		    j1::VS_O__(id__,
								   		    			newSetPoint,
								   		    		    const_setPointRamping_rampStep)
								   		    [| { share__, terminate } |] (
								   		    j2::VS_O__(id__,
								   		    			newSetPoint,
								   		    		    const_setPointRamping_rampStep)
								   		    [| { share__, terminate } |] (
								   		    j3::VS_O__(id__,
								   		    			newSetPoint,
								   		    		    const_setPointRamping_rampStep)
								   		    [| { share__, terminate } |] (
								   		    j4::VS_O__(id__,
								   		    			newSetPoint,
								   		    		    const_setPointRamping_rampStep)
								   		    [| { share__, terminate } |] (
								   		    j5::VS_O__(id__,
								   		    			newSetPoint,
								   		    		    const_setPointRamping_rampStep)
								   		    )
								   		    )
								   		    )
								   		    )
								   		    )
								   		    )
								   		    )
								   		  )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0,internal__.NID_j0|}]]
								 [[j1::interrupt <- x__ | x__ <- {|internal__.NID_j1,internal__.NID_j1|}]]
								 [[j2::interrupt <- x__ | x__ <- {|internal__.NID_j2|}]]
								 [[j3::interrupt <- x__ | x__ <- {|internal__.NID_j3,internal__.NID_j3|}]]
								 [[j4::interrupt <- x__ | x__ <- {|internal__.NID_j4|}]]
								 [[j5::interrupt <- x__ | x__ <- {|internal__.NID_j5,internal__.NID_j5|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[set_mSetPoint <- setL_mSetPoint]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_mSetPoint
								|}) |]
								 ((i0::enter -> Transitions(id__,
								 			newSetPoint,
								 		    const_setPointRamping_rampStep))
								  [[ share__ <- x__ | x__ <- {| share__,setL_mSetPoint |} ]]
								 )
								)[[setL_mSetPoint <- set_mSetPoint]]
								)
							)
							 \ hideSet)
							[[
								int_enablePWM__.x____ <- int_enablePWM,
								int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__,
							newSetPoint,
						    const_setPointRamping_rampStep) = 
					dbisim((let
						stateClockSync = {|get_CLID_f0,f0::entered|}
					 within
						(MachineBody_VS_O(id__,
									newSetPoint,
								    const_setPointRamping_rampStep) [| union(stateClockSync,{terminate}) |] StateClocks) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				Stateful_VS_O(id__,
							newSetPoint,
						    const_setPointRamping_rampStep) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__,
									newSetPoint,
								    const_setPointRamping_rampStep) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__,
						 			newSetPoint,
						 		    const_setPointRamping_rampStep) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
					
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__,
							newSetPoint,
						    const_setPointRamping_rampStep) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__,
							newSetPoint,
						    const_setPointRamping_rampStep) = STM_VS_O(id__,
							newSetPoint,
						    const_setPointRamping_rampStep) \ localClockResets
				D__(id__,
							newSetPoint,
						    const_setPointRamping_rampStep) = timed_priority(STM(id__,
							newSetPoint,
						    const_setPointRamping_rampStep) \ union(internal_events,localClockResets))
				O__(id__,
							newSetPoint,
						    const_setPointRamping_rampStep) = dbisim(D__(id__,
							newSetPoint,
						    const_setPointRamping_rampStep))
				VS__(id__,
							newSetPoint,
						    const_setPointRamping_rampStep) = FVS__(id__,
							newSetPoint,
						    const_setPointRamping_rampStep)
				VS_O__(id__,
							newSetPoint,
						    const_setPointRamping_rampStep) = dbisim(FVS__(id__,
							newSetPoint,
						    const_setPointRamping_rampStep))
				HEXT__(id__,
							newSetPoint,
						    const_setPointRamping_rampStep) = O__(id__,
							newSetPoint,
						    const_setPointRamping_rampStep) [|shared_variable_events|] SKIP
				FVS_C__(id__,
							newSetPoint,
						    const_setPointRamping_rampStep) = dbisim(timed_priority(STM(id__,
							newSetPoint,
						    const_setPointRamping_rampStep) \ internal_events))
				HUP__(id__,
							newSetPoint,
						    const_setPointRamping_rampStep) = timed_priority(O__(id__,
							newSetPoint,
						    const_setPointRamping_rampStep) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks = terminate -> SKIP
				
				clockSync = {||}
				
				Clock_CLID_f0(x__) = 
					TimeOut_1(
						f0::entered -> Clock_CLID_f0(0)
						[]
						get_CLID_f0!x__ -> Clock_CLID_f0(x__)
						[]
						terminate -> SKIP,Clock_CLID_f0(Plus(x__,1,CLID_f0_clock_type)))
				
				StateClocks = dbisim(Clock_CLID_f0(0))
				
				stateClockSync = {|get_CLID_f0,f0::entered|}
				}
					endmodule
		-- compileOperationDef
		module OP_AdjustLimits
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i0|
			              NID_f0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_overLimit, set_overLimit, setL_overLimit, setR_overLimit: core_real
			channel get_underLimit, set_underLimit, setL_underLimit, setR_underLimit: core_real
			channel get_mSetPoint, set_mSetPoint, setL_mSetPoint, setR_mSetPoint: core_real
			
			-- Shared variable channels
			channel set_EXT_overLimit: core_real
			channel set_EXT_underLimit: core_real
			channel set_EXT_mSetPoint: core_real
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i0::enter,
			f0::enter
			|}
			
			enteredSS = 	{|
			f0::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
				set_EXT_overLimit,
				set_EXT_underLimit,
				set_EXT_mSetPoint
			|}
			
			channel clockReset, clockResetL, clockResetR 
			
			localClockResets = {||}
			
			
			channel get_CLID_f0 : CLID_f0_clock_type
			
			--channel increment__
			
			CLID_f0_clock_type = {0..(clock_type_max(Union({
			}))+1)}
			
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f0
				module f0
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
								
								Entering 	= entered -> SKIP ; Active
								Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
								Interrupted	= share__choice(exit -> exited -> Inactive)
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
			
				-- STM processes
				STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((share__choice(share__choice(get_mSetPoint?mSetPoint -> true & (share__choice(set_overLimit!overLimitF(Plus(mSetPoint, 2, core_real)) -> SKIP))));share__choice(share__choice(get_mSetPoint?mSetPoint -> true & (share__choice(set_underLimit!underLimitF(Minus(mSetPoint, 2, core_real)) -> SKIP)))) ; f0::enter -> SKIP))))
						 []
						 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_i0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i0::D__(id__)
								   		    [| { share__, terminate } |] (
								   		    f0::D__(id__)
								   		    )
								   		  )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_f0,f0::entered|}
					 within
						(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ union(stateClockSync,enteredSS)
					)
					)
				
				Stateful(id__) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_i0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i0::VS_O__(id__)
								   		    [| { share__, terminate } |] (
								   		    f0::VS_O__(id__)
								   		    )
								   		  )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_f0,f0::entered|}
					 within
						(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				Stateful_VS_O(id__) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
					
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__) \ localClockResets
				D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
				O__(id__) = dbisim(D__(id__))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = dbisim(FVS__(id__))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
				HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks = terminate -> SKIP
				
				clockSync = {||}
				
				Clock_CLID_f0(x__) = 
					TimeOut_1(
						f0::entered -> Clock_CLID_f0(0)
						[]
						get_CLID_f0!x__ -> Clock_CLID_f0(x__)
						[]
						terminate -> SKIP,Clock_CLID_f0(Plus(x__,1,CLID_f0_clock_type)))
				
				StateClocks = dbisim(Clock_CLID_f0(0))
				
				stateClockSync = {|get_CLID_f0,f0::entered|}
				}
					endmodule
		-- compileOperationDef
		module OP_enableHV
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i0|
			              NID_f0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_dutyCyclePWM1, set_dutyCyclePWM1, setL_dutyCyclePWM1, setR_dutyCyclePWM1: duty
			
			-- Shared variable channels
			channel set_EXT_dutyCyclePWM1: duty
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel int_enablePWM__: NIDS.InOut.core_boolean
			channel int_enablePWM: InOut.core_boolean
			channel int_dutyCyclePWM1__: NIDS.InOut.duty
			channel int_dutyCyclePWM1: InOut.duty
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i0::enter,
			f0::enter
			|}
			
			enteredSS = 	{|
			f0::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
				set_EXT_dutyCyclePWM1
			|}
			
			channel clockReset, clockResetL, clockResetR 
			
			localClockResets = {||}
			
			
			channel get_CLID_f0 : CLID_f0_clock_type
			
			--channel increment__
			
			CLID_f0_clock_type = {0..(clock_type_max(Union({
			}))+1)}
			
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f0
				module f0
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
								
								Entering 	= entered -> SKIP ; Active
								Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
								Interrupted	= share__choice(exit -> exited -> Inactive)
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
			
				-- STM processes
				STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((Deadline(true&(share__choice(int_enablePWM.out!true -> SKIP)),0);share__choice(true & (share__choice(set_dutyCyclePWM1!real2duty(0) -> SKIP)));Deadline(share__choice(get_dutyCyclePWM1?dutyCyclePWM1 -> true&(share__choice(int_dutyCyclePWM1.out!dutyCyclePWM1 -> SKIP))),0) ; f0::enter -> SKIP))))
						 []
						 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_i0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i0::D__(id__)
								   		    [| { share__, terminate } |] (
								   		    f0::D__(id__)
								   		    )
								   		  )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								int_enablePWM__.x____ <- int_enablePWM,
								int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_f0,f0::entered|}
					 within
						(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ union(stateClockSync,enteredSS)
					)
					)
				
				Stateful(id__) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_i0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i0::VS_O__(id__)
								   		    [| { share__, terminate } |] (
								   		    f0::VS_O__(id__)
								   		    )
								   		  )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								int_enablePWM__.x____ <- int_enablePWM,
								int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_f0,f0::entered|}
					 within
						(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				Stateful_VS_O(id__) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
					
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__) \ localClockResets
				D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
				O__(id__) = dbisim(D__(id__))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = dbisim(FVS__(id__))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
				HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks = terminate -> SKIP
				
				clockSync = {||}
				
				Clock_CLID_f0(x__) = 
					TimeOut_1(
						f0::entered -> Clock_CLID_f0(0)
						[]
						get_CLID_f0!x__ -> Clock_CLID_f0(x__)
						[]
						terminate -> SKIP,Clock_CLID_f0(Plus(x__,1,CLID_f0_clock_type)))
				
				StateClocks = dbisim(Clock_CLID_f0(0))
				
				stateClockSync = {|get_CLID_f0,f0::entered|}
				}
					endmodule
	
		-- declaring machines
		module stm_ref0
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
		
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_Init|
			              NID_ClosedLoop|
			              NID_i0|
			              NID_Wait24Vpower|
			              NID_ErrorMode
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_setPoint, set_setPoint, setL_setPoint, setR_setPoint: core_real
			channel get_newSetPoint, set_newSetPoint, setL_newSetPoint, setR_newSetPoint: core_real
			channel get_ActualHV, set_ActualHV, setL_ActualHV, setR_ActualHV: core_real
			channel get_overLimit, set_overLimit, setL_overLimit, setR_overLimit: core_real
			channel get_underLimit, set_underLimit, setL_underLimit, setR_underLimit: core_real
			channel get_currentState, set_currentState, setL_currentState, setR_currentState: State
			channel get_HVEnabled, set_HVEnabled, setL_HVEnabled, setR_HVEnabled: core_boolean
			channel get_pow24VStatus, set_pow24VStatus, setL_pow24VStatus, setR_pow24VStatus: Power
			channel get_mSetPoint, set_mSetPoint, setL_mSetPoint, setR_mSetPoint: core_real
			channel get_dutyCyclePWM1, set_dutyCyclePWM1, setL_dutyCyclePWM1, setR_dutyCyclePWM1: duty
			
			-- Shared variable channels
			channel set_EXT_overLimit: core_real
			channel set_EXT_underLimit: core_real
			channel set_EXT_currentState: State
			channel set_EXT_HVEnabled: core_boolean
			channel set_EXT_pow24VStatus: Power
			channel set_EXT_mSetPoint: core_real
			channel set_EXT_dutyCyclePWM1: duty
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel ext_ActualHV__: NIDS.InOut.core_real
			channel ext_ActualHV: InOut.core_real
			channel ext_pow24VStatus__: NIDS.InOut.Power
			channel ext_pow24VStatus: InOut.Power
			channel ext_errorAck__: NIDS.InOut
			channel ext_errorAck: InOut
			channel ext_setPoint__: NIDS.InOut.core_real
			channel ext_setPoint: InOut.core_real
			channel int_dutyCyclePWM1__: NIDS.InOut.duty
			channel int_dutyCyclePWM1: InOut.duty
			channel int_enablePWM__: NIDS.InOut.core_boolean
			channel int_enablePWM: InOut.core_boolean
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			Init::enter,
			ClosedLoop::enter,
			i0::enter,
			Wait24Vpower::enter,
			ErrorMode::enter
			|}
			
			enteredSS = 	{|
			Init::entered,
			ClosedLoop::entered,
			Wait24Vpower::entered,
			ErrorMode::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
				set_EXT_overLimit,
				set_EXT_underLimit,
				set_EXT_currentState,
				set_EXT_HVEnabled,
				set_EXT_pow24VStatus,
				set_EXT_mSetPoint,
				set_EXT_dutyCyclePWM1
			|}
			datatype ClockSet = 
				CLID_Cl1
			
			channel clockReset, clockResetL, clockResetR : ClockSet
			
			localClockResets = {|clockReset.CLID_Cl1|}
			
			
			channel get_CLID_Init : CLID_Init_clock_type
			channel get_CLID_ErrorMode : CLID_ErrorMode_clock_type
			channel get_CLID_Cl1 : CLID_Cl1_clock_type
			channel get_CLID_ClosedLoop : CLID_ClosedLoop_clock_type
			channel get_CLID_Wait24Vpower : CLID_Wait24Vpower_clock_type
			
			--channel increment__
			
			CLID_Init_clock_type = {0..(clock_type_max(Union({
			{}
			}))+1)}
			CLID_ErrorMode_clock_type = {0..(clock_type_max(Union({
			{}
			}))+1)}
			CLID_Cl1_clock_type = {0..(clock_type_max(Union({
			{},
			({const_State_machine_cycleTime|cycleTime <- core_nat}),
			({const_State_machine_cycleTime|cycleTime <- core_nat}),
			({const_State_machine_cycleTime|cycleTime <- core_nat})
			}))+1)}
			CLID_ClosedLoop_clock_type = {0..(clock_type_max(Union({
			{}
			}))+1)}
			CLID_Wait24Vpower_clock_type = {0..(clock_type_max(Union({
			{}
			}))+1)}
			
		
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- State: Init
				module Init
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					
					--channel increment__
					
					
					--	Nodes
					-- declaring all nodes
					
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__AdjustLimits(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__AdjustLimits(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
						
						-- Clocks
						
						StateClocks = terminate -> SKIP
						
						stateClockSync = {||}
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: ClosedLoop
				module ClosedLoop
				
				enterSS = 
						{|			i0::enter,
							j0::enter,
							j1::enter,
							j2::enter,
							j3::enter,
							j4::enter,
							j6::enter,
							s0::enter,
							j7::enter
						|}
				enteredSS = 
						{|			s0::entered
						|}
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					-- declaring identifiers of transitions
					datatype NIDS = 
					              NID_i0|
					              NID_j0|
					              NID_j1|
					              NID_j2|
					              NID_j3|
					              NID_j4|
					              NID_j6|
					              NID_s0|
					              NID_j7
					
					channel internal__ : NIDS
					channel ext_ActualHV__: NIDS.InOut.core_real
					channel ext_pow24VStatus__: NIDS.InOut.Power
					channel ext_errorAck__: NIDS.InOut
					channel ext_setPoint__: NIDS.InOut.core_real
					channel int_dutyCyclePWM1__: NIDS.InOut.duty
					channel int_enablePWM__: NIDS.InOut.core_boolean
					
					channel get_CLID_s0 : CLID_s0_clock_type
					
					--channel increment__
					
					CLID_s0_clock_type = {0..(clock_type_max(Union({
					{}
					}))+1)}
					
					--	Nodes
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = D__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Junction: j0
					module j0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = D__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Junction: j1
					module j1
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = D__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Junction: j2
					module j2
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = D__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Junction: j3
					module j3
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = D__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Junction: j4
					module j4
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = D__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Junction: j6
					module j6
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = D__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: s0
					module s0
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Junction: j7
					module j7
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = D__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(true & (share__choice(set_currentState!State_ClosedLoop -> SKIP))) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
						
							Behaviour 	= dbisim(
								((
								 ((dbisim((dbisim((let
								 	-- IMPLEMENTATION NOTE:
								 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								 	-- modules for defining the semantics of each node.
								 	enterSS = {|
								 	i0::enter,
								 	j0::enter,
								 	j1::enter,
								 	j2::enter,
								 	j3::enter,
								 	j4::enter,
								 	j6::enter,
								 	s0::enter,
								 	j7::enter
								 	|}
								 	hideSet = union(enterSS,{|exit,exited,internal__|})
								 within 
								 	((let
								 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								 		-- because CSPM modules are used for the semantics of Node.
								 		flowevts = union(enterSS,{|exit,exited|})
								 		transSync = {|internal__.NID_i0,internal__.NID_j0,internal__.NID_j1,internal__.NID_j0,internal__.NID_j2,internal__.NID_j2,internal__.NID_j3,internal__.NID_s0,internal__.NID_j6,internal__.NID_j4,internal__.NID_j4,internal__.NID_j7|}
								 	within
								 		((
								 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								 		   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								 		   		    i0::D__(id__,
								 		   		    		    const_State_machine_cycleTime,
								 		   		    		    const_setPointRamping_rampStep)
								 		   		    [| { share__, terminate } |] (
								 		   		    j0::D__(id__,
								 		   		    		    const_State_machine_cycleTime,
								 		   		    		    const_setPointRamping_rampStep)
								 		   		    [| { share__, terminate } |] (
								 		   		    j1::D__(id__,
								 		   		    		    const_State_machine_cycleTime,
								 		   		    		    const_setPointRamping_rampStep)
								 		   		    [| { share__, terminate } |] (
								 		   		    j2::D__(id__,
								 		   		    		    const_State_machine_cycleTime,
								 		   		    		    const_setPointRamping_rampStep)
								 		   		    [| { share__, terminate } |] (
								 		   		    j3::D__(id__,
								 		   		    		    const_State_machine_cycleTime,
								 		   		    		    const_setPointRamping_rampStep)
								 		   		    [| { share__, terminate } |] (
								 		   		    j4::D__(id__,
								 		   		    		    const_State_machine_cycleTime,
								 		   		    		    const_setPointRamping_rampStep)
								 		   		    [| { share__, terminate } |] (
								 		   		    j6::D__(id__,
								 		   		    		    const_State_machine_cycleTime,
								 		   		    		    const_setPointRamping_rampStep)
								 		   		    [| { share__, terminate } |] (
								 		   		    s0::D__(id__,
								 		   		    		    const_State_machine_cycleTime,
								 		   		    		    const_setPointRamping_rampStep)
								 		   		    [| { share__, terminate } |] (
								 		   		    j7::D__(id__,
								 		   		    		    const_State_machine_cycleTime,
								 		   		    		    const_setPointRamping_rampStep)
								 		   		    )
								 		   		    )
								 		   		    )
								 		   		    )
								 		   		    )
								 		   		    )
								 		   		    )
								 		   		    )
								 		   		  )
								 		 )
								 		 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
								 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 		 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
								 		 [[j1::interrupt <- x__ | x__ <- {|internal__.NID_j1|}]]
								 		 [[j2::interrupt <- x__ | x__ <- {|internal__.NID_j2,internal__.NID_j2|}]]
								 		 [[j3::interrupt <- x__ | x__ <- {|internal__.NID_j3|}]]
								 		 [[j4::interrupt <- x__ | x__ <- {|internal__.NID_j4,internal__.NID_j4|}]]
								 		 [[j6::interrupt <- x__ | x__ <- {|internal__.NID_j6|}]]
								 		 [[j7::interrupt <- x__ | x__ <- {|internal__.NID_j7|}]]
								 		 )
								 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 		  [[set_setPoint <- setL_setPoint,set_HVEnabled <- setL_HVEnabled,set_currentState <- setL_currentState]]
								 		 )
								 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 		 			,setL_setPoint
								 		 			,setL_HVEnabled
								 		 			,setL_currentState
								 		|}) |]
								 		 ((i0::enter -> Transitions(id__,
								 		 		    const_State_machine_cycleTime,
								 		 		    const_setPointRamping_rampStep))
								 		  [[ share__ <- x__ | x__ <- {| share__,setL_setPoint,setL_HVEnabled,setL_currentState |} ]]
								 		 )
								 		)[[setL_setPoint <- set_setPoint,setL_HVEnabled <- set_HVEnabled,setL_currentState <- set_currentState]]
								 		)
								 	)
								 	 \ hideSet)
								 	[[
								 		ext_ActualHV__.x____ <- ext_ActualHV,
								 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								 		ext_errorAck__.x____ <- ext_errorAck,
								 		ext_setPoint__.x____ <- ext_setPoint,
								 		int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1,
								 		int_enablePWM__.x____ <- int_enablePWM
								 		| x____ <- NIDS
								 	]]
								 )
								 )
								  [| union(stateClockSync,{terminate}) |]
								  StateClocks
								 )\diff(stateClockSync,enteredSS)))
								  [[ share__ <- x__ | x__ <- {| share__,setR_setPoint,setR_dutyCyclePWM1,setR_pow24VStatus,setR_ActualHV,setR_overLimit,setR_underLimit,setR_currentState,setR_HVEnabled,setR_newSetPoint,setR_mSetPoint |} ]] 
								  [[set_setPoint <- setL_setPoint,set_dutyCyclePWM1 <- setL_dutyCyclePWM1,set_pow24VStatus <- setL_pow24VStatus,set_ActualHV <- setL_ActualHV,set_overLimit <- setL_overLimit,set_underLimit <- setL_underLimit,set_currentState <- setL_currentState,set_HVEnabled <- setL_HVEnabled,set_newSetPoint <- setL_newSetPoint,set_mSetPoint <- setL_mSetPoint]]
								 )
								 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
								 			,setL_setPoint
								 			,setL_dutyCyclePWM1
								 			,setL_pow24VStatus
								 			,setL_ActualHV
								 			,setL_overLimit
								 			,setL_underLimit
								 			,setL_currentState
								 			,setL_HVEnabled
								 			,setL_newSetPoint
								 			,setL_mSetPoint
								 			,setR_setPoint
								 			 			,setR_dutyCyclePWM1
								 			 			,setR_pow24VStatus
								 			 			,setR_ActualHV
								 			 			,setR_overLimit
								 			 			,setR_underLimit
								 			 			,setR_currentState
								 			 			,setR_HVEnabled
								 			 			,setR_newSetPoint
								 			 			,setR_mSetPoint
								 			|}) |]
								 ((During)
								  [[ share__ <- x__ | x__ <- {| share__,setL_setPoint,setL_dutyCyclePWM1,setL_pow24VStatus,setL_ActualHV,setL_overLimit,setL_underLimit,setL_currentState,setL_HVEnabled,setL_newSetPoint,setL_mSetPoint |} ]]
								  [[set_setPoint <- setR_setPoint,set_dutyCyclePWM1 <- setR_dutyCyclePWM1,set_pow24VStatus <- setR_pow24VStatus,set_ActualHV <- setR_ActualHV,set_overLimit <- setR_overLimit,set_underLimit <- setR_underLimit,set_currentState <- setR_currentState,set_HVEnabled <- setR_HVEnabled,set_newSetPoint <- setR_newSetPoint,set_mSetPoint <- setR_mSetPoint]]
								 )
								)[[setL_setPoint <- set_setPoint,setL_dutyCyclePWM1 <- set_dutyCyclePWM1,setL_pow24VStatus <- set_pow24VStatus,setL_ActualHV <- set_ActualHV,setL_overLimit <- set_overLimit,setL_underLimit <- set_underLimit,setL_currentState <- set_currentState,setL_HVEnabled <- set_HVEnabled,setL_newSetPoint <- set_newSetPoint,setL_mSetPoint <- set_mSetPoint]]
								 [[setR_setPoint <- set_setPoint,setR_dutyCyclePWM1 <- set_dutyCyclePWM1,setR_pow24VStatus <- set_pow24VStatus,setR_ActualHV <- set_ActualHV,setR_overLimit <- set_overLimit,setR_underLimit <- set_underLimit,setR_currentState <- set_currentState,setR_HVEnabled <- set_HVEnabled,setR_newSetPoint <- set_newSetPoint,setR_mSetPoint <- set_mSetPoint]]
								)\union(enteredSS,{terminate}) 
							)
							During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
									 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> terminate -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(true & (share__choice(set_currentState!State_ClosedLoop -> SKIP))) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
						
							Behaviour 	= dbisim(
								((
								 ((dbisim((dbisim((let
								 	-- IMPLEMENTATION NOTE:
								 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								 	-- modules for defining the semantics of each node.
								 	enterSS = {|
								 	i0::enter,
								 	j0::enter,
								 	j1::enter,
								 	j2::enter,
								 	j3::enter,
								 	j4::enter,
								 	j6::enter,
								 	s0::enter,
								 	j7::enter
								 	|}
								 	hideSet = union(enterSS,{|exit,exited,internal__|})
								 within 
								 	((let
								 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								 		-- because CSPM modules are used for the semantics of Node.
								 		flowevts = union(enterSS,{|exit,exited|})
								 		transSync = {|internal__.NID_i0,internal__.NID_j0,internal__.NID_j1,internal__.NID_j0,internal__.NID_j2,internal__.NID_j2,internal__.NID_j3,internal__.NID_s0,internal__.NID_j6,internal__.NID_j4,internal__.NID_j4,internal__.NID_j7|}
								 	within
								 		((
								 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								 		   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								 		   		    i0::VS_O__(id__,
								 		   		    		    const_State_machine_cycleTime,
								 		   		    		    const_setPointRamping_rampStep)
								 		   		    [| { share__, terminate } |] (
								 		   		    j0::VS_O__(id__,
								 		   		    		    const_State_machine_cycleTime,
								 		   		    		    const_setPointRamping_rampStep)
								 		   		    [| { share__, terminate } |] (
								 		   		    j1::VS_O__(id__,
								 		   		    		    const_State_machine_cycleTime,
								 		   		    		    const_setPointRamping_rampStep)
								 		   		    [| { share__, terminate } |] (
								 		   		    j2::VS_O__(id__,
								 		   		    		    const_State_machine_cycleTime,
								 		   		    		    const_setPointRamping_rampStep)
								 		   		    [| { share__, terminate } |] (
								 		   		    j3::VS_O__(id__,
								 		   		    		    const_State_machine_cycleTime,
								 		   		    		    const_setPointRamping_rampStep)
								 		   		    [| { share__, terminate } |] (
								 		   		    j4::VS_O__(id__,
								 		   		    		    const_State_machine_cycleTime,
								 		   		    		    const_setPointRamping_rampStep)
								 		   		    [| { share__, terminate } |] (
								 		   		    j6::VS_O__(id__,
								 		   		    		    const_State_machine_cycleTime,
								 		   		    		    const_setPointRamping_rampStep)
								 		   		    [| { share__, terminate } |] (
								 		   		    s0::VS_O__(id__,
								 		   		    		    const_State_machine_cycleTime,
								 		   		    		    const_setPointRamping_rampStep)
								 		   		    [| { share__, terminate } |] (
								 		   		    j7::VS_O__(id__,
								 		   		    		    const_State_machine_cycleTime,
								 		   		    		    const_setPointRamping_rampStep)
								 		   		    )
								 		   		    )
								 		   		    )
								 		   		    )
								 		   		    )
								 		   		    )
								 		   		    )
								 		   		    )
								 		   		  )
								 		 )
								 		 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
								 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 		 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
								 		 [[j1::interrupt <- x__ | x__ <- {|internal__.NID_j1|}]]
								 		 [[j2::interrupt <- x__ | x__ <- {|internal__.NID_j2,internal__.NID_j2|}]]
								 		 [[j3::interrupt <- x__ | x__ <- {|internal__.NID_j3|}]]
								 		 [[j4::interrupt <- x__ | x__ <- {|internal__.NID_j4,internal__.NID_j4|}]]
								 		 [[j6::interrupt <- x__ | x__ <- {|internal__.NID_j6|}]]
								 		 [[j7::interrupt <- x__ | x__ <- {|internal__.NID_j7|}]]
								 		 )
								 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 		  [[set_setPoint <- setL_setPoint,set_HVEnabled <- setL_HVEnabled,set_currentState <- setL_currentState]]
								 		 )
								 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 		 			,setL_setPoint
								 		 			,setL_HVEnabled
								 		 			,setL_currentState
								 		|}) |]
								 		 ((i0::enter -> Transitions(id__,
								 		 		    const_State_machine_cycleTime,
								 		 		    const_setPointRamping_rampStep))
								 		  [[ share__ <- x__ | x__ <- {| share__,setL_setPoint,setL_HVEnabled,setL_currentState |} ]]
								 		 )
								 		)[[setL_setPoint <- set_setPoint,setL_HVEnabled <- set_HVEnabled,setL_currentState <- set_currentState]]
								 		)
								 	)
								 	 \ hideSet)
								 	[[
								 		ext_ActualHV__.x____ <- ext_ActualHV,
								 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								 		ext_errorAck__.x____ <- ext_errorAck,
								 		ext_setPoint__.x____ <- ext_setPoint,
								 		int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1,
								 		int_enablePWM__.x____ <- int_enablePWM
								 		| x____ <- NIDS
								 	]]
								 )
								 )
								  [| union(stateClockSync,{terminate}) |]
								  StateClocks
								 )\diff(stateClockSync,enteredSS)))
								  [[ share__ <- x__ | x__ <- {| share__,setR_setPoint,setR_dutyCyclePWM1,setR_pow24VStatus,setR_ActualHV,setR_overLimit,setR_underLimit,setR_currentState,setR_HVEnabled,setR_newSetPoint,setR_mSetPoint |} ]] 
								  [[set_setPoint <- setL_setPoint,set_dutyCyclePWM1 <- setL_dutyCyclePWM1,set_pow24VStatus <- setL_pow24VStatus,set_ActualHV <- setL_ActualHV,set_overLimit <- setL_overLimit,set_underLimit <- setL_underLimit,set_currentState <- setL_currentState,set_HVEnabled <- setL_HVEnabled,set_newSetPoint <- setL_newSetPoint,set_mSetPoint <- setL_mSetPoint]]
								 )
								 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
								 			,setL_setPoint
								 			,setL_dutyCyclePWM1
								 			,setL_pow24VStatus
								 			,setL_ActualHV
								 			,setL_overLimit
								 			,setL_underLimit
								 			,setL_currentState
								 			,setL_HVEnabled
								 			,setL_newSetPoint
								 			,setL_mSetPoint
								 			,setR_setPoint
								 			 			,setR_dutyCyclePWM1
								 			 			,setR_pow24VStatus
								 			 			,setR_ActualHV
								 			 			,setR_overLimit
								 			 			,setR_underLimit
								 			 			,setR_currentState
								 			 			,setR_HVEnabled
								 			 			,setR_newSetPoint
								 			 			,setR_mSetPoint
								 			|}) |]
								 ((During)
								  [[ share__ <- x__ | x__ <- {| share__,setL_setPoint,setL_dutyCyclePWM1,setL_pow24VStatus,setL_ActualHV,setL_overLimit,setL_underLimit,setL_currentState,setL_HVEnabled,setL_newSetPoint,setL_mSetPoint |} ]]
								  [[set_setPoint <- setR_setPoint,set_dutyCyclePWM1 <- setR_dutyCyclePWM1,set_pow24VStatus <- setR_pow24VStatus,set_ActualHV <- setR_ActualHV,set_overLimit <- setR_overLimit,set_underLimit <- setR_underLimit,set_currentState <- setR_currentState,set_HVEnabled <- setR_HVEnabled,set_newSetPoint <- setR_newSetPoint,set_mSetPoint <- setR_mSetPoint]]
								 )
								)[[setL_setPoint <- set_setPoint,setL_dutyCyclePWM1 <- set_dutyCyclePWM1,setL_pow24VStatus <- set_pow24VStatus,setL_ActualHV <- set_ActualHV,setL_overLimit <- set_overLimit,setL_underLimit <- set_underLimit,setL_currentState <- set_currentState,setL_HVEnabled <- set_HVEnabled,setL_newSetPoint <- set_newSetPoint,setL_mSetPoint <- set_mSetPoint]]
								 [[setR_setPoint <- set_setPoint,setR_dutyCyclePWM1 <- set_dutyCyclePWM1,setR_pow24VStatus <- set_pow24VStatus,setR_ActualHV <- set_ActualHV,setR_overLimit <- set_overLimit,setR_underLimit <- set_underLimit,setR_currentState <- set_currentState,setR_HVEnabled <- set_HVEnabled,setR_newSetPoint <- set_newSetPoint,setR_mSetPoint <- set_mSetPoint]]
								)\{terminate} 
							)
							During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
									 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> terminate -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
						Transitions(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = ((let
							Trans = get_setPoint?setPoint -> get_HVEnabled?HVEnabled -> get_currentState?currentState -> TimeOut_1(
								 (share__ -> SKIP
								 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; j7::enter -> SKIP))))
								 [] dbisim((((setPoint!=0) and (HVEnabled==false)))&(internal__!NID_j0 -> SKIP ;  ((share__choice(true & (share__choice(set_HVEnabled!true -> SKIP))) ; j1::enter -> SKIP))))
								 [] dbisim((true)&(internal__!NID_j1 -> SKIP ;  ((true&CALL__supplyVoltCheck(
								 			id__
								 		) ; j2::enter -> SKIP))))
								 [] dbisim((((setPoint==0) or (HVEnabled==true)))&(internal__!NID_j0 -> SKIP ;  ((SKIP ; j3::enter -> SKIP))))
								 [] dbisim(((HVEnabled==true))&(internal__!NID_j2 -> SKIP ;  ((true&CALL__enableHV(
								 			id__
								 		) ; j3::enter -> SKIP))))
								 [] dbisim(((HVEnabled==false))&(internal__!NID_j2 -> SKIP ;  ((SKIP ; j3::enter -> SKIP))))
								 [] dbisim((true)&(internal__!NID_j3 -> SKIP ;  ((true&CALL__checkLimits(
								 			id__
								 		) ; j4::enter -> SKIP))))
								 [] dbisim(((currentState==State_ClosedLoop))&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SHARE_WAIT(const_State_machine_cycleTime) ; j7::enter -> SKIP)))
								 [] dbisim((true)&(internal__!NID_j6 -> SKIP ;  ((true&CALL__PID_Control(
								 			id__
								 		) ; s0::enter -> SKIP))))
								 [] dbisim(((HVEnabled==true))&(internal__!NID_j4 -> SKIP ;  ((Deadline(true&(share__choice(ext_setPoint.in?setPoint -> (SStop /\ set_setPoint!setPoint -> SKIP))),0);share__choice(get_setPoint?setPoint -> true&CALL__setPointRamping(
								 			id__,
								 			setPoint,
								 			const_setPointRamping_rampStep
								 		)) ; j6::enter -> SKIP))))
								 [] dbisim(((HVEnabled==false))&(internal__!NID_j4 -> SKIP ;  ((SKIP ; j6::enter -> SKIP))))
								 [] dbisim((true)&(internal__!NID_j7 -> SKIP ;  ((Deadline(true&(share__choice(ext_setPoint.in?setPoint -> (SStop /\ set_setPoint!setPoint -> SKIP))),0);share__choice(get_setPoint?setPoint -> true&(if ((setPoint==0)) then (true&CALL__disableHV(
								 			id__,
								 			false
								 		)) else (SKIP))) ; j0::enter -> SKIP))))
								 []
								 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
								 []
								 terminate -> SKIP
								 )
							,SKIP);Trans
						within
							Trans [|{terminate}|> SKIP
						)
						)
						
						
						-- Clocks
						Clock_CLID_s0(x__) = 
							TimeOut_1(
								s0::entered -> Clock_CLID_s0(0)
								[]
								get_CLID_s0!x__ -> Clock_CLID_s0(x__)
								[]
								terminate -> SKIP,Clock_CLID_s0(Plus(x__,1,CLID_s0_clock_type)))
						
						StateClocks = dbisim(Clock_CLID_s0(0))
						
						stateClockSync = {|get_CLID_s0,s0::entered|}
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = D__(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: Wait24Vpower
				module Wait24Vpower
				
				enterSS = 
						{|			i0::enter,
							j0::enter,
							j1::enter,
							f0::enter
						|}
				enteredSS = 
						{|			f0::entered
						|}
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					-- declaring identifiers of transitions
					datatype NIDS = 
					              NID_i0|
					              NID_j0|
					              NID_j1|
					              NID_f0
					
					channel internal__ : NIDS
					channel ext_ActualHV__: NIDS.InOut.core_real
					channel ext_pow24VStatus__: NIDS.InOut.Power
					channel ext_errorAck__: NIDS.InOut
					channel ext_setPoint__: NIDS.InOut.core_real
					channel int_dutyCyclePWM1__: NIDS.InOut.duty
					channel int_enablePWM__: NIDS.InOut.core_boolean
					
					channel get_CLID_f0 : CLID_f0_clock_type
					
					--channel increment__
					
					CLID_f0_clock_type = {0..(clock_type_max(Union({
					{}
					}))+1)}
					
					--	Nodes
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = D__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Junction: j0
					module j0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = D__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Junction: j1
					module j1
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = D__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Final state: f0
					module f0
					
					exports
					
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							D__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
									
									Entering 	= entered -> SKIP ; Active
									Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
									Interrupted	= share__choice(exit -> exited -> Inactive)
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = D__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(true & (share__choice(set_currentState!State_Wait24Vpower -> SKIP))) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
						
							Behaviour 	= dbisim(
								((
								 ((dbisim((dbisim((let
								 	-- IMPLEMENTATION NOTE:
								 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								 	-- modules for defining the semantics of each node.
								 	enterSS = {|
								 	i0::enter,
								 	j0::enter,
								 	j1::enter,
								 	f0::enter
								 	|}
								 	hideSet = union(enterSS,{|exit,exited,internal__|})
								 within 
								 	((let
								 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								 		-- because CSPM modules are used for the semantics of Node.
								 		flowevts = union(enterSS,{|exit,exited|})
								 		transSync = {|internal__.NID_i0,internal__.NID_j0,internal__.NID_j1,internal__.NID_j1,internal__.NID_j1|}
								 	within
								 		((
								 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								 		   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								 		   		    i0::D__(id__,
								 		   		    		    const_State_machine_cycleTime,
								 		   		    		    const_setPointRamping_rampStep)
								 		   		    [| { share__, terminate } |] (
								 		   		    j0::D__(id__,
								 		   		    		    const_State_machine_cycleTime,
								 		   		    		    const_setPointRamping_rampStep)
								 		   		    [| { share__, terminate } |] (
								 		   		    j1::D__(id__,
								 		   		    		    const_State_machine_cycleTime,
								 		   		    		    const_setPointRamping_rampStep)
								 		   		    [| { share__, terminate } |] (
								 		   		    f0::D__(id__,
								 		   		    		    const_State_machine_cycleTime,
								 		   		    		    const_setPointRamping_rampStep)
								 		   		    )
								 		   		    )
								 		   		    )
								 		   		  )
								 		 )
								 		 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 		 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0|}]]
								 		 [[j1::interrupt <- x__ | x__ <- {|internal__.NID_j1,internal__.NID_j1,internal__.NID_j1|}]]
								 		 )
								 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 		  [[set_setPoint <- setL_setPoint,set_pow24VStatus <- setL_pow24VStatus]]
								 		 )
								 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 		 			,setL_setPoint
								 		 			,setL_pow24VStatus
								 		|}) |]
								 		 ((i0::enter -> Transitions(id__,
								 		 		    const_State_machine_cycleTime,
								 		 		    const_setPointRamping_rampStep))
								 		  [[ share__ <- x__ | x__ <- {| share__,setL_setPoint,setL_pow24VStatus |} ]]
								 		 )
								 		)[[setL_setPoint <- set_setPoint,setL_pow24VStatus <- set_pow24VStatus]]
								 		)
								 	)
								 	 \ hideSet)
								 	[[
								 		ext_ActualHV__.x____ <- ext_ActualHV,
								 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								 		ext_errorAck__.x____ <- ext_errorAck,
								 		ext_setPoint__.x____ <- ext_setPoint,
								 		int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1,
								 		int_enablePWM__.x____ <- int_enablePWM
								 		| x____ <- NIDS
								 	]]
								 )
								 )
								  [| union(stateClockSync,{terminate}) |]
								  StateClocks
								 )\diff(stateClockSync,enteredSS)))
								  [[ share__ <- x__ | x__ <- {| share__,setR_setPoint,setR_dutyCyclePWM1,setR_pow24VStatus,setR_ActualHV,setR_overLimit,setR_underLimit,setR_currentState,setR_HVEnabled,setR_newSetPoint,setR_mSetPoint |} ]] 
								  [[set_setPoint <- setL_setPoint,set_dutyCyclePWM1 <- setL_dutyCyclePWM1,set_pow24VStatus <- setL_pow24VStatus,set_ActualHV <- setL_ActualHV,set_overLimit <- setL_overLimit,set_underLimit <- setL_underLimit,set_currentState <- setL_currentState,set_HVEnabled <- setL_HVEnabled,set_newSetPoint <- setL_newSetPoint,set_mSetPoint <- setL_mSetPoint]]
								 )
								 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
								 			,setL_setPoint
								 			,setL_dutyCyclePWM1
								 			,setL_pow24VStatus
								 			,setL_ActualHV
								 			,setL_overLimit
								 			,setL_underLimit
								 			,setL_currentState
								 			,setL_HVEnabled
								 			,setL_newSetPoint
								 			,setL_mSetPoint
								 			,setR_setPoint
								 			 			,setR_dutyCyclePWM1
								 			 			,setR_pow24VStatus
								 			 			,setR_ActualHV
								 			 			,setR_overLimit
								 			 			,setR_underLimit
								 			 			,setR_currentState
								 			 			,setR_HVEnabled
								 			 			,setR_newSetPoint
								 			 			,setR_mSetPoint
								 			|}) |]
								 ((During)
								  [[ share__ <- x__ | x__ <- {| share__,setL_setPoint,setL_dutyCyclePWM1,setL_pow24VStatus,setL_ActualHV,setL_overLimit,setL_underLimit,setL_currentState,setL_HVEnabled,setL_newSetPoint,setL_mSetPoint |} ]]
								  [[set_setPoint <- setR_setPoint,set_dutyCyclePWM1 <- setR_dutyCyclePWM1,set_pow24VStatus <- setR_pow24VStatus,set_ActualHV <- setR_ActualHV,set_overLimit <- setR_overLimit,set_underLimit <- setR_underLimit,set_currentState <- setR_currentState,set_HVEnabled <- setR_HVEnabled,set_newSetPoint <- setR_newSetPoint,set_mSetPoint <- setR_mSetPoint]]
								 )
								)[[setL_setPoint <- set_setPoint,setL_dutyCyclePWM1 <- set_dutyCyclePWM1,setL_pow24VStatus <- set_pow24VStatus,setL_ActualHV <- set_ActualHV,setL_overLimit <- set_overLimit,setL_underLimit <- set_underLimit,setL_currentState <- set_currentState,setL_HVEnabled <- set_HVEnabled,setL_newSetPoint <- set_newSetPoint,setL_mSetPoint <- set_mSetPoint]]
								 [[setR_setPoint <- set_setPoint,setR_dutyCyclePWM1 <- set_dutyCyclePWM1,setR_pow24VStatus <- set_pow24VStatus,setR_ActualHV <- set_ActualHV,setR_overLimit <- set_overLimit,setR_underLimit <- set_underLimit,setR_currentState <- set_currentState,setR_HVEnabled <- set_HVEnabled,setR_newSetPoint <- set_newSetPoint,setR_mSetPoint <- set_mSetPoint]]
								)\union(enteredSS,{terminate}) 
							)
							During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
									 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> terminate -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(true & (share__choice(set_currentState!State_Wait24Vpower -> SKIP))) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
						
							Behaviour 	= dbisim(
								((
								 ((dbisim((dbisim((let
								 	-- IMPLEMENTATION NOTE:
								 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								 	-- modules for defining the semantics of each node.
								 	enterSS = {|
								 	i0::enter,
								 	j0::enter,
								 	j1::enter,
								 	f0::enter
								 	|}
								 	hideSet = union(enterSS,{|exit,exited,internal__|})
								 within 
								 	((let
								 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								 		-- because CSPM modules are used for the semantics of Node.
								 		flowevts = union(enterSS,{|exit,exited|})
								 		transSync = {|internal__.NID_i0,internal__.NID_j0,internal__.NID_j1,internal__.NID_j1,internal__.NID_j1|}
								 	within
								 		((
								 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								 		   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								 		   		    i0::VS_O__(id__,
								 		   		    		    const_State_machine_cycleTime,
								 		   		    		    const_setPointRamping_rampStep)
								 		   		    [| { share__, terminate } |] (
								 		   		    j0::VS_O__(id__,
								 		   		    		    const_State_machine_cycleTime,
								 		   		    		    const_setPointRamping_rampStep)
								 		   		    [| { share__, terminate } |] (
								 		   		    j1::VS_O__(id__,
								 		   		    		    const_State_machine_cycleTime,
								 		   		    		    const_setPointRamping_rampStep)
								 		   		    [| { share__, terminate } |] (
								 		   		    f0::VS_O__(id__,
								 		   		    		    const_State_machine_cycleTime,
								 		   		    		    const_setPointRamping_rampStep)
								 		   		    )
								 		   		    )
								 		   		    )
								 		   		  )
								 		 )
								 		 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 		 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0|}]]
								 		 [[j1::interrupt <- x__ | x__ <- {|internal__.NID_j1,internal__.NID_j1,internal__.NID_j1|}]]
								 		 )
								 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 		  [[set_setPoint <- setL_setPoint,set_pow24VStatus <- setL_pow24VStatus]]
								 		 )
								 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 		 			,setL_setPoint
								 		 			,setL_pow24VStatus
								 		|}) |]
								 		 ((i0::enter -> Transitions(id__,
								 		 		    const_State_machine_cycleTime,
								 		 		    const_setPointRamping_rampStep))
								 		  [[ share__ <- x__ | x__ <- {| share__,setL_setPoint,setL_pow24VStatus |} ]]
								 		 )
								 		)[[setL_setPoint <- set_setPoint,setL_pow24VStatus <- set_pow24VStatus]]
								 		)
								 	)
								 	 \ hideSet)
								 	[[
								 		ext_ActualHV__.x____ <- ext_ActualHV,
								 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								 		ext_errorAck__.x____ <- ext_errorAck,
								 		ext_setPoint__.x____ <- ext_setPoint,
								 		int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1,
								 		int_enablePWM__.x____ <- int_enablePWM
								 		| x____ <- NIDS
								 	]]
								 )
								 )
								  [| union(stateClockSync,{terminate}) |]
								  StateClocks
								 )\diff(stateClockSync,enteredSS)))
								  [[ share__ <- x__ | x__ <- {| share__,setR_setPoint,setR_dutyCyclePWM1,setR_pow24VStatus,setR_ActualHV,setR_overLimit,setR_underLimit,setR_currentState,setR_HVEnabled,setR_newSetPoint,setR_mSetPoint |} ]] 
								  [[set_setPoint <- setL_setPoint,set_dutyCyclePWM1 <- setL_dutyCyclePWM1,set_pow24VStatus <- setL_pow24VStatus,set_ActualHV <- setL_ActualHV,set_overLimit <- setL_overLimit,set_underLimit <- setL_underLimit,set_currentState <- setL_currentState,set_HVEnabled <- setL_HVEnabled,set_newSetPoint <- setL_newSetPoint,set_mSetPoint <- setL_mSetPoint]]
								 )
								 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
								 			,setL_setPoint
								 			,setL_dutyCyclePWM1
								 			,setL_pow24VStatus
								 			,setL_ActualHV
								 			,setL_overLimit
								 			,setL_underLimit
								 			,setL_currentState
								 			,setL_HVEnabled
								 			,setL_newSetPoint
								 			,setL_mSetPoint
								 			,setR_setPoint
								 			 			,setR_dutyCyclePWM1
								 			 			,setR_pow24VStatus
								 			 			,setR_ActualHV
								 			 			,setR_overLimit
								 			 			,setR_underLimit
								 			 			,setR_currentState
								 			 			,setR_HVEnabled
								 			 			,setR_newSetPoint
								 			 			,setR_mSetPoint
								 			|}) |]
								 ((During)
								  [[ share__ <- x__ | x__ <- {| share__,setL_setPoint,setL_dutyCyclePWM1,setL_pow24VStatus,setL_ActualHV,setL_overLimit,setL_underLimit,setL_currentState,setL_HVEnabled,setL_newSetPoint,setL_mSetPoint |} ]]
								  [[set_setPoint <- setR_setPoint,set_dutyCyclePWM1 <- setR_dutyCyclePWM1,set_pow24VStatus <- setR_pow24VStatus,set_ActualHV <- setR_ActualHV,set_overLimit <- setR_overLimit,set_underLimit <- setR_underLimit,set_currentState <- setR_currentState,set_HVEnabled <- setR_HVEnabled,set_newSetPoint <- setR_newSetPoint,set_mSetPoint <- setR_mSetPoint]]
								 )
								)[[setL_setPoint <- set_setPoint,setL_dutyCyclePWM1 <- set_dutyCyclePWM1,setL_pow24VStatus <- set_pow24VStatus,setL_ActualHV <- set_ActualHV,setL_overLimit <- set_overLimit,setL_underLimit <- set_underLimit,setL_currentState <- set_currentState,setL_HVEnabled <- set_HVEnabled,setL_newSetPoint <- set_newSetPoint,setL_mSetPoint <- set_mSetPoint]]
								 [[setR_setPoint <- set_setPoint,setR_dutyCyclePWM1 <- set_dutyCyclePWM1,setR_pow24VStatus <- set_pow24VStatus,setR_ActualHV <- set_ActualHV,setR_overLimit <- set_overLimit,setR_underLimit <- set_underLimit,setR_currentState <- set_currentState,setR_HVEnabled <- set_HVEnabled,setR_newSetPoint <- set_newSetPoint,setR_mSetPoint <- set_mSetPoint]]
								)\{terminate} 
							)
							During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
									 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> terminate -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
						Transitions(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = ((let
							Trans = get_setPoint?setPoint -> get_pow24VStatus?pow24VStatus -> TimeOut_1(
								 (share__ -> SKIP
								 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; j0::enter -> SKIP))))
								 [] dbisim((true)&(internal__!NID_j0 -> SKIP ;  ((true&CALL__disableHV(
								 			id__,
								 			false
								 		);true&CALL__supplyVoltCheck(
								 			id__
								 		);Deadline(true&(share__choice(ext_setPoint.in?setPoint -> (SStop /\ set_setPoint!setPoint -> SKIP))),0) ; j1::enter -> SKIP))))
								 [] dbisim(((setPoint!=0))&(internal__!NID_j1 -> SKIP ;  ((true&CALL__disableHV(
								 			id__,
								 			true
								 		);SHARE_WAIT(const_State_machine_cycleTime) ; f0::enter -> SKIP))))
								 [] dbisim((((pow24VStatus==Power_On) and (setPoint==0)))&(internal__!NID_j1 -> SKIP ;  ((SHARE_WAIT(const_State_machine_cycleTime) ; f0::enter -> SKIP))))
								 [] dbisim(((not (((((setPoint!=0)) or ((pow24VStatus==Power_On)))))))&(internal__!NID_j1 -> SKIP ;  ((SHARE_WAIT(const_State_machine_cycleTime) ; j0::enter -> SKIP))))
								 []
								 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
								 []
								 terminate -> SKIP
								 )
							,SKIP);Trans
						within
							Trans [|{terminate}|> SKIP
						)
						)
						
						
						-- Clocks
						Clock_CLID_f0(x__) = 
							TimeOut_1(
								f0::entered -> Clock_CLID_f0(0)
								[]
								get_CLID_f0!x__ -> Clock_CLID_f0(x__)
								[]
								terminate -> SKIP,Clock_CLID_f0(Plus(x__,1,CLID_f0_clock_type)))
						
						StateClocks = dbisim(Clock_CLID_f0(0))
						
						stateClockSync = {|get_CLID_f0,f0::entered|}
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: ErrorMode
				module ErrorMode
				
				enterSS = 
						{|			i0::enter,
							s0::enter,
							f0::enter
						|}
				enteredSS = 
						{|			s0::entered,
							f0::entered
						|}
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					-- declaring identifiers of transitions
					datatype NIDS = 
					              NID_i0|
					              NID_s0|
					              NID_f0
					
					channel internal__ : NIDS
					channel ext_ActualHV__: NIDS.InOut.core_real
					channel ext_pow24VStatus__: NIDS.InOut.Power
					channel ext_errorAck__: NIDS.InOut
					channel ext_setPoint__: NIDS.InOut.core_real
					channel int_dutyCyclePWM1__: NIDS.InOut.duty
					channel int_enablePWM__: NIDS.InOut.core_boolean
					
					channel get_CLID_s0 : CLID_s0_clock_type
					channel get_CLID_f0 : CLID_f0_clock_type
					
					--channel increment__
					
					CLID_s0_clock_type = {0..(clock_type_max(Union({
					{}
					}))+1)}
					CLID_f0_clock_type = {0..(clock_type_max(Union({
					{}
					}))+1)}
					
					--	Nodes
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = D__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: s0
					module s0
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&CALL__disableHV(
											id__,
											false
										);DoClockReset({clockReset.CLID_Cl1}) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&CALL__disableHV(
											id__,
											false
										);DoClockReset({clockReset.CLID_Cl1}) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Final state: f0
					module f0
					
					exports
					
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							D__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
									
									Entering 	= entered -> SKIP ; Active
									Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
									Interrupted	= share__choice(exit -> exited -> Inactive)
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) = D__(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(true & (share__choice(set_currentState!State_ErrorMode -> SKIP))) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
						
							Behaviour 	= dbisim(
								((
								 ((dbisim((dbisim((let
								 	-- IMPLEMENTATION NOTE:
								 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								 	-- modules for defining the semantics of each node.
								 	enterSS = {|
								 	i0::enter,
								 	s0::enter,
								 	f0::enter
								 	|}
								 	hideSet = union(enterSS,{|exit,exited,internal__|})
								 within 
								 	((let
								 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								 		-- because CSPM modules are used for the semantics of Node.
								 		flowevts = union(enterSS,{|exit,exited|})
								 		transSync = {|internal__.NID_i0,internal__.NID_s0,ext_errorAck__.NID_s0.in|}
								 	within
								 		((
								 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								 		   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								 		   		    i0::D__(id__,
								 		   		    		    const_State_machine_cycleTime,
								 		   		    		    const_setPointRamping_rampStep)
								 		   		    [| { share__, terminate } |] (
								 		   		    s0::D__(id__,
								 		   		    		    const_State_machine_cycleTime,
								 		   		    		    const_setPointRamping_rampStep)
								 		   		    [| { share__, terminate } |] (
								 		   		    f0::D__(id__,
								 		   		    		    const_State_machine_cycleTime,
								 		   		    		    const_setPointRamping_rampStep)
								 		   		    )
								 		   		    )
								 		   		  )
								 		 )
								 		 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0,ext_errorAck__.NID_s0.in|}]]
								 		 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 		 )
								 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 		  [[clockReset.CLID_Cl1 <- clockResetL.CLID_Cl1]]
								 		 )
								 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 		 			,clockResetL.CLID_Cl1
								 		|}) |]
								 		 ((i0::enter -> Transitions(id__,
								 		 		    const_State_machine_cycleTime,
								 		 		    const_setPointRamping_rampStep))
								 		  [[ share__ <- x__ | x__ <- {| share__,clockResetL.CLID_Cl1 |} ]]
								 		 )
								 		)[[clockResetL.CLID_Cl1 <- clockReset.CLID_Cl1]]
								 		)
								 	)
								 	 \ hideSet)
								 	[[
								 		ext_ActualHV__.x____ <- ext_ActualHV,
								 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								 		ext_errorAck__.x____ <- ext_errorAck,
								 		ext_setPoint__.x____ <- ext_setPoint,
								 		int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1,
								 		int_enablePWM__.x____ <- int_enablePWM
								 		| x____ <- NIDS
								 	]]
								 )
								 )
								  [| union(stateClockSync,{terminate}) |]
								  StateClocks
								 )\diff(stateClockSync,enteredSS)))
								  [[ share__ <- x__ | x__ <- {| share__,setR_pow24VStatus,setR_overLimit,setR_currentState,setR_setPoint,setR_dutyCyclePWM1,setR_ActualHV,setR_underLimit,setR_HVEnabled,setR_newSetPoint,setR_mSetPoint |} ]] 
								  [[set_setPoint <- setL_setPoint,set_dutyCyclePWM1 <- setL_dutyCyclePWM1,set_pow24VStatus <- setL_pow24VStatus,set_ActualHV <- setL_ActualHV,set_overLimit <- setL_overLimit,set_underLimit <- setL_underLimit,set_currentState <- setL_currentState,set_HVEnabled <- setL_HVEnabled,set_newSetPoint <- setL_newSetPoint,set_mSetPoint <- setL_mSetPoint]]
								 )
								 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
								 			,setL_setPoint
								 			,setL_dutyCyclePWM1
								 			,setL_pow24VStatus
								 			,setL_ActualHV
								 			,setL_overLimit
								 			,setL_underLimit
								 			,setL_currentState
								 			,setL_HVEnabled
								 			,setL_newSetPoint
								 			,setL_mSetPoint
								 			,setR_pow24VStatus
								 			 			,setR_overLimit
								 			 			,setR_currentState
								 			 			,setR_setPoint
								 			 			,setR_dutyCyclePWM1
								 			 			,setR_ActualHV
								 			 			,setR_underLimit
								 			 			,setR_HVEnabled
								 			 			,setR_newSetPoint
								 			 			,setR_mSetPoint
								 			|}) |]
								 ((During)
								  [[ share__ <- x__ | x__ <- {| share__,setL_setPoint,setL_dutyCyclePWM1,setL_pow24VStatus,setL_ActualHV,setL_overLimit,setL_underLimit,setL_currentState,setL_HVEnabled,setL_newSetPoint,setL_mSetPoint |} ]]
								  [[set_pow24VStatus <- setR_pow24VStatus,set_overLimit <- setR_overLimit,set_currentState <- setR_currentState,set_setPoint <- setR_setPoint,set_dutyCyclePWM1 <- setR_dutyCyclePWM1,set_ActualHV <- setR_ActualHV,set_underLimit <- setR_underLimit,set_HVEnabled <- setR_HVEnabled,set_newSetPoint <- setR_newSetPoint,set_mSetPoint <- setR_mSetPoint]]
								 )
								)[[setL_setPoint <- set_setPoint,setL_dutyCyclePWM1 <- set_dutyCyclePWM1,setL_pow24VStatus <- set_pow24VStatus,setL_ActualHV <- set_ActualHV,setL_overLimit <- set_overLimit,setL_underLimit <- set_underLimit,setL_currentState <- set_currentState,setL_HVEnabled <- set_HVEnabled,setL_newSetPoint <- set_newSetPoint,setL_mSetPoint <- set_mSetPoint]]
								 [[setR_pow24VStatus <- set_pow24VStatus,setR_overLimit <- set_overLimit,setR_currentState <- set_currentState,setR_setPoint <- set_setPoint,setR_dutyCyclePWM1 <- set_dutyCyclePWM1,setR_ActualHV <- set_ActualHV,setR_underLimit <- set_underLimit,setR_HVEnabled <- set_HVEnabled,setR_newSetPoint <- set_newSetPoint,setR_mSetPoint <- set_mSetPoint]]
								)\union(enteredSS,{terminate}) 
							)
							During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
									 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> terminate -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(true & (share__choice(set_currentState!State_ErrorMode -> SKIP))) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
						
							Behaviour 	= dbisim(
								((
								 ((dbisim((dbisim((let
								 	-- IMPLEMENTATION NOTE:
								 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								 	-- modules for defining the semantics of each node.
								 	enterSS = {|
								 	i0::enter,
								 	s0::enter,
								 	f0::enter
								 	|}
								 	hideSet = union(enterSS,{|exit,exited,internal__|})
								 within 
								 	((let
								 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								 		-- because CSPM modules are used for the semantics of Node.
								 		flowevts = union(enterSS,{|exit,exited|})
								 		transSync = {|internal__.NID_i0,internal__.NID_s0,ext_errorAck__.NID_s0.in|}
								 	within
								 		((
								 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								 		   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								 		   		    i0::VS_O__(id__,
								 		   		    		    const_State_machine_cycleTime,
								 		   		    		    const_setPointRamping_rampStep)
								 		   		    [| { share__, terminate } |] (
								 		   		    s0::VS_O__(id__,
								 		   		    		    const_State_machine_cycleTime,
								 		   		    		    const_setPointRamping_rampStep)
								 		   		    [| { share__, terminate } |] (
								 		   		    f0::VS_O__(id__,
								 		   		    		    const_State_machine_cycleTime,
								 		   		    		    const_setPointRamping_rampStep)
								 		   		    )
								 		   		    )
								 		   		  )
								 		 )
								 		 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0,ext_errorAck__.NID_s0.in|}]]
								 		 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 		 )
								 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 		  [[clockReset.CLID_Cl1 <- clockResetL.CLID_Cl1]]
								 		 )
								 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 		 			,clockResetL.CLID_Cl1
								 		|}) |]
								 		 ((i0::enter -> Transitions(id__,
								 		 		    const_State_machine_cycleTime,
								 		 		    const_setPointRamping_rampStep))
								 		  [[ share__ <- x__ | x__ <- {| share__,clockResetL.CLID_Cl1 |} ]]
								 		 )
								 		)[[clockResetL.CLID_Cl1 <- clockReset.CLID_Cl1]]
								 		)
								 	)
								 	 \ hideSet)
								 	[[
								 		ext_ActualHV__.x____ <- ext_ActualHV,
								 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								 		ext_errorAck__.x____ <- ext_errorAck,
								 		ext_setPoint__.x____ <- ext_setPoint,
								 		int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1,
								 		int_enablePWM__.x____ <- int_enablePWM
								 		| x____ <- NIDS
								 	]]
								 )
								 )
								  [| union(stateClockSync,{terminate}) |]
								  StateClocks
								 )\diff(stateClockSync,enteredSS)))
								  [[ share__ <- x__ | x__ <- {| share__,setR_pow24VStatus,setR_overLimit,setR_currentState,setR_setPoint,setR_dutyCyclePWM1,setR_ActualHV,setR_underLimit,setR_HVEnabled,setR_newSetPoint,setR_mSetPoint |} ]] 
								  [[set_setPoint <- setL_setPoint,set_dutyCyclePWM1 <- setL_dutyCyclePWM1,set_pow24VStatus <- setL_pow24VStatus,set_ActualHV <- setL_ActualHV,set_overLimit <- setL_overLimit,set_underLimit <- setL_underLimit,set_currentState <- setL_currentState,set_HVEnabled <- setL_HVEnabled,set_newSetPoint <- setL_newSetPoint,set_mSetPoint <- setL_mSetPoint]]
								 )
								 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
								 			,setL_setPoint
								 			,setL_dutyCyclePWM1
								 			,setL_pow24VStatus
								 			,setL_ActualHV
								 			,setL_overLimit
								 			,setL_underLimit
								 			,setL_currentState
								 			,setL_HVEnabled
								 			,setL_newSetPoint
								 			,setL_mSetPoint
								 			,setR_pow24VStatus
								 			 			,setR_overLimit
								 			 			,setR_currentState
								 			 			,setR_setPoint
								 			 			,setR_dutyCyclePWM1
								 			 			,setR_ActualHV
								 			 			,setR_underLimit
								 			 			,setR_HVEnabled
								 			 			,setR_newSetPoint
								 			 			,setR_mSetPoint
								 			|}) |]
								 ((During)
								  [[ share__ <- x__ | x__ <- {| share__,setL_setPoint,setL_dutyCyclePWM1,setL_pow24VStatus,setL_ActualHV,setL_overLimit,setL_underLimit,setL_currentState,setL_HVEnabled,setL_newSetPoint,setL_mSetPoint |} ]]
								  [[set_pow24VStatus <- setR_pow24VStatus,set_overLimit <- setR_overLimit,set_currentState <- setR_currentState,set_setPoint <- setR_setPoint,set_dutyCyclePWM1 <- setR_dutyCyclePWM1,set_ActualHV <- setR_ActualHV,set_underLimit <- setR_underLimit,set_HVEnabled <- setR_HVEnabled,set_newSetPoint <- setR_newSetPoint,set_mSetPoint <- setR_mSetPoint]]
								 )
								)[[setL_setPoint <- set_setPoint,setL_dutyCyclePWM1 <- set_dutyCyclePWM1,setL_pow24VStatus <- set_pow24VStatus,setL_ActualHV <- set_ActualHV,setL_overLimit <- set_overLimit,setL_underLimit <- set_underLimit,setL_currentState <- set_currentState,setL_HVEnabled <- set_HVEnabled,setL_newSetPoint <- set_newSetPoint,setL_mSetPoint <- set_mSetPoint]]
								 [[setR_pow24VStatus <- set_pow24VStatus,setR_overLimit <- set_overLimit,setR_currentState <- set_currentState,setR_setPoint <- set_setPoint,setR_dutyCyclePWM1 <- set_dutyCyclePWM1,setR_ActualHV <- set_ActualHV,setR_underLimit <- set_underLimit,setR_HVEnabled <- set_HVEnabled,setR_newSetPoint <- set_newSetPoint,setR_mSetPoint <- set_mSetPoint]]
								)\{terminate} 
							)
							During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
									 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> terminate -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
						Transitions(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) = ((let
							Trans = get_CLID_Cl1?Cl1 -> TimeOut_1(
								 (share__ -> SKIP
								 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s0::enter -> SKIP))))
								 [] dbisim(((Cl1==const_State_machine_cycleTime))&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s0::enter -> SKIP)))
								 [] dbisim(((Cl1<const_State_machine_cycleTime))&(ext_errorAck__!NID_s0.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_currentState!State_Wait24Vpower -> SKIP))) ; f0::enter -> SKIP)))
								 []
								 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
								 []
								 terminate -> SKIP
								 )
							,SKIP);Trans
						within
							Trans [|{terminate}|> SKIP
						)
						)
						
						
						-- Clocks
						Clock_CLID_s0(x__) = 
							TimeOut_1(
								s0::entered -> Clock_CLID_s0(0)
								[]
								get_CLID_s0!x__ -> Clock_CLID_s0(x__)
								[]
								terminate -> SKIP,Clock_CLID_s0(Plus(x__,1,CLID_s0_clock_type)))
						Clock_CLID_f0(x__) = 
							TimeOut_1(
								f0::entered -> Clock_CLID_f0(0)
								[]
								get_CLID_f0!x__ -> Clock_CLID_f0(x__)
								[]
								terminate -> SKIP,Clock_CLID_f0(Plus(x__,1,CLID_f0_clock_type)))
						
						StateClocks = dbisim(Clock_CLID_s0(0))
						[| { terminate } |] (
						dbisim(Clock_CLID_f0(0))
						)
						
						stateClockSync = {|get_CLID_s0,s0::entered,get_CLID_f0,f0::entered|}
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				CALL__supplyVoltCheck(id__) 	= (OP_supplyVoltCheck::O__(id__))
				[[
					OP_supplyVoltCheck::ext_pow24VStatus <- ext_pow24VStatus,
					OP_supplyVoltCheck::int_enablePWM <- int_enablePWM,
					OP_supplyVoltCheck::int_dutyCyclePWM1 <- int_dutyCyclePWM1
				]]
				[[
					OP_supplyVoltCheck::get_pow24VStatus <- get_pow24VStatus,
					OP_supplyVoltCheck::set_pow24VStatus <- set_pow24VStatus,
					OP_supplyVoltCheck::get_HVEnabled <- get_HVEnabled,
					OP_supplyVoltCheck::set_HVEnabled <- set_HVEnabled,
					OP_supplyVoltCheck::get_currentState <- get_currentState,
					OP_supplyVoltCheck::set_currentState <- set_currentState,
					OP_supplyVoltCheck::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
					OP_supplyVoltCheck::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
					OP_supplyVoltCheck::get_mSetPoint <- get_mSetPoint,
					OP_supplyVoltCheck::set_mSetPoint <- set_mSetPoint
				]]
				CALL__checkLimits(id__) 	= (OP_checkLimits::O__(id__))
				[[
					OP_checkLimits::int_enablePWM <- int_enablePWM,
					OP_checkLimits::int_dutyCyclePWM1 <- int_dutyCyclePWM1
				]]
				[[
					OP_checkLimits::get_ActualHV <- get_ActualHV,
					OP_checkLimits::set_ActualHV <- set_ActualHV,
					OP_checkLimits::get_overLimit <- get_overLimit,
					OP_checkLimits::set_overLimit <- set_overLimit,
					OP_checkLimits::get_underLimit <- get_underLimit,
					OP_checkLimits::set_underLimit <- set_underLimit,
					OP_checkLimits::get_HVEnabled <- get_HVEnabled,
					OP_checkLimits::set_HVEnabled <- set_HVEnabled,
					OP_checkLimits::get_currentState <- get_currentState,
					OP_checkLimits::set_currentState <- set_currentState,
					OP_checkLimits::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
					OP_checkLimits::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
					OP_checkLimits::get_mSetPoint <- get_mSetPoint,
					OP_checkLimits::set_mSetPoint <- set_mSetPoint
				]]
				CALL__PID_Control(id__) 	= (OP_PID_Control::O__(id__))
				[[
					OP_PID_Control::ext_ActualHV <- ext_ActualHV,
					OP_PID_Control::int_dutyCyclePWM1 <- int_dutyCyclePWM1
				]]
				[[
					OP_PID_Control::get_ActualHV <- get_ActualHV,
					OP_PID_Control::set_ActualHV <- set_ActualHV,
					OP_PID_Control::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
					OP_PID_Control::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
					OP_PID_Control::get_mSetPoint <- get_mSetPoint,
					OP_PID_Control::set_mSetPoint <- set_mSetPoint
				]]
				CALL__disableHV(id__,
							arg) 	= (OP_disableHV::O__(id__,
							arg))
				[[
					OP_disableHV::int_enablePWM <- int_enablePWM,
					OP_disableHV::int_dutyCyclePWM1 <- int_dutyCyclePWM1
				]]
				[[
					OP_disableHV::get_HVEnabled <- get_HVEnabled,
					OP_disableHV::set_HVEnabled <- set_HVEnabled,
					OP_disableHV::get_currentState <- get_currentState,
					OP_disableHV::set_currentState <- set_currentState,
					OP_disableHV::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
					OP_disableHV::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
					OP_disableHV::get_mSetPoint <- get_mSetPoint,
					OP_disableHV::set_mSetPoint <- set_mSetPoint
				]]
				CALL__AdjustLimits(id__) 	= (OP_AdjustLimits::O__(id__))
				[[
					OP_AdjustLimits::get_overLimit <- get_overLimit,
					OP_AdjustLimits::set_overLimit <- set_overLimit,
					OP_AdjustLimits::get_underLimit <- get_underLimit,
					OP_AdjustLimits::set_underLimit <- set_underLimit,
					OP_AdjustLimits::get_mSetPoint <- get_mSetPoint,
					OP_AdjustLimits::set_mSetPoint <- set_mSetPoint
				]]
				CALL__setPointRamping(id__,
							newSetPoint,
						    const_setPointRamping_rampStep) 	= (OP_setPointRamping::O__(id__,
							newSetPoint,
						    const_setPointRamping_rampStep))
				[[
					OP_setPointRamping::int_enablePWM <- int_enablePWM,
					OP_setPointRamping::int_dutyCyclePWM1 <- int_dutyCyclePWM1
				]]
				[[
					OP_setPointRamping::get_HVEnabled <- get_HVEnabled,
					OP_setPointRamping::set_HVEnabled <- set_HVEnabled,
					OP_setPointRamping::get_currentState <- get_currentState,
					OP_setPointRamping::set_currentState <- set_currentState,
					OP_setPointRamping::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
					OP_setPointRamping::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
					OP_setPointRamping::get_mSetPoint <- get_mSetPoint,
					OP_setPointRamping::set_mSetPoint <- set_mSetPoint
				]]
				CALL__enableHV(id__) 	= (OP_enableHV::O__(id__))
				[[
					OP_enableHV::int_enablePWM <- int_enablePWM,
					OP_enableHV::int_dutyCyclePWM1 <- int_dutyCyclePWM1
				]]
				[[
					OP_enableHV::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
					OP_enableHV::set_dutyCyclePWM1 <- set_dutyCyclePWM1
				]]
				-- END of Operation calls --
			
				-- STM processes
				STM(id__,
						    const_State_machine_cycleTime,
						    const_setPointRamping_rampStep) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(Stateful(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {|set_EXT_overLimit,set_EXT_underLimit,set_EXT_currentState,set_EXT_HVEnabled,set_EXT_pow24VStatus,set_EXT_mSetPoint,set_EXT_dutyCyclePWM1|} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__,
							    const_State_machine_cycleTime,
							    const_setPointRamping_rampStep))
				)\sharedVarHide
				,<{terminate},{tock}>)
				
				STM_VS_O(id__,
						    const_State_machine_cycleTime,
						    const_setPointRamping_rampStep) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(Stateful_VS_O(id__,
									    const_State_machine_cycleTime,
									    const_setPointRamping_rampStep) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {|set_EXT_overLimit,set_EXT_underLimit,set_EXT_currentState,set_EXT_HVEnabled,set_EXT_pow24VStatus,set_EXT_mSetPoint,set_EXT_dutyCyclePWM1|} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__,
							    const_State_machine_cycleTime,
							    const_setPointRamping_rampStep))
				)\sharedVarHide
				,<{terminate},{tock}>)
				
				-- Transitions
				Transitions(id__,
						    const_State_machine_cycleTime,
						    const_setPointRamping_rampStep) = ((let
					Trans = get_setPoint?setPoint -> get_pow24VStatus?pow24VStatus -> get_CLID_Cl1?Cl1 -> get_currentState?currentState -> TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_Init -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SHARE_WAIT(const_State_machine_cycleTime) ; Wait24Vpower::enter -> SKIP)))
						 [] dbisim(((currentState==State_ErrorMode))&(internal__!NID_Wait24Vpower -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; ErrorMode::enter -> SKIP)))
						 [] dbisim(((((setPoint==0) and (currentState!=State_ErrorMode)) and (pow24VStatus==Power_On)))&(internal__!NID_Wait24Vpower -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; ClosedLoop::enter -> SKIP)))
						 [] dbisim(((currentState==State_ErrorMode))&(internal__!NID_ClosedLoop -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SHARE_WAIT(const_State_machine_cycleTime) ; ErrorMode::enter -> SKIP)))
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((share__choice(true & (share__choice(set_mSetPoint!0 -> SKIP)));share__choice(true & (share__choice(set_HVEnabled!false -> SKIP)));SHARE_WAIT(const_State_machine_cycleTime) ; Init::enter -> SKIP))))
						 [] dbisim((((Cl1>=const_State_machine_cycleTime) and (currentState==State_Wait24Vpower)))&(internal__!NID_ErrorMode -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Wait24Vpower::enter -> SKIP)))
						 []
						 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__,
						    const_State_machine_cycleTime,
						    const_setPointRamping_rampStep) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							Init::enter,
							ClosedLoop::enter,
							i0::enter,
							Wait24Vpower::enter,
							ErrorMode::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_Init,internal__.NID_Wait24Vpower,internal__.NID_Wait24Vpower,internal__.NID_ClosedLoop,internal__.NID_i0,internal__.NID_ErrorMode|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    Init::D__(id__,
								   		    		    const_State_machine_cycleTime,
								   		    		    const_setPointRamping_rampStep)
								   		    [| { share__, terminate } |] (
								   		    ClosedLoop::D__(id__,
								   		    		    const_State_machine_cycleTime,
								   		    		    const_setPointRamping_rampStep)
								   		    [| { share__, terminate } |] (
								   		    i0::D__(id__,
								   		    		    const_State_machine_cycleTime,
								   		    		    const_setPointRamping_rampStep)
								   		    [| { share__, terminate } |] (
								   		    Wait24Vpower::D__(id__,
								   		    		    const_State_machine_cycleTime,
								   		    		    const_setPointRamping_rampStep)
								   		    [| { share__, terminate } |] (
								   		    ErrorMode::D__(id__,
								   		    		    const_State_machine_cycleTime,
								   		    		    const_setPointRamping_rampStep)
								   		    )
								   		    )
								   		    )
								   		    )
								   		  )
								 )
								 [[Init::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Init|}]]
								 [[ClosedLoop::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_ClosedLoop|}]]
								 [[Wait24Vpower::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Wait24Vpower,internal__.NID_Wait24Vpower|}]]
								 [[ErrorMode::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_ErrorMode|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[set_setPoint <- setL_setPoint,set_pow24VStatus <- setL_pow24VStatus,clockReset.CLID_Cl1 <- clockResetL.CLID_Cl1,set_currentState <- setL_currentState]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_setPoint
								 			,setL_pow24VStatus
								 			,clockResetL.CLID_Cl1
								 			,setL_currentState
								|}) |]
								 ((i0::enter -> Transitions(id__,
								 		    const_State_machine_cycleTime,
								 		    const_setPointRamping_rampStep))
								  [[ share__ <- x__ | x__ <- {| share__,setL_setPoint,setL_pow24VStatus,clockResetL.CLID_Cl1,setL_currentState |} ]]
								 )
								)[[setL_setPoint <- set_setPoint,setL_pow24VStatus <- set_pow24VStatus,clockResetL.CLID_Cl1 <- clockReset.CLID_Cl1,setL_currentState <- set_currentState]]
								)
							)
							 \ hideSet)
							[[
								ext_ActualHV__.x____ <- ext_ActualHV,
								ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								ext_errorAck__.x____ <- ext_errorAck,
								ext_setPoint__.x____ <- ext_setPoint,
								int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1,
								int_enablePWM__.x____ <- int_enablePWM
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__,
						    const_State_machine_cycleTime,
						    const_setPointRamping_rampStep) = 
					dbisim((let
						stateClockSync = {|get_CLID_Init,Init::entered,get_CLID_ErrorMode,ErrorMode::entered,get_CLID_ClosedLoop,ClosedLoop::entered,get_CLID_Wait24Vpower,Wait24Vpower::entered|}
					 within
						(MachineBody(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) [| union(stateClockSync,{terminate}) |] StateClocks) \ union(stateClockSync,enteredSS)
					)
					)
				
				Stateful(id__,
						    const_State_machine_cycleTime,
						    const_setPointRamping_rampStep) = 
					dbisim((let
						getsetLocalChannels = {|get_setPoint,set_setPoint,
						get_newSetPoint,set_newSetPoint,
						get_ActualHV,set_ActualHV|}
						clockSync = {|get_CLID_Cl1,clockReset.CLID_Cl1|}
					within
						(Behaviour(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__,
						 		    const_State_machine_cycleTime,
						 		    const_setPointRamping_rampStep) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__,
						    const_State_machine_cycleTime,
						    const_setPointRamping_rampStep) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							Init::enter,
							ClosedLoop::enter,
							i0::enter,
							Wait24Vpower::enter,
							ErrorMode::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_Init,internal__.NID_Wait24Vpower,internal__.NID_Wait24Vpower,internal__.NID_ClosedLoop,internal__.NID_i0,internal__.NID_ErrorMode|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    Init::VS_O__(id__,
								   		    		    const_State_machine_cycleTime,
								   		    		    const_setPointRamping_rampStep)
								   		    [| { share__, terminate } |] (
								   		    ClosedLoop::VS_O__(id__,
								   		    		    const_State_machine_cycleTime,
								   		    		    const_setPointRamping_rampStep)
								   		    [| { share__, terminate } |] (
								   		    i0::VS_O__(id__,
								   		    		    const_State_machine_cycleTime,
								   		    		    const_setPointRamping_rampStep)
								   		    [| { share__, terminate } |] (
								   		    Wait24Vpower::VS_O__(id__,
								   		    		    const_State_machine_cycleTime,
								   		    		    const_setPointRamping_rampStep)
								   		    [| { share__, terminate } |] (
								   		    ErrorMode::VS_O__(id__,
								   		    		    const_State_machine_cycleTime,
								   		    		    const_setPointRamping_rampStep)
								   		    )
								   		    )
								   		    )
								   		    )
								   		  )
								 )
								 [[Init::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Init|}]]
								 [[ClosedLoop::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_ClosedLoop|}]]
								 [[Wait24Vpower::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Wait24Vpower,internal__.NID_Wait24Vpower|}]]
								 [[ErrorMode::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_ErrorMode|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[set_setPoint <- setL_setPoint,set_pow24VStatus <- setL_pow24VStatus,clockReset.CLID_Cl1 <- clockResetL.CLID_Cl1,set_currentState <- setL_currentState]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_setPoint
								 			,setL_pow24VStatus
								 			,clockResetL.CLID_Cl1
								 			,setL_currentState
								|}) |]
								 ((i0::enter -> Transitions(id__,
								 		    const_State_machine_cycleTime,
								 		    const_setPointRamping_rampStep))
								  [[ share__ <- x__ | x__ <- {| share__,setL_setPoint,setL_pow24VStatus,clockResetL.CLID_Cl1,setL_currentState |} ]]
								 )
								)[[setL_setPoint <- set_setPoint,setL_pow24VStatus <- set_pow24VStatus,clockResetL.CLID_Cl1 <- clockReset.CLID_Cl1,setL_currentState <- set_currentState]]
								)
							)
							 \ hideSet)
							[[
								ext_ActualHV__.x____ <- ext_ActualHV,
								ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								ext_errorAck__.x____ <- ext_errorAck,
								ext_setPoint__.x____ <- ext_setPoint,
								int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1,
								int_enablePWM__.x____ <- int_enablePWM
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__,
						    const_State_machine_cycleTime,
						    const_setPointRamping_rampStep) = 
					dbisim((let
						stateClockSync = {|get_CLID_Init,Init::entered,get_CLID_ErrorMode,ErrorMode::entered,get_CLID_ClosedLoop,ClosedLoop::entered,get_CLID_Wait24Vpower,Wait24Vpower::entered|}
					 within
						(MachineBody_VS_O(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) [| union(stateClockSync,{terminate}) |] StateClocks) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				Stateful_VS_O(id__,
						    const_State_machine_cycleTime,
						    const_setPointRamping_rampStep) = 
					dbisim((let
						getsetLocalChannels = {|get_setPoint,set_setPoint,
						get_newSetPoint,set_newSetPoint,
						get_ActualHV,set_ActualHV|}
						clockSync = {|get_CLID_Cl1,clockReset.CLID_Cl1|}
					within
						(Behaviour_VS_O(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__,
						 		    const_State_machine_cycleTime,
						 		    const_setPointRamping_rampStep) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
					
				-- END
				
				-- Memory
				-- Memory variables
				Memory_setPoint(setPoint) =
					get_setPoint!setPoint -> Memory_setPoint(setPoint)
					[]
					set_setPoint?x__ -> Memory_setPoint(x__)
					[]
					terminate -> SKIP
				Memory_newSetPoint(newSetPoint) =
					get_newSetPoint!newSetPoint -> Memory_newSetPoint(newSetPoint)
					[]
					set_newSetPoint?x__ -> Memory_newSetPoint(x__)
					[]
					terminate -> SKIP
				Memory_ActualHV(ActualHV) =
					get_ActualHV!ActualHV -> Memory_ActualHV(ActualHV)
					[]
					set_ActualHV?x__ -> Memory_ActualHV(x__)
					[]
					terminate -> SKIP
				
				-- varMemory process
				varMemory(id__,
						    const_State_machine_cycleTime,
						    const_setPointRamping_rampStep) = Memory_setPoint(0)
				[| { terminate } |] (
				Memory_newSetPoint(0)
				[| { terminate } |] (
				Memory_ActualHV(0)
				)
				)
				
				getsetLocalChannels = {|get_setPoint,set_setPoint,get_newSetPoint,set_newSetPoint,get_ActualHV,set_ActualHV|}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__,
						    const_State_machine_cycleTime,
						    const_setPointRamping_rampStep) = STM_VS_O(id__,
						    const_State_machine_cycleTime,
						    const_setPointRamping_rampStep) \ localClockResets
				D__(id__,
						    const_State_machine_cycleTime,
						    const_setPointRamping_rampStep) = timed_priority(STM(id__,
						    const_State_machine_cycleTime,
						    const_setPointRamping_rampStep) \ union(internal_events,localClockResets))
				O__(id__,
						    const_State_machine_cycleTime,
						    const_setPointRamping_rampStep) = dbisim(D__(id__,
						    const_State_machine_cycleTime,
						    const_setPointRamping_rampStep))
				VS__(id__,
						    const_State_machine_cycleTime,
						    const_setPointRamping_rampStep) = FVS__(id__,
						    const_State_machine_cycleTime,
						    const_setPointRamping_rampStep)
				VS_O__(id__,
						    const_State_machine_cycleTime,
						    const_setPointRamping_rampStep) = dbisim(FVS__(id__,
						    const_State_machine_cycleTime,
						    const_setPointRamping_rampStep))
				HEXT__(id__,
						    const_State_machine_cycleTime,
						    const_setPointRamping_rampStep) = O__(id__,
						    const_State_machine_cycleTime,
						    const_setPointRamping_rampStep) [|shared_variable_events|] SKIP
				FVS_C__(id__,
						    const_State_machine_cycleTime,
						    const_setPointRamping_rampStep) = dbisim(timed_priority(STM(id__,
						    const_State_machine_cycleTime,
						    const_setPointRamping_rampStep) \ internal_events))
				HUP__(id__,
						    const_State_machine_cycleTime,
						    const_setPointRamping_rampStep) = timed_priority(O__(id__,
						    const_State_machine_cycleTime,
						    const_setPointRamping_rampStep) [|{share__}|] SKIP)
				
				-- Clocks
				Clock_CLID_Cl1(x__) = 
					TimeOut_1(
						clockReset.CLID_Cl1 -> Clock_CLID_Cl1(0)
						[]
						get_CLID_Cl1!x__ -> Clock_CLID_Cl1(x__)
						[]
						terminate -> SKIP,Clock_CLID_Cl1(Plus(x__,1,CLID_Cl1_clock_type)))
				
				Clocks = dbisim(Clock_CLID_Cl1(0))
				
				clockSync = {|get_CLID_Cl1,clockReset.CLID_Cl1|}
				
				Clock_CLID_Init(x__) = 
					TimeOut_1(
						Init::entered -> Clock_CLID_Init(0)
						[]
						get_CLID_Init!x__ -> Clock_CLID_Init(x__)
						[]
						terminate -> SKIP,Clock_CLID_Init(Plus(x__,1,CLID_Init_clock_type)))
				Clock_CLID_ErrorMode(x__) = 
					TimeOut_1(
						ErrorMode::entered -> Clock_CLID_ErrorMode(0)
						[]
						get_CLID_ErrorMode!x__ -> Clock_CLID_ErrorMode(x__)
						[]
						terminate -> SKIP,Clock_CLID_ErrorMode(Plus(x__,1,CLID_ErrorMode_clock_type)))
				Clock_CLID_ClosedLoop(x__) = 
					TimeOut_1(
						ClosedLoop::entered -> Clock_CLID_ClosedLoop(0)
						[]
						get_CLID_ClosedLoop!x__ -> Clock_CLID_ClosedLoop(x__)
						[]
						terminate -> SKIP,Clock_CLID_ClosedLoop(Plus(x__,1,CLID_ClosedLoop_clock_type)))
				Clock_CLID_Wait24Vpower(x__) = 
					TimeOut_1(
						Wait24Vpower::entered -> Clock_CLID_Wait24Vpower(0)
						[]
						get_CLID_Wait24Vpower!x__ -> Clock_CLID_Wait24Vpower(x__)
						[]
						terminate -> SKIP,Clock_CLID_Wait24Vpower(Plus(x__,1,CLID_Wait24Vpower_clock_type)))
				
				StateClocks = dbisim(Clock_CLID_Init(0))
				[| { terminate } |] (
				dbisim(Clock_CLID_ErrorMode(0))
				[| { terminate } |] (
				dbisim(Clock_CLID_ClosedLoop(0))
				[| { terminate } |] (
				dbisim(Clock_CLID_Wait24Vpower(0))
				)
				)
				)
				
				stateClockSync = {|get_CLID_Init,Init::entered,get_CLID_ErrorMode,ErrorMode::entered,get_CLID_ClosedLoop,ClosedLoop::entered,get_CLID_Wait24Vpower,Wait24Vpower::entered|}
				
				-- Shared memory
				-- Shared memory variables
				Memory_overLimit(overLimit) =
					get_overLimit!overLimit -> Memory_overLimit(overLimit)
					[]
					set_overLimit?x__ -> Memory_overLimit(x__)
					[]
					set_EXT_overLimit?x__ -> Memory_overLimit(x__)
					[]
					terminate -> SKIP
				Memory_underLimit(underLimit) =
					get_underLimit!underLimit -> Memory_underLimit(underLimit)
					[]
					set_underLimit?x__ -> Memory_underLimit(x__)
					[]
					set_EXT_underLimit?x__ -> Memory_underLimit(x__)
					[]
					terminate -> SKIP
				Memory_currentState(currentState) =
					get_currentState!currentState -> Memory_currentState(currentState)
					[]
					set_currentState?x__ -> Memory_currentState(x__)
					[]
					set_EXT_currentState?x__ -> Memory_currentState(x__)
					[]
					terminate -> SKIP
				Memory_HVEnabled(HVEnabled) =
					get_HVEnabled!HVEnabled -> Memory_HVEnabled(HVEnabled)
					[]
					set_HVEnabled?x__ -> Memory_HVEnabled(x__)
					[]
					set_EXT_HVEnabled?x__ -> Memory_HVEnabled(x__)
					[]
					terminate -> SKIP
				Memory_pow24VStatus(pow24VStatus) =
					get_pow24VStatus!pow24VStatus -> Memory_pow24VStatus(pow24VStatus)
					[]
					set_pow24VStatus?x__ -> Memory_pow24VStatus(x__)
					[]
					set_EXT_pow24VStatus?x__ -> Memory_pow24VStatus(x__)
					[]
					terminate -> SKIP
				Memory_mSetPoint(mSetPoint) =
					get_mSetPoint!mSetPoint -> Memory_mSetPoint(mSetPoint)
					[]
					set_mSetPoint?x__ -> Memory_mSetPoint(x__)
					[]
					set_EXT_mSetPoint?x__ -> Memory_mSetPoint(x__)
					[]
					terminate -> SKIP
				Memory_dutyCyclePWM1(dutyCyclePWM1) =
					get_dutyCyclePWM1!dutyCyclePWM1 -> Memory_dutyCyclePWM1(dutyCyclePWM1)
					[]
					set_dutyCyclePWM1?x__ -> Memory_dutyCyclePWM1(x__)
					[]
					set_EXT_dutyCyclePWM1?x__ -> Memory_dutyCyclePWM1(x__)
					[]
					terminate -> SKIP
				
				-- sharedVarMemory process
				sharedVarMemory(id__,
						    const_State_machine_cycleTime,
						    const_setPointRamping_rampStep) = Memory_overLimit(0)
				[| { terminate } |] (
				Memory_underLimit(0)
				[| { terminate } |] (
				Memory_currentState(State_Wait24Vpower)
				[| { terminate } |] (
				Memory_HVEnabled(true)
				[| { terminate } |] (
				Memory_pow24VStatus(Power_On)
				[| { terminate } |] (
				Memory_mSetPoint(0)
				[| { terminate } |] (
				Memory_dutyCyclePWM1(0)
				)
				)
				)
				)
				)
				)
				
				sharedVarSync = {|get_overLimit,set_overLimit,set_EXT_overLimit,get_underLimit,set_underLimit,set_EXT_underLimit,get_currentState,set_currentState,set_EXT_currentState,get_HVEnabled,set_HVEnabled,set_EXT_HVEnabled,get_pow24VStatus,set_pow24VStatus,set_EXT_pow24VStatus,get_mSetPoint,set_mSetPoint,set_EXT_mSetPoint,get_dutyCyclePWM1,set_dutyCyclePWM1,set_EXT_dutyCyclePWM1|}
				
				sharedVarHide = {|get_overLimit,get_underLimit,get_currentState,get_HVEnabled,get_pow24VStatus,get_mSetPoint,get_dutyCyclePWM1|}
				}
		endmodule
		
		Timed(OneStep) {
				-- undefined operations
				
				-- declaring controller memory
				Memory(id__, overLimit, underLimit, currentState, HVEnabled, pow24VStatus, mSetPoint, dutyCyclePWM1) = (
				set_EXT_overLimit?x__ -> stm_ref0::set_EXT_overLimit!x__ -> 
				Memory(id__,x__,underLimit,currentState,HVEnabled,pow24VStatus,mSetPoint,dutyCyclePWM1)
				 []
				set_EXT_underLimit?x__ -> stm_ref0::set_EXT_underLimit!x__ -> 
				Memory(id__,overLimit,x__,currentState,HVEnabled,pow24VStatus,mSetPoint,dutyCyclePWM1)
				 []
				set_EXT_currentState?x__ -> stm_ref0::set_EXT_currentState!x__ -> 
				Memory(id__,overLimit,underLimit,x__,HVEnabled,pow24VStatus,mSetPoint,dutyCyclePWM1)
				 []
				set_EXT_HVEnabled?x__ -> stm_ref0::set_EXT_HVEnabled!x__ -> 
				Memory(id__,overLimit,underLimit,currentState,x__,pow24VStatus,mSetPoint,dutyCyclePWM1)
				 []
				set_EXT_pow24VStatus?x__ -> stm_ref0::set_EXT_pow24VStatus!x__ -> 
				Memory(id__,overLimit,underLimit,currentState,HVEnabled,x__,mSetPoint,dutyCyclePWM1)
				 []
				set_EXT_mSetPoint?x__ -> stm_ref0::set_EXT_mSetPoint!x__ -> 
				Memory(id__,overLimit,underLimit,currentState,HVEnabled,pow24VStatus,x__,dutyCyclePWM1)
				 []
				set_EXT_dutyCyclePWM1?x__ -> stm_ref0::set_EXT_dutyCyclePWM1!x__ -> 
				Memory(id__,overLimit,underLimit,currentState,HVEnabled,pow24VStatus,mSetPoint,x__)
				)
				
				D__(id__,
						    const_ctrl0_stm_ref0_cycleTime,
						   	const_setPointRamping_rampStep) = prioritise(	((
						let
							const_State_machine_cycleTime = ms(10)
						within 
						stm_ref0::D__(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep)[[
							stm_ref0::terminate <- terminate,
							stm_ref0::ext_setPoint <- ext_setPoint,
							stm_ref0::ext_pow24VStatus <- ext_pow24VStatus,
							stm_ref0::ext_ActualHV <- ext_ActualHV,
							stm_ref0::ext_errorAck <- ext_errorAck,
							stm_ref0::int_dutyCyclePWM1 <- int_dutyCyclePWM1,
							stm_ref0::int_enablePWM <- int_enablePWM,
							stm_ref0::set_overLimit <- set_overLimit,
							stm_ref0::get_overLimit <- get_overLimit,
							stm_ref0::set_underLimit <- set_underLimit,
							stm_ref0::get_underLimit <- get_underLimit,
							stm_ref0::set_currentState <- set_currentState,
							stm_ref0::get_currentState <- get_currentState,
							stm_ref0::set_HVEnabled <- set_HVEnabled,
							stm_ref0::get_HVEnabled <- get_HVEnabled,
							stm_ref0::set_pow24VStatus <- set_pow24VStatus,
							stm_ref0::get_pow24VStatus <- get_pow24VStatus,
							stm_ref0::set_mSetPoint <- set_mSetPoint,
							stm_ref0::get_mSetPoint <- get_mSetPoint,
							stm_ref0::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
							stm_ref0::get_dutyCyclePWM1 <- get_dutyCyclePWM1
						]]
					)
						[|
							union(
								{|
								|},
								{|
									stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
								|}
							)
						|]
					Memory(id__, 0, 0, State_Wait24Vpower, true, Power_On, 0, 0)
				)
				\ union(
					{|
					|},
					{|
						stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>)
				
				-- VS version
				VS__(id__,
						    const_ctrl0_stm_ref0_cycleTime,
						   	const_setPointRamping_rampStep) = prioritise(	((
						let
							const_State_machine_cycleTime = ms(10)
						within 
						stm_ref0::VS__(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep)[[
							stm_ref0::terminate <- terminate,
							stm_ref0::ext_setPoint <- ext_setPoint,
							stm_ref0::ext_pow24VStatus <- ext_pow24VStatus,
							stm_ref0::ext_ActualHV <- ext_ActualHV,
							stm_ref0::ext_errorAck <- ext_errorAck,
							stm_ref0::int_dutyCyclePWM1 <- int_dutyCyclePWM1,
							stm_ref0::int_enablePWM <- int_enablePWM,
							stm_ref0::set_overLimit <- set_overLimit,
							stm_ref0::get_overLimit <- get_overLimit,
							stm_ref0::set_underLimit <- set_underLimit,
							stm_ref0::get_underLimit <- get_underLimit,
							stm_ref0::set_currentState <- set_currentState,
							stm_ref0::get_currentState <- get_currentState,
							stm_ref0::set_HVEnabled <- set_HVEnabled,
							stm_ref0::get_HVEnabled <- get_HVEnabled,
							stm_ref0::set_pow24VStatus <- set_pow24VStatus,
							stm_ref0::get_pow24VStatus <- get_pow24VStatus,
							stm_ref0::set_mSetPoint <- set_mSetPoint,
							stm_ref0::get_mSetPoint <- get_mSetPoint,
							stm_ref0::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
							stm_ref0::get_dutyCyclePWM1 <- get_dutyCyclePWM1
						]]
					)
						[|
							union(
								{|
								|},
								{|
									stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
								|}
							)
						|]
					Memory(id__, 0, 0, State_Wait24Vpower, true, Power_On, 0, 0)
				)
				\ union(
					{|
					|},
					{|
						stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>)
			
				-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
				O__(id__,
						    const_ctrl0_stm_ref0_cycleTime,
						   	const_setPointRamping_rampStep) = dbisim(prioritise(	((
						let
							const_State_machine_cycleTime = ms(10)
						within 
						stm_ref0::O__(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep)[[
							stm_ref0::terminate <- terminate,
							stm_ref0::ext_setPoint <- ext_setPoint,
							stm_ref0::ext_pow24VStatus <- ext_pow24VStatus,
							stm_ref0::ext_ActualHV <- ext_ActualHV,
							stm_ref0::ext_errorAck <- ext_errorAck,
							stm_ref0::int_dutyCyclePWM1 <- int_dutyCyclePWM1,
							stm_ref0::int_enablePWM <- int_enablePWM,
							stm_ref0::set_overLimit <- set_overLimit,
							stm_ref0::get_overLimit <- get_overLimit,
							stm_ref0::set_underLimit <- set_underLimit,
							stm_ref0::get_underLimit <- get_underLimit,
							stm_ref0::set_currentState <- set_currentState,
							stm_ref0::get_currentState <- get_currentState,
							stm_ref0::set_HVEnabled <- set_HVEnabled,
							stm_ref0::get_HVEnabled <- get_HVEnabled,
							stm_ref0::set_pow24VStatus <- set_pow24VStatus,
							stm_ref0::get_pow24VStatus <- get_pow24VStatus,
							stm_ref0::set_mSetPoint <- set_mSetPoint,
							stm_ref0::get_mSetPoint <- get_mSetPoint,
							stm_ref0::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
							stm_ref0::get_dutyCyclePWM1 <- get_dutyCyclePWM1
						]]
					)
						[|
							union(
								{|
								|},
								{|
									stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
								|}
							)
						|]
					dbisim(Memory(id__, 0, 0, State_Wait24Vpower, true, Power_On, 0, 0))
				)
				\ union(
					{|
					|},
					{|
						stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>))
								
				-- VS_O version
				VS_O__(id__,
						    const_ctrl0_stm_ref0_cycleTime,
						   	const_setPointRamping_rampStep) = dbisim(prioritise(	((
						let
							const_State_machine_cycleTime = ms(10)
						within 
						stm_ref0::VS_O__(id__,
								    const_State_machine_cycleTime,
								    const_setPointRamping_rampStep)[[
							stm_ref0::terminate <- terminate,
							stm_ref0::ext_setPoint <- ext_setPoint,
							stm_ref0::ext_pow24VStatus <- ext_pow24VStatus,
							stm_ref0::ext_ActualHV <- ext_ActualHV,
							stm_ref0::ext_errorAck <- ext_errorAck,
							stm_ref0::int_dutyCyclePWM1 <- int_dutyCyclePWM1,
							stm_ref0::int_enablePWM <- int_enablePWM,
							stm_ref0::set_overLimit <- set_overLimit,
							stm_ref0::get_overLimit <- get_overLimit,
							stm_ref0::set_underLimit <- set_underLimit,
							stm_ref0::get_underLimit <- get_underLimit,
							stm_ref0::set_currentState <- set_currentState,
							stm_ref0::get_currentState <- get_currentState,
							stm_ref0::set_HVEnabled <- set_HVEnabled,
							stm_ref0::get_HVEnabled <- get_HVEnabled,
							stm_ref0::set_pow24VStatus <- set_pow24VStatus,
							stm_ref0::get_pow24VStatus <- get_pow24VStatus,
							stm_ref0::set_mSetPoint <- set_mSetPoint,
							stm_ref0::get_mSetPoint <- get_mSetPoint,
							stm_ref0::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
							stm_ref0::get_dutyCyclePWM1 <- get_dutyCyclePWM1
						]]
					)
						[|
							union(
								{|
								|},
								{|
									stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
								|}
							)
						|]
					dbisim(Memory(id__, 0, 0, State_Wait24Vpower, true, Power_On, 0, 0))
				)
				\ union(
					{|
					|},
					{|
						stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>))
			
				HEXT(id__,
						    const_ctrl0_stm_ref0_cycleTime,
						   	const_setPointRamping_rampStep) = O__(id__,
						    const_ctrl0_stm_ref0_cycleTime,
						   	const_setPointRamping_rampStep) [|shared_variable_events|] SKIP			
		}

	endmodule
	module ctrl1
		shared_variable_events = {|
			set_EXT_HVEnabled,
			set_EXT_pow24VStatus,
			set_EXT_currentState,
			set_EXT_overLimit,
			set_EXT_underLimit,
			set_EXT_mSetPoint,
			set_EXT_dutyCyclePWM1
		|}
		
	exports
		transparent diamond
		transparent sbisim
		transparent dbisim
		transparent chase

		-- declaring controller events
		channel ext_pow24VStatus: InOut.Power
		channel int_dutyCyclePWM1: InOut.duty
		channel int_enablePWM: InOut.core_boolean
		
		channel set_HVEnabled: core_boolean
		channel get_HVEnabled: core_boolean
		channel set_pow24VStatus: Power
		channel get_pow24VStatus: Power
		channel set_currentState: State
		channel get_currentState: State
		channel set_overLimit: core_real
		channel get_overLimit: core_real
		channel set_underLimit: core_real
		channel get_underLimit: core_real
		channel set_mSetPoint: core_real
		channel get_mSetPoint: core_real
		channel set_dutyCyclePWM1: duty
		channel get_dutyCyclePWM1: duty
		
		channel set_EXT_HVEnabled: core_boolean
		channel set_EXT_pow24VStatus: Power
		channel set_EXT_currentState: State
		channel set_EXT_overLimit: core_real
		channel set_EXT_underLimit: core_real
		channel set_EXT_mSetPoint: core_real
		channel set_EXT_dutyCyclePWM1: duty
		
		-- declaring call and ret events for undefined operations
		
		-- declaring controller termination channel		
		channel terminate
		
		-- set of visible memory events
		visibleMemoryEvents = {|get_HVEnabled,set_HVEnabled,get_pow24VStatus,set_pow24VStatus,get_currentState,set_currentState,get_overLimit,set_overLimit,get_underLimit,set_underLimit,get_mSetPoint,set_mSetPoint,get_dutyCyclePWM1,set_dutyCyclePWM1|}

		-- defined operations
		-- compileOperationDef
		module OP_supplyVoltCheck
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i0|
			              NID_f0|
			              NID_j0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_pow24VStatus, set_pow24VStatus, setL_pow24VStatus, setR_pow24VStatus: Power
			channel get_HVEnabled, set_HVEnabled, setL_HVEnabled, setR_HVEnabled: core_boolean
			channel get_currentState, set_currentState, setL_currentState, setR_currentState: State
			channel get_dutyCyclePWM1, set_dutyCyclePWM1, setL_dutyCyclePWM1, setR_dutyCyclePWM1: duty
			channel get_mSetPoint, set_mSetPoint, setL_mSetPoint, setR_mSetPoint: core_real
			
			-- Shared variable channels
			channel set_EXT_pow24VStatus: Power
			channel set_EXT_HVEnabled: core_boolean
			channel set_EXT_currentState: State
			channel set_EXT_dutyCyclePWM1: duty
			channel set_EXT_mSetPoint: core_real
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel ext_pow24VStatus__: NIDS.InOut.Power
			channel ext_pow24VStatus: InOut.Power
			channel int_enablePWM__: NIDS.InOut.core_boolean
			channel int_enablePWM: InOut.core_boolean
			channel int_dutyCyclePWM1__: NIDS.InOut.duty
			channel int_dutyCyclePWM1: InOut.duty
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i0::enter,
			f0::enter,
			j0::enter
			|}
			
			enteredSS = 	{|
			f0::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
				set_EXT_pow24VStatus,
				set_EXT_HVEnabled,
				set_EXT_currentState,
				set_EXT_dutyCyclePWM1,
				set_EXT_mSetPoint
			|}
			
			channel clockReset, clockResetL, clockResetR 
			
			localClockResets = {||}
			
			
			channel get_CLID_f0 : CLID_f0_clock_type
			
			--channel increment__
			
			CLID_f0_clock_type = {0..(clock_type_max(Union({
			{}
			}))+1)}
			
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f0
				module f0
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
								
								Entering 	= entered -> SKIP ; Active
								Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
								Interrupted	= share__choice(exit -> exited -> Inactive)
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: j0
				module j0
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				CALL__disableHV(id__,
							arg) 	= (OP_disableHV::O__(id__,
							arg))
				[[
					OP_disableHV::int_enablePWM <- int_enablePWM,
					OP_disableHV::int_dutyCyclePWM1 <- int_dutyCyclePWM1
				]]
				[[
					OP_disableHV::get_HVEnabled <- get_HVEnabled,
					OP_disableHV::set_HVEnabled <- set_HVEnabled,
					OP_disableHV::get_currentState <- get_currentState,
					OP_disableHV::set_currentState <- set_currentState,
					OP_disableHV::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
					OP_disableHV::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
					OP_disableHV::get_mSetPoint <- get_mSetPoint,
					OP_disableHV::set_mSetPoint <- set_mSetPoint
				]]
				-- END of Operation calls --
			
				-- STM processes
				STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = get_pow24VStatus?pow24VStatus -> TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((Deadline(true&(share__choice(ext_pow24VStatus.in?pow24VStatus -> (SStop /\ set_pow24VStatus!pow24VStatus -> SKIP))),0) ; j0::enter -> SKIP))))
						 [] dbisim(((pow24VStatus==Power_Off))&(internal__!NID_j0 -> SKIP ;  ((true&CALL__disableHV(
						 			id__,
						 			true
						 		) ; f0::enter -> SKIP))))
						 [] dbisim(((pow24VStatus==Power_On))&(internal__!NID_j0 -> SKIP ;  ((SKIP ; f0::enter -> SKIP))))
						 []
						 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter,
							j0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_i0,internal__.NID_j0,internal__.NID_j0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i0::D__(id__)
								   		    [| { share__, terminate } |] (
								   		    f0::D__(id__)
								   		    [| { share__, terminate } |] (
								   		    j0::D__(id__)
								   		    )
								   		    )
								   		  )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[set_pow24VStatus <- setL_pow24VStatus]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_pow24VStatus
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_pow24VStatus |} ]]
								 )
								)[[setL_pow24VStatus <- set_pow24VStatus]]
								)
							)
							 \ hideSet)
							[[
								ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								int_enablePWM__.x____ <- int_enablePWM,
								int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_f0,f0::entered|}
					 within
						(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ union(stateClockSync,enteredSS)
					)
					)
				
				Stateful(id__) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter,
							j0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_i0,internal__.NID_j0,internal__.NID_j0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i0::VS_O__(id__)
								   		    [| { share__, terminate } |] (
								   		    f0::VS_O__(id__)
								   		    [| { share__, terminate } |] (
								   		    j0::VS_O__(id__)
								   		    )
								   		    )
								   		  )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[set_pow24VStatus <- setL_pow24VStatus]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_pow24VStatus
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_pow24VStatus |} ]]
								 )
								)[[setL_pow24VStatus <- set_pow24VStatus]]
								)
							)
							 \ hideSet)
							[[
								ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								int_enablePWM__.x____ <- int_enablePWM,
								int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_f0,f0::entered|}
					 within
						(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				Stateful_VS_O(id__) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
					
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__) \ localClockResets
				D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
				O__(id__) = dbisim(D__(id__))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = dbisim(FVS__(id__))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
				HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks = terminate -> SKIP
				
				clockSync = {||}
				
				Clock_CLID_f0(x__) = 
					TimeOut_1(
						f0::entered -> Clock_CLID_f0(0)
						[]
						get_CLID_f0!x__ -> Clock_CLID_f0(x__)
						[]
						terminate -> SKIP,Clock_CLID_f0(Plus(x__,1,CLID_f0_clock_type)))
				
				StateClocks = dbisim(Clock_CLID_f0(0))
				
				stateClockSync = {|get_CLID_f0,f0::entered|}
				}
					endmodule
		-- compileOperationDef
		module OP_AdjustLimits
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i0|
			              NID_f0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_overLimit, set_overLimit, setL_overLimit, setR_overLimit: core_real
			channel get_underLimit, set_underLimit, setL_underLimit, setR_underLimit: core_real
			channel get_mSetPoint, set_mSetPoint, setL_mSetPoint, setR_mSetPoint: core_real
			
			-- Shared variable channels
			channel set_EXT_overLimit: core_real
			channel set_EXT_underLimit: core_real
			channel set_EXT_mSetPoint: core_real
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i0::enter,
			f0::enter
			|}
			
			enteredSS = 	{|
			f0::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
				set_EXT_overLimit,
				set_EXT_underLimit,
				set_EXT_mSetPoint
			|}
			
			channel clockReset, clockResetL, clockResetR 
			
			localClockResets = {||}
			
			
			channel get_CLID_f0 : CLID_f0_clock_type
			
			--channel increment__
			
			CLID_f0_clock_type = {0..(clock_type_max(Union({
			}))+1)}
			
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f0
				module f0
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
								
								Entering 	= entered -> SKIP ; Active
								Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
								Interrupted	= share__choice(exit -> exited -> Inactive)
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
			
				-- STM processes
				STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((share__choice(share__choice(get_mSetPoint?mSetPoint -> true & (share__choice(set_overLimit!overLimitF(Plus(mSetPoint, 2, core_real)) -> SKIP))));share__choice(share__choice(get_mSetPoint?mSetPoint -> true & (share__choice(set_underLimit!underLimitF(Minus(mSetPoint, 2, core_real)) -> SKIP)))) ; f0::enter -> SKIP))))
						 []
						 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_i0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i0::D__(id__)
								   		    [| { share__, terminate } |] (
								   		    f0::D__(id__)
								   		    )
								   		  )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_f0,f0::entered|}
					 within
						(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ union(stateClockSync,enteredSS)
					)
					)
				
				Stateful(id__) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_i0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i0::VS_O__(id__)
								   		    [| { share__, terminate } |] (
								   		    f0::VS_O__(id__)
								   		    )
								   		  )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_f0,f0::entered|}
					 within
						(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				Stateful_VS_O(id__) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
					
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__) \ localClockResets
				D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
				O__(id__) = dbisim(D__(id__))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = dbisim(FVS__(id__))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
				HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks = terminate -> SKIP
				
				clockSync = {||}
				
				Clock_CLID_f0(x__) = 
					TimeOut_1(
						f0::entered -> Clock_CLID_f0(0)
						[]
						get_CLID_f0!x__ -> Clock_CLID_f0(x__)
						[]
						terminate -> SKIP,Clock_CLID_f0(Plus(x__,1,CLID_f0_clock_type)))
				
				StateClocks = dbisim(Clock_CLID_f0(0))
				
				stateClockSync = {|get_CLID_f0,f0::entered|}
				}
					endmodule
		-- compileOperationDef
		module OP_disableHV
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i0|
			              NID_f0|
			              NID_j0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_HVEnabled, set_HVEnabled, setL_HVEnabled, setR_HVEnabled: core_boolean
			channel get_currentState, set_currentState, setL_currentState, setR_currentState: State
			channel get_dutyCyclePWM1, set_dutyCyclePWM1, setL_dutyCyclePWM1, setR_dutyCyclePWM1: duty
			channel get_mSetPoint, set_mSetPoint, setL_mSetPoint, setR_mSetPoint: core_real
			
			-- Shared variable channels
			channel set_EXT_HVEnabled: core_boolean
			channel set_EXT_currentState: State
			channel set_EXT_dutyCyclePWM1: duty
			channel set_EXT_mSetPoint: core_real
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel int_enablePWM__: NIDS.InOut.core_boolean
			channel int_enablePWM: InOut.core_boolean
			channel int_dutyCyclePWM1__: NIDS.InOut.duty
			channel int_dutyCyclePWM1: InOut.duty
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i0::enter,
			f0::enter,
			j0::enter
			|}
			
			enteredSS = 	{|
			f0::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
				set_EXT_HVEnabled,
				set_EXT_currentState,
				set_EXT_dutyCyclePWM1,
				set_EXT_mSetPoint
			|}
			
			channel clockReset, clockResetL, clockResetR 
			
			localClockResets = {||}
			
			
			channel get_CLID_f0 : CLID_f0_clock_type
			
			--channel increment__
			
			CLID_f0_clock_type = {0..(clock_type_max(Union({
			{}
			}))+1)}
			
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__,
									arg) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__,
									arg) = D__(id__,
									arg)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f0
				module f0
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						D__(id__,
									arg) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
								
								Entering 	= entered -> SKIP ; Active
								Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
								Interrupted	= share__choice(exit -> exited -> Inactive)
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
									arg) = D__(id__,
									arg)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: j0
				module j0
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__,
									arg) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
									arg) = D__(id__,
									arg)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
			
				-- STM processes
				STM(id__,
							arg) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__,
							arg) \ {terminate}
				
				STM_VS_O(id__,
							arg) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__,
							arg) \ {terminate}
				
				-- Transitions
				Transitions(id__,
							arg) = ((let
					Trans = TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim(((arg==false))&(internal__!NID_j0 -> SKIP ;  ((SKIP ; f0::enter -> SKIP))))
						 [] dbisim(((arg==true))&(internal__!NID_j0 -> SKIP ;  ((share__choice(true & (share__choice(set_currentState!State_ErrorMode -> SKIP))) ; f0::enter -> SKIP))))
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((Deadline(true&(share__choice(int_enablePWM.out!false -> SKIP)),0);share__choice(true & (share__choice(set_dutyCyclePWM1!real2duty(0) -> SKIP)));Deadline(share__choice(get_dutyCyclePWM1?dutyCyclePWM1 -> true&(share__choice(int_dutyCyclePWM1.out!dutyCyclePWM1 -> SKIP))),0);share__choice(true & (share__choice(set_HVEnabled!false -> SKIP)));share__choice(true & (share__choice(set_mSetPoint!0 -> SKIP))) ; j0::enter -> SKIP))))
						 []
						 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__,
							arg) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter,
							j0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_j0,internal__.NID_j0,internal__.NID_i0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i0::D__(id__,
								   		    			arg)
								   		    [| { share__, terminate } |] (
								   		    f0::D__(id__,
								   		    			arg)
								   		    [| { share__, terminate } |] (
								   		    j0::D__(id__,
								   		    			arg)
								   		    )
								   		    )
								   		  )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__,
								 			arg))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								int_enablePWM__.x____ <- int_enablePWM,
								int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__,
							arg) = 
					dbisim((let
						stateClockSync = {|get_CLID_f0,f0::entered|}
					 within
						(MachineBody(id__,
									arg) [| union(stateClockSync,{terminate}) |] StateClocks) \ union(stateClockSync,enteredSS)
					)
					)
				
				Stateful(id__,
							arg) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour(id__,
									arg) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__,
						 			arg) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__,
							arg) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter,
							j0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_j0,internal__.NID_j0,internal__.NID_i0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i0::VS_O__(id__,
								   		    			arg)
								   		    [| { share__, terminate } |] (
								   		    f0::VS_O__(id__,
								   		    			arg)
								   		    [| { share__, terminate } |] (
								   		    j0::VS_O__(id__,
								   		    			arg)
								   		    )
								   		    )
								   		  )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__,
								 			arg))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								int_enablePWM__.x____ <- int_enablePWM,
								int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__,
							arg) = 
					dbisim((let
						stateClockSync = {|get_CLID_f0,f0::entered|}
					 within
						(MachineBody_VS_O(id__,
									arg) [| union(stateClockSync,{terminate}) |] StateClocks) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				Stateful_VS_O(id__,
							arg) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__,
									arg) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__,
						 			arg) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
					
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__,
							arg) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__,
							arg) = STM_VS_O(id__,
							arg) \ localClockResets
				D__(id__,
							arg) = timed_priority(STM(id__,
							arg) \ union(internal_events,localClockResets))
				O__(id__,
							arg) = dbisim(D__(id__,
							arg))
				VS__(id__,
							arg) = FVS__(id__,
							arg)
				VS_O__(id__,
							arg) = dbisim(FVS__(id__,
							arg))
				HEXT__(id__,
							arg) = O__(id__,
							arg) [|shared_variable_events|] SKIP
				FVS_C__(id__,
							arg) = dbisim(timed_priority(STM(id__,
							arg) \ internal_events))
				HUP__(id__,
							arg) = timed_priority(O__(id__,
							arg) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks = terminate -> SKIP
				
				clockSync = {||}
				
				Clock_CLID_f0(x__) = 
					TimeOut_1(
						f0::entered -> Clock_CLID_f0(0)
						[]
						get_CLID_f0!x__ -> Clock_CLID_f0(x__)
						[]
						terminate -> SKIP,Clock_CLID_f0(Plus(x__,1,CLID_f0_clock_type)))
				
				StateClocks = dbisim(Clock_CLID_f0(0))
				
				stateClockSync = {|get_CLID_f0,f0::entered|}
				}
					endmodule
	
		-- declaring machines
		module stm_ref0
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
		
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i1|
			              NID_s1|
			              NID_s0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_HVEnabled, set_HVEnabled, setL_HVEnabled, setR_HVEnabled: core_boolean
			channel get_pow24VStatus, set_pow24VStatus, setL_pow24VStatus, setR_pow24VStatus: Power
			channel get_currentState, set_currentState, setL_currentState, setR_currentState: State
			channel get_overLimit, set_overLimit, setL_overLimit, setR_overLimit: core_real
			channel get_underLimit, set_underLimit, setL_underLimit, setR_underLimit: core_real
			channel get_mSetPoint, set_mSetPoint, setL_mSetPoint, setR_mSetPoint: core_real
			channel get_dutyCyclePWM1, set_dutyCyclePWM1, setL_dutyCyclePWM1, setR_dutyCyclePWM1: duty
			
			-- Shared variable channels
			channel set_EXT_HVEnabled: core_boolean
			channel set_EXT_pow24VStatus: Power
			channel set_EXT_currentState: State
			channel set_EXT_overLimit: core_real
			channel set_EXT_underLimit: core_real
			channel set_EXT_mSetPoint: core_real
			channel set_EXT_dutyCyclePWM1: duty
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel ext_pow24VStatus__: NIDS.InOut.Power
			channel ext_pow24VStatus: InOut.Power
			channel int_dutyCyclePWM1__: NIDS.InOut.duty
			channel int_dutyCyclePWM1: InOut.duty
			channel int_enablePWM__: NIDS.InOut.core_boolean
			channel int_enablePWM: InOut.core_boolean
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i1::enter,
			s1::enter,
			s0::enter
			|}
			
			enteredSS = 	{|
			s1::entered,
			s0::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
				set_EXT_HVEnabled,
				set_EXT_pow24VStatus,
				set_EXT_currentState,
				set_EXT_overLimit,
				set_EXT_underLimit,
				set_EXT_mSetPoint,
				set_EXT_dutyCyclePWM1
			|}
			
			channel clockReset, clockResetL, clockResetR 
			
			localClockResets = {||}
			
			
			channel get_CLID_s0 : CLID_s0_clock_type
			channel get_CLID_s1 : CLID_s1_clock_type
			
			--channel increment__
			
			CLID_s0_clock_type = {0..(clock_type_max(Union({
			}))+1)}
			CLID_s1_clock_type = {0..(clock_type_max(Union({
			}))+1)}
			
		
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i1
				module i1
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: s1
				module s1
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					
					--channel increment__
					
					
					--	Nodes
					-- declaring all nodes
					
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__supplyVoltCheck(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__supplyVoltCheck(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
						
						-- Clocks
						
						StateClocks = terminate -> SKIP
						
						stateClockSync = {||}
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: s0
				module s0
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					
					--channel increment__
					
					
					--	Nodes
					-- declaring all nodes
					
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__AdjustLimits(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__AdjustLimits(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
						
						-- Clocks
						
						StateClocks = terminate -> SKIP
						
						stateClockSync = {||}
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				CALL__supplyVoltCheck(id__) 	= (OP_supplyVoltCheck::O__(id__))
				[[
					OP_supplyVoltCheck::ext_pow24VStatus <- ext_pow24VStatus,
					OP_supplyVoltCheck::int_enablePWM <- int_enablePWM,
					OP_supplyVoltCheck::int_dutyCyclePWM1 <- int_dutyCyclePWM1
				]]
				[[
					OP_supplyVoltCheck::get_pow24VStatus <- get_pow24VStatus,
					OP_supplyVoltCheck::set_pow24VStatus <- set_pow24VStatus,
					OP_supplyVoltCheck::get_HVEnabled <- get_HVEnabled,
					OP_supplyVoltCheck::set_HVEnabled <- set_HVEnabled,
					OP_supplyVoltCheck::get_currentState <- get_currentState,
					OP_supplyVoltCheck::set_currentState <- set_currentState,
					OP_supplyVoltCheck::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
					OP_supplyVoltCheck::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
					OP_supplyVoltCheck::get_mSetPoint <- get_mSetPoint,
					OP_supplyVoltCheck::set_mSetPoint <- set_mSetPoint
				]]
				CALL__AdjustLimits(id__) 	= (OP_AdjustLimits::O__(id__))
				[[
					OP_AdjustLimits::get_overLimit <- get_overLimit,
					OP_AdjustLimits::set_overLimit <- set_overLimit,
					OP_AdjustLimits::get_underLimit <- get_underLimit,
					OP_AdjustLimits::set_underLimit <- set_underLimit,
					OP_AdjustLimits::get_mSetPoint <- get_mSetPoint,
					OP_AdjustLimits::set_mSetPoint <- set_mSetPoint
				]]
				-- END of Operation calls --
			
				-- STM processes
				STM(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(Stateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {|set_EXT_HVEnabled,set_EXT_pow24VStatus,set_EXT_currentState,set_EXT_overLimit,set_EXT_underLimit,set_EXT_mSetPoint,set_EXT_dutyCyclePWM1|} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				,<{terminate},{tock}>)
				
				STM_VS_O(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(Stateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {|set_EXT_HVEnabled,set_EXT_pow24VStatus,set_EXT_currentState,set_EXT_overLimit,set_EXT_underLimit,set_EXT_mSetPoint,set_EXT_dutyCyclePWM1|} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				,<{terminate},{tock}>)
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i1 -> SKIP ;  ((SHARE_WAIT(ms(4)) ; s0::enter -> SKIP))))
						 [] dbisim((true)&(internal__!NID_s1 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SHARE_WAIT(ms(8)) ; s0::enter -> SKIP)))
						 [] dbisim((true)&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SHARE_WAIT(ms(2)) ; s1::enter -> SKIP)))
						 []
						 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i1::enter,
							s1::enter,
							s0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_i1,internal__.NID_s1,internal__.NID_s0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i1::D__(id__)
								   		    [| { share__, terminate } |] (
								   		    s1::D__(id__)
								   		    [| { share__, terminate } |] (
								   		    s0::D__(id__)
								   		    )
								   		    )
								   		  )
								 )
								 [[s1::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s1|}]]
								 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
								 [[i1::interrupt <- x__ | x__ <- {|internal__.NID_i1|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i1::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1,
								int_enablePWM__.x____ <- int_enablePWM
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_s0,s0::entered,get_CLID_s1,s1::entered|}
					 within
						(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ union(stateClockSync,enteredSS)
					)
					)
				
				Stateful(id__) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i1::enter,
							s1::enter,
							s0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_i1,internal__.NID_s1,internal__.NID_s0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i1::VS_O__(id__)
								   		    [| { share__, terminate } |] (
								   		    s1::VS_O__(id__)
								   		    [| { share__, terminate } |] (
								   		    s0::VS_O__(id__)
								   		    )
								   		    )
								   		  )
								 )
								 [[s1::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s1|}]]
								 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
								 [[i1::interrupt <- x__ | x__ <- {|internal__.NID_i1|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i1::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1,
								int_enablePWM__.x____ <- int_enablePWM
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_s0,s0::entered,get_CLID_s1,s1::entered|}
					 within
						(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				Stateful_VS_O(id__) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
					
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__) \ localClockResets
				D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
				O__(id__) = dbisim(D__(id__))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = dbisim(FVS__(id__))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
				HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks = terminate -> SKIP
				
				clockSync = {||}
				
				Clock_CLID_s0(x__) = 
					TimeOut_1(
						s0::entered -> Clock_CLID_s0(0)
						[]
						get_CLID_s0!x__ -> Clock_CLID_s0(x__)
						[]
						terminate -> SKIP,Clock_CLID_s0(Plus(x__,1,CLID_s0_clock_type)))
				Clock_CLID_s1(x__) = 
					TimeOut_1(
						s1::entered -> Clock_CLID_s1(0)
						[]
						get_CLID_s1!x__ -> Clock_CLID_s1(x__)
						[]
						terminate -> SKIP,Clock_CLID_s1(Plus(x__,1,CLID_s1_clock_type)))
				
				StateClocks = dbisim(Clock_CLID_s0(0))
				[| { terminate } |] (
				dbisim(Clock_CLID_s1(0))
				)
				
				stateClockSync = {|get_CLID_s0,s0::entered,get_CLID_s1,s1::entered|}
				
				-- Shared memory
				-- Shared memory variables
				Memory_HVEnabled(HVEnabled) =
					get_HVEnabled!HVEnabled -> Memory_HVEnabled(HVEnabled)
					[]
					set_HVEnabled?x__ -> Memory_HVEnabled(x__)
					[]
					set_EXT_HVEnabled?x__ -> Memory_HVEnabled(x__)
					[]
					terminate -> SKIP
				Memory_pow24VStatus(pow24VStatus) =
					get_pow24VStatus!pow24VStatus -> Memory_pow24VStatus(pow24VStatus)
					[]
					set_pow24VStatus?x__ -> Memory_pow24VStatus(x__)
					[]
					set_EXT_pow24VStatus?x__ -> Memory_pow24VStatus(x__)
					[]
					terminate -> SKIP
				Memory_currentState(currentState) =
					get_currentState!currentState -> Memory_currentState(currentState)
					[]
					set_currentState?x__ -> Memory_currentState(x__)
					[]
					set_EXT_currentState?x__ -> Memory_currentState(x__)
					[]
					terminate -> SKIP
				Memory_overLimit(overLimit) =
					get_overLimit!overLimit -> Memory_overLimit(overLimit)
					[]
					set_overLimit?x__ -> Memory_overLimit(x__)
					[]
					set_EXT_overLimit?x__ -> Memory_overLimit(x__)
					[]
					terminate -> SKIP
				Memory_underLimit(underLimit) =
					get_underLimit!underLimit -> Memory_underLimit(underLimit)
					[]
					set_underLimit?x__ -> Memory_underLimit(x__)
					[]
					set_EXT_underLimit?x__ -> Memory_underLimit(x__)
					[]
					terminate -> SKIP
				Memory_mSetPoint(mSetPoint) =
					get_mSetPoint!mSetPoint -> Memory_mSetPoint(mSetPoint)
					[]
					set_mSetPoint?x__ -> Memory_mSetPoint(x__)
					[]
					set_EXT_mSetPoint?x__ -> Memory_mSetPoint(x__)
					[]
					terminate -> SKIP
				Memory_dutyCyclePWM1(dutyCyclePWM1) =
					get_dutyCyclePWM1!dutyCyclePWM1 -> Memory_dutyCyclePWM1(dutyCyclePWM1)
					[]
					set_dutyCyclePWM1?x__ -> Memory_dutyCyclePWM1(x__)
					[]
					set_EXT_dutyCyclePWM1?x__ -> Memory_dutyCyclePWM1(x__)
					[]
					terminate -> SKIP
				
				-- sharedVarMemory process
				sharedVarMemory(id__) = Memory_HVEnabled(true)
				[| { terminate } |] (
				Memory_pow24VStatus(Power_On)
				[| { terminate } |] (
				Memory_currentState(State_Wait24Vpower)
				[| { terminate } |] (
				Memory_overLimit(0)
				[| { terminate } |] (
				Memory_underLimit(0)
				[| { terminate } |] (
				Memory_mSetPoint(0)
				[| { terminate } |] (
				Memory_dutyCyclePWM1(0)
				)
				)
				)
				)
				)
				)
				
				sharedVarSync = {|get_HVEnabled,set_HVEnabled,set_EXT_HVEnabled,get_pow24VStatus,set_pow24VStatus,set_EXT_pow24VStatus,get_currentState,set_currentState,set_EXT_currentState,get_overLimit,set_overLimit,set_EXT_overLimit,get_underLimit,set_underLimit,set_EXT_underLimit,get_mSetPoint,set_mSetPoint,set_EXT_mSetPoint,get_dutyCyclePWM1,set_dutyCyclePWM1,set_EXT_dutyCyclePWM1|}
				
				sharedVarHide = {|get_HVEnabled,get_pow24VStatus,get_currentState,get_overLimit,get_underLimit,get_mSetPoint,get_dutyCyclePWM1|}
				}
		endmodule
		
		Timed(OneStep) {
				-- undefined operations
				
				-- declaring controller memory
				Memory(id__, HVEnabled, pow24VStatus, currentState, overLimit, underLimit, mSetPoint, dutyCyclePWM1) = (
				set_EXT_HVEnabled?x__ -> stm_ref0::set_EXT_HVEnabled!x__ -> 
				Memory(id__,x__,pow24VStatus,currentState,overLimit,underLimit,mSetPoint,dutyCyclePWM1)
				 []
				set_EXT_pow24VStatus?x__ -> stm_ref0::set_EXT_pow24VStatus!x__ -> 
				Memory(id__,HVEnabled,x__,currentState,overLimit,underLimit,mSetPoint,dutyCyclePWM1)
				 []
				set_EXT_currentState?x__ -> stm_ref0::set_EXT_currentState!x__ -> 
				Memory(id__,HVEnabled,pow24VStatus,x__,overLimit,underLimit,mSetPoint,dutyCyclePWM1)
				 []
				set_EXT_overLimit?x__ -> stm_ref0::set_EXT_overLimit!x__ -> 
				Memory(id__,HVEnabled,pow24VStatus,currentState,x__,underLimit,mSetPoint,dutyCyclePWM1)
				 []
				set_EXT_underLimit?x__ -> stm_ref0::set_EXT_underLimit!x__ -> 
				Memory(id__,HVEnabled,pow24VStatus,currentState,overLimit,x__,mSetPoint,dutyCyclePWM1)
				 []
				set_EXT_mSetPoint?x__ -> stm_ref0::set_EXT_mSetPoint!x__ -> 
				Memory(id__,HVEnabled,pow24VStatus,currentState,overLimit,underLimit,x__,dutyCyclePWM1)
				 []
				set_EXT_dutyCyclePWM1?x__ -> stm_ref0::set_EXT_dutyCyclePWM1!x__ -> 
				Memory(id__,HVEnabled,pow24VStatus,currentState,overLimit,underLimit,mSetPoint,x__)
				)
				
				D__(id__) = prioritise(	((
						stm_ref0::D__(id__)[[
							stm_ref0::terminate <- terminate,
							stm_ref0::ext_pow24VStatus <- ext_pow24VStatus,
							stm_ref0::int_dutyCyclePWM1 <- int_dutyCyclePWM1,
							stm_ref0::int_enablePWM <- int_enablePWM,
							stm_ref0::set_HVEnabled <- set_HVEnabled,
							stm_ref0::get_HVEnabled <- get_HVEnabled,
							stm_ref0::set_pow24VStatus <- set_pow24VStatus,
							stm_ref0::get_pow24VStatus <- get_pow24VStatus,
							stm_ref0::set_currentState <- set_currentState,
							stm_ref0::get_currentState <- get_currentState,
							stm_ref0::set_overLimit <- set_overLimit,
							stm_ref0::get_overLimit <- get_overLimit,
							stm_ref0::set_underLimit <- set_underLimit,
							stm_ref0::get_underLimit <- get_underLimit,
							stm_ref0::set_mSetPoint <- set_mSetPoint,
							stm_ref0::get_mSetPoint <- get_mSetPoint,
							stm_ref0::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
							stm_ref0::get_dutyCyclePWM1 <- get_dutyCyclePWM1
						]]
					)
						[|
							union(
								{|
								|},
								{|
									stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
								|}
							)
						|]
					Memory(id__, true, Power_On, State_Wait24Vpower, 0, 0, 0, 0)
				)
				\ union(
					{|
					|},
					{|
						stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>)
				
				-- VS version
				VS__(id__) = prioritise(	((
						stm_ref0::VS__(id__)[[
							stm_ref0::terminate <- terminate,
							stm_ref0::ext_pow24VStatus <- ext_pow24VStatus,
							stm_ref0::int_dutyCyclePWM1 <- int_dutyCyclePWM1,
							stm_ref0::int_enablePWM <- int_enablePWM,
							stm_ref0::set_HVEnabled <- set_HVEnabled,
							stm_ref0::get_HVEnabled <- get_HVEnabled,
							stm_ref0::set_pow24VStatus <- set_pow24VStatus,
							stm_ref0::get_pow24VStatus <- get_pow24VStatus,
							stm_ref0::set_currentState <- set_currentState,
							stm_ref0::get_currentState <- get_currentState,
							stm_ref0::set_overLimit <- set_overLimit,
							stm_ref0::get_overLimit <- get_overLimit,
							stm_ref0::set_underLimit <- set_underLimit,
							stm_ref0::get_underLimit <- get_underLimit,
							stm_ref0::set_mSetPoint <- set_mSetPoint,
							stm_ref0::get_mSetPoint <- get_mSetPoint,
							stm_ref0::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
							stm_ref0::get_dutyCyclePWM1 <- get_dutyCyclePWM1
						]]
					)
						[|
							union(
								{|
								|},
								{|
									stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
								|}
							)
						|]
					Memory(id__, true, Power_On, State_Wait24Vpower, 0, 0, 0, 0)
				)
				\ union(
					{|
					|},
					{|
						stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>)
			
				-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
				O__(id__) = dbisim(prioritise(	((
						stm_ref0::O__(id__)[[
							stm_ref0::terminate <- terminate,
							stm_ref0::ext_pow24VStatus <- ext_pow24VStatus,
							stm_ref0::int_dutyCyclePWM1 <- int_dutyCyclePWM1,
							stm_ref0::int_enablePWM <- int_enablePWM,
							stm_ref0::set_HVEnabled <- set_HVEnabled,
							stm_ref0::get_HVEnabled <- get_HVEnabled,
							stm_ref0::set_pow24VStatus <- set_pow24VStatus,
							stm_ref0::get_pow24VStatus <- get_pow24VStatus,
							stm_ref0::set_currentState <- set_currentState,
							stm_ref0::get_currentState <- get_currentState,
							stm_ref0::set_overLimit <- set_overLimit,
							stm_ref0::get_overLimit <- get_overLimit,
							stm_ref0::set_underLimit <- set_underLimit,
							stm_ref0::get_underLimit <- get_underLimit,
							stm_ref0::set_mSetPoint <- set_mSetPoint,
							stm_ref0::get_mSetPoint <- get_mSetPoint,
							stm_ref0::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
							stm_ref0::get_dutyCyclePWM1 <- get_dutyCyclePWM1
						]]
					)
						[|
							union(
								{|
								|},
								{|
									stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
								|}
							)
						|]
					dbisim(Memory(id__, true, Power_On, State_Wait24Vpower, 0, 0, 0, 0))
				)
				\ union(
					{|
					|},
					{|
						stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>))
								
				-- VS_O version
				VS_O__(id__) = dbisim(prioritise(	((
						stm_ref0::VS_O__(id__)[[
							stm_ref0::terminate <- terminate,
							stm_ref0::ext_pow24VStatus <- ext_pow24VStatus,
							stm_ref0::int_dutyCyclePWM1 <- int_dutyCyclePWM1,
							stm_ref0::int_enablePWM <- int_enablePWM,
							stm_ref0::set_HVEnabled <- set_HVEnabled,
							stm_ref0::get_HVEnabled <- get_HVEnabled,
							stm_ref0::set_pow24VStatus <- set_pow24VStatus,
							stm_ref0::get_pow24VStatus <- get_pow24VStatus,
							stm_ref0::set_currentState <- set_currentState,
							stm_ref0::get_currentState <- get_currentState,
							stm_ref0::set_overLimit <- set_overLimit,
							stm_ref0::get_overLimit <- get_overLimit,
							stm_ref0::set_underLimit <- set_underLimit,
							stm_ref0::get_underLimit <- get_underLimit,
							stm_ref0::set_mSetPoint <- set_mSetPoint,
							stm_ref0::get_mSetPoint <- get_mSetPoint,
							stm_ref0::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
							stm_ref0::get_dutyCyclePWM1 <- get_dutyCyclePWM1
						]]
					)
						[|
							union(
								{|
								|},
								{|
									stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
								|}
							)
						|]
					dbisim(Memory(id__, true, Power_On, State_Wait24Vpower, 0, 0, 0, 0))
				)
				\ union(
					{|
					|},
					{|
						stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>))
			
				HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP			
		}

	endmodule
	module ctrl2
		shared_variable_events = {|
		|}
		
	exports
		transparent diamond
		transparent sbisim
		transparent dbisim
		transparent chase

		-- declaring controller events
		channel ext_pow24VStatus: InOut.Power
		channel ext_pow24_1: InOut.Power
		channel ext_pow24_2: InOut.Power
		
		
		
		-- declaring call and ret events for undefined operations
		
		-- declaring controller termination channel		
		channel terminate
		
		-- set of visible memory events
		visibleMemoryEvents = {||}

		-- defined operations
	
		-- declaring machines
		module stm0
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
		
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i0|
			              NID_s0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_power, set_power, setL_power, setR_power: Power
			channel get_fresh, set_fresh, setL_fresh, setR_fresh: core_boolean
			
			-- Shared variable channels
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel ext_pow24VStatus__: NIDS.InOut.Power
			channel ext_pow24VStatus: InOut.Power
			channel ext_pow24_1__: NIDS.InOut.Power
			channel ext_pow24_1: InOut.Power
			channel ext_pow24_2__: NIDS.InOut.Power
			channel ext_pow24_2: InOut.Power
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i0::enter,
			s0::enter
			|}
			
			enteredSS = 	{|
			s0::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
			|}
			
			channel clockReset, clockResetL, clockResetR 
			
			localClockResets = {||}
			
			
			channel get_CLID_s0 : CLID_s0_clock_type
			
			--channel increment__
			
			CLID_s0_clock_type = {0..(clock_type_max(Union({
			{}
			}))+1)}
			
		
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: s0
				module s0
				
				enterSS = 
						{|			i0::enter,
							s0::enter
						|}
				enteredSS = 
						{|			s0::entered
						|}
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					-- declaring identifiers of transitions
					datatype NIDS = 
					              NID_i0|
					              NID_s0
					
					channel internal__ : NIDS
					channel ext_pow24VStatus__: NIDS.InOut.Power
					channel ext_pow24_1__: NIDS.InOut.Power
					channel ext_pow24_2__: NIDS.InOut.Power
					
					channel get_CLID_s0 : CLID_s0_clock_type
					
					--channel increment__
					
					CLID_s0_clock_type = {0..(clock_type_max(Union({
					}))+1)}
					
					--	Nodes
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: s0
					module s0
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((share__choice(get_power?power -> true&(share__choice(ext_pow24_2.out!power -> SKIP)));share__choice(true & (share__choice(set_fresh!false -> SKIP))) ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((share__choice(get_power?power -> true&(share__choice(ext_pow24_2.out!power -> SKIP)));share__choice(true & (share__choice(set_fresh!false -> SKIP))) ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&(share__choice(ext_pow24VStatus.in?power -> (SStop /\ set_power!power -> SKIP)));share__choice(true & (share__choice(set_fresh!true -> SKIP))) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
						
							Behaviour 	= dbisim(
								((
								 ((dbisim((dbisim((let
								 	-- IMPLEMENTATION NOTE:
								 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								 	-- modules for defining the semantics of each node.
								 	enterSS = {|
								 	i0::enter,
								 	s0::enter
								 	|}
								 	hideSet = union(enterSS,{|exit,exited,internal__|})
								 within 
								 	((let
								 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								 		-- because CSPM modules are used for the semantics of Node.
								 		flowevts = union(enterSS,{|exit,exited|})
								 		transSync = {|internal__.NID_i0|}
								 	within
								 		((
								 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								 		   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								 		   		    i0::D__(id__)
								 		   		    [| { share__, terminate } |] (
								 		   		    s0::D__(id__)
								 		   		    )
								 		   		  )
								 		 )
								 		 [[s0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 		 )
								 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 		 )
								 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 		|}) |]
								 		 ((i0::enter -> Transitions(id__))
								 		  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 		 )
								 		)
								 		)
								 	)
								 	 \ hideSet)
								 	[[
								 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								 		ext_pow24_1__.x____ <- ext_pow24_1,
								 		ext_pow24_2__.x____ <- ext_pow24_2
								 		| x____ <- NIDS
								 	]]
								 )
								 )
								  [| union(stateClockSync,{terminate}) |]
								  StateClocks
								 )\diff(stateClockSync,enteredSS)))
								  [[ share__ <- x__ | x__ <- {| share__,setR_fresh,setR_power |} ]] 
								  [[set_fresh <- setL_fresh,set_power <- setL_power]]
								 )
								 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
								 			,setL_fresh
								 			,setL_power
								 			,setR_fresh
								 			 			,setR_power
								 			|}) |]
								 ((During)
								  [[ share__ <- x__ | x__ <- {| share__,setL_fresh,setL_power |} ]]
								  [[set_fresh <- setR_fresh,set_power <- setR_power]]
								 )
								)[[setL_fresh <- set_fresh,setL_power <- set_power]]
								 [[setR_fresh <- set_fresh,setR_power <- set_power]]
								)\union(enteredSS,{terminate}) 
							)
							During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
									 	  ; entered -> ((CRUN(enteredSS) ||| share__choice(get_power?power -> true&(share__choice(ext_pow24_1.out!power -> SKIP)));share__choice(true & (share__choice(set_fresh!false -> SKIP))) ; SStop) /\ interrupt -> terminate -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&(share__choice(ext_pow24VStatus.in?power -> (SStop /\ set_power!power -> SKIP)));share__choice(true & (share__choice(set_fresh!true -> SKIP))) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
						
							Behaviour 	= dbisim(
								((
								 ((dbisim((dbisim((let
								 	-- IMPLEMENTATION NOTE:
								 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								 	-- modules for defining the semantics of each node.
								 	enterSS = {|
								 	i0::enter,
								 	s0::enter
								 	|}
								 	hideSet = union(enterSS,{|exit,exited,internal__|})
								 within 
								 	((let
								 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								 		-- because CSPM modules are used for the semantics of Node.
								 		flowevts = union(enterSS,{|exit,exited|})
								 		transSync = {|internal__.NID_i0|}
								 	within
								 		((
								 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								 		   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								 		   		    i0::VS_O__(id__)
								 		   		    [| { share__, terminate } |] (
								 		   		    s0::VS_O__(id__)
								 		   		    )
								 		   		  )
								 		 )
								 		 [[s0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 		 )
								 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 		 )
								 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 		|}) |]
								 		 ((i0::enter -> Transitions(id__))
								 		  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 		 )
								 		)
								 		)
								 	)
								 	 \ hideSet)
								 	[[
								 		ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								 		ext_pow24_1__.x____ <- ext_pow24_1,
								 		ext_pow24_2__.x____ <- ext_pow24_2
								 		| x____ <- NIDS
								 	]]
								 )
								 )
								  [| union(stateClockSync,{terminate}) |]
								  StateClocks
								 )\diff(stateClockSync,enteredSS)))
								  [[ share__ <- x__ | x__ <- {| share__,setR_fresh,setR_power |} ]] 
								  [[set_fresh <- setL_fresh,set_power <- setL_power]]
								 )
								 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
								 			,setL_fresh
								 			,setL_power
								 			,setR_fresh
								 			 			,setR_power
								 			|}) |]
								 ((During)
								  [[ share__ <- x__ | x__ <- {| share__,setL_fresh,setL_power |} ]]
								  [[set_fresh <- setR_fresh,set_power <- setR_power]]
								 )
								)[[setL_fresh <- set_fresh,setL_power <- set_power]]
								 [[setR_fresh <- set_fresh,setR_power <- set_power]]
								)\{terminate} 
							)
							During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
									 	  ; entered -> ((CRUN(enteredSS) ||| share__choice(get_power?power -> true&(share__choice(ext_pow24_1.out!power -> SKIP)));share__choice(true & (share__choice(set_fresh!false -> SKIP))) ; SStop) /\ interrupt -> terminate -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
						Transitions(id__) = ((let
							Trans = TimeOut_1(
								 (share__ -> SKIP
								 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s0::enter -> SKIP))))
								 []
								 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
								 []
								 terminate -> SKIP
								 )
							,SKIP);Trans
						within
							Trans [|{terminate}|> SKIP
						)
						)
						
						
						-- Clocks
						Clock_CLID_s0(x__) = 
							TimeOut_1(
								s0::entered -> Clock_CLID_s0(0)
								[]
								get_CLID_s0!x__ -> Clock_CLID_s0(x__)
								[]
								terminate -> SKIP,Clock_CLID_s0(Plus(x__,1,CLID_s0_clock_type)))
						
						StateClocks = dbisim(Clock_CLID_s0(0))
						
						stateClockSync = {|get_CLID_s0,s0::entered|}
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
			
				-- STM processes
				STM(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(Stateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				,<{terminate},{tock}>)
				
				STM_VS_O(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(Stateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				,<{terminate},{tock}>)
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = get_fresh?fresh -> TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s0::enter -> SKIP))))
						 [] dbisim(((fresh==false))&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s0::enter -> SKIP)))
						 []
						 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							s0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_i0,internal__.NID_s0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i0::D__(id__)
								   		    [| { share__, terminate } |] (
								   		    s0::D__(id__)
								   		    )
								   		  )
								 )
								 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[set_fresh <- setL_fresh]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_fresh
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_fresh |} ]]
								 )
								)[[setL_fresh <- set_fresh]]
								)
							)
							 \ hideSet)
							[[
								ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								ext_pow24_1__.x____ <- ext_pow24_1,
								ext_pow24_2__.x____ <- ext_pow24_2
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_s0,s0::entered|}
					 within
						(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ union(stateClockSync,enteredSS)
					)
					)
				
				Stateful(id__) = 
					dbisim((let
						getsetLocalChannels = {|get_power,set_power,
						get_fresh,set_fresh|}
						clockSync = {||}
					within
						(Behaviour(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							s0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_i0,internal__.NID_s0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i0::VS_O__(id__)
								   		    [| { share__, terminate } |] (
								   		    s0::VS_O__(id__)
								   		    )
								   		  )
								 )
								 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[set_fresh <- setL_fresh]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_fresh
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_fresh |} ]]
								 )
								)[[setL_fresh <- set_fresh]]
								)
							)
							 \ hideSet)
							[[
								ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								ext_pow24_1__.x____ <- ext_pow24_1,
								ext_pow24_2__.x____ <- ext_pow24_2
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_s0,s0::entered|}
					 within
						(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				Stateful_VS_O(id__) = 
					dbisim((let
						getsetLocalChannels = {|get_power,set_power,
						get_fresh,set_fresh|}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
					
				-- END
				
				-- Memory
				-- Memory variables
				Memory_power(power) =
					get_power!power -> Memory_power(power)
					[]
					set_power?x__ -> Memory_power(x__)
					[]
					terminate -> SKIP
				Memory_fresh(fresh) =
					get_fresh!fresh -> Memory_fresh(fresh)
					[]
					set_fresh?x__ -> Memory_fresh(x__)
					[]
					terminate -> SKIP
				
				-- varMemory process
				varMemory(id__) = Memory_power(Power_On)
				[| { terminate } |] (
				Memory_fresh(true)
				)
				
				getsetLocalChannels = {|get_power,set_power,get_fresh,set_fresh|}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__) \ localClockResets
				D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
				O__(id__) = dbisim(D__(id__))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = dbisim(FVS__(id__))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
				HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks = terminate -> SKIP
				
				clockSync = {||}
				
				Clock_CLID_s0(x__) = 
					TimeOut_1(
						s0::entered -> Clock_CLID_s0(0)
						[]
						get_CLID_s0!x__ -> Clock_CLID_s0(x__)
						[]
						terminate -> SKIP,Clock_CLID_s0(Plus(x__,1,CLID_s0_clock_type)))
				
				StateClocks = dbisim(Clock_CLID_s0(0))
				
				stateClockSync = {|get_CLID_s0,s0::entered|}
				
				-- Shared memory
				-- Shared memory variables
				
				-- sharedVarMemory process
				sharedVarMemory(id__) = terminate -> SKIP
				
				sharedVarSync = {||}
				
				sharedVarHide = {||}
				}
		endmodule
		
		Timed(OneStep) {
				-- undefined operations
				
				-- declaring controller memory
				Memory(id__) = SKIP
				
				D__(id__) = prioritise(	((
						stm0::D__(id__)[[
							stm0::terminate <- terminate,
							stm0::ext_pow24VStatus <- ext_pow24VStatus,
							stm0::ext_pow24_1 <- ext_pow24_1,
							stm0::ext_pow24_2 <- ext_pow24_2
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>)
				
				-- VS version
				VS__(id__) = prioritise(	((
						stm0::VS__(id__)[[
							stm0::terminate <- terminate,
							stm0::ext_pow24VStatus <- ext_pow24VStatus,
							stm0::ext_pow24_1 <- ext_pow24_1,
							stm0::ext_pow24_2 <- ext_pow24_2
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>)
			
				-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
				O__(id__) = dbisim(prioritise(	((
						stm0::O__(id__)[[
							stm0::terminate <- terminate,
							stm0::ext_pow24VStatus <- ext_pow24VStatus,
							stm0::ext_pow24_1 <- ext_pow24_1,
							stm0::ext_pow24_2 <- ext_pow24_2
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>))
								
				-- VS_O version
				VS_O__(id__) = dbisim(prioritise(	((
						stm0::VS_O__(id__)[[
							stm0::terminate <- terminate,
							stm0::ext_pow24VStatus <- ext_pow24VStatus,
							stm0::ext_pow24_1 <- ext_pow24_1,
							stm0::ext_pow24_2 <- ext_pow24_2
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>))
			
				HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP			
		}

	endmodule
	module ctrl4
		shared_variable_events = {|
		|}
		
	exports
		transparent diamond
		transparent sbisim
		transparent dbisim
		transparent chase

		-- declaring controller events
		channel int_pwmSignal: InOut.Power
		channel pwmSignal1: InOut.Power
		channel pwmSignal2: InOut.Power
		
		
		
		-- declaring call and ret events for undefined operations
		
		-- declaring controller termination channel		
		channel terminate
		
		-- set of visible memory events
		visibleMemoryEvents = {||}

		-- defined operations
	
		-- declaring machines
		module stm0
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
		
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i0|
			              NID_s0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_power, set_power, setL_power, setR_power: Power
			
			-- Shared variable channels
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel int_pwmSignal__: NIDS.InOut.Power
			channel int_pwmSignal: InOut.Power
			channel pwmSignal1__: NIDS.InOut.Power
			channel pwmSignal1: InOut.Power
			channel pwmSignal2__: NIDS.InOut.Power
			channel pwmSignal2: InOut.Power
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i0::enter,
			s0::enter
			|}
			
			enteredSS = 	{|
			s0::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
			|}
			
			channel clockReset, clockResetL, clockResetR 
			
			localClockResets = {||}
			
			
			channel get_CLID_s0 : CLID_s0_clock_type
			
			--channel increment__
			
			CLID_s0_clock_type = {0..(clock_type_max(Union({
			}))+1)}
			
		
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: s0
				module s0
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					
					--channel increment__
					
					
					--	Nodes
					-- declaring all nodes
					
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&(share__choice(int_pwmSignal.in?power -> (SStop /\ set_power!power -> SKIP))) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&(share__choice(int_pwmSignal.in?power -> (SStop /\ set_power!power -> SKIP))) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
						
						-- Clocks
						
						StateClocks = terminate -> SKIP
						
						stateClockSync = {||}
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
			
				-- STM processes
				STM(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(Stateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				,<{terminate},{tock}>)
				
				STM_VS_O(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(Stateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				,<{terminate},{tock}>)
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s0::enter -> SKIP))))
						 [] dbisim((true)&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(get_power?power -> true&(share__choice(pwmSignal1.out!power -> SKIP)));share__choice(get_power?power -> true&(share__choice(pwmSignal2.out!power -> SKIP))) ; s0::enter -> SKIP)))
						 []
						 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							s0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_i0,internal__.NID_s0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i0::D__(id__)
								   		    [| { share__, terminate } |] (
								   		    s0::D__(id__)
								   		    )
								   		  )
								 )
								 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								int_pwmSignal__.x____ <- int_pwmSignal,
								pwmSignal1__.x____ <- pwmSignal1,
								pwmSignal2__.x____ <- pwmSignal2
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_s0,s0::entered|}
					 within
						(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ union(stateClockSync,enteredSS)
					)
					)
				
				Stateful(id__) = 
					dbisim((let
						getsetLocalChannels = {|get_power,set_power|}
						clockSync = {||}
					within
						(Behaviour(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							s0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_i0,internal__.NID_s0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i0::VS_O__(id__)
								   		    [| { share__, terminate } |] (
								   		    s0::VS_O__(id__)
								   		    )
								   		  )
								 )
								 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								int_pwmSignal__.x____ <- int_pwmSignal,
								pwmSignal1__.x____ <- pwmSignal1,
								pwmSignal2__.x____ <- pwmSignal2
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_s0,s0::entered|}
					 within
						(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				Stateful_VS_O(id__) = 
					dbisim((let
						getsetLocalChannels = {|get_power,set_power|}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
					
				-- END
				
				-- Memory
				-- Memory variables
				Memory_power(power) =
					get_power!power -> Memory_power(power)
					[]
					set_power?x__ -> Memory_power(x__)
					[]
					terminate -> SKIP
				
				-- varMemory process
				varMemory(id__) = Memory_power(Power_On)
				
				getsetLocalChannels = {|get_power,set_power|}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__) \ localClockResets
				D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
				O__(id__) = dbisim(D__(id__))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = dbisim(FVS__(id__))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
				HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks = terminate -> SKIP
				
				clockSync = {||}
				
				Clock_CLID_s0(x__) = 
					TimeOut_1(
						s0::entered -> Clock_CLID_s0(0)
						[]
						get_CLID_s0!x__ -> Clock_CLID_s0(x__)
						[]
						terminate -> SKIP,Clock_CLID_s0(Plus(x__,1,CLID_s0_clock_type)))
				
				StateClocks = dbisim(Clock_CLID_s0(0))
				
				stateClockSync = {|get_CLID_s0,s0::entered|}
				
				-- Shared memory
				-- Shared memory variables
				
				-- sharedVarMemory process
				sharedVarMemory(id__) = terminate -> SKIP
				
				sharedVarSync = {||}
				
				sharedVarHide = {||}
				}
		endmodule
		
		Timed(OneStep) {
				-- undefined operations
				
				-- declaring controller memory
				Memory(id__) = SKIP
				
				D__(id__) = prioritise(	((
						stm0::D__(id__)[[
							stm0::terminate <- terminate,
							stm0::int_pwmSignal <- int_pwmSignal,
							stm0::pwmSignal1 <- pwmSignal1,
							stm0::pwmSignal2 <- pwmSignal2
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>)
				
				-- VS version
				VS__(id__) = prioritise(	((
						stm0::VS__(id__)[[
							stm0::terminate <- terminate,
							stm0::int_pwmSignal <- int_pwmSignal,
							stm0::pwmSignal1 <- pwmSignal1,
							stm0::pwmSignal2 <- pwmSignal2
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>)
			
				-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
				O__(id__) = dbisim(prioritise(	((
						stm0::O__(id__)[[
							stm0::terminate <- terminate,
							stm0::int_pwmSignal <- int_pwmSignal,
							stm0::pwmSignal1 <- pwmSignal1,
							stm0::pwmSignal2 <- pwmSignal2
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>))
								
				-- VS_O version
				VS_O__(id__) = dbisim(prioritise(	((
						stm0::VS_O__(id__)[[
							stm0::terminate <- terminate,
							stm0::int_pwmSignal <- int_pwmSignal,
							stm0::pwmSignal1 <- pwmSignal1,
							stm0::pwmSignal2 <- pwmSignal2
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>))
			
				HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP			
		}

	endmodule
	module ctrl3
		shared_variable_events = {|
		|}
		
	exports
		transparent diamond
		transparent sbisim
		transparent dbisim
		transparent chase

		-- declaring controller events
		channel int_dutyCyclePWM1: InOut.duty
		channel int_enablePWM: InOut.core_boolean
		channel ctrl0_dutyCyclePWM1: InOut.duty
		channel ctrl1_dutyCyclePWM1: InOut.duty
		channel ctrl0_enablePWM: InOut.core_boolean
		channel ctrl1_enablePWM: InOut.core_boolean
		
		
		
		-- declaring call and ret events for undefined operations
		
		-- declaring controller termination channel		
		channel terminate
		
		-- set of visible memory events
		visibleMemoryEvents = {||}

		-- defined operations
	
		-- declaring machines
		module stm0
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
		
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i0|
			              NID_s0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_duty, set_duty, setL_duty, setR_duty: duty
			channel get_enabled, set_enabled, setL_enabled, setR_enabled: core_boolean
			
			-- Shared variable channels
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel int_dutyCyclePWM1__: NIDS.InOut.duty
			channel int_dutyCyclePWM1: InOut.duty
			channel int_enablePWM__: NIDS.InOut.core_boolean
			channel int_enablePWM: InOut.core_boolean
			channel ctrl0_dutyCyclePWM1__: NIDS.InOut.duty
			channel ctrl0_dutyCyclePWM1: InOut.duty
			channel ctrl1_dutyCyclePWM1__: NIDS.InOut.duty
			channel ctrl1_dutyCyclePWM1: InOut.duty
			channel ctrl0_enablePWM__: NIDS.InOut.core_boolean
			channel ctrl0_enablePWM: InOut.core_boolean
			channel ctrl1_enablePWM__: NIDS.InOut.core_boolean
			channel ctrl1_enablePWM: InOut.core_boolean
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i0::enter,
			s0::enter
			|}
			
			enteredSS = 	{|
			s0::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
			|}
			
			channel clockReset, clockResetL, clockResetR 
			
			localClockResets = {||}
			
			
			channel get_CLID_s0 : CLID_s0_clock_type
			
			--channel increment__
			
			CLID_s0_clock_type = {0..(clock_type_max(Union({
			}))+1)}
			
		
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: s0
				module s0
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					
					--channel increment__
					
					
					--	Nodes
					-- declaring all nodes
					
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
						
						-- Clocks
						
						StateClocks = terminate -> SKIP
						
						stateClockSync = {||}
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
			
				-- STM processes
				STM(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(Stateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				,<{terminate},{tock}>)
				
				STM_VS_O(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(Stateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				,<{terminate},{tock}>)
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s0::enter -> SKIP))))
						 [] dbisim((true)&(ctrl1_enablePWM__!NID_s0.in?enabled:{enabled|enabled <- core_boolean, true} -> share__choice(set_enabled!enabled -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; Deadline(share__choice(get_enabled?enabled -> true&(share__choice(int_enablePWM.out!enabled -> SKIP))),0) ; s0::enter -> SKIP)))
						 [] dbisim((true)&(ctrl0_enablePWM__!NID_s0.in?enabled:{enabled|enabled <- core_boolean, true} -> share__choice(set_enabled!enabled -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; Deadline(share__choice(get_enabled?enabled -> true&(share__choice(int_enablePWM.out!enabled -> SKIP))),0) ; s0::enter -> SKIP)))
						 [] dbisim((true)&(ctrl1_dutyCyclePWM1__!NID_s0.in?duty:{duty|duty <- duty, true} -> share__choice(set_duty!duty -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; Deadline(share__choice(get_duty?duty -> true&(share__choice(int_dutyCyclePWM1.out!duty -> SKIP))),0) ; s0::enter -> SKIP)))
						 [] dbisim((true)&(ctrl0_dutyCyclePWM1__!NID_s0.in?duty:{duty|duty <- duty, true} -> share__choice(set_duty!duty -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; Deadline(share__choice(get_duty?duty -> true&(share__choice(int_dutyCyclePWM1.out!duty -> SKIP))),0) ; s0::enter -> SKIP)))
						 []
						 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							s0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_i0,ctrl1_enablePWM__.NID_s0.in,ctrl0_enablePWM__.NID_s0.in,ctrl1_dutyCyclePWM1__.NID_s0.in,ctrl0_dutyCyclePWM1__.NID_s0.in|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i0::D__(id__)
								   		    [| { share__, terminate } |] (
								   		    s0::D__(id__)
								   		    )
								   		  )
								 )
								 [[s0::interrupt <- x__ | x__ <- {|interrupt,ctrl1_enablePWM__.NID_s0.in,ctrl0_enablePWM__.NID_s0.in,ctrl1_dutyCyclePWM1__.NID_s0.in,ctrl0_dutyCyclePWM1__.NID_s0.in|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__,setR_duty,setR_enabled |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setR_duty
								 			 			,setR_enabled
								 			|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								  [[set_duty <- setR_duty,set_enabled <- setR_enabled]]
								 )
								)
								 [[setR_duty <- set_duty,setR_enabled <- set_enabled]]
								)
							)
							 \ hideSet)
							[[
								int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1,
								int_enablePWM__.x____ <- int_enablePWM,
								ctrl0_dutyCyclePWM1__.x____ <- ctrl0_dutyCyclePWM1,
								ctrl1_dutyCyclePWM1__.x____ <- ctrl1_dutyCyclePWM1,
								ctrl0_enablePWM__.x____ <- ctrl0_enablePWM,
								ctrl1_enablePWM__.x____ <- ctrl1_enablePWM
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_s0,s0::entered|}
					 within
						(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ union(stateClockSync,enteredSS)
					)
					)
				
				Stateful(id__) = 
					dbisim((let
						getsetLocalChannels = {|get_duty,set_duty,
						get_enabled,set_enabled|}
						clockSync = {||}
					within
						(Behaviour(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							s0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_i0,ctrl1_enablePWM__.NID_s0.in,ctrl0_enablePWM__.NID_s0.in,ctrl1_dutyCyclePWM1__.NID_s0.in,ctrl0_dutyCyclePWM1__.NID_s0.in|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i0::VS_O__(id__)
								   		    [| { share__, terminate } |] (
								   		    s0::VS_O__(id__)
								   		    )
								   		  )
								 )
								 [[s0::interrupt <- x__ | x__ <- {|interrupt,ctrl1_enablePWM__.NID_s0.in,ctrl0_enablePWM__.NID_s0.in,ctrl1_dutyCyclePWM1__.NID_s0.in,ctrl0_dutyCyclePWM1__.NID_s0.in|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__,setR_duty,setR_enabled |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setR_duty
								 			 			,setR_enabled
								 			|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								  [[set_duty <- setR_duty,set_enabled <- setR_enabled]]
								 )
								)
								 [[setR_duty <- set_duty,setR_enabled <- set_enabled]]
								)
							)
							 \ hideSet)
							[[
								int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1,
								int_enablePWM__.x____ <- int_enablePWM,
								ctrl0_dutyCyclePWM1__.x____ <- ctrl0_dutyCyclePWM1,
								ctrl1_dutyCyclePWM1__.x____ <- ctrl1_dutyCyclePWM1,
								ctrl0_enablePWM__.x____ <- ctrl0_enablePWM,
								ctrl1_enablePWM__.x____ <- ctrl1_enablePWM
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_s0,s0::entered|}
					 within
						(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				Stateful_VS_O(id__) = 
					dbisim((let
						getsetLocalChannels = {|get_duty,set_duty,
						get_enabled,set_enabled|}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
					
				-- END
				
				-- Memory
				-- Memory variables
				Memory_duty(duty) =
					get_duty!duty -> Memory_duty(duty)
					[]
					set_duty?x__ -> Memory_duty(x__)
					[]
					terminate -> SKIP
				Memory_enabled(enabled) =
					get_enabled!enabled -> Memory_enabled(enabled)
					[]
					set_enabled?x__ -> Memory_enabled(x__)
					[]
					terminate -> SKIP
				
				-- varMemory process
				varMemory(id__) = Memory_duty(0)
				[| { terminate } |] (
				Memory_enabled(true)
				)
				
				getsetLocalChannels = {|get_duty,set_duty,get_enabled,set_enabled|}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__) \ localClockResets
				D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
				O__(id__) = dbisim(D__(id__))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = dbisim(FVS__(id__))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
				HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks = terminate -> SKIP
				
				clockSync = {||}
				
				Clock_CLID_s0(x__) = 
					TimeOut_1(
						s0::entered -> Clock_CLID_s0(0)
						[]
						get_CLID_s0!x__ -> Clock_CLID_s0(x__)
						[]
						terminate -> SKIP,Clock_CLID_s0(Plus(x__,1,CLID_s0_clock_type)))
				
				StateClocks = dbisim(Clock_CLID_s0(0))
				
				stateClockSync = {|get_CLID_s0,s0::entered|}
				
				-- Shared memory
				-- Shared memory variables
				
				-- sharedVarMemory process
				sharedVarMemory(id__) = terminate -> SKIP
				
				sharedVarSync = {||}
				
				sharedVarHide = {||}
				}
		endmodule
		
		Timed(OneStep) {
				-- undefined operations
				
				-- declaring controller memory
				Memory(id__) = SKIP
				
				D__(id__) = prioritise(	((
						stm0::D__(id__)[[
							stm0::terminate <- terminate,
							stm0::int_enablePWM <- int_enablePWM,
							stm0::int_dutyCyclePWM1 <- int_dutyCyclePWM1,
							stm0::ctrl0_dutyCyclePWM1 <- ctrl0_dutyCyclePWM1,
							stm0::ctrl1_dutyCyclePWM1 <- ctrl1_dutyCyclePWM1,
							stm0::ctrl0_enablePWM <- ctrl0_enablePWM,
							stm0::ctrl1_enablePWM <- ctrl1_enablePWM
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>)
				
				-- VS version
				VS__(id__) = prioritise(	((
						stm0::VS__(id__)[[
							stm0::terminate <- terminate,
							stm0::int_enablePWM <- int_enablePWM,
							stm0::int_dutyCyclePWM1 <- int_dutyCyclePWM1,
							stm0::ctrl0_dutyCyclePWM1 <- ctrl0_dutyCyclePWM1,
							stm0::ctrl1_dutyCyclePWM1 <- ctrl1_dutyCyclePWM1,
							stm0::ctrl0_enablePWM <- ctrl0_enablePWM,
							stm0::ctrl1_enablePWM <- ctrl1_enablePWM
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>)
			
				-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
				O__(id__) = dbisim(prioritise(	((
						stm0::O__(id__)[[
							stm0::terminate <- terminate,
							stm0::int_enablePWM <- int_enablePWM,
							stm0::int_dutyCyclePWM1 <- int_dutyCyclePWM1,
							stm0::ctrl0_dutyCyclePWM1 <- ctrl0_dutyCyclePWM1,
							stm0::ctrl1_dutyCyclePWM1 <- ctrl1_dutyCyclePWM1,
							stm0::ctrl0_enablePWM <- ctrl0_enablePWM,
							stm0::ctrl1_enablePWM <- ctrl1_enablePWM
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>))
								
				-- VS_O version
				VS_O__(id__) = dbisim(prioritise(	((
						stm0::VS_O__(id__)[[
							stm0::terminate <- terminate,
							stm0::int_enablePWM <- int_enablePWM,
							stm0::int_dutyCyclePWM1 <- int_dutyCyclePWM1,
							stm0::ctrl0_dutyCyclePWM1 <- ctrl0_dutyCyclePWM1,
							stm0::ctrl1_dutyCyclePWM1 <- ctrl1_dutyCyclePWM1,
							stm0::ctrl0_enablePWM <- ctrl0_enablePWM,
							stm0::ctrl1_enablePWM <- ctrl1_enablePWM
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>))
			
				HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP			
		}

	endmodule



