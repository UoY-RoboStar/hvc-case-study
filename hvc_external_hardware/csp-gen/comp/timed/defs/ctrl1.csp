	module ctrl1
		shared_variable_events = {|
			set_EXT_HVEnabled,
			set_EXT_pow24VStatus,
			set_EXT_currentState,
			set_EXT_overLimit,
			set_EXT_underLimit,
			set_EXT_mSetPoint,
			set_EXT_dutyCyclePWM1
		|}
		
	exports
		transparent diamond
		transparent sbisim
		transparent dbisim
		transparent chase

		-- declaring controller events
		channel ext_pow24VStatus: InOut.Power
		channel int_dutyCyclePWM1: InOut.duty
		channel int_enablePWM: InOut.core_boolean
		
		channel set_HVEnabled: core_boolean
		channel get_HVEnabled: core_boolean
		channel set_pow24VStatus: Power
		channel get_pow24VStatus: Power
		channel set_currentState: State
		channel get_currentState: State
		channel set_overLimit: core_real
		channel get_overLimit: core_real
		channel set_underLimit: core_real
		channel get_underLimit: core_real
		channel set_mSetPoint: core_real
		channel get_mSetPoint: core_real
		channel set_dutyCyclePWM1: duty
		channel get_dutyCyclePWM1: duty
		
		channel set_EXT_HVEnabled: core_boolean
		channel set_EXT_pow24VStatus: Power
		channel set_EXT_currentState: State
		channel set_EXT_overLimit: core_real
		channel set_EXT_underLimit: core_real
		channel set_EXT_mSetPoint: core_real
		channel set_EXT_dutyCyclePWM1: duty
		
		-- declaring call and ret events for undefined operations
		
		-- declaring controller termination channel		
		channel terminate
		
		-- set of visible memory events
		visibleMemoryEvents = {|get_HVEnabled,set_HVEnabled,get_pow24VStatus,set_pow24VStatus,get_currentState,set_currentState,get_overLimit,set_overLimit,get_underLimit,set_underLimit,get_mSetPoint,set_mSetPoint,get_dutyCyclePWM1,set_dutyCyclePWM1|}

		-- defined operations
		-- compileOperationDef
		module OP_supplyVoltCheck
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i0|
			              NID_f0|
			              NID_j0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_pow24VStatus, set_pow24VStatus, setL_pow24VStatus, setR_pow24VStatus: Power
			channel get_HVEnabled, set_HVEnabled, setL_HVEnabled, setR_HVEnabled: core_boolean
			channel get_currentState, set_currentState, setL_currentState, setR_currentState: State
			channel get_dutyCyclePWM1, set_dutyCyclePWM1, setL_dutyCyclePWM1, setR_dutyCyclePWM1: duty
			channel get_mSetPoint, set_mSetPoint, setL_mSetPoint, setR_mSetPoint: core_real
			
			-- Shared variable channels
			channel set_EXT_pow24VStatus: Power
			channel set_EXT_HVEnabled: core_boolean
			channel set_EXT_currentState: State
			channel set_EXT_dutyCyclePWM1: duty
			channel set_EXT_mSetPoint: core_real
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel ext_pow24VStatus__: NIDS.InOut.Power
			channel ext_pow24VStatus: InOut.Power
			channel int_enablePWM__: NIDS.InOut.core_boolean
			channel int_enablePWM: InOut.core_boolean
			channel int_dutyCyclePWM1__: NIDS.InOut.duty
			channel int_dutyCyclePWM1: InOut.duty
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i0::enter,
			f0::enter,
			j0::enter
			|}
			
			enteredSS = 	{|
			f0::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
				set_EXT_pow24VStatus,
				set_EXT_HVEnabled,
				set_EXT_currentState,
				set_EXT_dutyCyclePWM1,
				set_EXT_mSetPoint
			|}
			
			channel clockReset, clockResetL, clockResetR 
			
			localClockResets = {||}
			
			
			channel get_CLID_f0 : CLID_f0_clock_type
			
			--channel increment__
			
			CLID_f0_clock_type = {0..(clock_type_max(Union({
			{}
			}))+1)}
			
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f0
				module f0
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
								
								Entering 	= entered -> SKIP ; Active
								Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
								Interrupted	= share__choice(exit -> exited -> Inactive)
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: j0
				module j0
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				CALL__disableHV(id__,
							arg) 	= (OP_disableHV::O__(id__,
							arg))
				[[
					OP_disableHV::int_enablePWM <- int_enablePWM,
					OP_disableHV::int_dutyCyclePWM1 <- int_dutyCyclePWM1
				]]
				[[
					OP_disableHV::get_HVEnabled <- get_HVEnabled,
					OP_disableHV::set_HVEnabled <- set_HVEnabled,
					OP_disableHV::get_currentState <- get_currentState,
					OP_disableHV::set_currentState <- set_currentState,
					OP_disableHV::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
					OP_disableHV::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
					OP_disableHV::get_mSetPoint <- get_mSetPoint,
					OP_disableHV::set_mSetPoint <- set_mSetPoint
				]]
				-- END of Operation calls --
			
				-- STM processes
				STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = get_pow24VStatus?pow24VStatus -> TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((Deadline(true&(share__choice(ext_pow24VStatus.in?pow24VStatus -> (SStop /\ set_pow24VStatus!pow24VStatus -> SKIP))),0) ; j0::enter -> SKIP))))
						 [] dbisim(((pow24VStatus==Power_Off))&(internal__!NID_j0 -> SKIP ;  ((true&CALL__disableHV(
						 			id__,
						 			true
						 		) ; f0::enter -> SKIP))))
						 [] dbisim(((pow24VStatus==Power_On))&(internal__!NID_j0 -> SKIP ;  ((SKIP ; f0::enter -> SKIP))))
						 []
						 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter,
							j0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_i0,internal__.NID_j0,internal__.NID_j0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i0::D__(id__)
								   		    [| { share__, terminate } |] (
								   		    f0::D__(id__)
								   		    [| { share__, terminate } |] (
								   		    j0::D__(id__)
								   		    )
								   		    )
								   		  )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[set_pow24VStatus <- setL_pow24VStatus]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_pow24VStatus
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_pow24VStatus |} ]]
								 )
								)[[setL_pow24VStatus <- set_pow24VStatus]]
								)
							)
							 \ hideSet)
							[[
								ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								int_enablePWM__.x____ <- int_enablePWM,
								int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_f0,f0::entered|}
					 within
						(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ union(stateClockSync,enteredSS)
					)
					)
				
				Stateful(id__) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter,
							j0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_i0,internal__.NID_j0,internal__.NID_j0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i0::VS_O__(id__)
								   		    [| { share__, terminate } |] (
								   		    f0::VS_O__(id__)
								   		    [| { share__, terminate } |] (
								   		    j0::VS_O__(id__)
								   		    )
								   		    )
								   		  )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[set_pow24VStatus <- setL_pow24VStatus]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_pow24VStatus
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_pow24VStatus |} ]]
								 )
								)[[setL_pow24VStatus <- set_pow24VStatus]]
								)
							)
							 \ hideSet)
							[[
								ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								int_enablePWM__.x____ <- int_enablePWM,
								int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_f0,f0::entered|}
					 within
						(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				Stateful_VS_O(id__) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
					
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__) \ localClockResets
				D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
				O__(id__) = dbisim(D__(id__))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = dbisim(FVS__(id__))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
				HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks = terminate -> SKIP
				
				clockSync = {||}
				
				Clock_CLID_f0(x__) = 
					TimeOut_1(
						f0::entered -> Clock_CLID_f0(0)
						[]
						get_CLID_f0!x__ -> Clock_CLID_f0(x__)
						[]
						terminate -> SKIP,Clock_CLID_f0(Plus(x__,1,CLID_f0_clock_type)))
				
				StateClocks = dbisim(Clock_CLID_f0(0))
				
				stateClockSync = {|get_CLID_f0,f0::entered|}
				}
					endmodule
		-- compileOperationDef
		module OP_AdjustLimits
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i0|
			              NID_f0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_overLimit, set_overLimit, setL_overLimit, setR_overLimit: core_real
			channel get_underLimit, set_underLimit, setL_underLimit, setR_underLimit: core_real
			channel get_mSetPoint, set_mSetPoint, setL_mSetPoint, setR_mSetPoint: core_real
			
			-- Shared variable channels
			channel set_EXT_overLimit: core_real
			channel set_EXT_underLimit: core_real
			channel set_EXT_mSetPoint: core_real
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i0::enter,
			f0::enter
			|}
			
			enteredSS = 	{|
			f0::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
				set_EXT_overLimit,
				set_EXT_underLimit,
				set_EXT_mSetPoint
			|}
			
			channel clockReset, clockResetL, clockResetR 
			
			localClockResets = {||}
			
			
			channel get_CLID_f0 : CLID_f0_clock_type
			
			--channel increment__
			
			CLID_f0_clock_type = {0..(clock_type_max(Union({
			}))+1)}
			
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f0
				module f0
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
								
								Entering 	= entered -> SKIP ; Active
								Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
								Interrupted	= share__choice(exit -> exited -> Inactive)
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
			
				-- STM processes
				STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((share__choice(share__choice(get_mSetPoint?mSetPoint -> true & (share__choice(set_overLimit!overLimitF(Plus(mSetPoint, 2, core_real)) -> SKIP))));share__choice(share__choice(get_mSetPoint?mSetPoint -> true & (share__choice(set_underLimit!underLimitF(Minus(mSetPoint, 2, core_real)) -> SKIP)))) ; f0::enter -> SKIP))))
						 []
						 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_i0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i0::D__(id__)
								   		    [| { share__, terminate } |] (
								   		    f0::D__(id__)
								   		    )
								   		  )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_f0,f0::entered|}
					 within
						(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ union(stateClockSync,enteredSS)
					)
					)
				
				Stateful(id__) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_i0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i0::VS_O__(id__)
								   		    [| { share__, terminate } |] (
								   		    f0::VS_O__(id__)
								   		    )
								   		  )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_f0,f0::entered|}
					 within
						(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				Stateful_VS_O(id__) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
					
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__) \ localClockResets
				D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
				O__(id__) = dbisim(D__(id__))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = dbisim(FVS__(id__))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
				HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks = terminate -> SKIP
				
				clockSync = {||}
				
				Clock_CLID_f0(x__) = 
					TimeOut_1(
						f0::entered -> Clock_CLID_f0(0)
						[]
						get_CLID_f0!x__ -> Clock_CLID_f0(x__)
						[]
						terminate -> SKIP,Clock_CLID_f0(Plus(x__,1,CLID_f0_clock_type)))
				
				StateClocks = dbisim(Clock_CLID_f0(0))
				
				stateClockSync = {|get_CLID_f0,f0::entered|}
				}
					endmodule
		-- compileOperationDef
		module OP_disableHV
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i0|
			              NID_f0|
			              NID_j0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_HVEnabled, set_HVEnabled, setL_HVEnabled, setR_HVEnabled: core_boolean
			channel get_currentState, set_currentState, setL_currentState, setR_currentState: State
			channel get_dutyCyclePWM1, set_dutyCyclePWM1, setL_dutyCyclePWM1, setR_dutyCyclePWM1: duty
			channel get_mSetPoint, set_mSetPoint, setL_mSetPoint, setR_mSetPoint: core_real
			
			-- Shared variable channels
			channel set_EXT_HVEnabled: core_boolean
			channel set_EXT_currentState: State
			channel set_EXT_dutyCyclePWM1: duty
			channel set_EXT_mSetPoint: core_real
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel int_enablePWM__: NIDS.InOut.core_boolean
			channel int_enablePWM: InOut.core_boolean
			channel int_dutyCyclePWM1__: NIDS.InOut.duty
			channel int_dutyCyclePWM1: InOut.duty
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i0::enter,
			f0::enter,
			j0::enter
			|}
			
			enteredSS = 	{|
			f0::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
				set_EXT_HVEnabled,
				set_EXT_currentState,
				set_EXT_dutyCyclePWM1,
				set_EXT_mSetPoint
			|}
			
			channel clockReset, clockResetL, clockResetR 
			
			localClockResets = {||}
			
			
			channel get_CLID_f0 : CLID_f0_clock_type
			
			--channel increment__
			
			CLID_f0_clock_type = {0..(clock_type_max(Union({
			{}
			}))+1)}
			
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__,
									arg) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__,
									arg) = D__(id__,
									arg)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f0
				module f0
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						D__(id__,
									arg) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
								
								Entering 	= entered -> SKIP ; Active
								Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
								Interrupted	= share__choice(exit -> exited -> Inactive)
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
									arg) = D__(id__,
									arg)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: j0
				module j0
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__,
									arg) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
									arg) = D__(id__,
									arg)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
			
				-- STM processes
				STM(id__,
							arg) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__,
							arg) \ {terminate}
				
				STM_VS_O(id__,
							arg) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__,
							arg) \ {terminate}
				
				-- Transitions
				Transitions(id__,
							arg) = ((let
					Trans = TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim(((arg==false))&(internal__!NID_j0 -> SKIP ;  ((SKIP ; f0::enter -> SKIP))))
						 [] dbisim(((arg==true))&(internal__!NID_j0 -> SKIP ;  ((share__choice(true & (share__choice(set_currentState!State_ErrorMode -> SKIP))) ; f0::enter -> SKIP))))
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((Deadline(true&(share__choice(int_enablePWM.out!false -> SKIP)),0);share__choice(true & (share__choice(set_dutyCyclePWM1!real2duty(0) -> SKIP)));Deadline(share__choice(get_dutyCyclePWM1?dutyCyclePWM1 -> true&(share__choice(int_dutyCyclePWM1.out!dutyCyclePWM1 -> SKIP))),0);share__choice(true & (share__choice(set_HVEnabled!false -> SKIP)));share__choice(true & (share__choice(set_mSetPoint!0 -> SKIP))) ; j0::enter -> SKIP))))
						 []
						 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__,
							arg) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter,
							j0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_j0,internal__.NID_j0,internal__.NID_i0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i0::D__(id__,
								   		    			arg)
								   		    [| { share__, terminate } |] (
								   		    f0::D__(id__,
								   		    			arg)
								   		    [| { share__, terminate } |] (
								   		    j0::D__(id__,
								   		    			arg)
								   		    )
								   		    )
								   		  )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__,
								 			arg))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								int_enablePWM__.x____ <- int_enablePWM,
								int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__,
							arg) = 
					dbisim((let
						stateClockSync = {|get_CLID_f0,f0::entered|}
					 within
						(MachineBody(id__,
									arg) [| union(stateClockSync,{terminate}) |] StateClocks) \ union(stateClockSync,enteredSS)
					)
					)
				
				Stateful(id__,
							arg) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour(id__,
									arg) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__,
						 			arg) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__,
							arg) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter,
							j0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_j0,internal__.NID_j0,internal__.NID_i0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i0::VS_O__(id__,
								   		    			arg)
								   		    [| { share__, terminate } |] (
								   		    f0::VS_O__(id__,
								   		    			arg)
								   		    [| { share__, terminate } |] (
								   		    j0::VS_O__(id__,
								   		    			arg)
								   		    )
								   		    )
								   		  )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__,
								 			arg))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								int_enablePWM__.x____ <- int_enablePWM,
								int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__,
							arg) = 
					dbisim((let
						stateClockSync = {|get_CLID_f0,f0::entered|}
					 within
						(MachineBody_VS_O(id__,
									arg) [| union(stateClockSync,{terminate}) |] StateClocks) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				Stateful_VS_O(id__,
							arg) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__,
									arg) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__,
						 			arg) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
					
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__,
							arg) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__,
							arg) = STM_VS_O(id__,
							arg) \ localClockResets
				D__(id__,
							arg) = timed_priority(STM(id__,
							arg) \ union(internal_events,localClockResets))
				O__(id__,
							arg) = dbisim(D__(id__,
							arg))
				VS__(id__,
							arg) = FVS__(id__,
							arg)
				VS_O__(id__,
							arg) = dbisim(FVS__(id__,
							arg))
				HEXT__(id__,
							arg) = O__(id__,
							arg) [|shared_variable_events|] SKIP
				FVS_C__(id__,
							arg) = dbisim(timed_priority(STM(id__,
							arg) \ internal_events))
				HUP__(id__,
							arg) = timed_priority(O__(id__,
							arg) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks = terminate -> SKIP
				
				clockSync = {||}
				
				Clock_CLID_f0(x__) = 
					TimeOut_1(
						f0::entered -> Clock_CLID_f0(0)
						[]
						get_CLID_f0!x__ -> Clock_CLID_f0(x__)
						[]
						terminate -> SKIP,Clock_CLID_f0(Plus(x__,1,CLID_f0_clock_type)))
				
				StateClocks = dbisim(Clock_CLID_f0(0))
				
				stateClockSync = {|get_CLID_f0,f0::entered|}
				}
					endmodule
	
		-- declaring machines
		module stm_ref0
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
		
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i1|
			              NID_s1|
			              NID_s0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_HVEnabled, set_HVEnabled, setL_HVEnabled, setR_HVEnabled: core_boolean
			channel get_pow24VStatus, set_pow24VStatus, setL_pow24VStatus, setR_pow24VStatus: Power
			channel get_currentState, set_currentState, setL_currentState, setR_currentState: State
			channel get_overLimit, set_overLimit, setL_overLimit, setR_overLimit: core_real
			channel get_underLimit, set_underLimit, setL_underLimit, setR_underLimit: core_real
			channel get_mSetPoint, set_mSetPoint, setL_mSetPoint, setR_mSetPoint: core_real
			channel get_dutyCyclePWM1, set_dutyCyclePWM1, setL_dutyCyclePWM1, setR_dutyCyclePWM1: duty
			
			-- Shared variable channels
			channel set_EXT_HVEnabled: core_boolean
			channel set_EXT_pow24VStatus: Power
			channel set_EXT_currentState: State
			channel set_EXT_overLimit: core_real
			channel set_EXT_underLimit: core_real
			channel set_EXT_mSetPoint: core_real
			channel set_EXT_dutyCyclePWM1: duty
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel ext_pow24VStatus__: NIDS.InOut.Power
			channel ext_pow24VStatus: InOut.Power
			channel int_dutyCyclePWM1__: NIDS.InOut.duty
			channel int_dutyCyclePWM1: InOut.duty
			channel int_enablePWM__: NIDS.InOut.core_boolean
			channel int_enablePWM: InOut.core_boolean
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i1::enter,
			s1::enter,
			s0::enter
			|}
			
			enteredSS = 	{|
			s1::entered,
			s0::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
				set_EXT_HVEnabled,
				set_EXT_pow24VStatus,
				set_EXT_currentState,
				set_EXT_overLimit,
				set_EXT_underLimit,
				set_EXT_mSetPoint,
				set_EXT_dutyCyclePWM1
			|}
			
			channel clockReset, clockResetL, clockResetR 
			
			localClockResets = {||}
			
			
			channel get_CLID_s0 : CLID_s0_clock_type
			channel get_CLID_s1 : CLID_s1_clock_type
			
			--channel increment__
			
			CLID_s0_clock_type = {0..(clock_type_max(Union({
			}))+1)}
			CLID_s1_clock_type = {0..(clock_type_max(Union({
			}))+1)}
			
		
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i1
				module i1
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: s1
				module s1
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					
					--channel increment__
					
					
					--	Nodes
					-- declaring all nodes
					
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__supplyVoltCheck(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__supplyVoltCheck(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
						
						-- Clocks
						
						StateClocks = terminate -> SKIP
						
						stateClockSync = {||}
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: s0
				module s0
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					
					--channel increment__
					
					
					--	Nodes
					-- declaring all nodes
					
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__AdjustLimits(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__AdjustLimits(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
						
						-- Clocks
						
						StateClocks = terminate -> SKIP
						
						stateClockSync = {||}
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				CALL__supplyVoltCheck(id__) 	= (OP_supplyVoltCheck::O__(id__))
				[[
					OP_supplyVoltCheck::ext_pow24VStatus <- ext_pow24VStatus,
					OP_supplyVoltCheck::int_enablePWM <- int_enablePWM,
					OP_supplyVoltCheck::int_dutyCyclePWM1 <- int_dutyCyclePWM1
				]]
				[[
					OP_supplyVoltCheck::get_pow24VStatus <- get_pow24VStatus,
					OP_supplyVoltCheck::set_pow24VStatus <- set_pow24VStatus,
					OP_supplyVoltCheck::get_HVEnabled <- get_HVEnabled,
					OP_supplyVoltCheck::set_HVEnabled <- set_HVEnabled,
					OP_supplyVoltCheck::get_currentState <- get_currentState,
					OP_supplyVoltCheck::set_currentState <- set_currentState,
					OP_supplyVoltCheck::get_dutyCyclePWM1 <- get_dutyCyclePWM1,
					OP_supplyVoltCheck::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
					OP_supplyVoltCheck::get_mSetPoint <- get_mSetPoint,
					OP_supplyVoltCheck::set_mSetPoint <- set_mSetPoint
				]]
				CALL__AdjustLimits(id__) 	= (OP_AdjustLimits::O__(id__))
				[[
					OP_AdjustLimits::get_overLimit <- get_overLimit,
					OP_AdjustLimits::set_overLimit <- set_overLimit,
					OP_AdjustLimits::get_underLimit <- get_underLimit,
					OP_AdjustLimits::set_underLimit <- set_underLimit,
					OP_AdjustLimits::get_mSetPoint <- get_mSetPoint,
					OP_AdjustLimits::set_mSetPoint <- set_mSetPoint
				]]
				-- END of Operation calls --
			
				-- STM processes
				STM(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(Stateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {|set_EXT_HVEnabled,set_EXT_pow24VStatus,set_EXT_currentState,set_EXT_overLimit,set_EXT_underLimit,set_EXT_mSetPoint,set_EXT_dutyCyclePWM1|} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				,<{terminate},{tock}>)
				
				STM_VS_O(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(Stateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {|set_EXT_HVEnabled,set_EXT_pow24VStatus,set_EXT_currentState,set_EXT_overLimit,set_EXT_underLimit,set_EXT_mSetPoint,set_EXT_dutyCyclePWM1|} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				,<{terminate},{tock}>)
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i1 -> SKIP ;  ((SHARE_WAIT(ms(4)) ; s0::enter -> SKIP))))
						 [] dbisim((true)&(internal__!NID_s1 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SHARE_WAIT(ms(8)) ; s0::enter -> SKIP)))
						 [] dbisim((true)&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SHARE_WAIT(ms(2)) ; s1::enter -> SKIP)))
						 []
						 (exit -> SKIP ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i1::enter,
							s1::enter,
							s0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_i1,internal__.NID_s1,internal__.NID_s0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i1::D__(id__)
								   		    [| { share__, terminate } |] (
								   		    s1::D__(id__)
								   		    [| { share__, terminate } |] (
								   		    s0::D__(id__)
								   		    )
								   		    )
								   		  )
								 )
								 [[s1::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s1|}]]
								 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
								 [[i1::interrupt <- x__ | x__ <- {|internal__.NID_i1|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i1::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1,
								int_enablePWM__.x____ <- int_enablePWM
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_s0,s0::entered,get_CLID_s1,s1::entered|}
					 within
						(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ union(stateClockSync,enteredSS)
					)
					)
				
				Stateful(id__) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i1::enter,
							s1::enter,
							s0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited|})
								transSync = {|internal__.NID_i1,internal__.NID_s1,internal__.NID_s0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : TimedCSPProcess
								   		  (-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   		    i1::VS_O__(id__)
								   		    [| { share__, terminate } |] (
								   		    s1::VS_O__(id__)
								   		    [| { share__, terminate } |] (
								   		    s0::VS_O__(id__)
								   		    )
								   		    )
								   		  )
								 )
								 [[s1::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s1|}]]
								 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0|}]]
								 [[i1::interrupt <- x__ | x__ <- {|internal__.NID_i1|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i1::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								ext_pow24VStatus__.x____ <- ext_pow24VStatus,
								int_dutyCyclePWM1__.x____ <- int_dutyCyclePWM1,
								int_enablePWM__.x____ <- int_enablePWM
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_s0,s0::entered,get_CLID_s1,s1::entered|}
					 within
						(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				Stateful_VS_O(id__) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks)
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
					
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__) \ localClockResets
				D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
				O__(id__) = dbisim(D__(id__))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = dbisim(FVS__(id__))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
				HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks = terminate -> SKIP
				
				clockSync = {||}
				
				Clock_CLID_s0(x__) = 
					TimeOut_1(
						s0::entered -> Clock_CLID_s0(0)
						[]
						get_CLID_s0!x__ -> Clock_CLID_s0(x__)
						[]
						terminate -> SKIP,Clock_CLID_s0(Plus(x__,1,CLID_s0_clock_type)))
				Clock_CLID_s1(x__) = 
					TimeOut_1(
						s1::entered -> Clock_CLID_s1(0)
						[]
						get_CLID_s1!x__ -> Clock_CLID_s1(x__)
						[]
						terminate -> SKIP,Clock_CLID_s1(Plus(x__,1,CLID_s1_clock_type)))
				
				StateClocks = dbisim(Clock_CLID_s0(0))
				[| { terminate } |] (
				dbisim(Clock_CLID_s1(0))
				)
				
				stateClockSync = {|get_CLID_s0,s0::entered,get_CLID_s1,s1::entered|}
				
				-- Shared memory
				-- Shared memory variables
				Memory_HVEnabled(HVEnabled) =
					get_HVEnabled!HVEnabled -> Memory_HVEnabled(HVEnabled)
					[]
					set_HVEnabled?x__ -> Memory_HVEnabled(x__)
					[]
					set_EXT_HVEnabled?x__ -> Memory_HVEnabled(x__)
					[]
					terminate -> SKIP
				Memory_pow24VStatus(pow24VStatus) =
					get_pow24VStatus!pow24VStatus -> Memory_pow24VStatus(pow24VStatus)
					[]
					set_pow24VStatus?x__ -> Memory_pow24VStatus(x__)
					[]
					set_EXT_pow24VStatus?x__ -> Memory_pow24VStatus(x__)
					[]
					terminate -> SKIP
				Memory_currentState(currentState) =
					get_currentState!currentState -> Memory_currentState(currentState)
					[]
					set_currentState?x__ -> Memory_currentState(x__)
					[]
					set_EXT_currentState?x__ -> Memory_currentState(x__)
					[]
					terminate -> SKIP
				Memory_overLimit(overLimit) =
					get_overLimit!overLimit -> Memory_overLimit(overLimit)
					[]
					set_overLimit?x__ -> Memory_overLimit(x__)
					[]
					set_EXT_overLimit?x__ -> Memory_overLimit(x__)
					[]
					terminate -> SKIP
				Memory_underLimit(underLimit) =
					get_underLimit!underLimit -> Memory_underLimit(underLimit)
					[]
					set_underLimit?x__ -> Memory_underLimit(x__)
					[]
					set_EXT_underLimit?x__ -> Memory_underLimit(x__)
					[]
					terminate -> SKIP
				Memory_mSetPoint(mSetPoint) =
					get_mSetPoint!mSetPoint -> Memory_mSetPoint(mSetPoint)
					[]
					set_mSetPoint?x__ -> Memory_mSetPoint(x__)
					[]
					set_EXT_mSetPoint?x__ -> Memory_mSetPoint(x__)
					[]
					terminate -> SKIP
				Memory_dutyCyclePWM1(dutyCyclePWM1) =
					get_dutyCyclePWM1!dutyCyclePWM1 -> Memory_dutyCyclePWM1(dutyCyclePWM1)
					[]
					set_dutyCyclePWM1?x__ -> Memory_dutyCyclePWM1(x__)
					[]
					set_EXT_dutyCyclePWM1?x__ -> Memory_dutyCyclePWM1(x__)
					[]
					terminate -> SKIP
				
				-- sharedVarMemory process
				sharedVarMemory(id__) = Memory_HVEnabled(true)
				[| { terminate } |] (
				Memory_pow24VStatus(Power_On)
				[| { terminate } |] (
				Memory_currentState(State_Wait24Vpower)
				[| { terminate } |] (
				Memory_overLimit(0)
				[| { terminate } |] (
				Memory_underLimit(0)
				[| { terminate } |] (
				Memory_mSetPoint(0)
				[| { terminate } |] (
				Memory_dutyCyclePWM1(0)
				)
				)
				)
				)
				)
				)
				
				sharedVarSync = {|get_HVEnabled,set_HVEnabled,set_EXT_HVEnabled,get_pow24VStatus,set_pow24VStatus,set_EXT_pow24VStatus,get_currentState,set_currentState,set_EXT_currentState,get_overLimit,set_overLimit,set_EXT_overLimit,get_underLimit,set_underLimit,set_EXT_underLimit,get_mSetPoint,set_mSetPoint,set_EXT_mSetPoint,get_dutyCyclePWM1,set_dutyCyclePWM1,set_EXT_dutyCyclePWM1|}
				
				sharedVarHide = {|get_HVEnabled,get_pow24VStatus,get_currentState,get_overLimit,get_underLimit,get_mSetPoint,get_dutyCyclePWM1|}
				}
		endmodule
		
		Timed(OneStep) {
				-- undefined operations
				
				-- declaring controller memory
				Memory(id__, HVEnabled, pow24VStatus, currentState, overLimit, underLimit, mSetPoint, dutyCyclePWM1) = (
				set_EXT_HVEnabled?x__ -> stm_ref0::set_EXT_HVEnabled!x__ -> 
				Memory(id__,x__,pow24VStatus,currentState,overLimit,underLimit,mSetPoint,dutyCyclePWM1)
				 []
				set_EXT_pow24VStatus?x__ -> stm_ref0::set_EXT_pow24VStatus!x__ -> 
				Memory(id__,HVEnabled,x__,currentState,overLimit,underLimit,mSetPoint,dutyCyclePWM1)
				 []
				set_EXT_currentState?x__ -> stm_ref0::set_EXT_currentState!x__ -> 
				Memory(id__,HVEnabled,pow24VStatus,x__,overLimit,underLimit,mSetPoint,dutyCyclePWM1)
				 []
				set_EXT_overLimit?x__ -> stm_ref0::set_EXT_overLimit!x__ -> 
				Memory(id__,HVEnabled,pow24VStatus,currentState,x__,underLimit,mSetPoint,dutyCyclePWM1)
				 []
				set_EXT_underLimit?x__ -> stm_ref0::set_EXT_underLimit!x__ -> 
				Memory(id__,HVEnabled,pow24VStatus,currentState,overLimit,x__,mSetPoint,dutyCyclePWM1)
				 []
				set_EXT_mSetPoint?x__ -> stm_ref0::set_EXT_mSetPoint!x__ -> 
				Memory(id__,HVEnabled,pow24VStatus,currentState,overLimit,underLimit,x__,dutyCyclePWM1)
				 []
				set_EXT_dutyCyclePWM1?x__ -> stm_ref0::set_EXT_dutyCyclePWM1!x__ -> 
				Memory(id__,HVEnabled,pow24VStatus,currentState,overLimit,underLimit,mSetPoint,x__)
				)
				
				D__(id__) = prioritise(	((
						stm_ref0::D__(id__)[[
							stm_ref0::terminate <- terminate,
							stm_ref0::ext_pow24VStatus <- ext_pow24VStatus,
							stm_ref0::int_dutyCyclePWM1 <- int_dutyCyclePWM1,
							stm_ref0::int_enablePWM <- int_enablePWM,
							stm_ref0::set_HVEnabled <- set_HVEnabled,
							stm_ref0::get_HVEnabled <- get_HVEnabled,
							stm_ref0::set_pow24VStatus <- set_pow24VStatus,
							stm_ref0::get_pow24VStatus <- get_pow24VStatus,
							stm_ref0::set_currentState <- set_currentState,
							stm_ref0::get_currentState <- get_currentState,
							stm_ref0::set_overLimit <- set_overLimit,
							stm_ref0::get_overLimit <- get_overLimit,
							stm_ref0::set_underLimit <- set_underLimit,
							stm_ref0::get_underLimit <- get_underLimit,
							stm_ref0::set_mSetPoint <- set_mSetPoint,
							stm_ref0::get_mSetPoint <- get_mSetPoint,
							stm_ref0::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
							stm_ref0::get_dutyCyclePWM1 <- get_dutyCyclePWM1
						]]
					)
						[|
							union(
								{|
								|},
								{|
									stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
								|}
							)
						|]
					Memory(id__, true, Power_On, State_Wait24Vpower, 0, 0, 0, 0)
				)
				\ union(
					{|
					|},
					{|
						stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>)
				
				-- VS version
				VS__(id__) = prioritise(	((
						stm_ref0::VS__(id__)[[
							stm_ref0::terminate <- terminate,
							stm_ref0::ext_pow24VStatus <- ext_pow24VStatus,
							stm_ref0::int_dutyCyclePWM1 <- int_dutyCyclePWM1,
							stm_ref0::int_enablePWM <- int_enablePWM,
							stm_ref0::set_HVEnabled <- set_HVEnabled,
							stm_ref0::get_HVEnabled <- get_HVEnabled,
							stm_ref0::set_pow24VStatus <- set_pow24VStatus,
							stm_ref0::get_pow24VStatus <- get_pow24VStatus,
							stm_ref0::set_currentState <- set_currentState,
							stm_ref0::get_currentState <- get_currentState,
							stm_ref0::set_overLimit <- set_overLimit,
							stm_ref0::get_overLimit <- get_overLimit,
							stm_ref0::set_underLimit <- set_underLimit,
							stm_ref0::get_underLimit <- get_underLimit,
							stm_ref0::set_mSetPoint <- set_mSetPoint,
							stm_ref0::get_mSetPoint <- get_mSetPoint,
							stm_ref0::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
							stm_ref0::get_dutyCyclePWM1 <- get_dutyCyclePWM1
						]]
					)
						[|
							union(
								{|
								|},
								{|
									stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
								|}
							)
						|]
					Memory(id__, true, Power_On, State_Wait24Vpower, 0, 0, 0, 0)
				)
				\ union(
					{|
					|},
					{|
						stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>)
			
				-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
				O__(id__) = dbisim(prioritise(	((
						stm_ref0::O__(id__)[[
							stm_ref0::terminate <- terminate,
							stm_ref0::ext_pow24VStatus <- ext_pow24VStatus,
							stm_ref0::int_dutyCyclePWM1 <- int_dutyCyclePWM1,
							stm_ref0::int_enablePWM <- int_enablePWM,
							stm_ref0::set_HVEnabled <- set_HVEnabled,
							stm_ref0::get_HVEnabled <- get_HVEnabled,
							stm_ref0::set_pow24VStatus <- set_pow24VStatus,
							stm_ref0::get_pow24VStatus <- get_pow24VStatus,
							stm_ref0::set_currentState <- set_currentState,
							stm_ref0::get_currentState <- get_currentState,
							stm_ref0::set_overLimit <- set_overLimit,
							stm_ref0::get_overLimit <- get_overLimit,
							stm_ref0::set_underLimit <- set_underLimit,
							stm_ref0::get_underLimit <- get_underLimit,
							stm_ref0::set_mSetPoint <- set_mSetPoint,
							stm_ref0::get_mSetPoint <- get_mSetPoint,
							stm_ref0::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
							stm_ref0::get_dutyCyclePWM1 <- get_dutyCyclePWM1
						]]
					)
						[|
							union(
								{|
								|},
								{|
									stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
								|}
							)
						|]
					dbisim(Memory(id__, true, Power_On, State_Wait24Vpower, 0, 0, 0, 0))
				)
				\ union(
					{|
					|},
					{|
						stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>))
								
				-- VS_O version
				VS_O__(id__) = dbisim(prioritise(	((
						stm_ref0::VS_O__(id__)[[
							stm_ref0::terminate <- terminate,
							stm_ref0::ext_pow24VStatus <- ext_pow24VStatus,
							stm_ref0::int_dutyCyclePWM1 <- int_dutyCyclePWM1,
							stm_ref0::int_enablePWM <- int_enablePWM,
							stm_ref0::set_HVEnabled <- set_HVEnabled,
							stm_ref0::get_HVEnabled <- get_HVEnabled,
							stm_ref0::set_pow24VStatus <- set_pow24VStatus,
							stm_ref0::get_pow24VStatus <- get_pow24VStatus,
							stm_ref0::set_currentState <- set_currentState,
							stm_ref0::get_currentState <- get_currentState,
							stm_ref0::set_overLimit <- set_overLimit,
							stm_ref0::get_overLimit <- get_overLimit,
							stm_ref0::set_underLimit <- set_underLimit,
							stm_ref0::get_underLimit <- get_underLimit,
							stm_ref0::set_mSetPoint <- set_mSetPoint,
							stm_ref0::get_mSetPoint <- get_mSetPoint,
							stm_ref0::set_dutyCyclePWM1 <- set_dutyCyclePWM1,
							stm_ref0::get_dutyCyclePWM1 <- get_dutyCyclePWM1
						]]
					)
						[|
							union(
								{|
								|},
								{|
									stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
								|}
							)
						|]
					dbisim(Memory(id__, true, Power_On, State_Wait24Vpower, 0, 0, 0, 0))
				)
				\ union(
					{|
					|},
					{|
						stm_ref0::set_EXT_HVEnabled,stm_ref0::set_EXT_pow24VStatus,stm_ref0::set_EXT_currentState,stm_ref0::set_EXT_overLimit,stm_ref0::set_EXT_underLimit,stm_ref0::set_EXT_mSetPoint,stm_ref0::set_EXT_dutyCyclePWM1
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>))
			
				HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP			
		}

	endmodule
